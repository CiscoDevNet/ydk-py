""" Cisco_IOS_XR_ipv4_ospf_cfg 

This module contains a collection of YANG definitions
for Cisco IOS\-XR ipv4\-ospf package configuration.

This module contains definitions
for the following management objects\:
  ospf\: OSPF configuration data

This YANG module augments the
  Cisco\-IOS\-XR\-snmp\-agent\-cfg
module with configuration data.

Copyright (c) 2013\-2017 by Cisco Systems, Inc.
All rights reserved.

"""
from collections import OrderedDict

from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YError, YModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error


class BfdEnableMode(Enum):
    """
    BfdEnableMode (Enum Class)

    Bfd enable mode

    .. data:: disable = 0

    	Disable Mode - Prevent inheritance

    .. data:: default = 1

    	Default Mode - Default BFD behavior

    .. data:: strict = 2

    	Strict Mode - Hold down adj until BFD sesion up

    """

    disable = Enum.YLeaf(0, "disable")

    default = Enum.YLeaf(1, "default")

    strict = Enum.YLeaf(2, "strict")


class Nsr(Enum):
    """
    Nsr (Enum Class)

    Nsr

    .. data:: true = 1

    	Enable non-stop routing

    .. data:: false = 2

    	Disable non-stop routing

    """

    true = Enum.YLeaf(1, "true")

    false = Enum.YLeaf(2, "false")


class OspfAddressFamily(Enum):
    """
    OspfAddressFamily (Enum Class)

    Ospf address family

    .. data:: ipv4 = 1

    	IPv4

    """

    ipv4 = Enum.YLeaf(1, "ipv4")


class OspfAuthentication(Enum):
    """
    OspfAuthentication (Enum Class)

    Ospf authentication

    .. data:: none = 0

    	No Authentication

    .. data:: plain = 1

    	Plain Text Authentication

    .. data:: md5 = 2

    	MD5 Message Digest

    """

    none = Enum.YLeaf(0, "none")

    plain = Enum.YLeaf(1, "plain")

    md5 = Enum.YLeaf(2, "md5")


class OspfCiscoNsf(Enum):
    """
    OspfCiscoNsf (Enum Class)

    Ospf cisco nsf

    .. data:: always = 1

    	Do not require all neighbors to run NSF

    .. data:: require_nsf_neighbors = 2

    	Require all neighbors to run NSF

    """

    always = Enum.YLeaf(1, "always")

    require_nsf_neighbors = Enum.YLeaf(2, "require-nsf-neighbors")


class OspfDistListProtocol(Enum):
    """
    OspfDistListProtocol (Enum Class)

    Ospf dist list protocol

    .. data:: all = 0

    	Default

    .. data:: connected = 1

    	Connected Routes

    .. data:: static = 3

    	Static Routes

    .. data:: bgp = 4

    	BGP

    .. data:: ospf = 7

    	OSPF

    .. data:: dagr = 9

    	DAGR

    """

    all = Enum.YLeaf(0, "all")

    connected = Enum.YLeaf(1, "connected")

    static = Enum.YLeaf(3, "static")

    bgp = Enum.YLeaf(4, "bgp")

    ospf = Enum.YLeaf(7, "ospf")

    dagr = Enum.YLeaf(9, "dagr")


class OspfDomainId(Enum):
    """
    OspfDomainId (Enum Class)

    Ospf domain id

    .. data:: type0005 = 5

    	Type 0x0005

    .. data:: type0105 = 261

    	Type 0x0105

    .. data:: type0205 = 517

    	Type 0x0205

    .. data:: type8005 = 32773

    	Type 0x8005

    """

    type0005 = Enum.YLeaf(5, "type0005")

    type0105 = Enum.YLeaf(261, "type0105")

    type0205 = Enum.YLeaf(517, "type0205")

    type8005 = Enum.YLeaf(32773, "type8005")


class OspfEigrpRoute(Enum):
    """
    OspfEigrpRoute (Enum Class)

    Ospf eigrp route

    .. data:: internal = 0

    	EIGRP Internal Type

    .. data:: external = 1

    	EIGRP External Type

    """

    internal = Enum.YLeaf(0, "internal")

    external = Enum.YLeaf(1, "external")


class OspfFastReroute(Enum):
    """
    OspfFastReroute (Enum Class)

    Ospf fast reroute

    .. data:: none = 0

    	None

    .. data:: per_link = 1

    	Per link

    .. data:: per_prefix = 2

    	Per prefix

    """

    none = Enum.YLeaf(0, "none")

    per_link = Enum.YLeaf(1, "per-link")

    per_prefix = Enum.YLeaf(2, "per-prefix")


class OspfFastReroutePriority(Enum):
    """
    OspfFastReroutePriority (Enum Class)

    Ospf fast reroute priority

    .. data:: critical = 0

    	Critical

    .. data:: high = 2

    	High

    .. data:: medium = 4

    	Medium

    .. data:: low = 6

    	low

    """

    critical = Enum.YLeaf(0, "critical")

    high = Enum.YLeaf(2, "high")

    medium = Enum.YLeaf(4, "medium")

    low = Enum.YLeaf(6, "low")


class OspfFastRerouteTiebreakers(Enum):
    """
    OspfFastRerouteTiebreakers (Enum Class)

    Ospf fast reroute tiebreakers

    .. data:: downstream = 0

    	Downstream

    .. data:: line_card_disjoint = 1

    	LC Disjoint

    .. data:: lowest_metric = 2

    	Lowest metric

    .. data:: node_protect = 3

    	Node protection

    .. data:: primary_path = 4

    	Primary path

    .. data:: secondary_path = 5

    	Secondar path

    .. data:: srlg_disjoint = 6

    	SRLG

    """

    downstream = Enum.YLeaf(0, "downstream")

    line_card_disjoint = Enum.YLeaf(1, "line-card-disjoint")

    lowest_metric = Enum.YLeaf(2, "lowest-metric")

    node_protect = Enum.YLeaf(3, "node-protect")

    primary_path = Enum.YLeaf(4, "primary-path")

    secondary_path = Enum.YLeaf(5, "secondary-path")

    srlg_disjoint = Enum.YLeaf(6, "srlg-disjoint")


class OspfFastRerouteTiebreakersIntf(Enum):
    """
    OspfFastRerouteTiebreakersIntf (Enum Class)

    Ospf fast reroute tiebreakers intf

    .. data:: downstream = 0

    	Downstream

    .. data:: line_card_disjoint = 1

    	LC Disjoint

    .. data:: lowest_metric = 2

    	Lowest metric

    .. data:: node_protect = 3

    	Node protection

    .. data:: primary_path = 4

    	Primary path

    .. data:: secondary_path = 5

    	Secondar path

    .. data:: srlg_disjoint = 6

    	SRLG

    """

    downstream = Enum.YLeaf(0, "downstream")

    line_card_disjoint = Enum.YLeaf(1, "line-card-disjoint")

    lowest_metric = Enum.YLeaf(2, "lowest-metric")

    node_protect = Enum.YLeaf(3, "node-protect")

    primary_path = Enum.YLeaf(4, "primary-path")

    secondary_path = Enum.YLeaf(5, "secondary-path")

    srlg_disjoint = Enum.YLeaf(6, "srlg-disjoint")


class OspfFrrRlfaTunnel(Enum):
    """
    OspfFrrRlfaTunnel (Enum Class)

    Ospf frr rlfa tunnel

    .. data:: none = 0

    	Disabled

    .. data:: mpls_ldp = 1

    	MPLS LDP

    """

    none = Enum.YLeaf(0, "none")

    mpls_ldp = Enum.YLeaf(1, "mpls-ldp")


class OspfIetfNsf(Enum):
    """
    OspfIetfNsf (Enum Class)

    Ospf ietf nsf

    .. data:: all = 3

    	Use IETF NSF in planned and unplanned cases

    """

    all = Enum.YLeaf(3, "all")


class OspfIetfNsfSupport(Enum):
    """
    OspfIetfNsfSupport (Enum Class)

    Ospf ietf nsf support

    .. data:: never = 0

    	Do not perform IETF NSF helper role

    """

    never = Enum.YLeaf(0, "never")


class OspfKeychainAuth(Enum):
    """
    OspfKeychainAuth (Enum Class)

    Ospf keychain auth

    .. data:: none = 0

    	No Keychain Authentication

    .. data:: keychain = 3

    	Keychain Authentication

    """

    none = Enum.YLeaf(0, "none")

    keychain = Enum.YLeaf(3, "keychain")


class OspfLinkStateMetric(Enum):
    """
    OspfLinkStateMetric (Enum Class)

    Ospf link state metric

    .. data:: type1 = 1

    	Type 1 External

    .. data:: type2 = 2

    	Type 2 External

    """

    type1 = Enum.YLeaf(1, "type1")

    type2 = Enum.YLeaf(2, "type2")


class OspfLogAdj(Enum):
    """
    OspfLogAdj (Enum Class)

    Ospf log adj

    .. data:: brief = 0

    	Limited output

    .. data:: detail = 1

    	Verbose output

    .. data:: suppress = 2

    	No output

    """

    brief = Enum.YLeaf(0, "brief")

    detail = Enum.YLeaf(1, "detail")

    suppress = Enum.YLeaf(2, "suppress")


class OspfNetwork(Enum):
    """
    OspfNetwork (Enum Class)

    Ospf network

    .. data:: broadcast = 1

    	Broadcast

    .. data:: non_broadcast = 2

    	NonBroadcast

    .. data:: point_to_point = 3

    	Point to Point

    .. data:: point_to_multipoint = 4

    	Point to Multipoint

    .. data:: non_broadcast_point_to_multipoint = 5

    	NonBroadcast Point to Multipoint

    """

    broadcast = Enum.YLeaf(1, "broadcast")

    non_broadcast = Enum.YLeaf(2, "non-broadcast")

    point_to_point = Enum.YLeaf(3, "point-to-point")

    point_to_multipoint = Enum.YLeaf(4, "point-to-multipoint")

    non_broadcast_point_to_multipoint = Enum.YLeaf(5, "non-broadcast-point-to-multipoint")


class OspfProcFastReroute(Enum):
    """
    OspfProcFastReroute (Enum Class)

    Ospf proc fast reroute

    .. data:: none = 0

    	None

    .. data:: per_link = 1

    	Per link

    .. data:: per_prefix = 2

    	Per prefix

    """

    none = Enum.YLeaf(0, "none")

    per_link = Enum.YLeaf(1, "per-link")

    per_prefix = Enum.YLeaf(2, "per-prefix")


class OspfProcFrrRlfaTunnel(Enum):
    """
    OspfProcFrrRlfaTunnel (Enum Class)

    Ospf proc frr rlfa tunnel

    .. data:: none = 0

    	Disabled

    .. data:: mpls_ldp = 1

    	MPLS LDP

    """

    none = Enum.YLeaf(0, "none")

    mpls_ldp = Enum.YLeaf(1, "mpls-ldp")


class OspfRedistLsa(Enum):
    """
    OspfRedistLsa (Enum Class)

    Ospf redist lsa

    .. data:: summary = 3

    	Type 3 (summary) LSA

    .. data:: external = 5

    	Type 5 (external) LSA

    """

    summary = Enum.YLeaf(3, "summary")

    external = Enum.YLeaf(5, "external")


class OspfRedistProtocol(Enum):
    """
    OspfRedistProtocol (Enum Class)

    Ospf redist protocol

    .. data:: all = 0

    	Default

    .. data:: connected = 1

    	Connected Routes

    .. data:: static = 3

    	Static Routes

    .. data:: bgp = 4

    	BGP

    .. data:: rip = 5

    	RIP

    .. data:: isis = 6

    	ISIS

    .. data:: ospf = 7

    	OSPF

    .. data:: eigrp = 8

    	EIGRP

    .. data:: dagr = 9

    	DAGR

    .. data:: subscriber = 10

    	Subscriber Routes

    .. data:: application = 11

    	Application Routes

    .. data:: mobile = 12

    	Mobile Routes

    """

    all = Enum.YLeaf(0, "all")

    connected = Enum.YLeaf(1, "connected")

    static = Enum.YLeaf(3, "static")

    bgp = Enum.YLeaf(4, "bgp")

    rip = Enum.YLeaf(5, "rip")

    isis = Enum.YLeaf(6, "isis")

    ospf = Enum.YLeaf(7, "ospf")

    eigrp = Enum.YLeaf(8, "eigrp")

    dagr = Enum.YLeaf(9, "dagr")

    subscriber = Enum.YLeaf(10, "subscriber")

    application = Enum.YLeaf(11, "application")

    mobile = Enum.YLeaf(12, "mobile")


class OspfRouteLevel(Enum):
    """
    OspfRouteLevel (Enum Class)

    Ospf route level

    .. data:: type1 = 1

    	Type 1 only

    .. data:: type2 = 2

    	Type 2 only

    .. data:: type1_and2 = 3

    	Both Type 1 and Type 2

    """

    type1 = Enum.YLeaf(1, "type1")

    type2 = Enum.YLeaf(2, "type2")

    type1_and2 = Enum.YLeaf(3, "type1-and2")


class OspfSegmentRouting(Enum):
    """
    OspfSegmentRouting (Enum Class)

    Ospf segment routing

    .. data:: disable = 0

    	Disable

    .. data:: mpls = 1

    	Mpls

    """

    disable = Enum.YLeaf(0, "disable")

    mpls = Enum.YLeaf(1, "mpls")


class OspfSegmentRoutingForwarding(Enum):
    """
    OspfSegmentRoutingForwarding (Enum Class)

    Ospf segment routing forwarding

    .. data:: disable = 0

    	Disable

    .. data:: mpls = 1

    	Mpls

    """

    disable = Enum.YLeaf(0, "disable")

    mpls = Enum.YLeaf(1, "mpls")


class OspfShutdown(Enum):
    """
    OspfShutdown (Enum Class)

    Ospf shutdown

    .. data:: full = 1

    	Full graceful shutdown

    .. data:: hostmode = 2

    	Enter host only mode

    .. data:: onreload = 3

    	Full graceful shutdown post reload

    """

    full = Enum.YLeaf(1, "full")

    hostmode = Enum.YLeaf(2, "hostmode")

    onreload = Enum.YLeaf(3, "onreload")


class OspfSid(Enum):
    """
    OspfSid (Enum Class)

    Ospf sid

    .. data:: index = 0

    	Index

    .. data:: absolute = 1

    	Absolute

    """

    index = Enum.YLeaf(0, "index")

    absolute = Enum.YLeaf(1, "absolute")


class OspfSubAddressFamily(Enum):
    """
    OspfSubAddressFamily (Enum Class)

    Ospf sub address family

    .. data:: unicast = 1

    	Unicast

    """

    unicast = Enum.YLeaf(1, "unicast")


class OspfTraceBufSize(Enum):
    """
    OspfTraceBufSize (Enum Class)

    Ospf trace buf size

    .. data:: size0 = 0

    	Disable trace

    .. data:: size256 = 256

    	Buffer size 256

    .. data:: size512 = 512

    	Buffer size 512

    .. data:: size1024 = 1024

    	Buffer size 1024

    .. data:: size2048 = 2048

    	Buffer size 2048

    .. data:: size4096 = 4096

    	Buffer size 4096

    .. data:: size8192 = 8192

    	Buffer size 8192

    .. data:: size16384 = 16384

    	Buffer size 16384

    .. data:: size32768 = 32768

    	Buffer size 32768

    .. data:: size65536 = 65536

    	Buffer size 65536

    """

    size0 = Enum.YLeaf(0, "size0")

    size256 = Enum.YLeaf(256, "size256")

    size512 = Enum.YLeaf(512, "size512")

    size1024 = Enum.YLeaf(1024, "size1024")

    size2048 = Enum.YLeaf(2048, "size2048")

    size4096 = Enum.YLeaf(4096, "size4096")

    size8192 = Enum.YLeaf(8192, "size8192")

    size16384 = Enum.YLeaf(16384, "size16384")

    size32768 = Enum.YLeaf(32768, "size32768")

    size65536 = Enum.YLeaf(65536, "size65536")


class OspfUloopAvoidance(Enum):
    """
    OspfUloopAvoidance (Enum Class)

    Ospf uloop avoidance

    .. data:: protected = 1

    	Protected prefixes only

    .. data:: all = 2

    	All prefixes

    .. data:: segment_routing = 3

    	Microloop avoidance using Segment Routing

    """

    protected = Enum.YLeaf(1, "protected")

    all = Enum.YLeaf(2, "all")

    segment_routing = Enum.YLeaf(3, "segment-routing")



class Ospf(Entity):
    """
    OSPF configuration data
    
    .. attribute:: processes
    
    	Process related configuration
    	**type**\:  :py:class:`Processes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes>`
    
    .. attribute:: global_
    
    	OSPF global configuration data
    	**type**\:  :py:class:`Global <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Global>`
    
    

    """

    _prefix = 'ipv4-ospf-cfg'
    _revision = '2017-07-14'

    def __init__(self):
        super(Ospf, self).__init__()
        self._top_entity = None

        self.yang_name = "ospf"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-ospf-cfg"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([("processes", ("processes", Ospf.Processes)), ("global", ("global_", Ospf.Global))])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.processes = Ospf.Processes()
        self.processes.parent = self
        self._children_name_map["processes"] = "processes"
        self._children_yang_names.add("processes")

        self.global_ = Ospf.Global()
        self.global_.parent = self
        self._children_name_map["global_"] = "global"
        self._children_yang_names.add("global")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-ospf-cfg:ospf"


    class Processes(Entity):
        """
        Process related configuration
        
        .. attribute:: process
        
        	Configuration for a particular OSPF process and associated default VRF
        	**type**\: list of  		 :py:class:`Process <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process>`
        
        

        """

        _prefix = 'ipv4-ospf-cfg'
        _revision = '2017-07-14'

        def __init__(self):
            super(Ospf.Processes, self).__init__()

            self.yang_name = "processes"
            self.yang_parent_name = "ospf"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("process", ("process", Ospf.Processes.Process))])
            self._leafs = OrderedDict()

            self.process = YList(self)
            self._segment_path = lambda: "processes"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-ospf-cfg:ospf/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Ospf.Processes, [], name, value)


        class Process(Entity):
            """
            Configuration for a particular OSPF process and
            associated default VRF
            
            .. attribute:: process_name  (key)
            
            	Name for this OSPF process
            	**type**\: str
            
            	**length:** 1..32
            
            .. attribute:: snmp
            
            	OSPF SNMP configuration
            	**type**\:  :py:class:`Snmp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Snmp>`
            
            .. attribute:: distribute
            
            	Enable distribution of link\-state database services
            	**type**\:  :py:class:`Distribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Distribute>`
            
            	**presence node**\: True
            
            .. attribute:: vrfs
            
            	VRF related configuration
            	**type**\:  :py:class:`Vrfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs>`
            
            .. attribute:: trace_bufs
            
            	Configuration to change size of trace buffer
            	**type**\:  :py:class:`TraceBufs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.TraceBufs>`
            
            .. attribute:: graceful_shutdown_timers
            
            	Adjust routing timers
            	**type**\:  :py:class:`GracefulShutdownTimers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.GracefulShutdownTimers>`
            
            .. attribute:: default_vrf
            
            	Default VRF related configuration
            	**type**\:  :py:class:`DefaultVrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf>`
            
            .. attribute:: start
            
            	Start OSPF configuration
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: nsr
            
            	Enable non\-stop routing
            	**type**\:  :py:class:`Nsr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Nsr>`
            
            	**default value**\: true
            
            .. attribute:: protocol_shutdown
            
            	Type of protocol shutdown
            	**type**\:  :py:class:`OspfShutdown <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfShutdown>`
            
            .. attribute:: running
            
            	Enable routing on an IP network
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            

            """

            _prefix = 'ipv4-ospf-cfg'
            _revision = '2017-07-14'

            def __init__(self):
                super(Ospf.Processes.Process, self).__init__()

                self.yang_name = "process"
                self.yang_parent_name = "processes"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['process_name']
                self._child_container_classes = OrderedDict([("snmp", ("snmp", Ospf.Processes.Process.Snmp)), ("distribute", ("distribute", Ospf.Processes.Process.Distribute)), ("vrfs", ("vrfs", Ospf.Processes.Process.Vrfs)), ("trace-bufs", ("trace_bufs", Ospf.Processes.Process.TraceBufs)), ("graceful-shutdown-timers", ("graceful_shutdown_timers", Ospf.Processes.Process.GracefulShutdownTimers)), ("default-vrf", ("default_vrf", Ospf.Processes.Process.DefaultVrf))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('process_name', YLeaf(YType.str, 'process-name')),
                    ('start', YLeaf(YType.empty, 'start')),
                    ('nsr', YLeaf(YType.enumeration, 'nsr')),
                    ('protocol_shutdown', YLeaf(YType.enumeration, 'protocol-shutdown')),
                    ('running', YLeaf(YType.empty, 'running')),
                ])
                self.process_name = None
                self.start = None
                self.nsr = None
                self.protocol_shutdown = None
                self.running = None

                self.snmp = Ospf.Processes.Process.Snmp()
                self.snmp.parent = self
                self._children_name_map["snmp"] = "snmp"
                self._children_yang_names.add("snmp")

                self.distribute = None
                self._children_name_map["distribute"] = "distribute"
                self._children_yang_names.add("distribute")

                self.vrfs = Ospf.Processes.Process.Vrfs()
                self.vrfs.parent = self
                self._children_name_map["vrfs"] = "vrfs"
                self._children_yang_names.add("vrfs")

                self.trace_bufs = Ospf.Processes.Process.TraceBufs()
                self.trace_bufs.parent = self
                self._children_name_map["trace_bufs"] = "trace-bufs"
                self._children_yang_names.add("trace-bufs")

                self.graceful_shutdown_timers = Ospf.Processes.Process.GracefulShutdownTimers()
                self.graceful_shutdown_timers.parent = self
                self._children_name_map["graceful_shutdown_timers"] = "graceful-shutdown-timers"
                self._children_yang_names.add("graceful-shutdown-timers")

                self.default_vrf = Ospf.Processes.Process.DefaultVrf()
                self.default_vrf.parent = self
                self._children_name_map["default_vrf"] = "default-vrf"
                self._children_yang_names.add("default-vrf")
                self._segment_path = lambda: "process" + "[process-name='" + str(self.process_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-ospf-cfg:ospf/processes/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Ospf.Processes.Process, ['process_name', 'start', 'nsr', 'protocol_shutdown', 'running'], name, value)


            class Snmp(Entity):
                """
                OSPF SNMP configuration
                
                .. attribute:: trap_rate_limit
                
                	Per OSPF process SNMP trap rate\-limit
                	**type**\:  :py:class:`TrapRateLimit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Snmp.TrapRateLimit>`
                
                	**presence node**\: True
                
                

                """

                _prefix = 'ipv4-ospf-cfg'
                _revision = '2017-07-14'

                def __init__(self):
                    super(Ospf.Processes.Process.Snmp, self).__init__()

                    self.yang_name = "snmp"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("trap-rate-limit", ("trap_rate_limit", Ospf.Processes.Process.Snmp.TrapRateLimit))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.trap_rate_limit = None
                    self._children_name_map["trap_rate_limit"] = "trap-rate-limit"
                    self._children_yang_names.add("trap-rate-limit")
                    self._segment_path = lambda: "snmp"


                class TrapRateLimit(Entity):
                    """
                    Per OSPF process SNMP trap rate\-limit
                    
                    .. attribute:: window_size
                    
                    	Trap rate limit sliding window size
                    	**type**\: int
                    
                    	**range:** 2..60
                    
                    	**mandatory**\: True
                    
                    .. attribute:: max_window_traps
                    
                    	Max number of traps to send in window time
                    	**type**\: int
                    
                    	**range:** 0..300
                    
                    	**mandatory**\: True
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospf.Processes.Process.Snmp.TrapRateLimit, self).__init__()

                        self.yang_name = "trap-rate-limit"
                        self.yang_parent_name = "snmp"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self.is_presence_container = True
                        self._leafs = OrderedDict([
                            ('window_size', YLeaf(YType.uint32, 'window-size')),
                            ('max_window_traps', YLeaf(YType.uint32, 'max-window-traps')),
                        ])
                        self.window_size = None
                        self.max_window_traps = None
                        self._segment_path = lambda: "trap-rate-limit"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospf.Processes.Process.Snmp.TrapRateLimit, ['window_size', 'max_window_traps'], name, value)


            class Distribute(Entity):
                """
                Enable distribution of link\-state database
                services
                
                .. attribute:: throttle
                
                	Seconds
                	**type**\: int
                
                	**range:** 1..3600
                
                	**units**\: second
                
                .. attribute:: instance_id
                
                	Instance ID
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'ipv4-ospf-cfg'
                _revision = '2017-07-14'

                def __init__(self):
                    super(Ospf.Processes.Process.Distribute, self).__init__()

                    self.yang_name = "distribute"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self.is_presence_container = True
                    self._leafs = OrderedDict([
                        ('throttle', YLeaf(YType.uint32, 'throttle')),
                        ('instance_id', YLeaf(YType.uint32, 'instance-id')),
                    ])
                    self.throttle = None
                    self.instance_id = None
                    self._segment_path = lambda: "distribute"

                def __setattr__(self, name, value):
                    self._perform_setattr(Ospf.Processes.Process.Distribute, ['throttle', 'instance_id'], name, value)


            class Vrfs(Entity):
                """
                VRF related configuration
                
                .. attribute:: vrf
                
                	Configuration for a particular OSPF vrf
                	**type**\: list of  		 :py:class:`Vrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf>`
                
                

                """

                _prefix = 'ipv4-ospf-cfg'
                _revision = '2017-07-14'

                def __init__(self):
                    super(Ospf.Processes.Process.Vrfs, self).__init__()

                    self.yang_name = "vrfs"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("vrf", ("vrf", Ospf.Processes.Process.Vrfs.Vrf))])
                    self._leafs = OrderedDict()

                    self.vrf = YList(self)
                    self._segment_path = lambda: "vrfs"

                def __setattr__(self, name, value):
                    self._perform_setattr(Ospf.Processes.Process.Vrfs, [], name, value)


                class Vrf(Entity):
                    """
                    Configuration for a particular OSPF vrf
                    
                    .. attribute:: vrf_name  (key)
                    
                    	Name for this vrf
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: domain_id
                    
                    	OSPF Domain ID
                    	**type**\:  :py:class:`DomainId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.DomainId>`
                    
                    .. attribute:: vrf_start
                    
                    	Start OSPF VRF configuration
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: snmp_trap_enabled
                    
                    	Enable/disable OSPF SNMP trap
                    	**type**\: bool
                    
                    	**default value**\: false
                    
                    .. attribute:: domain_tag
                    
                    	32 bit Domain tag value
                    	**type**\: int
                    
                    	**range:** 1..4294967295
                    
                    .. attribute:: vrf_lite
                    
                    	VRF lite capability
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: disable_dn_bit_check
                    
                    	Disable DN bit check
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: microloop
                    
                    	Microloop configuration
                    	**type**\:  :py:class:`Microloop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Microloop>`
                    
                    .. attribute:: ignore_mospf
                    
                    	Ignore MOSPF (Type 6) LSAs
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: maximum_redistribute_prefix
                    
                    	Maximum number of prefixes redistributed into OSPF
                    	**type**\:  :py:class:`MaximumRedistributePrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.MaximumRedistributePrefix>`
                    
                    .. attribute:: default_information
                    
                    	Control distribution of default information
                    	**type**\:  :py:class:`DefaultInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.DefaultInformation>`
                    
                    .. attribute:: af
                    
                    	OSPF address family
                    	**type**\:  :py:class:`Af <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Af>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: queue
                    
                    	Adjust OSPF input queue sizes and processing quantums
                    	**type**\:  :py:class:`Queue <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Queue>`
                    
                    .. attribute:: router_id
                    
                    	Router ID for this OSPF process. Enter an IP Address
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: type7
                    
                    	Prefer type7 externals over type5
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: max_metric
                    
                    	Set maximum metric configuration
                    	**type**\:  :py:class:`MaxMetric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.MaxMetric>`
                    
                    .. attribute:: snmp_context
                    
                    	OSPF SNMP context configuration
                    	**type**\: str
                    
                    .. attribute:: maximum_interfaces
                    
                    	Max number of interfaces allowed to be configured
                    	**type**\: int
                    
                    	**range:** 1..4294967295
                    
                    	**default value**\: 1024
                    
                    .. attribute:: no_opaque
                    
                    	Disable opaque LSAs
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: nsf
                    
                    	Non Stop Forwarding configuration
                    	**type**\:  :py:class:`Nsf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Nsf>`
                    
                    .. attribute:: process_scope
                    
                    	Process scope configuration
                    	**type**\:  :py:class:`ProcessScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope>`
                    
                    .. attribute:: spf_prefix_priority
                    
                    	Configure a route\-policy for prioritizing RIB route install
                    	**type**\: str
                    
                    .. attribute:: redistribution
                    
                    	Redistribute configurations
                    	**type**\:  :py:class:`Redistribution <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Redistribution>`
                    
                    .. attribute:: adjacency_stagger
                    
                    	Staggering OSPF adjacency bring up
                    	**type**\:  :py:class:`AdjacencyStagger <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AdjacencyStagger>`
                    
                    .. attribute:: max_lsa
                    
                    	Set max\-lsa configuration
                    	**type**\:  :py:class:`MaxLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.MaxLsa>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: auto_cost
                    
                    	Controls automatic cost based on bandwidth
                    	**type**\:  :py:class:`AutoCost <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AutoCost>`
                    
                    .. attribute:: ucmp
                    
                    	Unequal Cost Multi\-ptah configuration
                    	**type**\:  :py:class:`Ucmp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Ucmp>`
                    
                    .. attribute:: maximum_paths
                    
                    	Forward packets over multiple paths (number of paths)
                    	**type**\: int
                    
                    	**range:** 1..64
                    
                    .. attribute:: fast_reroute
                    
                    	Fast\-reroute instance scoped parameters
                    	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.FastReroute>`
                    
                    .. attribute:: summary_prefixes
                    
                    	Configure IP prefix summary
                    	**type**\:  :py:class:`SummaryPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes>`
                    
                    .. attribute:: adjacency_changes
                    
                    	Log changes in adjacency state
                    	**type**\:  :py:class:`OspfLogAdj <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLogAdj>`
                    
                    .. attribute:: outgoing_route_updates
                    
                    	Filter outgoing routing updates
                    	**type**\:  :py:class:`OutgoingRouteUpdates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.OutgoingRouteUpdates>`
                    
                    .. attribute:: distance
                    
                    	Administrative distance configuration
                    	**type**\:  :py:class:`Distance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Distance>`
                    
                    .. attribute:: area_addresses
                    
                    	Area configuration
                    	**type**\:  :py:class:`AreaAddresses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses>`
                    
                    .. attribute:: timers
                    
                    	Adjust routing timers
                    	**type**\:  :py:class:`Timers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Timers>`
                    
                    .. attribute:: default_metric
                    
                    	Set default metric of redistributed routes
                    	**type**\: int
                    
                    	**range:** 1..16777214
                    
                    	**default value**\: 1
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospf.Processes.Process.Vrfs.Vrf, self).__init__()

                        self.yang_name = "vrf"
                        self.yang_parent_name = "vrfs"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['vrf_name']
                        self._child_container_classes = OrderedDict([("domain-id", ("domain_id", Ospf.Processes.Process.Vrfs.Vrf.DomainId)), ("microloop", ("microloop", Ospf.Processes.Process.Vrfs.Vrf.Microloop)), ("maximum-redistribute-prefix", ("maximum_redistribute_prefix", Ospf.Processes.Process.Vrfs.Vrf.MaximumRedistributePrefix)), ("default-information", ("default_information", Ospf.Processes.Process.Vrfs.Vrf.DefaultInformation)), ("af", ("af", Ospf.Processes.Process.Vrfs.Vrf.Af)), ("queue", ("queue", Ospf.Processes.Process.Vrfs.Vrf.Queue)), ("max-metric", ("max_metric", Ospf.Processes.Process.Vrfs.Vrf.MaxMetric)), ("nsf", ("nsf", Ospf.Processes.Process.Vrfs.Vrf.Nsf)), ("process-scope", ("process_scope", Ospf.Processes.Process.Vrfs.Vrf.ProcessScope)), ("redistribution", ("redistribution", Ospf.Processes.Process.Vrfs.Vrf.Redistribution)), ("adjacency-stagger", ("adjacency_stagger", Ospf.Processes.Process.Vrfs.Vrf.AdjacencyStagger)), ("max-lsa", ("max_lsa", Ospf.Processes.Process.Vrfs.Vrf.MaxLsa)), ("auto-cost", ("auto_cost", Ospf.Processes.Process.Vrfs.Vrf.AutoCost)), ("ucmp", ("ucmp", Ospf.Processes.Process.Vrfs.Vrf.Ucmp)), ("fast-reroute", ("fast_reroute", Ospf.Processes.Process.Vrfs.Vrf.FastReroute)), ("summary-prefixes", ("summary_prefixes", Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes)), ("outgoing-route-updates", ("outgoing_route_updates", Ospf.Processes.Process.Vrfs.Vrf.OutgoingRouteUpdates)), ("distance", ("distance", Ospf.Processes.Process.Vrfs.Vrf.Distance)), ("area-addresses", ("area_addresses", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses)), ("timers", ("timers", Ospf.Processes.Process.Vrfs.Vrf.Timers))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                            ('vrf_start', YLeaf(YType.empty, 'vrf-start')),
                            ('snmp_trap_enabled', YLeaf(YType.boolean, 'snmp-trap-enabled')),
                            ('domain_tag', YLeaf(YType.uint32, 'domain-tag')),
                            ('vrf_lite', YLeaf(YType.empty, 'vrf-lite')),
                            ('disable_dn_bit_check', YLeaf(YType.empty, 'disable-dn-bit-check')),
                            ('ignore_mospf', YLeaf(YType.empty, 'ignore-mospf')),
                            ('router_id', YLeaf(YType.str, 'router-id')),
                            ('type7', YLeaf(YType.empty, 'type7')),
                            ('snmp_context', YLeaf(YType.str, 'snmp-context')),
                            ('maximum_interfaces', YLeaf(YType.uint32, 'maximum-interfaces')),
                            ('no_opaque', YLeaf(YType.empty, 'no-opaque')),
                            ('spf_prefix_priority', YLeaf(YType.str, 'spf-prefix-priority')),
                            ('maximum_paths', YLeaf(YType.uint32, 'maximum-paths')),
                            ('adjacency_changes', YLeaf(YType.enumeration, 'adjacency-changes')),
                            ('default_metric', YLeaf(YType.uint32, 'default-metric')),
                        ])
                        self.vrf_name = None
                        self.vrf_start = None
                        self.snmp_trap_enabled = None
                        self.domain_tag = None
                        self.vrf_lite = None
                        self.disable_dn_bit_check = None
                        self.ignore_mospf = None
                        self.router_id = None
                        self.type7 = None
                        self.snmp_context = None
                        self.maximum_interfaces = None
                        self.no_opaque = None
                        self.spf_prefix_priority = None
                        self.maximum_paths = None
                        self.adjacency_changes = None
                        self.default_metric = None

                        self.domain_id = Ospf.Processes.Process.Vrfs.Vrf.DomainId()
                        self.domain_id.parent = self
                        self._children_name_map["domain_id"] = "domain-id"
                        self._children_yang_names.add("domain-id")

                        self.microloop = Ospf.Processes.Process.Vrfs.Vrf.Microloop()
                        self.microloop.parent = self
                        self._children_name_map["microloop"] = "microloop"
                        self._children_yang_names.add("microloop")

                        self.maximum_redistribute_prefix = Ospf.Processes.Process.Vrfs.Vrf.MaximumRedistributePrefix()
                        self.maximum_redistribute_prefix.parent = self
                        self._children_name_map["maximum_redistribute_prefix"] = "maximum-redistribute-prefix"
                        self._children_yang_names.add("maximum-redistribute-prefix")

                        self.default_information = Ospf.Processes.Process.Vrfs.Vrf.DefaultInformation()
                        self.default_information.parent = self
                        self._children_name_map["default_information"] = "default-information"
                        self._children_yang_names.add("default-information")

                        self.af = None
                        self._children_name_map["af"] = "af"
                        self._children_yang_names.add("af")

                        self.queue = Ospf.Processes.Process.Vrfs.Vrf.Queue()
                        self.queue.parent = self
                        self._children_name_map["queue"] = "queue"
                        self._children_yang_names.add("queue")

                        self.max_metric = Ospf.Processes.Process.Vrfs.Vrf.MaxMetric()
                        self.max_metric.parent = self
                        self._children_name_map["max_metric"] = "max-metric"
                        self._children_yang_names.add("max-metric")

                        self.nsf = Ospf.Processes.Process.Vrfs.Vrf.Nsf()
                        self.nsf.parent = self
                        self._children_name_map["nsf"] = "nsf"
                        self._children_yang_names.add("nsf")

                        self.process_scope = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope()
                        self.process_scope.parent = self
                        self._children_name_map["process_scope"] = "process-scope"
                        self._children_yang_names.add("process-scope")

                        self.redistribution = Ospf.Processes.Process.Vrfs.Vrf.Redistribution()
                        self.redistribution.parent = self
                        self._children_name_map["redistribution"] = "redistribution"
                        self._children_yang_names.add("redistribution")

                        self.adjacency_stagger = Ospf.Processes.Process.Vrfs.Vrf.AdjacencyStagger()
                        self.adjacency_stagger.parent = self
                        self._children_name_map["adjacency_stagger"] = "adjacency-stagger"
                        self._children_yang_names.add("adjacency-stagger")

                        self.max_lsa = None
                        self._children_name_map["max_lsa"] = "max-lsa"
                        self._children_yang_names.add("max-lsa")

                        self.auto_cost = Ospf.Processes.Process.Vrfs.Vrf.AutoCost()
                        self.auto_cost.parent = self
                        self._children_name_map["auto_cost"] = "auto-cost"
                        self._children_yang_names.add("auto-cost")

                        self.ucmp = Ospf.Processes.Process.Vrfs.Vrf.Ucmp()
                        self.ucmp.parent = self
                        self._children_name_map["ucmp"] = "ucmp"
                        self._children_yang_names.add("ucmp")

                        self.fast_reroute = Ospf.Processes.Process.Vrfs.Vrf.FastReroute()
                        self.fast_reroute.parent = self
                        self._children_name_map["fast_reroute"] = "fast-reroute"
                        self._children_yang_names.add("fast-reroute")

                        self.summary_prefixes = Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes()
                        self.summary_prefixes.parent = self
                        self._children_name_map["summary_prefixes"] = "summary-prefixes"
                        self._children_yang_names.add("summary-prefixes")

                        self.outgoing_route_updates = Ospf.Processes.Process.Vrfs.Vrf.OutgoingRouteUpdates()
                        self.outgoing_route_updates.parent = self
                        self._children_name_map["outgoing_route_updates"] = "outgoing-route-updates"
                        self._children_yang_names.add("outgoing-route-updates")

                        self.distance = Ospf.Processes.Process.Vrfs.Vrf.Distance()
                        self.distance.parent = self
                        self._children_name_map["distance"] = "distance"
                        self._children_yang_names.add("distance")

                        self.area_addresses = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses()
                        self.area_addresses.parent = self
                        self._children_name_map["area_addresses"] = "area-addresses"
                        self._children_yang_names.add("area-addresses")

                        self.timers = Ospf.Processes.Process.Vrfs.Vrf.Timers()
                        self.timers.parent = self
                        self._children_name_map["timers"] = "timers"
                        self._children_yang_names.add("timers")
                        self._segment_path = lambda: "vrf" + "[vrf-name='" + str(self.vrf_name) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf, ['vrf_name', 'vrf_start', 'snmp_trap_enabled', 'domain_tag', 'vrf_lite', 'disable_dn_bit_check', 'ignore_mospf', 'router_id', 'type7', 'snmp_context', 'maximum_interfaces', 'no_opaque', 'spf_prefix_priority', 'maximum_paths', 'adjacency_changes', 'default_metric'], name, value)


                    class DomainId(Entity):
                        """
                        OSPF Domain ID
                        
                        .. attribute:: primary_domain_id
                        
                        	OSPF Primary domain ID
                        	**type**\:  :py:class:`PrimaryDomainId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.DomainId.PrimaryDomainId>`
                        
                        .. attribute:: secondary_domain_ids
                        
                        	Secondary domain ID Table
                        	**type**\:  :py:class:`SecondaryDomainIds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.Vrfs.Vrf.DomainId, self).__init__()

                            self.yang_name = "domain-id"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("primary-domain-id", ("primary_domain_id", Ospf.Processes.Process.Vrfs.Vrf.DomainId.PrimaryDomainId)), ("secondary-domain-ids", ("secondary_domain_ids", Ospf.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.primary_domain_id = Ospf.Processes.Process.Vrfs.Vrf.DomainId.PrimaryDomainId()
                            self.primary_domain_id.parent = self
                            self._children_name_map["primary_domain_id"] = "primary-domain-id"
                            self._children_yang_names.add("primary-domain-id")

                            self.secondary_domain_ids = Ospf.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds()
                            self.secondary_domain_ids.parent = self
                            self._children_name_map["secondary_domain_ids"] = "secondary-domain-ids"
                            self._children_yang_names.add("secondary-domain-ids")
                            self._segment_path = lambda: "domain-id"


                        class PrimaryDomainId(Entity):
                            """
                            OSPF Primary domain ID
                            
                            .. attribute:: domain_id_type
                            
                            	Primary domain ID type
                            	**type**\:  :py:class:`OspfDomainId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfDomainId>`
                            
                            .. attribute:: domain_id_name
                            
                            	Primary domain ID value
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.DomainId.PrimaryDomainId, self).__init__()

                                self.yang_name = "primary-domain-id"
                                self.yang_parent_name = "domain-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('domain_id_type', YLeaf(YType.enumeration, 'domain-id-type')),
                                    ('domain_id_name', YLeaf(YType.str, 'domain-id-name')),
                                ])
                                self.domain_id_type = None
                                self.domain_id_name = None
                                self._segment_path = lambda: "primary-domain-id"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.DomainId.PrimaryDomainId, ['domain_id_type', 'domain_id_name'], name, value)


                        class SecondaryDomainIds(Entity):
                            """
                            Secondary domain ID Table
                            
                            .. attribute:: secondary_domain_id
                            
                            	OSPF Secondary domain ID
                            	**type**\: list of  		 :py:class:`SecondaryDomainId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds.SecondaryDomainId>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds, self).__init__()

                                self.yang_name = "secondary-domain-ids"
                                self.yang_parent_name = "domain-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("secondary-domain-id", ("secondary_domain_id", Ospf.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds.SecondaryDomainId))])
                                self._leafs = OrderedDict()

                                self.secondary_domain_id = YList(self)
                                self._segment_path = lambda: "secondary-domain-ids"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds, [], name, value)


                            class SecondaryDomainId(Entity):
                                """
                                OSPF Secondary domain ID
                                
                                .. attribute:: domain_id_type  (key)
                                
                                	Secondary domain ID type
                                	**type**\:  :py:class:`OspfDomainId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfDomainId>`
                                
                                .. attribute:: domain_id_name  (key)
                                
                                	Secondary domain ID value
                                	**type**\: str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds.SecondaryDomainId, self).__init__()

                                    self.yang_name = "secondary-domain-id"
                                    self.yang_parent_name = "secondary-domain-ids"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['domain_id_type','domain_id_name']
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('domain_id_type', YLeaf(YType.enumeration, 'domain-id-type')),
                                        ('domain_id_name', YLeaf(YType.str, 'domain-id-name')),
                                    ])
                                    self.domain_id_type = None
                                    self.domain_id_name = None
                                    self._segment_path = lambda: "secondary-domain-id" + "[domain-id-type='" + str(self.domain_id_type) + "']" + "[domain-id-name='" + str(self.domain_id_name) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds.SecondaryDomainId, ['domain_id_type', 'domain_id_name'], name, value)


                    class Microloop(Entity):
                        """
                        Microloop configuration
                        
                        .. attribute:: avoidance
                        
                        	Microloop avoidance configuration
                        	**type**\:  :py:class:`Avoidance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Microloop.Avoidance>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.Vrfs.Vrf.Microloop, self).__init__()

                            self.yang_name = "microloop"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("avoidance", ("avoidance", Ospf.Processes.Process.Vrfs.Vrf.Microloop.Avoidance))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.avoidance = Ospf.Processes.Process.Vrfs.Vrf.Microloop.Avoidance()
                            self.avoidance.parent = self
                            self._children_name_map["avoidance"] = "avoidance"
                            self._children_yang_names.add("avoidance")
                            self._segment_path = lambda: "microloop"


                        class Avoidance(Entity):
                            """
                            Microloop avoidance configuration
                            
                            .. attribute:: enable
                            
                            	MicroLoop avoidance feature enable configuration
                            	**type**\:  :py:class:`OspfUloopAvoidance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfUloopAvoidance>`
                            
                            	**default value**\: all
                            
                            .. attribute:: rib_update_delay
                            
                            	Delay to introduce between SPF and RIB update in msecs
                            	**type**\: int
                            
                            	**range:** 1..600000
                            
                            	**units**\: millisecond
                            
                            	**default value**\: 5000
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.Microloop.Avoidance, self).__init__()

                                self.yang_name = "avoidance"
                                self.yang_parent_name = "microloop"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('enable', YLeaf(YType.enumeration, 'enable')),
                                    ('rib_update_delay', YLeaf(YType.uint32, 'rib-update-delay')),
                                ])
                                self.enable = None
                                self.rib_update_delay = None
                                self._segment_path = lambda: "avoidance"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.Microloop.Avoidance, ['enable', 'rib_update_delay'], name, value)


                    class MaximumRedistributePrefix(Entity):
                        """
                        Maximum number of prefixes redistributed into
                        OSPF
                        
                        .. attribute:: number_of_prefixes
                        
                        	Maximum number of prefixes redistributed
                        	**type**\: int
                        
                        	**range:** 1..4294967295
                        
                        .. attribute:: threshold
                        
                        	Threshold value (%) at which to generate a warning msg
                        	**type**\: int
                        
                        	**range:** 1..100
                        
                        .. attribute:: warning_only
                        
                        	Only give warning messsage when limit is exceeded
                        	**type**\: bool
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.Vrfs.Vrf.MaximumRedistributePrefix, self).__init__()

                            self.yang_name = "maximum-redistribute-prefix"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('number_of_prefixes', YLeaf(YType.uint32, 'number-of-prefixes')),
                                ('threshold', YLeaf(YType.uint32, 'threshold')),
                                ('warning_only', YLeaf(YType.boolean, 'warning-only')),
                            ])
                            self.number_of_prefixes = None
                            self.threshold = None
                            self.warning_only = None
                            self._segment_path = lambda: "maximum-redistribute-prefix"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.MaximumRedistributePrefix, ['number_of_prefixes', 'threshold', 'warning_only'], name, value)


                    class DefaultInformation(Entity):
                        """
                        Control distribution of default information
                        
                        .. attribute:: always_advertise
                        
                        	Always advertise default route
                        	**type**\: bool
                        
                        	**default value**\: false
                        
                        .. attribute:: metric
                        
                        	OSPF metric
                        	**type**\: int
                        
                        	**range:** 1..16777214
                        
                        	**default value**\: 1
                        
                        .. attribute:: metric_type
                        
                        	OSPF External metric type
                        	**type**\:  :py:class:`OspfLinkStateMetric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetric>`
                        
                        	**default value**\: type2
                        
                        .. attribute:: route_policy_name
                        
                        	Routing policy name
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.Vrfs.Vrf.DefaultInformation, self).__init__()

                            self.yang_name = "default-information"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('always_advertise', YLeaf(YType.boolean, 'always-advertise')),
                                ('metric', YLeaf(YType.uint32, 'metric')),
                                ('metric_type', YLeaf(YType.enumeration, 'metric-type')),
                                ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
                            ])
                            self.always_advertise = None
                            self.metric = None
                            self.metric_type = None
                            self.route_policy_name = None
                            self._segment_path = lambda: "default-information"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.DefaultInformation, ['always_advertise', 'metric', 'metric_type', 'route_policy_name'], name, value)


                    class Af(Entity):
                        """
                        OSPF address family
                        
                        .. attribute:: af_name
                        
                        	Address family
                        	**type**\:  :py:class:`OspfAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAddressFamily>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: saf_name
                        
                        	Sub\-Address family
                        	**type**\:  :py:class:`OspfSubAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSubAddressFamily>`
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.Vrfs.Vrf.Af, self).__init__()

                            self.yang_name = "af"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self.is_presence_container = True
                            self._leafs = OrderedDict([
                                ('af_name', YLeaf(YType.enumeration, 'af-name')),
                                ('saf_name', YLeaf(YType.enumeration, 'saf-name')),
                            ])
                            self.af_name = None
                            self.saf_name = None
                            self._segment_path = lambda: "af"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.Af, ['af_name', 'saf_name'], name, value)


                    class Queue(Entity):
                        """
                        Adjust OSPF input queue sizes and processing
                        quantums
                        
                        .. attribute:: dispatch_rate_limited_flush
                        
                        	Maximum number of continuous rate\-limited LSAs processed for FLUSH
                        	**type**\: int
                        
                        	**range:** 30..3000
                        
                        	**default value**\: 150
                        
                        .. attribute:: limit_high
                        
                        	Hello events are dropped when incoming event queue exceeds this
                        	**type**\: int
                        
                        	**range:** 1000..30000
                        
                        	**default value**\: 9500
                        
                        .. attribute:: dispatch_spf_lsa_limit
                        
                        	Maximum number of continuous summary or external LSAs processed
                        	**type**\: int
                        
                        	**range:** 30..3000
                        
                        	**default value**\: 150
                        
                        .. attribute:: limit_low
                        
                        	DBDs/Updates are dropped when incoming event queue exceeds this
                        	**type**\: int
                        
                        	**range:** 1000..30000
                        
                        	**default value**\: 8000
                        
                        .. attribute:: dispatch_rate_limited
                        
                        	Maximum number of continuous rate\-limited LSAs processed
                        	**type**\: int
                        
                        	**range:** 30..3000
                        
                        	**default value**\: 150
                        
                        .. attribute:: limit_medium
                        
                        	LSA ACKs are dropped when incoming event queue exceeds this
                        	**type**\: int
                        
                        	**range:** 1000..30000
                        
                        	**default value**\: 9000
                        
                        .. attribute:: dispatch_incoming
                        
                        	Maximum number of continuous incoming packet\-related events processed
                        	**type**\: int
                        
                        	**range:** 30..3000
                        
                        	**default value**\: 300
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.Vrfs.Vrf.Queue, self).__init__()

                            self.yang_name = "queue"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('dispatch_rate_limited_flush', YLeaf(YType.uint32, 'dispatch-rate-limited-flush')),
                                ('limit_high', YLeaf(YType.uint32, 'limit-high')),
                                ('dispatch_spf_lsa_limit', YLeaf(YType.uint32, 'dispatch-spf-lsa-limit')),
                                ('limit_low', YLeaf(YType.uint32, 'limit-low')),
                                ('dispatch_rate_limited', YLeaf(YType.uint32, 'dispatch-rate-limited')),
                                ('limit_medium', YLeaf(YType.uint32, 'limit-medium')),
                                ('dispatch_incoming', YLeaf(YType.uint32, 'dispatch-incoming')),
                            ])
                            self.dispatch_rate_limited_flush = None
                            self.limit_high = None
                            self.dispatch_spf_lsa_limit = None
                            self.limit_low = None
                            self.dispatch_rate_limited = None
                            self.limit_medium = None
                            self.dispatch_incoming = None
                            self._segment_path = lambda: "queue"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.Queue, ['dispatch_rate_limited_flush', 'limit_high', 'dispatch_spf_lsa_limit', 'limit_low', 'dispatch_rate_limited', 'limit_medium', 'dispatch_incoming'], name, value)


                    class MaxMetric(Entity):
                        """
                        Set maximum metric configuration
                        
                        .. attribute:: max_metric_on_proc_restart
                        
                        	Set maximum metric on\-proc\-restart configuration
                        	**type**\:  :py:class:`MaxMetricOnProcRestart <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnProcRestart>`
                        
                        .. attribute:: max_metric_on_startup
                        
                        	Set maximum metric on\-startup configuration
                        	**type**\:  :py:class:`MaxMetricOnStartup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnStartup>`
                        
                        .. attribute:: max_metric_on_proc_migration
                        
                        	Set maximum metric on\-proc\-migration configuration
                        	**type**\:  :py:class:`MaxMetricOnProcMigration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnProcMigration>`
                        
                        .. attribute:: max_metric_always
                        
                        	Set maximum metric always configuration
                        	**type**\:  :py:class:`MaxMetricAlways <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricAlways>`
                        
                        .. attribute:: max_metric_on_switchover
                        
                        	Set maximum metric on\-switchover configuration
                        	**type**\:  :py:class:`MaxMetricOnSwitchover <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnSwitchover>`
                        
                        .. attribute:: max_metric_no_abr_off
                        
                        	Block ABR\-disable mode entry while in max\-metric mode
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.Vrfs.Vrf.MaxMetric, self).__init__()

                            self.yang_name = "max-metric"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("max-metric-on-proc-restart", ("max_metric_on_proc_restart", Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnProcRestart)), ("max-metric-on-startup", ("max_metric_on_startup", Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnStartup)), ("max-metric-on-proc-migration", ("max_metric_on_proc_migration", Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnProcMigration)), ("max-metric-always", ("max_metric_always", Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricAlways)), ("max-metric-on-switchover", ("max_metric_on_switchover", Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnSwitchover))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('max_metric_no_abr_off', YLeaf(YType.empty, 'max-metric-no-abr-off')),
                            ])
                            self.max_metric_no_abr_off = None

                            self.max_metric_on_proc_restart = Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnProcRestart()
                            self.max_metric_on_proc_restart.parent = self
                            self._children_name_map["max_metric_on_proc_restart"] = "max-metric-on-proc-restart"
                            self._children_yang_names.add("max-metric-on-proc-restart")

                            self.max_metric_on_startup = Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnStartup()
                            self.max_metric_on_startup.parent = self
                            self._children_name_map["max_metric_on_startup"] = "max-metric-on-startup"
                            self._children_yang_names.add("max-metric-on-startup")

                            self.max_metric_on_proc_migration = Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnProcMigration()
                            self.max_metric_on_proc_migration.parent = self
                            self._children_name_map["max_metric_on_proc_migration"] = "max-metric-on-proc-migration"
                            self._children_yang_names.add("max-metric-on-proc-migration")

                            self.max_metric_always = Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricAlways()
                            self.max_metric_always.parent = self
                            self._children_name_map["max_metric_always"] = "max-metric-always"
                            self._children_yang_names.add("max-metric-always")

                            self.max_metric_on_switchover = Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnSwitchover()
                            self.max_metric_on_switchover.parent = self
                            self._children_name_map["max_metric_on_switchover"] = "max-metric-on-switchover"
                            self._children_yang_names.add("max-metric-on-switchover")
                            self._segment_path = lambda: "max-metric"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.MaxMetric, ['max_metric_no_abr_off'], name, value)


                        class MaxMetricOnProcRestart(Entity):
                            """
                            Set maximum metric on\-proc\-restart
                            configuration
                            
                            .. attribute:: wait_for_bgp
                            
                            	Let BGP decide when to originate router\-LSA with normal metric
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: startup_max
                            
                            	Time in seconds to originate router\-LSA with max\-metric
                            	**type**\: int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            .. attribute:: include_stub
                            
                            	Set maximum metric for stub links in router\-LSAs
                            	**type**\: bool
                            
                            .. attribute:: summary_lsa
                            
                            	Override summary\-lsa metric with max\-metric value
                            	**type**\: bool
                            
                            .. attribute:: summary_lsa_maximum_metric
                            
                            	Overriding metric in summary\-LSAs (default 16711680)
                            	**type**\: int
                            
                            	**range:** 1..16777215
                            
                            .. attribute:: external_lsa
                            
                            	Override external\-lsa metric with max\-metric value
                            	**type**\: bool
                            
                            .. attribute:: external_lsa_maximum_metric
                            
                            	Overriding metric in external\-LSAs (default 16711680)
                            	**type**\: int
                            
                            	**range:** 1..16777215
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnProcRestart, self).__init__()

                                self.yang_name = "max-metric-on-proc-restart"
                                self.yang_parent_name = "max-metric"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('wait_for_bgp', YLeaf(YType.boolean, 'wait-for-bgp')),
                                    ('startup_max', YLeaf(YType.uint32, 'startup-max')),
                                    ('include_stub', YLeaf(YType.boolean, 'include-stub')),
                                    ('summary_lsa', YLeaf(YType.boolean, 'summary-lsa')),
                                    ('summary_lsa_maximum_metric', YLeaf(YType.uint32, 'summary-lsa-maximum-metric')),
                                    ('external_lsa', YLeaf(YType.boolean, 'external-lsa')),
                                    ('external_lsa_maximum_metric', YLeaf(YType.uint32, 'external-lsa-maximum-metric')),
                                ])
                                self.wait_for_bgp = None
                                self.startup_max = None
                                self.include_stub = None
                                self.summary_lsa = None
                                self.summary_lsa_maximum_metric = None
                                self.external_lsa = None
                                self.external_lsa_maximum_metric = None
                                self._segment_path = lambda: "max-metric-on-proc-restart"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnProcRestart, ['wait_for_bgp', 'startup_max', 'include_stub', 'summary_lsa', 'summary_lsa_maximum_metric', 'external_lsa', 'external_lsa_maximum_metric'], name, value)


                        class MaxMetricOnStartup(Entity):
                            """
                            Set maximum metric on\-startup configuration
                            
                            .. attribute:: wait_for_bgp
                            
                            	Let BGP decide when to originate router\-LSA with normal metric
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: startup_max
                            
                            	Time in seconds to originate router\-LSA with max\-metric
                            	**type**\: int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            .. attribute:: include_stub
                            
                            	Set maximum metric for stub links in router\-LSAs
                            	**type**\: bool
                            
                            .. attribute:: summary_lsa
                            
                            	Override summary\-lsa metric with max\-metric value
                            	**type**\: bool
                            
                            .. attribute:: summary_lsa_maximum_metric
                            
                            	Overriding metric in summary\-LSAs (default 16711680)
                            	**type**\: int
                            
                            	**range:** 1..16777215
                            
                            .. attribute:: external_lsa
                            
                            	Override external\-lsa metric with max\-metric value
                            	**type**\: bool
                            
                            .. attribute:: external_lsa_maximum_metric
                            
                            	Overriding metric in external\-LSAs (default 16711680)
                            	**type**\: int
                            
                            	**range:** 1..16777215
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnStartup, self).__init__()

                                self.yang_name = "max-metric-on-startup"
                                self.yang_parent_name = "max-metric"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('wait_for_bgp', YLeaf(YType.boolean, 'wait-for-bgp')),
                                    ('startup_max', YLeaf(YType.uint32, 'startup-max')),
                                    ('include_stub', YLeaf(YType.boolean, 'include-stub')),
                                    ('summary_lsa', YLeaf(YType.boolean, 'summary-lsa')),
                                    ('summary_lsa_maximum_metric', YLeaf(YType.uint32, 'summary-lsa-maximum-metric')),
                                    ('external_lsa', YLeaf(YType.boolean, 'external-lsa')),
                                    ('external_lsa_maximum_metric', YLeaf(YType.uint32, 'external-lsa-maximum-metric')),
                                ])
                                self.wait_for_bgp = None
                                self.startup_max = None
                                self.include_stub = None
                                self.summary_lsa = None
                                self.summary_lsa_maximum_metric = None
                                self.external_lsa = None
                                self.external_lsa_maximum_metric = None
                                self._segment_path = lambda: "max-metric-on-startup"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnStartup, ['wait_for_bgp', 'startup_max', 'include_stub', 'summary_lsa', 'summary_lsa_maximum_metric', 'external_lsa', 'external_lsa_maximum_metric'], name, value)


                        class MaxMetricOnProcMigration(Entity):
                            """
                            Set maximum metric on\-proc\-migration
                            configuration
                            
                            .. attribute:: wait_for_bgp
                            
                            	Let BGP decide when to originate router\-LSA with normal metric
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: startup_max
                            
                            	Time in seconds to originate router\-LSA with max\-metric
                            	**type**\: int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            .. attribute:: include_stub
                            
                            	Set maximum metric for stub links in router\-LSAs
                            	**type**\: bool
                            
                            .. attribute:: summary_lsa
                            
                            	Override summary\-lsa metric with max\-metric value
                            	**type**\: bool
                            
                            .. attribute:: summary_lsa_maximum_metric
                            
                            	Overriding metric in summary\-LSAs (default 16711680)
                            	**type**\: int
                            
                            	**range:** 1..16777215
                            
                            .. attribute:: external_lsa
                            
                            	Override external\-lsa metric with max\-metric value
                            	**type**\: bool
                            
                            .. attribute:: external_lsa_maximum_metric
                            
                            	Overriding metric in external\-LSAs (default 16711680)
                            	**type**\: int
                            
                            	**range:** 1..16777215
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnProcMigration, self).__init__()

                                self.yang_name = "max-metric-on-proc-migration"
                                self.yang_parent_name = "max-metric"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('wait_for_bgp', YLeaf(YType.boolean, 'wait-for-bgp')),
                                    ('startup_max', YLeaf(YType.uint32, 'startup-max')),
                                    ('include_stub', YLeaf(YType.boolean, 'include-stub')),
                                    ('summary_lsa', YLeaf(YType.boolean, 'summary-lsa')),
                                    ('summary_lsa_maximum_metric', YLeaf(YType.uint32, 'summary-lsa-maximum-metric')),
                                    ('external_lsa', YLeaf(YType.boolean, 'external-lsa')),
                                    ('external_lsa_maximum_metric', YLeaf(YType.uint32, 'external-lsa-maximum-metric')),
                                ])
                                self.wait_for_bgp = None
                                self.startup_max = None
                                self.include_stub = None
                                self.summary_lsa = None
                                self.summary_lsa_maximum_metric = None
                                self.external_lsa = None
                                self.external_lsa_maximum_metric = None
                                self._segment_path = lambda: "max-metric-on-proc-migration"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnProcMigration, ['wait_for_bgp', 'startup_max', 'include_stub', 'summary_lsa', 'summary_lsa_maximum_metric', 'external_lsa', 'external_lsa_maximum_metric'], name, value)


                        class MaxMetricAlways(Entity):
                            """
                            Set maximum metric always configuration
                            
                            .. attribute:: include_stub
                            
                            	Set maximum metric for stub links in router\-LSAs
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: summary_lsa
                            
                            	Override summary\-lsa metric with max\-metric value
                            	**type**\: bool
                            
                            .. attribute:: summary_lsa_maximum_metric
                            
                            	Overriding metric in summary\-LSAs (default 16711680)
                            	**type**\: int
                            
                            	**range:** 1..16777215
                            
                            .. attribute:: external_lsa
                            
                            	Override external\-lsa metric with max\-metric value
                            	**type**\: bool
                            
                            .. attribute:: external_lsa_maximum_metric
                            
                            	Overriding metric in external\-LSAs (default 16711680)
                            	**type**\: int
                            
                            	**range:** 1..16777215
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricAlways, self).__init__()

                                self.yang_name = "max-metric-always"
                                self.yang_parent_name = "max-metric"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('include_stub', YLeaf(YType.boolean, 'include-stub')),
                                    ('summary_lsa', YLeaf(YType.boolean, 'summary-lsa')),
                                    ('summary_lsa_maximum_metric', YLeaf(YType.uint32, 'summary-lsa-maximum-metric')),
                                    ('external_lsa', YLeaf(YType.boolean, 'external-lsa')),
                                    ('external_lsa_maximum_metric', YLeaf(YType.uint32, 'external-lsa-maximum-metric')),
                                ])
                                self.include_stub = None
                                self.summary_lsa = None
                                self.summary_lsa_maximum_metric = None
                                self.external_lsa = None
                                self.external_lsa_maximum_metric = None
                                self._segment_path = lambda: "max-metric-always"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricAlways, ['include_stub', 'summary_lsa', 'summary_lsa_maximum_metric', 'external_lsa', 'external_lsa_maximum_metric'], name, value)


                        class MaxMetricOnSwitchover(Entity):
                            """
                            Set maximum metric on\-switchover configuration
                            
                            .. attribute:: wait_for_bgp
                            
                            	Let BGP decide when to originate router\-LSA with normal metric
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: startup_max
                            
                            	Time in seconds to originate router\-LSA with max\-metric
                            	**type**\: int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            .. attribute:: include_stub
                            
                            	Set maximum metric for stub links in router\-LSAs
                            	**type**\: bool
                            
                            .. attribute:: summary_lsa
                            
                            	Override summary\-lsa metric with max\-metric value
                            	**type**\: bool
                            
                            .. attribute:: summary_lsa_maximum_metric
                            
                            	Overriding metric in summary\-LSAs (default 16711680)
                            	**type**\: int
                            
                            	**range:** 1..16777215
                            
                            .. attribute:: external_lsa
                            
                            	Override external\-lsa metric with max\-metric value
                            	**type**\: bool
                            
                            .. attribute:: external_lsa_maximum_metric
                            
                            	Overriding metric in external\-LSAs (default 16711680)
                            	**type**\: int
                            
                            	**range:** 1..16777215
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnSwitchover, self).__init__()

                                self.yang_name = "max-metric-on-switchover"
                                self.yang_parent_name = "max-metric"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('wait_for_bgp', YLeaf(YType.boolean, 'wait-for-bgp')),
                                    ('startup_max', YLeaf(YType.uint32, 'startup-max')),
                                    ('include_stub', YLeaf(YType.boolean, 'include-stub')),
                                    ('summary_lsa', YLeaf(YType.boolean, 'summary-lsa')),
                                    ('summary_lsa_maximum_metric', YLeaf(YType.uint32, 'summary-lsa-maximum-metric')),
                                    ('external_lsa', YLeaf(YType.boolean, 'external-lsa')),
                                    ('external_lsa_maximum_metric', YLeaf(YType.uint32, 'external-lsa-maximum-metric')),
                                ])
                                self.wait_for_bgp = None
                                self.startup_max = None
                                self.include_stub = None
                                self.summary_lsa = None
                                self.summary_lsa_maximum_metric = None
                                self.external_lsa = None
                                self.external_lsa_maximum_metric = None
                                self._segment_path = lambda: "max-metric-on-switchover"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnSwitchover, ['wait_for_bgp', 'startup_max', 'include_stub', 'summary_lsa', 'summary_lsa_maximum_metric', 'external_lsa', 'external_lsa_maximum_metric'], name, value)


                    class Nsf(Entity):
                        """
                        Non Stop Forwarding configuration
                        
                        .. attribute:: lifetime
                        
                        	Maximum route lifetime following restart in seconds
                        	**type**\: int
                        
                        	**range:** 90..1800
                        
                        	**units**\: second
                        
                        	**default value**\: 90
                        
                        .. attribute:: ietf
                        
                        	Enable IETF Non Stop Forwarding
                        	**type**\:  :py:class:`OspfIetfNsf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfIetfNsf>`
                        
                        .. attribute:: ietf_support_role
                        
                        	Disable helper support role for IETF Non Stop Forwarding
                        	**type**\:  :py:class:`OspfIetfNsfSupport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfIetfNsfSupport>`
                        
                        .. attribute:: cisco
                        
                        	Enable Cisco Non Stop Forwarding
                        	**type**\:  :py:class:`OspfCiscoNsf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfCiscoNsf>`
                        
                        .. attribute:: interval
                        
                        	Minimum interval between Non Stop Forwarding restarts in seconds
                        	**type**\: int
                        
                        	**range:** 90..3600
                        
                        	**units**\: second
                        
                        	**default value**\: 90
                        
                        .. attribute:: flush_delay_time
                        
                        	Maximum time allowed for external route learning (seconds)
                        	**type**\: int
                        
                        	**range:** 1..3600
                        
                        	**units**\: second
                        
                        	**default value**\: 60
                        
                        .. attribute:: ietf_strict_lsa_checking
                        
                        	Enable Strict LSA checking of IETF NSF
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.Vrfs.Vrf.Nsf, self).__init__()

                            self.yang_name = "nsf"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('lifetime', YLeaf(YType.uint32, 'lifetime')),
                                ('ietf', YLeaf(YType.enumeration, 'ietf')),
                                ('ietf_support_role', YLeaf(YType.enumeration, 'ietf-support-role')),
                                ('cisco', YLeaf(YType.enumeration, 'cisco')),
                                ('interval', YLeaf(YType.uint32, 'interval')),
                                ('flush_delay_time', YLeaf(YType.uint32, 'flush-delay-time')),
                                ('ietf_strict_lsa_checking', YLeaf(YType.empty, 'ietf-strict-lsa-checking')),
                            ])
                            self.lifetime = None
                            self.ietf = None
                            self.ietf_support_role = None
                            self.cisco = None
                            self.interval = None
                            self.flush_delay_time = None
                            self.ietf_strict_lsa_checking = None
                            self._segment_path = lambda: "nsf"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.Nsf, ['lifetime', 'ietf', 'ietf_support_role', 'cisco', 'interval', 'flush_delay_time', 'ietf_strict_lsa_checking'], name, value)


                    class ProcessScope(Entity):
                        """
                        Process scope configuration
                        
                        .. attribute:: srgb
                        
                        	Segment Routing Global Block configuration
                        	**type**\:  :py:class:`Srgb <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Srgb>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: fast_reroute
                        
                        	Fast\-reroute configuration
                        	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute>`
                        
                        .. attribute:: distribute_list
                        
                        	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                        	**type**\:  :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.DistributeList>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: cost
                        
                        	Interface cost
                        	**type**\: int
                        
                        	**range:** 1..65535
                        
                        .. attribute:: bfd
                        
                        	BFD configuration
                        	**type**\:  :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Bfd>`
                        
                        .. attribute:: external_out
                        
                        	Enable/Disable an OSPF area to advertise intra\-area prefixes out of this area as external
                        	**type**\: bool
                        
                        .. attribute:: prefix_suppression_primary
                        
                        	Enable/Disable prefix suppression for primary addresses
                        	**type**\: bool
                        
                        	**default value**\: false
                        
                        .. attribute:: mtu_ignore
                        
                        	Enable/Disable ignoring of MTU in DBD packets
                        	**type**\: bool
                        
                        	**default value**\: false
                        
                        .. attribute:: authentication
                        
                        	Authentication
                        	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication>`
                        
                        .. attribute:: ldp_sync_igp_shortcuts
                        
                        	Enable/Disable MPLS LDP sync for igp\-shortcuts
                        	**type**\: bool
                        
                        .. attribute:: ldp_auto_config
                        
                        	Enable MPLS LDP Auto Config
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: security
                        
                        	Container class for security related configuration parameters
                        	**type**\:  :py:class:`Security <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Security>`
                        
                        .. attribute:: summary_in
                        
                        	Enable/Disable an OSPF area to advertise external prefixes into this area as summary
                        	**type**\: bool
                        
                        .. attribute:: network_type
                        
                        	Type of attached network
                        	**type**\:  :py:class:`OspfNetwork <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfNetwork>`
                        
                        .. attribute:: hello_interval
                        
                        	Interval between HELLO packets in seconds
                        	**type**\: int
                        
                        	**range:** 1..65535
                        
                        	**units**\: second
                        
                        .. attribute:: loopback_stub_network
                        
                        	Enable/Disable advertising loopback as a stub network
                        	**type**\: bool
                        
                        	**default value**\: false
                        
                        .. attribute:: prefix_suppression_secondary
                        
                        	Enable/Disable prefix suppression for secondary addresses
                        	**type**\: bool
                        
                        	**default value**\: false
                        
                        .. attribute:: demand_circuit
                        
                        	Enable/Disable OSPF demand circuit
                        	**type**\: bool
                        
                        	**default value**\: false
                        
                        .. attribute:: segment_routing
                        
                        	segment\-routing configuration Applicable only in Default VRF
                        	**type**\:  :py:class:`OspfSegmentRouting <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRouting>`
                        
                        .. attribute:: passive
                        
                        	When enabled, prevent sending HELLO packets over link
                        	**type**\: bool
                        
                        	**default value**\: false
                        
                        .. attribute:: transmit_delay
                        
                        	Number of seconds to delay transmission of LSAs
                        	**type**\: int
                        
                        	**range:** 1..65535
                        
                        	**units**\: second
                        
                        	**default value**\: 1
                        
                        .. attribute:: packet_size
                        
                        	Customize size of OSPF packets upto MTU
                        	**type**\: int
                        
                        	**range:** 576..10000
                        
                        .. attribute:: ldp_sync
                        
                        	Enable/Disable MPLS LDP sync
                        	**type**\: bool
                        
                        .. attribute:: database_filter
                        
                        	Filter OSPF LSA during synchronization and flooding
                        	**type**\: bool
                        
                        	**default value**\: false
                        
                        .. attribute:: dead_interval_minimal
                        
                        	Interval after which a neighbor is declared dead
                        	**type**\:  :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.DeadIntervalMinimal>`
                        
                        .. attribute:: link_down_fast_detect
                        
                        	Enable/Disable registration for early interface down notifications
                        	**type**\: bool
                        
                        	**default value**\: false
                        
                        .. attribute:: segment_routing_forwarding
                        
                        	segment\-routing forwarding configuration Applicableonly in Default VRF
                        	**type**\:  :py:class:`OspfSegmentRoutingForwarding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRoutingForwarding>`
                        
                        .. attribute:: retransmit_interval
                        
                        	Time in seconds between retransmitting lost link state advertisements
                        	**type**\: int
                        
                        	**range:** 1..65535
                        
                        	**units**\: second
                        
                        	**default value**\: 5
                        
                        .. attribute:: priority
                        
                        	Router priority for DR and BDR election
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        	**default value**\: 1
                        
                        .. attribute:: flood_reduction
                        
                        	Enable/Disable OSPF flood reduction
                        	**type**\: bool
                        
                        	**default value**\: false
                        
                        .. attribute:: cost_fallback
                        
                        	Interface fallback cost
                        	**type**\:  :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.CostFallback>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope, self).__init__()

                            self.yang_name = "process-scope"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("srgb", ("srgb", Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Srgb)), ("fast-reroute", ("fast_reroute", Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute)), ("distribute-list", ("distribute_list", Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.DistributeList)), ("bfd", ("bfd", Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Bfd)), ("authentication", ("authentication", Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication)), ("security", ("security", Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Security)), ("dead-interval-minimal", ("dead_interval_minimal", Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.DeadIntervalMinimal)), ("cost-fallback", ("cost_fallback", Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.CostFallback))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('cost', YLeaf(YType.uint32, 'cost')),
                                ('external_out', YLeaf(YType.boolean, 'external-out')),
                                ('prefix_suppression_primary', YLeaf(YType.boolean, 'prefix-suppression-primary')),
                                ('mtu_ignore', YLeaf(YType.boolean, 'mtu-ignore')),
                                ('ldp_sync_igp_shortcuts', YLeaf(YType.boolean, 'ldp-sync-igp-shortcuts')),
                                ('ldp_auto_config', YLeaf(YType.empty, 'ldp-auto-config')),
                                ('summary_in', YLeaf(YType.boolean, 'summary-in')),
                                ('network_type', YLeaf(YType.enumeration, 'network-type')),
                                ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                                ('loopback_stub_network', YLeaf(YType.boolean, 'loopback-stub-network')),
                                ('prefix_suppression_secondary', YLeaf(YType.boolean, 'prefix-suppression-secondary')),
                                ('demand_circuit', YLeaf(YType.boolean, 'demand-circuit')),
                                ('segment_routing', YLeaf(YType.enumeration, 'segment-routing')),
                                ('passive', YLeaf(YType.boolean, 'passive')),
                                ('transmit_delay', YLeaf(YType.uint32, 'transmit-delay')),
                                ('packet_size', YLeaf(YType.uint32, 'packet-size')),
                                ('ldp_sync', YLeaf(YType.boolean, 'ldp-sync')),
                                ('database_filter', YLeaf(YType.boolean, 'database-filter')),
                                ('link_down_fast_detect', YLeaf(YType.boolean, 'link-down-fast-detect')),
                                ('segment_routing_forwarding', YLeaf(YType.enumeration, 'segment-routing-forwarding')),
                                ('retransmit_interval', YLeaf(YType.uint32, 'retransmit-interval')),
                                ('priority', YLeaf(YType.uint32, 'priority')),
                                ('flood_reduction', YLeaf(YType.boolean, 'flood-reduction')),
                            ])
                            self.cost = None
                            self.external_out = None
                            self.prefix_suppression_primary = None
                            self.mtu_ignore = None
                            self.ldp_sync_igp_shortcuts = None
                            self.ldp_auto_config = None
                            self.summary_in = None
                            self.network_type = None
                            self.hello_interval = None
                            self.loopback_stub_network = None
                            self.prefix_suppression_secondary = None
                            self.demand_circuit = None
                            self.segment_routing = None
                            self.passive = None
                            self.transmit_delay = None
                            self.packet_size = None
                            self.ldp_sync = None
                            self.database_filter = None
                            self.link_down_fast_detect = None
                            self.segment_routing_forwarding = None
                            self.retransmit_interval = None
                            self.priority = None
                            self.flood_reduction = None

                            self.srgb = None
                            self._children_name_map["srgb"] = "srgb"
                            self._children_yang_names.add("srgb")

                            self.fast_reroute = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute()
                            self.fast_reroute.parent = self
                            self._children_name_map["fast_reroute"] = "fast-reroute"
                            self._children_yang_names.add("fast-reroute")

                            self.distribute_list = None
                            self._children_name_map["distribute_list"] = "distribute-list"
                            self._children_yang_names.add("distribute-list")

                            self.bfd = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Bfd()
                            self.bfd.parent = self
                            self._children_name_map["bfd"] = "bfd"
                            self._children_yang_names.add("bfd")

                            self.authentication = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication()
                            self.authentication.parent = self
                            self._children_name_map["authentication"] = "authentication"
                            self._children_yang_names.add("authentication")

                            self.security = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Security()
                            self.security.parent = self
                            self._children_name_map["security"] = "security"
                            self._children_yang_names.add("security")

                            self.dead_interval_minimal = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.DeadIntervalMinimal()
                            self.dead_interval_minimal.parent = self
                            self._children_name_map["dead_interval_minimal"] = "dead-interval-minimal"
                            self._children_yang_names.add("dead-interval-minimal")

                            self.cost_fallback = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.CostFallback()
                            self.cost_fallback.parent = self
                            self._children_name_map["cost_fallback"] = "cost-fallback"
                            self._children_yang_names.add("cost-fallback")
                            self._segment_path = lambda: "process-scope"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope, ['cost', 'external_out', 'prefix_suppression_primary', 'mtu_ignore', 'ldp_sync_igp_shortcuts', 'ldp_auto_config', 'summary_in', 'network_type', 'hello_interval', 'loopback_stub_network', 'prefix_suppression_secondary', 'demand_circuit', 'segment_routing', 'passive', 'transmit_delay', 'packet_size', 'ldp_sync', 'database_filter', 'link_down_fast_detect', 'segment_routing_forwarding', 'retransmit_interval', 'priority', 'flood_reduction'], name, value)


                        class Srgb(Entity):
                            """
                            Segment Routing Global Block configuration
                            
                            .. attribute:: lower_bound
                            
                            	The lower bound of the SRGB
                            	**type**\: int
                            
                            	**range:** 16000..1048575
                            
                            	**mandatory**\: True
                            
                            .. attribute:: upper_bound
                            
                            	The upper bound of the SRGB
                            	**type**\: int
                            
                            	**range:** 16000..1048575
                            
                            	**mandatory**\: True
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Srgb, self).__init__()

                                self.yang_name = "srgb"
                                self.yang_parent_name = "process-scope"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self.is_presence_container = True
                                self._leafs = OrderedDict([
                                    ('lower_bound', YLeaf(YType.uint32, 'lower-bound')),
                                    ('upper_bound', YLeaf(YType.uint32, 'upper-bound')),
                                ])
                                self.lower_bound = None
                                self.upper_bound = None
                                self._segment_path = lambda: "srgb"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Srgb, ['lower_bound', 'upper_bound'], name, value)


                        class FastReroute(Entity):
                            """
                            Fast\-reroute configuration
                            
                            .. attribute:: per_link
                            
                            	Fast\-reroute per\-link configuration
                            	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink>`
                            
                            .. attribute:: per_prefix
                            
                            	Fast\-reroute per\-prefix configuration
                            	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix>`
                            
                            .. attribute:: fast_reroute_enable
                            
                            	Enable/Disable Fast\-reroute per\-link or per\-prefix
                            	**type**\:  :py:class:`OspfProcFastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfProcFastReroute>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute, self).__init__()

                                self.yang_name = "fast-reroute"
                                self.yang_parent_name = "process-scope"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("per-link", ("per_link", Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('fast_reroute_enable', YLeaf(YType.enumeration, 'fast-reroute-enable')),
                                ])
                                self.fast_reroute_enable = None

                                self.per_link = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink()
                                self.per_link.parent = self
                                self._children_name_map["per_link"] = "per-link"
                                self._children_yang_names.add("per-link")

                                self.per_prefix = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix()
                                self.per_prefix.parent = self
                                self._children_name_map["per_prefix"] = "per-prefix"
                                self._children_yang_names.add("per-prefix")
                                self._segment_path = lambda: "fast-reroute"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute, ['fast_reroute_enable'], name, value)


                            class PerLink(Entity):
                                """
                                Fast\-reroute per\-link configuration
                                
                                .. attribute:: candidate_interfaces
                                
                                	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces>`
                                
                                .. attribute:: fast_reroute_use_candidate_only
                                
                                	Use only interfaces on the candidate list as a backup path
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: exclude_interfaces
                                
                                	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink, self).__init__()

                                    self.yang_name = "per-link"
                                    self.yang_parent_name = "fast-reroute"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                    ])
                                    self.fast_reroute_use_candidate_only = None

                                    self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces()
                                    self.candidate_interfaces.parent = self
                                    self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                    self._children_yang_names.add("candidate-interfaces")

                                    self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces()
                                    self.exclude_interfaces.parent = self
                                    self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                    self._children_yang_names.add("exclude-interfaces")
                                    self._segment_path = lambda: "per-link"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                class CandidateInterfaces(Entity):
                                    """
                                    Fast\-reroute per\-link/per\-prefix candidate
                                    interface configuration
                                    
                                    .. attribute:: candidate_interface
                                    
                                    	Candidate backup interface
                                    	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                        self.yang_name = "candidate-interfaces"
                                        self.yang_parent_name = "per-link"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface))])
                                        self._leafs = OrderedDict()

                                        self.candidate_interface = YList(self)
                                        self._segment_path = lambda: "candidate-interfaces"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                    class CandidateInterface(Entity):
                                        """
                                        Candidate backup interface
                                        
                                        .. attribute:: interface_name  (key)
                                        
                                        	Interface
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                            self.yang_name = "candidate-interface"
                                            self.yang_parent_name = "candidate-interfaces"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['interface_name']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('interface_name', YLeaf(YType.str, 'interface-name')),
                                            ])
                                            self.interface_name = None
                                            self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                class ExcludeInterfaces(Entity):
                                    """
                                    Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                    interface configuration
                                    
                                    .. attribute:: exclude_interface
                                    
                                    	Exclude an interface from becoming a backup or UCMP
                                    	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                        self.yang_name = "exclude-interfaces"
                                        self.yang_parent_name = "per-link"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface))])
                                        self._leafs = OrderedDict()

                                        self.exclude_interface = YList(self)
                                        self._segment_path = lambda: "exclude-interfaces"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                    class ExcludeInterface(Entity):
                                        """
                                        Exclude an interface from becoming a backup or
                                        UCMP
                                        
                                        .. attribute:: interface_name  (key)
                                        
                                        	Interface
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                            self.yang_name = "exclude-interface"
                                            self.yang_parent_name = "exclude-interfaces"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['interface_name']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('interface_name', YLeaf(YType.str, 'interface-name')),
                                            ])
                                            self.interface_name = None
                                            self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                            class PerPrefix(Entity):
                                """
                                Fast\-reroute per\-prefix configuration
                                
                                .. attribute:: remote_lfa
                                
                                	Remote LFA configuration
                                	**type**\:  :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.RemoteLfa>`
                                
                                .. attribute:: topology_independent_lfa
                                
                                	Topology Independet LFA configuration
                                	**type**\: bool
                                
                                .. attribute:: candidate_interfaces
                                
                                	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                
                                .. attribute:: fast_reroute_use_candidate_only
                                
                                	Use only interfaces on the candidate list as a backup path
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: exclude_interfaces
                                
                                	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix, self).__init__()

                                    self.yang_name = "per-prefix"
                                    self.yang_parent_name = "fast-reroute"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("remote-lfa", ("remote_lfa", Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.RemoteLfa)), ("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('topology_independent_lfa', YLeaf(YType.boolean, 'topology-independent-lfa')),
                                        ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                    ])
                                    self.topology_independent_lfa = None
                                    self.fast_reroute_use_candidate_only = None

                                    self.remote_lfa = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.RemoteLfa()
                                    self.remote_lfa.parent = self
                                    self._children_name_map["remote_lfa"] = "remote-lfa"
                                    self._children_yang_names.add("remote-lfa")

                                    self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces()
                                    self.candidate_interfaces.parent = self
                                    self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                    self._children_yang_names.add("candidate-interfaces")

                                    self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                    self.exclude_interfaces.parent = self
                                    self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                    self._children_yang_names.add("exclude-interfaces")
                                    self._segment_path = lambda: "per-prefix"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix, ['topology_independent_lfa', 'fast_reroute_use_candidate_only'], name, value)


                                class RemoteLfa(Entity):
                                    """
                                    Remote LFA configuration
                                    
                                    .. attribute:: tunnel
                                    
                                    	Enable/Disable remote LFA computation
                                    	**type**\:  :py:class:`OspfProcFrrRlfaTunnel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfProcFrrRlfaTunnel>`
                                    
                                    .. attribute:: maximum_cost
                                    
                                    	Maximum path cost to remote LFA
                                    	**type**\: int
                                    
                                    	**range:** 1..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.RemoteLfa, self).__init__()

                                        self.yang_name = "remote-lfa"
                                        self.yang_parent_name = "per-prefix"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('tunnel', YLeaf(YType.enumeration, 'tunnel')),
                                            ('maximum_cost', YLeaf(YType.uint32, 'maximum-cost')),
                                        ])
                                        self.tunnel = None
                                        self.maximum_cost = None
                                        self._segment_path = lambda: "remote-lfa"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.RemoteLfa, ['tunnel', 'maximum_cost'], name, value)


                                class CandidateInterfaces(Entity):
                                    """
                                    Fast\-reroute per\-link/per\-prefix candidate
                                    interface configuration
                                    
                                    .. attribute:: candidate_interface
                                    
                                    	Candidate backup interface
                                    	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                        self.yang_name = "candidate-interfaces"
                                        self.yang_parent_name = "per-prefix"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface))])
                                        self._leafs = OrderedDict()

                                        self.candidate_interface = YList(self)
                                        self._segment_path = lambda: "candidate-interfaces"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                    class CandidateInterface(Entity):
                                        """
                                        Candidate backup interface
                                        
                                        .. attribute:: interface_name  (key)
                                        
                                        	Interface
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                            self.yang_name = "candidate-interface"
                                            self.yang_parent_name = "candidate-interfaces"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['interface_name']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('interface_name', YLeaf(YType.str, 'interface-name')),
                                            ])
                                            self.interface_name = None
                                            self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                class ExcludeInterfaces(Entity):
                                    """
                                    Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                    interface configuration
                                    
                                    .. attribute:: exclude_interface
                                    
                                    	Exclude an interface from becoming a backup or UCMP
                                    	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                        self.yang_name = "exclude-interfaces"
                                        self.yang_parent_name = "per-prefix"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface))])
                                        self._leafs = OrderedDict()

                                        self.exclude_interface = YList(self)
                                        self._segment_path = lambda: "exclude-interfaces"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                    class ExcludeInterface(Entity):
                                        """
                                        Exclude an interface from becoming a backup or
                                        UCMP
                                        
                                        .. attribute:: interface_name  (key)
                                        
                                        	Interface
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                            self.yang_name = "exclude-interface"
                                            self.yang_parent_name = "exclude-interfaces"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['interface_name']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('interface_name', YLeaf(YType.str, 'interface-name')),
                                            ])
                                            self.interface_name = None
                                            self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                        class DistributeList(Entity):
                            """
                            Filter networks intalled to RIB (disable as ACL
                            name means filtering is disabled)
                            
                            .. attribute:: access_list_name
                            
                            	Access Control List name
                            	**type**\: str
                            
                            .. attribute:: route_policy_name
                            
                            	Route Policy name
                            	**type**\: str
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.DistributeList, self).__init__()

                                self.yang_name = "distribute-list"
                                self.yang_parent_name = "process-scope"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self.is_presence_container = True
                                self._leafs = OrderedDict([
                                    ('access_list_name', YLeaf(YType.str, 'access-list-name')),
                                    ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
                                ])
                                self.access_list_name = None
                                self.route_policy_name = None
                                self._segment_path = lambda: "distribute-list"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.DistributeList, ['access_list_name', 'route_policy_name'], name, value)


                        class Bfd(Entity):
                            """
                            BFD configuration
                            
                            .. attribute:: interval
                            
                            	Hello interval for BFD sessions created by OSPF
                            	**type**\: int
                            
                            	**range:** 3..30000
                            
                            	**units**\: millisecond
                            
                            .. attribute:: detection_multiplier
                            
                            	Detection multiplier for BFD sessions created by OSPF
                            	**type**\: int
                            
                            	**range:** 2..50
                            
                            .. attribute:: fast_detect_mode
                            
                            	 use of Bidirectional Forwarding Detection
                            	**type**\:  :py:class:`BfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.BfdEnableMode>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Bfd, self).__init__()

                                self.yang_name = "bfd"
                                self.yang_parent_name = "process-scope"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('interval', YLeaf(YType.uint32, 'interval')),
                                    ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                                    ('fast_detect_mode', YLeaf(YType.enumeration, 'fast-detect-mode')),
                                ])
                                self.interval = None
                                self.detection_multiplier = None
                                self.fast_detect_mode = None
                                self._segment_path = lambda: "bfd"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Bfd, ['interval', 'detection_multiplier', 'fast_detect_mode'], name, value)


                        class Authentication(Entity):
                            """
                            Authentication
                            
                            .. attribute:: type
                            
                            	Authentication type
                            	**type**\:  :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication.Type>`
                            
                            .. attribute:: message_digest_keies
                            
                            	Message digest authentication password (key) configurations, first 16 chars used
                            	**type**\:  :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication.MessageDigestKeies>`
                            
                            .. attribute:: key
                            
                            	Authentication key configuration
                            	**type**\: str
                            
                            	**pattern:** (!.+)\|([^!].+)
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication, self).__init__()

                                self.yang_name = "authentication"
                                self.yang_parent_name = "process-scope"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("type", ("type", Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication.Type)), ("message-digest-keies", ("message_digest_keies", Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication.MessageDigestKeies))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('key', YLeaf(YType.str, 'key')),
                                ])
                                self.key = None

                                self.type = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication.Type()
                                self.type.parent = self
                                self._children_name_map["type"] = "type"
                                self._children_yang_names.add("type")

                                self.message_digest_keies = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication.MessageDigestKeies()
                                self.message_digest_keies.parent = self
                                self._children_name_map["message_digest_keies"] = "message-digest-keies"
                                self._children_yang_names.add("message-digest-keies")
                                self._segment_path = lambda: "authentication"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication, ['key'], name, value)


                            class Type(Entity):
                                """
                                Authentication type
                                
                                .. attribute:: authen_type
                                
                                	Authentication type code 
                                	**type**\:  :py:class:`OspfAuthentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthentication>`
                                
                                .. attribute:: keychain_authen_type
                                
                                	Keychain authentication type
                                	**type**\:  :py:class:`OspfKeychainAuth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuth>`
                                
                                .. attribute:: keychain_name
                                
                                	Keychain name
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication.Type, self).__init__()

                                    self.yang_name = "type"
                                    self.yang_parent_name = "authentication"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('authen_type', YLeaf(YType.enumeration, 'authen-type')),
                                        ('keychain_authen_type', YLeaf(YType.enumeration, 'keychain-authen-type')),
                                        ('keychain_name', YLeaf(YType.str, 'keychain-name')),
                                    ])
                                    self.authen_type = None
                                    self.keychain_authen_type = None
                                    self.keychain_name = None
                                    self._segment_path = lambda: "type"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication.Type, ['authen_type', 'keychain_authen_type', 'keychain_name'], name, value)


                            class MessageDigestKeies(Entity):
                                """
                                Message digest authentication password (key)
                                configurations, first 16 chars used
                                
                                .. attribute:: message_digest_key
                                
                                	Message digest authentication password (key) configuration
                                	**type**\: list of  		 :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication.MessageDigestKeies, self).__init__()

                                    self.yang_name = "message-digest-keies"
                                    self.yang_parent_name = "authentication"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([("message-digest-key", ("message_digest_key", Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication.MessageDigestKeies.MessageDigestKey))])
                                    self._leafs = OrderedDict()

                                    self.message_digest_key = YList(self)
                                    self._segment_path = lambda: "message-digest-keies"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication.MessageDigestKeies, [], name, value)


                                class MessageDigestKey(Entity):
                                    """
                                    Message digest authentication password (key)
                                    configuration
                                    
                                    .. attribute:: key_id  (key)
                                    
                                    	Key ID
                                    	**type**\: int
                                    
                                    	**range:** 1..255
                                    
                                    .. attribute:: password
                                    
                                    	Password
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    	**mandatory**\: True
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication.MessageDigestKeies.MessageDigestKey, self).__init__()

                                        self.yang_name = "message-digest-key"
                                        self.yang_parent_name = "message-digest-keies"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['key_id']
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('key_id', YLeaf(YType.uint32, 'key-id')),
                                            ('password', YLeaf(YType.str, 'password')),
                                        ])
                                        self.key_id = None
                                        self.password = None
                                        self._segment_path = lambda: "message-digest-key" + "[key-id='" + str(self.key_id) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication.MessageDigestKeies.MessageDigestKey, ['key_id', 'password'], name, value)


                        class Security(Entity):
                            """
                            Container class for security related
                            configuration parameters
                            
                            .. attribute:: ttl
                            
                            	Enabling turns on TTL security
                            	**type**\:  :py:class:`Ttl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Security.Ttl>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Security, self).__init__()

                                self.yang_name = "security"
                                self.yang_parent_name = "process-scope"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("ttl", ("ttl", Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Security.Ttl))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict()

                                self.ttl = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Security.Ttl()
                                self.ttl.parent = self
                                self._children_name_map["ttl"] = "ttl"
                                self._children_yang_names.add("ttl")
                                self._segment_path = lambda: "security"


                            class Ttl(Entity):
                                """
                                Enabling turns on TTL security
                                
                                .. attribute:: enable
                                
                                	Enable TTL security
                                	**type**\: bool
                                
                                .. attribute:: hop_count
                                
                                	Hop count
                                	**type**\: int
                                
                                	**range:** 1..254
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Security.Ttl, self).__init__()

                                    self.yang_name = "ttl"
                                    self.yang_parent_name = "security"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('enable', YLeaf(YType.boolean, 'enable')),
                                        ('hop_count', YLeaf(YType.uint32, 'hop-count')),
                                    ])
                                    self.enable = None
                                    self.hop_count = None
                                    self._segment_path = lambda: "ttl"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Security.Ttl, ['enable', 'hop_count'], name, value)


                        class DeadIntervalMinimal(Entity):
                            """
                            Interval after which a neighbor is declared dead
                            
                            .. attribute:: interval
                            
                            	Interval size in seconds after which a neighbor is declared dead
                            	**type**\: int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            .. attribute:: multiplier
                            
                            	Number of Hellos in one second
                            	**type**\: int
                            
                            	**range:** 3..20
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.DeadIntervalMinimal, self).__init__()

                                self.yang_name = "dead-interval-minimal"
                                self.yang_parent_name = "process-scope"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('interval', YLeaf(YType.uint32, 'interval')),
                                    ('multiplier', YLeaf(YType.uint32, 'multiplier')),
                                ])
                                self.interval = None
                                self.multiplier = None
                                self._segment_path = lambda: "dead-interval-minimal"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.DeadIntervalMinimal, ['interval', 'multiplier'], name, value)


                        class CostFallback(Entity):
                            """
                            Interface fallback cost
                            
                            .. attribute:: cost
                            
                            	Fallback cost of link
                            	**type**\: int
                            
                            	**range:** 1..65535
                            
                            .. attribute:: threshold
                            
                            	Bandwidth threshold
                            	**type**\: int
                            
                            	**range:** 1..4294967
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.CostFallback, self).__init__()

                                self.yang_name = "cost-fallback"
                                self.yang_parent_name = "process-scope"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('cost', YLeaf(YType.uint32, 'cost')),
                                    ('threshold', YLeaf(YType.uint32, 'threshold')),
                                ])
                                self.cost = None
                                self.threshold = None
                                self._segment_path = lambda: "cost-fallback"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.CostFallback, ['cost', 'threshold'], name, value)


                    class Redistribution(Entity):
                        """
                        Redistribute configurations
                        
                        .. attribute:: redistributes
                        
                        	Redistribute information from another routing protocol
                        	**type**\:  :py:class:`Redistributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.Vrfs.Vrf.Redistribution, self).__init__()

                            self.yang_name = "redistribution"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("redistributes", ("redistributes", Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.redistributes = Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes()
                            self.redistributes.parent = self
                            self._children_name_map["redistributes"] = "redistributes"
                            self._children_yang_names.add("redistributes")
                            self._segment_path = lambda: "redistribution"


                        class Redistributes(Entity):
                            """
                            Redistribute information from another routing
                            protocol
                            
                            .. attribute:: redistribute
                            
                            	Redistribute information from another routing protocol
                            	**type**\: list of  		 :py:class:`Redistribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes, self).__init__()

                                self.yang_name = "redistributes"
                                self.yang_parent_name = "redistribution"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("redistribute", ("redistribute", Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute))])
                                self._leafs = OrderedDict()

                                self.redistribute = YList(self)
                                self._segment_path = lambda: "redistributes"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes, [], name, value)


                            class Redistribute(Entity):
                                """
                                Redistribute information from another routing
                                protocol
                                
                                .. attribute:: protocol_name  (key)
                                
                                	Distribute list protocol type
                                	**type**\:  :py:class:`OspfRedistProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRedistProtocol>`
                                
                                .. attribute:: connected_or_static_or_dagr_or_subscriber_or_mobile_or_rip
                                
                                	connected or static or dagr or subscriber or mobile or rip
                                	**type**\:  :py:class:`ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute.ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: application_or_isis_or_ospf
                                
                                	application or isis or ospf
                                	**type**\: list of  		 :py:class:`ApplicationOrIsisOrOspf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute.ApplicationOrIsisOrOspf>`
                                
                                .. attribute:: bgp
                                
                                	bgp
                                	**type**\: list of  		 :py:class:`Bgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute.Bgp>`
                                
                                .. attribute:: eigrp
                                
                                	eigrp
                                	**type**\: list of  		 :py:class:`Eigrp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute.Eigrp>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute, self).__init__()

                                    self.yang_name = "redistribute"
                                    self.yang_parent_name = "redistributes"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['protocol_name']
                                    self._child_container_classes = OrderedDict([("connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip", ("connected_or_static_or_dagr_or_subscriber_or_mobile_or_rip", Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute.ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip))])
                                    self._child_list_classes = OrderedDict([("application-or-isis-or-ospf", ("application_or_isis_or_ospf", Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute.ApplicationOrIsisOrOspf)), ("bgp", ("bgp", Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute.Bgp)), ("eigrp", ("eigrp", Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute.Eigrp))])
                                    self._leafs = OrderedDict([
                                        ('protocol_name', YLeaf(YType.enumeration, 'protocol-name')),
                                    ])
                                    self.protocol_name = None

                                    self.connected_or_static_or_dagr_or_subscriber_or_mobile_or_rip = None
                                    self._children_name_map["connected_or_static_or_dagr_or_subscriber_or_mobile_or_rip"] = "connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip"
                                    self._children_yang_names.add("connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip")

                                    self.application_or_isis_or_ospf = YList(self)
                                    self.bgp = YList(self)
                                    self.eigrp = YList(self)
                                    self._segment_path = lambda: "redistribute" + "[protocol-name='" + str(self.protocol_name) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute, ['protocol_name'], name, value)


                                class ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip(Entity):
                                    """
                                    connected or static or dagr or subscriber or
                                    mobile or rip
                                    
                                    .. attribute:: classful
                                    
                                    	Disallow subnetting
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: default_redistributed_route_metric
                                    
                                    	Default metric for routes being redistributed into OSPF
                                    	**type**\: int
                                    
                                    	**range:** 1..16777214
                                    
                                    .. attribute:: tag
                                    
                                    	Set tag for routes redistributed into OSPF
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: metric_type
                                    
                                    	Set OSPF External metric type
                                    	**type**\:  :py:class:`OspfLinkStateMetric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetric>`
                                    
                                    .. attribute:: eigrp_route_type
                                    
                                    	EIGRP route type
                                    	**type**\:  :py:class:`OspfEigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfEigrpRoute>`
                                    
                                    .. attribute:: isis_levels
                                    
                                    	Levels of ISIS routes
                                    	**type**\:  :py:class:`OspfRouteLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevel>`
                                    
                                    .. attribute:: ospf_internal
                                    
                                    	OSPF\_Internal route type
                                    	**type**\: bool
                                    
                                    .. attribute:: ospf_external
                                    
                                    	OSPF external route types
                                    	**type**\:  :py:class:`OspfRouteLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevel>`
                                    
                                    .. attribute:: ospf_nssa_level
                                    
                                    	OSPF NSSA external route types
                                    	**type**\:  :py:class:`OspfRouteLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevel>`
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Routing policy name
                                    	**type**\: str
                                    
                                    .. attribute:: bgp_preserve_med
                                    
                                    	Preserve MED of BGP routes
                                    	**type**\: bool
                                    
                                    .. attribute:: bgp_preserve_default_info
                                    
                                    	Preserve Metric and Metric Type of BGP Default Route
                                    	**type**\: bool
                                    
                                    .. attribute:: ospf_redist_lsa_type
                                    
                                    	LSA type for redistributed routes
                                    	**type**\:  :py:class:`OspfRedistLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRedistLsa>`
                                    
                                    	**default value**\: external
                                    
                                    .. attribute:: ospfnssa_only
                                    
                                    	Only redistribute to NSSA areas
                                    	**type**\: bool
                                    
                                    .. attribute:: ospf_use_rib_metric
                                    
                                    	Use metric from RIB for redistributed routes
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute.ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip, self).__init__()

                                        self.yang_name = "connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip"
                                        self.yang_parent_name = "redistribute"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('classful', YLeaf(YType.boolean, 'classful')),
                                            ('default_redistributed_route_metric', YLeaf(YType.uint32, 'default-redistributed-route-metric')),
                                            ('tag', YLeaf(YType.uint32, 'tag')),
                                            ('metric_type', YLeaf(YType.enumeration, 'metric-type')),
                                            ('eigrp_route_type', YLeaf(YType.enumeration, 'eigrp-route-type')),
                                            ('isis_levels', YLeaf(YType.enumeration, 'isis-levels')),
                                            ('ospf_internal', YLeaf(YType.boolean, 'ospf-internal')),
                                            ('ospf_external', YLeaf(YType.enumeration, 'ospf-external')),
                                            ('ospf_nssa_level', YLeaf(YType.enumeration, 'ospf-nssa-level')),
                                            ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
                                            ('bgp_preserve_med', YLeaf(YType.boolean, 'bgp-preserve-med')),
                                            ('bgp_preserve_default_info', YLeaf(YType.boolean, 'bgp-preserve-default-info')),
                                            ('ospf_redist_lsa_type', YLeaf(YType.enumeration, 'ospf-redist-lsa-type')),
                                            ('ospfnssa_only', YLeaf(YType.boolean, 'ospfnssa-only')),
                                            ('ospf_use_rib_metric', YLeaf(YType.boolean, 'ospf-use-rib-metric')),
                                        ])
                                        self.classful = None
                                        self.default_redistributed_route_metric = None
                                        self.tag = None
                                        self.metric_type = None
                                        self.eigrp_route_type = None
                                        self.isis_levels = None
                                        self.ospf_internal = None
                                        self.ospf_external = None
                                        self.ospf_nssa_level = None
                                        self.route_policy_name = None
                                        self.bgp_preserve_med = None
                                        self.bgp_preserve_default_info = None
                                        self.ospf_redist_lsa_type = None
                                        self.ospfnssa_only = None
                                        self.ospf_use_rib_metric = None
                                        self._segment_path = lambda: "connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute.ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip, ['classful', 'default_redistributed_route_metric', 'tag', 'metric_type', 'eigrp_route_type', 'isis_levels', 'ospf_internal', 'ospf_external', 'ospf_nssa_level', 'route_policy_name', 'bgp_preserve_med', 'bgp_preserve_default_info', 'ospf_redist_lsa_type', 'ospfnssa_only', 'ospf_use_rib_metric'], name, value)


                                class ApplicationOrIsisOrOspf(Entity):
                                    """
                                    application or isis or ospf
                                    
                                    .. attribute:: instance_name  (key)
                                    
                                    	OSPF or ISIS process name or protocol name\: bgp, eigrp, connected
                                    	**type**\: str
                                    
                                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                    
                                    .. attribute:: classful
                                    
                                    	Disallow subnetting
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: default_redistributed_route_metric
                                    
                                    	Default metric for routes being redistributed into OSPF
                                    	**type**\: int
                                    
                                    	**range:** 1..16777214
                                    
                                    .. attribute:: tag
                                    
                                    	Set tag for routes redistributed into OSPF
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: metric_type
                                    
                                    	Set OSPF External metric type
                                    	**type**\:  :py:class:`OspfLinkStateMetric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetric>`
                                    
                                    .. attribute:: eigrp_route_type
                                    
                                    	EIGRP route type
                                    	**type**\:  :py:class:`OspfEigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfEigrpRoute>`
                                    
                                    .. attribute:: isis_levels
                                    
                                    	Levels of ISIS routes
                                    	**type**\:  :py:class:`OspfRouteLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevel>`
                                    
                                    .. attribute:: ospf_internal
                                    
                                    	OSPF\_Internal route type
                                    	**type**\: bool
                                    
                                    .. attribute:: ospf_external
                                    
                                    	OSPF external route types
                                    	**type**\:  :py:class:`OspfRouteLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevel>`
                                    
                                    .. attribute:: ospf_nssa_level
                                    
                                    	OSPF NSSA external route types
                                    	**type**\:  :py:class:`OspfRouteLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevel>`
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Routing policy name
                                    	**type**\: str
                                    
                                    .. attribute:: bgp_preserve_med
                                    
                                    	Preserve MED of BGP routes
                                    	**type**\: bool
                                    
                                    .. attribute:: bgp_preserve_default_info
                                    
                                    	Preserve Metric and Metric Type of BGP Default Route
                                    	**type**\: bool
                                    
                                    .. attribute:: ospf_redist_lsa_type
                                    
                                    	LSA type for redistributed routes
                                    	**type**\:  :py:class:`OspfRedistLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRedistLsa>`
                                    
                                    	**default value**\: external
                                    
                                    .. attribute:: ospfnssa_only
                                    
                                    	Only redistribute to NSSA areas
                                    	**type**\: bool
                                    
                                    .. attribute:: ospf_use_rib_metric
                                    
                                    	Use metric from RIB for redistributed routes
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute.ApplicationOrIsisOrOspf, self).__init__()

                                        self.yang_name = "application-or-isis-or-ospf"
                                        self.yang_parent_name = "redistribute"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['instance_name']
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('instance_name', YLeaf(YType.str, 'instance-name')),
                                            ('classful', YLeaf(YType.boolean, 'classful')),
                                            ('default_redistributed_route_metric', YLeaf(YType.uint32, 'default-redistributed-route-metric')),
                                            ('tag', YLeaf(YType.uint32, 'tag')),
                                            ('metric_type', YLeaf(YType.enumeration, 'metric-type')),
                                            ('eigrp_route_type', YLeaf(YType.enumeration, 'eigrp-route-type')),
                                            ('isis_levels', YLeaf(YType.enumeration, 'isis-levels')),
                                            ('ospf_internal', YLeaf(YType.boolean, 'ospf-internal')),
                                            ('ospf_external', YLeaf(YType.enumeration, 'ospf-external')),
                                            ('ospf_nssa_level', YLeaf(YType.enumeration, 'ospf-nssa-level')),
                                            ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
                                            ('bgp_preserve_med', YLeaf(YType.boolean, 'bgp-preserve-med')),
                                            ('bgp_preserve_default_info', YLeaf(YType.boolean, 'bgp-preserve-default-info')),
                                            ('ospf_redist_lsa_type', YLeaf(YType.enumeration, 'ospf-redist-lsa-type')),
                                            ('ospfnssa_only', YLeaf(YType.boolean, 'ospfnssa-only')),
                                            ('ospf_use_rib_metric', YLeaf(YType.boolean, 'ospf-use-rib-metric')),
                                        ])
                                        self.instance_name = None
                                        self.classful = None
                                        self.default_redistributed_route_metric = None
                                        self.tag = None
                                        self.metric_type = None
                                        self.eigrp_route_type = None
                                        self.isis_levels = None
                                        self.ospf_internal = None
                                        self.ospf_external = None
                                        self.ospf_nssa_level = None
                                        self.route_policy_name = None
                                        self.bgp_preserve_med = None
                                        self.bgp_preserve_default_info = None
                                        self.ospf_redist_lsa_type = None
                                        self.ospfnssa_only = None
                                        self.ospf_use_rib_metric = None
                                        self._segment_path = lambda: "application-or-isis-or-ospf" + "[instance-name='" + str(self.instance_name) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute.ApplicationOrIsisOrOspf, ['instance_name', 'classful', 'default_redistributed_route_metric', 'tag', 'metric_type', 'eigrp_route_type', 'isis_levels', 'ospf_internal', 'ospf_external', 'ospf_nssa_level', 'route_policy_name', 'bgp_preserve_med', 'bgp_preserve_default_info', 'ospf_redist_lsa_type', 'ospfnssa_only', 'ospf_use_rib_metric'], name, value)


                                class Bgp(Entity):
                                    """
                                    bgp
                                    
                                    .. attribute:: instance_name  (key)
                                    
                                    	OSPF or ISIS process name or protocol name\: bgp, eigrp, connected
                                    	**type**\: str
                                    
                                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                    
                                    .. attribute:: as_xx  (key)
                                    
                                    	First half of BGP AS number in XX.YY format. Mandatory if Protocol is BGP and must not be specified otherwise. Must be a non\-zero value if second half is zero
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: as_yy  (key)
                                    
                                    	Second half of BGP AS number in XX.YY format . Mandatory if Protocol is BGP or EIGRP and must not be specified otherwise. Must be a non\-zero value if first half is zero
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: classful
                                    
                                    	Disallow subnetting
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: default_redistributed_route_metric
                                    
                                    	Default metric for routes being redistributed into OSPF
                                    	**type**\: int
                                    
                                    	**range:** 1..16777214
                                    
                                    .. attribute:: tag
                                    
                                    	Set tag for routes redistributed into OSPF
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: metric_type
                                    
                                    	Set OSPF External metric type
                                    	**type**\:  :py:class:`OspfLinkStateMetric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetric>`
                                    
                                    .. attribute:: eigrp_route_type
                                    
                                    	EIGRP route type
                                    	**type**\:  :py:class:`OspfEigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfEigrpRoute>`
                                    
                                    .. attribute:: isis_levels
                                    
                                    	Levels of ISIS routes
                                    	**type**\:  :py:class:`OspfRouteLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevel>`
                                    
                                    .. attribute:: ospf_internal
                                    
                                    	OSPF\_Internal route type
                                    	**type**\: bool
                                    
                                    .. attribute:: ospf_external
                                    
                                    	OSPF external route types
                                    	**type**\:  :py:class:`OspfRouteLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevel>`
                                    
                                    .. attribute:: ospf_nssa_level
                                    
                                    	OSPF NSSA external route types
                                    	**type**\:  :py:class:`OspfRouteLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevel>`
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Routing policy name
                                    	**type**\: str
                                    
                                    .. attribute:: bgp_preserve_med
                                    
                                    	Preserve MED of BGP routes
                                    	**type**\: bool
                                    
                                    .. attribute:: bgp_preserve_default_info
                                    
                                    	Preserve Metric and Metric Type of BGP Default Route
                                    	**type**\: bool
                                    
                                    .. attribute:: ospf_redist_lsa_type
                                    
                                    	LSA type for redistributed routes
                                    	**type**\:  :py:class:`OspfRedistLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRedistLsa>`
                                    
                                    	**default value**\: external
                                    
                                    .. attribute:: ospfnssa_only
                                    
                                    	Only redistribute to NSSA areas
                                    	**type**\: bool
                                    
                                    .. attribute:: ospf_use_rib_metric
                                    
                                    	Use metric from RIB for redistributed routes
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute.Bgp, self).__init__()

                                        self.yang_name = "bgp"
                                        self.yang_parent_name = "redistribute"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['instance_name','as_xx','as_yy']
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('instance_name', YLeaf(YType.str, 'instance-name')),
                                            ('as_xx', YLeaf(YType.uint32, 'as-xx')),
                                            ('as_yy', YLeaf(YType.uint32, 'as-yy')),
                                            ('classful', YLeaf(YType.boolean, 'classful')),
                                            ('default_redistributed_route_metric', YLeaf(YType.uint32, 'default-redistributed-route-metric')),
                                            ('tag', YLeaf(YType.uint32, 'tag')),
                                            ('metric_type', YLeaf(YType.enumeration, 'metric-type')),
                                            ('eigrp_route_type', YLeaf(YType.enumeration, 'eigrp-route-type')),
                                            ('isis_levels', YLeaf(YType.enumeration, 'isis-levels')),
                                            ('ospf_internal', YLeaf(YType.boolean, 'ospf-internal')),
                                            ('ospf_external', YLeaf(YType.enumeration, 'ospf-external')),
                                            ('ospf_nssa_level', YLeaf(YType.enumeration, 'ospf-nssa-level')),
                                            ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
                                            ('bgp_preserve_med', YLeaf(YType.boolean, 'bgp-preserve-med')),
                                            ('bgp_preserve_default_info', YLeaf(YType.boolean, 'bgp-preserve-default-info')),
                                            ('ospf_redist_lsa_type', YLeaf(YType.enumeration, 'ospf-redist-lsa-type')),
                                            ('ospfnssa_only', YLeaf(YType.boolean, 'ospfnssa-only')),
                                            ('ospf_use_rib_metric', YLeaf(YType.boolean, 'ospf-use-rib-metric')),
                                        ])
                                        self.instance_name = None
                                        self.as_xx = None
                                        self.as_yy = None
                                        self.classful = None
                                        self.default_redistributed_route_metric = None
                                        self.tag = None
                                        self.metric_type = None
                                        self.eigrp_route_type = None
                                        self.isis_levels = None
                                        self.ospf_internal = None
                                        self.ospf_external = None
                                        self.ospf_nssa_level = None
                                        self.route_policy_name = None
                                        self.bgp_preserve_med = None
                                        self.bgp_preserve_default_info = None
                                        self.ospf_redist_lsa_type = None
                                        self.ospfnssa_only = None
                                        self.ospf_use_rib_metric = None
                                        self._segment_path = lambda: "bgp" + "[instance-name='" + str(self.instance_name) + "']" + "[as-xx='" + str(self.as_xx) + "']" + "[as-yy='" + str(self.as_yy) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute.Bgp, ['instance_name', 'as_xx', 'as_yy', 'classful', 'default_redistributed_route_metric', 'tag', 'metric_type', 'eigrp_route_type', 'isis_levels', 'ospf_internal', 'ospf_external', 'ospf_nssa_level', 'route_policy_name', 'bgp_preserve_med', 'bgp_preserve_default_info', 'ospf_redist_lsa_type', 'ospfnssa_only', 'ospf_use_rib_metric'], name, value)


                                class Eigrp(Entity):
                                    """
                                    eigrp
                                    
                                    .. attribute:: instance_name  (key)
                                    
                                    	OSPF or ISIS process name or protocol name\: bgp, eigrp, connected
                                    	**type**\: str
                                    
                                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                    
                                    .. attribute:: as_xx  (key)
                                    
                                    	First half of BGP AS number in XX.YY format. Mandatory if Protocol is BGP and must not be specified otherwise. Must be a non\-zero value if second half is zero
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: classful
                                    
                                    	Disallow subnetting
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: default_redistributed_route_metric
                                    
                                    	Default metric for routes being redistributed into OSPF
                                    	**type**\: int
                                    
                                    	**range:** 1..16777214
                                    
                                    .. attribute:: tag
                                    
                                    	Set tag for routes redistributed into OSPF
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: metric_type
                                    
                                    	Set OSPF External metric type
                                    	**type**\:  :py:class:`OspfLinkStateMetric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetric>`
                                    
                                    .. attribute:: eigrp_route_type
                                    
                                    	EIGRP route type
                                    	**type**\:  :py:class:`OspfEigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfEigrpRoute>`
                                    
                                    .. attribute:: isis_levels
                                    
                                    	Levels of ISIS routes
                                    	**type**\:  :py:class:`OspfRouteLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevel>`
                                    
                                    .. attribute:: ospf_internal
                                    
                                    	OSPF\_Internal route type
                                    	**type**\: bool
                                    
                                    .. attribute:: ospf_external
                                    
                                    	OSPF external route types
                                    	**type**\:  :py:class:`OspfRouteLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevel>`
                                    
                                    .. attribute:: ospf_nssa_level
                                    
                                    	OSPF NSSA external route types
                                    	**type**\:  :py:class:`OspfRouteLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevel>`
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Routing policy name
                                    	**type**\: str
                                    
                                    .. attribute:: bgp_preserve_med
                                    
                                    	Preserve MED of BGP routes
                                    	**type**\: bool
                                    
                                    .. attribute:: bgp_preserve_default_info
                                    
                                    	Preserve Metric and Metric Type of BGP Default Route
                                    	**type**\: bool
                                    
                                    .. attribute:: ospf_redist_lsa_type
                                    
                                    	LSA type for redistributed routes
                                    	**type**\:  :py:class:`OspfRedistLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRedistLsa>`
                                    
                                    	**default value**\: external
                                    
                                    .. attribute:: ospfnssa_only
                                    
                                    	Only redistribute to NSSA areas
                                    	**type**\: bool
                                    
                                    .. attribute:: ospf_use_rib_metric
                                    
                                    	Use metric from RIB for redistributed routes
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute.Eigrp, self).__init__()

                                        self.yang_name = "eigrp"
                                        self.yang_parent_name = "redistribute"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['instance_name','as_xx']
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('instance_name', YLeaf(YType.str, 'instance-name')),
                                            ('as_xx', YLeaf(YType.uint32, 'as-xx')),
                                            ('classful', YLeaf(YType.boolean, 'classful')),
                                            ('default_redistributed_route_metric', YLeaf(YType.uint32, 'default-redistributed-route-metric')),
                                            ('tag', YLeaf(YType.uint32, 'tag')),
                                            ('metric_type', YLeaf(YType.enumeration, 'metric-type')),
                                            ('eigrp_route_type', YLeaf(YType.enumeration, 'eigrp-route-type')),
                                            ('isis_levels', YLeaf(YType.enumeration, 'isis-levels')),
                                            ('ospf_internal', YLeaf(YType.boolean, 'ospf-internal')),
                                            ('ospf_external', YLeaf(YType.enumeration, 'ospf-external')),
                                            ('ospf_nssa_level', YLeaf(YType.enumeration, 'ospf-nssa-level')),
                                            ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
                                            ('bgp_preserve_med', YLeaf(YType.boolean, 'bgp-preserve-med')),
                                            ('bgp_preserve_default_info', YLeaf(YType.boolean, 'bgp-preserve-default-info')),
                                            ('ospf_redist_lsa_type', YLeaf(YType.enumeration, 'ospf-redist-lsa-type')),
                                            ('ospfnssa_only', YLeaf(YType.boolean, 'ospfnssa-only')),
                                            ('ospf_use_rib_metric', YLeaf(YType.boolean, 'ospf-use-rib-metric')),
                                        ])
                                        self.instance_name = None
                                        self.as_xx = None
                                        self.classful = None
                                        self.default_redistributed_route_metric = None
                                        self.tag = None
                                        self.metric_type = None
                                        self.eigrp_route_type = None
                                        self.isis_levels = None
                                        self.ospf_internal = None
                                        self.ospf_external = None
                                        self.ospf_nssa_level = None
                                        self.route_policy_name = None
                                        self.bgp_preserve_med = None
                                        self.bgp_preserve_default_info = None
                                        self.ospf_redist_lsa_type = None
                                        self.ospfnssa_only = None
                                        self.ospf_use_rib_metric = None
                                        self._segment_path = lambda: "eigrp" + "[instance-name='" + str(self.instance_name) + "']" + "[as-xx='" + str(self.as_xx) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute.Eigrp, ['instance_name', 'as_xx', 'classful', 'default_redistributed_route_metric', 'tag', 'metric_type', 'eigrp_route_type', 'isis_levels', 'ospf_internal', 'ospf_external', 'ospf_nssa_level', 'route_policy_name', 'bgp_preserve_med', 'bgp_preserve_default_info', 'ospf_redist_lsa_type', 'ospfnssa_only', 'ospf_use_rib_metric'], name, value)


                    class AdjacencyStagger(Entity):
                        """
                        Staggering OSPF adjacency bring up
                        
                        .. attribute:: disable
                        
                        	Disable OSPF adjacency stagger
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: initial_nbr
                        
                        	Adjacency Stagger\: Initial number of neighbors to bring up per area
                        	**type**\: int
                        
                        	**range:** 1..65535
                        
                        	**default value**\: 2
                        
                        .. attribute:: max_nbr
                        
                        	Adjacency Stagger\: Subsequent simultaneous number of neighbors to bring up
                        	**type**\: int
                        
                        	**range:** 1..65535
                        
                        	**default value**\: 64
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.Vrfs.Vrf.AdjacencyStagger, self).__init__()

                            self.yang_name = "adjacency-stagger"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('disable', YLeaf(YType.empty, 'disable')),
                                ('initial_nbr', YLeaf(YType.uint32, 'initial-nbr')),
                                ('max_nbr', YLeaf(YType.uint32, 'max-nbr')),
                            ])
                            self.disable = None
                            self.initial_nbr = None
                            self.max_nbr = None
                            self._segment_path = lambda: "adjacency-stagger"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AdjacencyStagger, ['disable', 'initial_nbr', 'max_nbr'], name, value)


                    class MaxLsa(Entity):
                        """
                        Set max\-lsa configuration
                        
                        .. attribute:: max_lsa_limit
                        
                        	Set maximum number of non self\-generated LSAs
                        	**type**\: int
                        
                        	**range:** 1..4294967294
                        
                        	**mandatory**\: True
                        
                        .. attribute:: max_lsa_threshold
                        
                        	Set max\-lsa threshold for generating a warning message
                        	**type**\: int
                        
                        	**range:** 1..100
                        
                        .. attribute:: max_lsa_warning_only
                        
                        	Only give warning message when limit is exceeded
                        	**type**\: bool
                        
                        .. attribute:: max_lsa_ignore_time
                        
                        	Set time during which all adjacencies are suppressed
                        	**type**\: int
                        
                        	**range:** 1..35791394
                        
                        .. attribute:: max_lsa_ignore_count
                        
                        	Set count on how many times adjacencies can be suppressed
                        	**type**\: int
                        
                        	**range:** 1..4294967294
                        
                        .. attribute:: max_lsa_reset_time
                        
                        	Set number of minutes after which ignore\-count is reset to zero
                        	**type**\: int
                        
                        	**range:** 2..71582788
                        
                        	**units**\: minute
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.Vrfs.Vrf.MaxLsa, self).__init__()

                            self.yang_name = "max-lsa"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self.is_presence_container = True
                            self._leafs = OrderedDict([
                                ('max_lsa_limit', YLeaf(YType.uint32, 'max-lsa-limit')),
                                ('max_lsa_threshold', YLeaf(YType.uint32, 'max-lsa-threshold')),
                                ('max_lsa_warning_only', YLeaf(YType.boolean, 'max-lsa-warning-only')),
                                ('max_lsa_ignore_time', YLeaf(YType.uint32, 'max-lsa-ignore-time')),
                                ('max_lsa_ignore_count', YLeaf(YType.uint32, 'max-lsa-ignore-count')),
                                ('max_lsa_reset_time', YLeaf(YType.uint32, 'max-lsa-reset-time')),
                            ])
                            self.max_lsa_limit = None
                            self.max_lsa_threshold = None
                            self.max_lsa_warning_only = None
                            self.max_lsa_ignore_time = None
                            self.max_lsa_ignore_count = None
                            self.max_lsa_reset_time = None
                            self._segment_path = lambda: "max-lsa"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.MaxLsa, ['max_lsa_limit', 'max_lsa_threshold', 'max_lsa_warning_only', 'max_lsa_ignore_time', 'max_lsa_ignore_count', 'max_lsa_reset_time'], name, value)


                    class AutoCost(Entity):
                        """
                        Controls automatic cost based on bandwidth
                        
                        .. attribute:: disable
                        
                        	Disabling auto costing
                        	**type**\: bool
                        
                        	**default value**\: false
                        
                        .. attribute:: bandwidth
                        
                        	The reference bandwidth in terms of Mbits per second
                        	**type**\: int
                        
                        	**range:** 1..4294967
                        
                        	**units**\: Mbit/s
                        
                        	**default value**\: 100
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.Vrfs.Vrf.AutoCost, self).__init__()

                            self.yang_name = "auto-cost"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('disable', YLeaf(YType.boolean, 'disable')),
                                ('bandwidth', YLeaf(YType.uint32, 'bandwidth')),
                            ])
                            self.disable = None
                            self.bandwidth = None
                            self._segment_path = lambda: "auto-cost"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AutoCost, ['disable', 'bandwidth'], name, value)


                    class Ucmp(Entity):
                        """
                        Unequal Cost Multi\-ptah configuration
                        
                        .. attribute:: enable
                        
                        	UCMP feature enable configuration
                        	**type**\:  :py:class:`Enable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Ucmp.Enable>`
                        
                        .. attribute:: delay_interval
                        
                        	Delay in msecs between primary SPF and UCMP computation
                        	**type**\: int
                        
                        	**range:** 1..5000
                        
                        	**units**\: millisecond
                        
                        	**default value**\: 100
                        
                        .. attribute:: exclude_interfaces
                        
                        	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                        	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Ucmp.ExcludeInterfaces>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.Vrfs.Vrf.Ucmp, self).__init__()

                            self.yang_name = "ucmp"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("enable", ("enable", Ospf.Processes.Process.Vrfs.Vrf.Ucmp.Enable)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.Vrfs.Vrf.Ucmp.ExcludeInterfaces))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('delay_interval', YLeaf(YType.uint32, 'delay-interval')),
                            ])
                            self.delay_interval = None

                            self.enable = Ospf.Processes.Process.Vrfs.Vrf.Ucmp.Enable()
                            self.enable.parent = self
                            self._children_name_map["enable"] = "enable"
                            self._children_yang_names.add("enable")

                            self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.Ucmp.ExcludeInterfaces()
                            self.exclude_interfaces.parent = self
                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                            self._children_yang_names.add("exclude-interfaces")
                            self._segment_path = lambda: "ucmp"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.Ucmp, ['delay_interval'], name, value)


                        class Enable(Entity):
                            """
                            UCMP feature enable configuration
                            
                            .. attribute:: variance
                            
                            	Value of variance
                            	**type**\: int
                            
                            	**range:** 101..10000
                            
                            	**default value**\: 200
                            
                            .. attribute:: prefix_list_name
                            
                            	Name of the Prefix List
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.Ucmp.Enable, self).__init__()

                                self.yang_name = "enable"
                                self.yang_parent_name = "ucmp"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('variance', YLeaf(YType.uint32, 'variance')),
                                    ('prefix_list_name', YLeaf(YType.str, 'prefix-list-name')),
                                ])
                                self.variance = None
                                self.prefix_list_name = None
                                self._segment_path = lambda: "enable"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.Ucmp.Enable, ['variance', 'prefix_list_name'], name, value)


                        class ExcludeInterfaces(Entity):
                            """
                            Fast\-reroute per\-link/per\-prefix or UCMP exclude
                            interface configuration
                            
                            .. attribute:: exclude_interface
                            
                            	Exclude an interface from becoming a backup or UCMP
                            	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Ucmp.ExcludeInterfaces.ExcludeInterface>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.Ucmp.ExcludeInterfaces, self).__init__()

                                self.yang_name = "exclude-interfaces"
                                self.yang_parent_name = "ucmp"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.Vrfs.Vrf.Ucmp.ExcludeInterfaces.ExcludeInterface))])
                                self._leafs = OrderedDict()

                                self.exclude_interface = YList(self)
                                self._segment_path = lambda: "exclude-interfaces"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.Ucmp.ExcludeInterfaces, [], name, value)


                            class ExcludeInterface(Entity):
                                """
                                Exclude an interface from becoming a backup or
                                UCMP
                                
                                .. attribute:: interface_name  (key)
                                
                                	Interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.Vrfs.Vrf.Ucmp.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                    self.yang_name = "exclude-interface"
                                    self.yang_parent_name = "exclude-interfaces"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['interface_name']
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                    ])
                                    self.interface_name = None
                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.Ucmp.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                    class FastReroute(Entity):
                        """
                        Fast\-reroute instance scoped parameters
                        
                        .. attribute:: per_link
                        
                        	Fast\-reroute per\-link global configuration
                        	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerLink>`
                        
                        .. attribute:: per_prefix
                        
                        	Fast\-reroute per\-prefix global configuration
                        	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.Vrfs.Vrf.FastReroute, self).__init__()

                            self.yang_name = "fast-reroute"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("per-link", ("per_link", Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.per_link = Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerLink()
                            self.per_link.parent = self
                            self._children_name_map["per_link"] = "per-link"
                            self._children_yang_names.add("per-link")

                            self.per_prefix = Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix()
                            self.per_prefix.parent = self
                            self._children_name_map["per_prefix"] = "per-prefix"
                            self._children_yang_names.add("per-prefix")
                            self._segment_path = lambda: "fast-reroute"


                        class PerLink(Entity):
                            """
                            Fast\-reroute per\-link global configuration
                            
                            .. attribute:: priority
                            
                            	Fast\-reroute per\-link/per\-prefix priority\-limit command
                            	**type**\:  :py:class:`OspfFastReroutePriority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastReroutePriority>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerLink, self).__init__()

                                self.yang_name = "per-link"
                                self.yang_parent_name = "fast-reroute"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('priority', YLeaf(YType.enumeration, 'priority')),
                                ])
                                self.priority = None
                                self._segment_path = lambda: "per-link"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerLink, ['priority'], name, value)


                        class PerPrefix(Entity):
                            """
                            Fast\-reroute per\-prefix global configuration
                            
                            .. attribute:: tiebreakers
                            
                            	Fast\-reroute tiebreakers configurations
                            	**type**\:  :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers>`
                            
                            .. attribute:: load_sharing_disable
                            
                            	Disable load sharing between multiple backups
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: priority
                            
                            	Fast\-reroute per\-link/per\-prefix priority\-limit command
                            	**type**\:  :py:class:`OspfFastReroutePriority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastReroutePriority>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix, self).__init__()

                                self.yang_name = "per-prefix"
                                self.yang_parent_name = "fast-reroute"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("tiebreakers", ("tiebreakers", Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('load_sharing_disable', YLeaf(YType.empty, 'load-sharing-disable')),
                                    ('priority', YLeaf(YType.enumeration, 'priority')),
                                ])
                                self.load_sharing_disable = None
                                self.priority = None

                                self.tiebreakers = Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers()
                                self.tiebreakers.parent = self
                                self._children_name_map["tiebreakers"] = "tiebreakers"
                                self._children_yang_names.add("tiebreakers")
                                self._segment_path = lambda: "per-prefix"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix, ['load_sharing_disable', 'priority'], name, value)


                            class Tiebreakers(Entity):
                                """
                                Fast\-reroute tiebreakers configurations
                                
                                .. attribute:: tiebreaker
                                
                                	Fast\-reroute tiebreakers configuration
                                	**type**\: list of  		 :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers, self).__init__()

                                    self.yang_name = "tiebreakers"
                                    self.yang_parent_name = "per-prefix"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([("tiebreaker", ("tiebreaker", Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker))])
                                    self._leafs = OrderedDict()

                                    self.tiebreaker = YList(self)
                                    self._segment_path = lambda: "tiebreakers"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers, [], name, value)


                                class Tiebreaker(Entity):
                                    """
                                    Fast\-reroute tiebreakers configuration
                                    
                                    .. attribute:: tiebreaker_type  (key)
                                    
                                    	Tiebreaker type
                                    	**type**\:  :py:class:`OspfFastRerouteTiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakers>`
                                    
                                    .. attribute:: tiebreaker_index
                                    
                                    	Index value for a tiebreaker, 0 to disable
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    	**mandatory**\: True
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, self).__init__()

                                        self.yang_name = "tiebreaker"
                                        self.yang_parent_name = "tiebreakers"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['tiebreaker_type']
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('tiebreaker_type', YLeaf(YType.enumeration, 'tiebreaker-type')),
                                            ('tiebreaker_index', YLeaf(YType.uint32, 'tiebreaker-index')),
                                        ])
                                        self.tiebreaker_type = None
                                        self.tiebreaker_index = None
                                        self._segment_path = lambda: "tiebreaker" + "[tiebreaker-type='" + str(self.tiebreaker_type) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, ['tiebreaker_type', 'tiebreaker_index'], name, value)


                    class SummaryPrefixes(Entity):
                        """
                        Configure IP prefix summary
                        
                        .. attribute:: summary_prefix_data
                        
                        	Data container
                        	**type**\:  :py:class:`SummaryPrefixData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes.SummaryPrefixData>`
                        
                        .. attribute:: prefix_and_netmask
                        
                        	keys\: prefix, netmask
                        	**type**\: list of  		 :py:class:`PrefixAndNetmask <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes.PrefixAndNetmask>`
                        
                        .. attribute:: prefix
                        
                        	keys\: prefix
                        	**type**\: list of  		 :py:class:`Prefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes.Prefix>`
                        
                        .. attribute:: netmask
                        
                        	keys\: netmask
                        	**type**\: list of  		 :py:class:`Netmask <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes.Netmask>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes, self).__init__()

                            self.yang_name = "summary-prefixes"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("summary-prefix-data", ("summary_prefix_data", Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes.SummaryPrefixData))])
                            self._child_list_classes = OrderedDict([("prefix-and-netmask", ("prefix_and_netmask", Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes.PrefixAndNetmask)), ("prefix", ("prefix", Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes.Prefix)), ("netmask", ("netmask", Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes.Netmask))])
                            self._leafs = OrderedDict()

                            self.summary_prefix_data = Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes.SummaryPrefixData()
                            self.summary_prefix_data.parent = self
                            self._children_name_map["summary_prefix_data"] = "summary-prefix-data"
                            self._children_yang_names.add("summary-prefix-data")

                            self.prefix_and_netmask = YList(self)
                            self.prefix = YList(self)
                            self.netmask = YList(self)
                            self._segment_path = lambda: "summary-prefixes"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes, [], name, value)


                        class SummaryPrefixData(Entity):
                            """
                            Data container.
                            
                            .. attribute:: not_advertise
                            
                            	Do not advertise when translating OSPF type\-7 LSA
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: tag
                            
                            	32\-bit tag value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes.SummaryPrefixData, self).__init__()

                                self.yang_name = "summary-prefix-data"
                                self.yang_parent_name = "summary-prefixes"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('not_advertise', YLeaf(YType.boolean, 'not-advertise')),
                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                ])
                                self.not_advertise = None
                                self.tag = None
                                self._segment_path = lambda: "summary-prefix-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes.SummaryPrefixData, ['not_advertise', 'tag'], name, value)


                        class PrefixAndNetmask(Entity):
                            """
                            keys\: prefix, netmask
                            
                            .. attribute:: prefix  (key)
                            
                            	IP summary prefix
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: netmask  (key)
                            
                            	Summary netmask
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: not_advertise
                            
                            	Do not advertise when translating OSPF type\-7 LSA
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: tag
                            
                            	32\-bit tag value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes.PrefixAndNetmask, self).__init__()

                                self.yang_name = "prefix-and-netmask"
                                self.yang_parent_name = "summary-prefixes"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['prefix','netmask']
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('netmask', YLeaf(YType.str, 'netmask')),
                                    ('not_advertise', YLeaf(YType.boolean, 'not-advertise')),
                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                ])
                                self.prefix = None
                                self.netmask = None
                                self.not_advertise = None
                                self.tag = None
                                self._segment_path = lambda: "prefix-and-netmask" + "[prefix='" + str(self.prefix) + "']" + "[netmask='" + str(self.netmask) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes.PrefixAndNetmask, ['prefix', 'netmask', 'not_advertise', 'tag'], name, value)


                        class Prefix(Entity):
                            """
                            keys\: prefix
                            
                            .. attribute:: prefix  (key)
                            
                            	IP summary prefix
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: not_advertise
                            
                            	Do not advertise when translating OSPF type\-7 LSA
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: tag
                            
                            	32\-bit tag value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes.Prefix, self).__init__()

                                self.yang_name = "prefix"
                                self.yang_parent_name = "summary-prefixes"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['prefix']
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('not_advertise', YLeaf(YType.boolean, 'not-advertise')),
                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                ])
                                self.prefix = None
                                self.not_advertise = None
                                self.tag = None
                                self._segment_path = lambda: "prefix" + "[prefix='" + str(self.prefix) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes.Prefix, ['prefix', 'not_advertise', 'tag'], name, value)


                        class Netmask(Entity):
                            """
                            keys\: netmask
                            
                            .. attribute:: netmask  (key)
                            
                            	Summary netmask
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: not_advertise
                            
                            	Do not advertise when translating OSPF type\-7 LSA
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: tag
                            
                            	32\-bit tag value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes.Netmask, self).__init__()

                                self.yang_name = "netmask"
                                self.yang_parent_name = "summary-prefixes"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['netmask']
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('netmask', YLeaf(YType.str, 'netmask')),
                                    ('not_advertise', YLeaf(YType.boolean, 'not-advertise')),
                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                ])
                                self.netmask = None
                                self.not_advertise = None
                                self.tag = None
                                self._segment_path = lambda: "netmask" + "[netmask='" + str(self.netmask) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes.Netmask, ['netmask', 'not_advertise', 'tag'], name, value)


                    class OutgoingRouteUpdates(Entity):
                        """
                        Filter outgoing routing updates
                        
                        .. attribute:: outgoing_route_update
                        
                        	Filter outgoing routing updates for a particular protocol
                        	**type**\: list of  		 :py:class:`OutgoingRouteUpdate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.OutgoingRouteUpdates.OutgoingRouteUpdate>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.Vrfs.Vrf.OutgoingRouteUpdates, self).__init__()

                            self.yang_name = "outgoing-route-updates"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("outgoing-route-update", ("outgoing_route_update", Ospf.Processes.Process.Vrfs.Vrf.OutgoingRouteUpdates.OutgoingRouteUpdate))])
                            self._leafs = OrderedDict()

                            self.outgoing_route_update = YList(self)
                            self._segment_path = lambda: "outgoing-route-updates"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.OutgoingRouteUpdates, [], name, value)


                        class OutgoingRouteUpdate(Entity):
                            """
                            Filter outgoing routing updates for a
                            particular protocol
                            
                            .. attribute:: protocol_name  (key)
                            
                            	Distribute list protocol type
                            	**type**\:  :py:class:`OspfDistListProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfDistListProtocol>`
                            
                            .. attribute:: access_list_name
                            
                            	Access Control List name
                            	**type**\: str
                            
                            .. attribute:: as_xx
                            
                            	First half of BGP AS number in XX.YY format.  Mandatory if Protocol is BGP and must not be specified otherwise. Must be a non\-zero value if second half is zero
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: as_yy
                            
                            	Second half of BGP AS number in XX.YY format. Mandatory if Protocol is BGP and must not be specified otherwise. Must be a non\-zero value if first half is zero
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: ospf_process_name
                            
                            	OSPF process name
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.OutgoingRouteUpdates.OutgoingRouteUpdate, self).__init__()

                                self.yang_name = "outgoing-route-update"
                                self.yang_parent_name = "outgoing-route-updates"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['protocol_name']
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('protocol_name', YLeaf(YType.enumeration, 'protocol-name')),
                                    ('access_list_name', YLeaf(YType.str, 'access-list-name')),
                                    ('as_xx', YLeaf(YType.uint32, 'as-xx')),
                                    ('as_yy', YLeaf(YType.uint32, 'as-yy')),
                                    ('ospf_process_name', YLeaf(YType.str, 'ospf-process-name')),
                                ])
                                self.protocol_name = None
                                self.access_list_name = None
                                self.as_xx = None
                                self.as_yy = None
                                self.ospf_process_name = None
                                self._segment_path = lambda: "outgoing-route-update" + "[protocol-name='" + str(self.protocol_name) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.OutgoingRouteUpdates.OutgoingRouteUpdate, ['protocol_name', 'access_list_name', 'as_xx', 'as_yy', 'ospf_process_name'], name, value)


                    class Distance(Entity):
                        """
                        Administrative distance configuration
                        
                        .. attribute:: ospf_distance
                        
                        	OSPF distance configuration
                        	**type**\:  :py:class:`OspfDistance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Distance.OspfDistance>`
                        
                        .. attribute:: ip_distances
                        
                        	IP specific administrative distance configuration
                        	**type**\:  :py:class:`IpDistances <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Distance.IpDistances>`
                        
                        .. attribute:: admin_distance
                        
                        	Define an administrative distance
                        	**type**\: int
                        
                        	**range:** 1..255
                        
                        	**default value**\: 110
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.Vrfs.Vrf.Distance, self).__init__()

                            self.yang_name = "distance"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("ospf-distance", ("ospf_distance", Ospf.Processes.Process.Vrfs.Vrf.Distance.OspfDistance)), ("ip-distances", ("ip_distances", Ospf.Processes.Process.Vrfs.Vrf.Distance.IpDistances))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('admin_distance', YLeaf(YType.uint32, 'admin-distance')),
                            ])
                            self.admin_distance = None

                            self.ospf_distance = Ospf.Processes.Process.Vrfs.Vrf.Distance.OspfDistance()
                            self.ospf_distance.parent = self
                            self._children_name_map["ospf_distance"] = "ospf-distance"
                            self._children_yang_names.add("ospf-distance")

                            self.ip_distances = Ospf.Processes.Process.Vrfs.Vrf.Distance.IpDistances()
                            self.ip_distances.parent = self
                            self._children_name_map["ip_distances"] = "ip-distances"
                            self._children_yang_names.add("ip-distances")
                            self._segment_path = lambda: "distance"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.Distance, ['admin_distance'], name, value)


                        class OspfDistance(Entity):
                            """
                            OSPF distance configuration
                            
                            .. attribute:: intra_area
                            
                            	Distance for intra\-area routes
                            	**type**\: int
                            
                            	**range:** 1..255
                            
                            	**default value**\: 110
                            
                            .. attribute:: inter_area
                            
                            	Distance for inter\-area routes
                            	**type**\: int
                            
                            	**range:** 1..255
                            
                            	**default value**\: 110
                            
                            .. attribute:: external_routes
                            
                            	Distance for external type 5 and type 7 routes
                            	**type**\: int
                            
                            	**range:** 1..255
                            
                            	**default value**\: 110
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.Distance.OspfDistance, self).__init__()

                                self.yang_name = "ospf-distance"
                                self.yang_parent_name = "distance"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('intra_area', YLeaf(YType.uint32, 'intra-area')),
                                    ('inter_area', YLeaf(YType.uint32, 'inter-area')),
                                    ('external_routes', YLeaf(YType.uint32, 'external-routes')),
                                ])
                                self.intra_area = None
                                self.inter_area = None
                                self.external_routes = None
                                self._segment_path = lambda: "ospf-distance"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.Distance.OspfDistance, ['intra_area', 'inter_area', 'external_routes'], name, value)


                        class IpDistances(Entity):
                            """
                            IP specific administrative distance
                            configuration
                            
                            .. attribute:: ip_distance
                            
                            	Administrative distance configuration for a particular IP address
                            	**type**\: list of  		 :py:class:`IpDistance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Distance.IpDistances.IpDistance>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.Distance.IpDistances, self).__init__()

                                self.yang_name = "ip-distances"
                                self.yang_parent_name = "distance"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("ip-distance", ("ip_distance", Ospf.Processes.Process.Vrfs.Vrf.Distance.IpDistances.IpDistance))])
                                self._leafs = OrderedDict()

                                self.ip_distance = YList(self)
                                self._segment_path = lambda: "ip-distances"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.Distance.IpDistances, [], name, value)


                            class IpDistance(Entity):
                                """
                                Administrative distance configuration for a
                                particular IP address
                                
                                .. attribute:: address  (key)
                                
                                	IP source address
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: wildcard  (key)
                                
                                	IP wild card bits \-\- inverted mask
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: distance
                                
                                	Administrative distance
                                	**type**\: int
                                
                                	**range:** 1..255
                                
                                	**default value**\: 110
                                
                                .. attribute:: access_list_name
                                
                                	Access Control List name
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.Vrfs.Vrf.Distance.IpDistances.IpDistance, self).__init__()

                                    self.yang_name = "ip-distance"
                                    self.yang_parent_name = "ip-distances"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['address','wildcard']
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('address', YLeaf(YType.str, 'address')),
                                        ('wildcard', YLeaf(YType.str, 'wildcard')),
                                        ('distance', YLeaf(YType.uint32, 'distance')),
                                        ('access_list_name', YLeaf(YType.str, 'access-list-name')),
                                    ])
                                    self.address = None
                                    self.wildcard = None
                                    self.distance = None
                                    self.access_list_name = None
                                    self._segment_path = lambda: "ip-distance" + "[address='" + str(self.address) + "']" + "[wildcard='" + str(self.wildcard) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.Distance.IpDistances.IpDistance, ['address', 'wildcard', 'distance', 'access_list_name'], name, value)


                    class AreaAddresses(Entity):
                        """
                        Area configuration
                        
                        .. attribute:: area_address
                        
                        	Configuration for a particular area
                        	**type**\: list of  		 :py:class:`AreaAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress>`
                        
                        .. attribute:: area_area_id
                        
                        	Configuration for a particular area
                        	**type**\: list of  		 :py:class:`AreaAreaId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses, self).__init__()

                            self.yang_name = "area-addresses"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("area-address", ("area_address", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress)), ("area-area-id", ("area_area_id", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId))])
                            self._leafs = OrderedDict()

                            self.area_address = YList(self)
                            self.area_area_id = YList(self)
                            self._segment_path = lambda: "area-addresses"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses, [], name, value)


                        class AreaAddress(Entity):
                            """
                            Configuration for a particular area
                            
                            .. attribute:: address  (key)
                            
                            	Area ID if in IP address format
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: virtual_link_scopes
                            
                            	Virtual Link scope configurations
                            	**type**\:  :py:class:`VirtualLinkScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes>`
                            
                            .. attribute:: sham_link_scopes
                            
                            	Sham Link scope configurations
                            	**type**\:  :py:class:`ShamLinkScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes>`
                            
                            .. attribute:: area_scope
                            
                            	Area scope configuration
                            	**type**\:  :py:class:`AreaScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope>`
                            
                            .. attribute:: name_scopes
                            
                            	Name scope configurations
                            	**type**\:  :py:class:`NameScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes>`
                            
                            .. attribute:: multi_area_interface_scopes
                            
                            	Multi Area Interface scope configurations
                            	**type**\:  :py:class:`MultiAreaInterfaceScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes>`
                            
                            .. attribute:: area_ranges
                            
                            	Summarize routes matching address/mask (border routers only)
                            	**type**\:  :py:class:`AreaRanges <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaRanges>`
                            
                            .. attribute:: nssa
                            
                            	Specify area as a NSSA area
                            	**type**\:  :py:class:`Nssa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Nssa>`
                            
                            .. attribute:: route_policy_in
                            
                            	Configure a route policy for inbound type\-3 lsa filtering
                            	**type**\: str
                            
                            .. attribute:: default_cost
                            
                            	Set the summary default\-cost of a NSSA/stub area
                            	**type**\: int
                            
                            	**range:** 1..16777215
                            
                            	**default value**\: 1
                            
                            .. attribute:: route_policy_out
                            
                            	Configure a route policy for outbound type\-3 lsa filtering
                            	**type**\: str
                            
                            .. attribute:: stub
                            
                            	Specify the area as a stub area (send summary LSA stub area)
                            	**type**\: bool
                            
                            .. attribute:: mpls_traffic_eng
                            
                            	Configure an OSPF area to run MPLS Traffic Engineering
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: external_out
                            
                            	Enable/Disable an OSPF area to advertise intra\-area prefixes out of this area as external
                            	**type**\: bool
                            
                            .. attribute:: summary_in
                            
                            	Enable/Disable an OSPF area to advertise external prefixes into this area as summary
                            	**type**\: bool
                            
                            .. attribute:: segment_routing
                            
                            	segment\-routing configuration Applicable only in Default VRF
                            	**type**\:  :py:class:`OspfSegmentRouting <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRouting>`
                            
                            .. attribute:: running
                            
                            	Enable routing on an IP network
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress, self).__init__()

                                self.yang_name = "area-address"
                                self.yang_parent_name = "area-addresses"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['address']
                                self._child_container_classes = OrderedDict([("virtual-link-scopes", ("virtual_link_scopes", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes)), ("sham-link-scopes", ("sham_link_scopes", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes)), ("area-scope", ("area_scope", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope)), ("name-scopes", ("name_scopes", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes)), ("multi-area-interface-scopes", ("multi_area_interface_scopes", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes)), ("area-ranges", ("area_ranges", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaRanges)), ("nssa", ("nssa", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Nssa))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('address', YLeaf(YType.str, 'address')),
                                    ('route_policy_in', YLeaf(YType.str, 'route-policy-in')),
                                    ('default_cost', YLeaf(YType.uint32, 'default-cost')),
                                    ('route_policy_out', YLeaf(YType.str, 'route-policy-out')),
                                    ('stub', YLeaf(YType.boolean, 'stub')),
                                    ('mpls_traffic_eng', YLeaf(YType.empty, 'mpls-traffic-eng')),
                                    ('external_out', YLeaf(YType.boolean, 'external-out')),
                                    ('summary_in', YLeaf(YType.boolean, 'summary-in')),
                                    ('segment_routing', YLeaf(YType.enumeration, 'segment-routing')),
                                    ('running', YLeaf(YType.empty, 'running')),
                                ])
                                self.address = None
                                self.route_policy_in = None
                                self.default_cost = None
                                self.route_policy_out = None
                                self.stub = None
                                self.mpls_traffic_eng = None
                                self.external_out = None
                                self.summary_in = None
                                self.segment_routing = None
                                self.running = None

                                self.virtual_link_scopes = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes()
                                self.virtual_link_scopes.parent = self
                                self._children_name_map["virtual_link_scopes"] = "virtual-link-scopes"
                                self._children_yang_names.add("virtual-link-scopes")

                                self.sham_link_scopes = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes()
                                self.sham_link_scopes.parent = self
                                self._children_name_map["sham_link_scopes"] = "sham-link-scopes"
                                self._children_yang_names.add("sham-link-scopes")

                                self.area_scope = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope()
                                self.area_scope.parent = self
                                self._children_name_map["area_scope"] = "area-scope"
                                self._children_yang_names.add("area-scope")

                                self.name_scopes = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes()
                                self.name_scopes.parent = self
                                self._children_name_map["name_scopes"] = "name-scopes"
                                self._children_yang_names.add("name-scopes")

                                self.multi_area_interface_scopes = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes()
                                self.multi_area_interface_scopes.parent = self
                                self._children_name_map["multi_area_interface_scopes"] = "multi-area-interface-scopes"
                                self._children_yang_names.add("multi-area-interface-scopes")

                                self.area_ranges = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaRanges()
                                self.area_ranges.parent = self
                                self._children_name_map["area_ranges"] = "area-ranges"
                                self._children_yang_names.add("area-ranges")

                                self.nssa = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Nssa()
                                self.nssa.parent = self
                                self._children_name_map["nssa"] = "nssa"
                                self._children_yang_names.add("nssa")
                                self._segment_path = lambda: "area-address" + "[address='" + str(self.address) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress, ['address', 'route_policy_in', 'default_cost', 'route_policy_out', 'stub', 'mpls_traffic_eng', 'external_out', 'summary_in', 'segment_routing', 'running'], name, value)


                            class VirtualLinkScopes(Entity):
                                """
                                Virtual Link scope configurations
                                
                                .. attribute:: virtual_link_scope
                                
                                	Virtual Link configuration
                                	**type**\: list of  		 :py:class:`VirtualLinkScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes, self).__init__()

                                    self.yang_name = "virtual-link-scopes"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([("virtual-link-scope", ("virtual_link_scope", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope))])
                                    self._leafs = OrderedDict()

                                    self.virtual_link_scope = YList(self)
                                    self._segment_path = lambda: "virtual-link-scopes"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes, [], name, value)


                                class VirtualLinkScope(Entity):
                                    """
                                    Virtual Link configuration
                                    
                                    .. attribute:: address  (key)
                                    
                                    	Router ID of virtual link neighbor
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: authentication
                                    
                                    	Authentication
                                    	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication>`
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Interval between HELLO packets in seconds
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Number of seconds to delay transmission of LSAs
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 1
                                    
                                    .. attribute:: dead_interval_minimal
                                    
                                    	Interval after which a neighbor is declared dead
                                    	**type**\:  :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal>`
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Time in seconds between retransmitting lost link state advertisements
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 5
                                    
                                    .. attribute:: running
                                    
                                    	Enable routing on an IP network
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope, self).__init__()

                                        self.yang_name = "virtual-link-scope"
                                        self.yang_parent_name = "virtual-link-scopes"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['address']
                                        self._child_container_classes = OrderedDict([("authentication", ("authentication", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication)), ("dead-interval-minimal", ("dead_interval_minimal", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('address', YLeaf(YType.str, 'address')),
                                            ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                                            ('transmit_delay', YLeaf(YType.uint32, 'transmit-delay')),
                                            ('retransmit_interval', YLeaf(YType.uint32, 'retransmit-interval')),
                                            ('running', YLeaf(YType.empty, 'running')),
                                        ])
                                        self.address = None
                                        self.hello_interval = None
                                        self.transmit_delay = None
                                        self.retransmit_interval = None
                                        self.running = None

                                        self.authentication = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication()
                                        self.authentication.parent = self
                                        self._children_name_map["authentication"] = "authentication"
                                        self._children_yang_names.add("authentication")

                                        self.dead_interval_minimal = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal()
                                        self.dead_interval_minimal.parent = self
                                        self._children_name_map["dead_interval_minimal"] = "dead-interval-minimal"
                                        self._children_yang_names.add("dead-interval-minimal")
                                        self._segment_path = lambda: "virtual-link-scope" + "[address='" + str(self.address) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope, ['address', 'hello_interval', 'transmit_delay', 'retransmit_interval', 'running'], name, value)


                                    class Authentication(Entity):
                                        """
                                        Authentication
                                        
                                        .. attribute:: type
                                        
                                        	Authentication type
                                        	**type**\:  :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.Type>`
                                        
                                        .. attribute:: message_digest_keies
                                        
                                        	Message digest authentication password (key) configurations, first 16 chars used
                                        	**type**\:  :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies>`
                                        
                                        .. attribute:: key
                                        
                                        	Authentication key configuration
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication, self).__init__()

                                            self.yang_name = "authentication"
                                            self.yang_parent_name = "virtual-link-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("type", ("type", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.Type)), ("message-digest-keies", ("message_digest_keies", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('key', YLeaf(YType.str, 'key')),
                                            ])
                                            self.key = None

                                            self.type = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.Type()
                                            self.type.parent = self
                                            self._children_name_map["type"] = "type"
                                            self._children_yang_names.add("type")

                                            self.message_digest_keies = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies()
                                            self.message_digest_keies.parent = self
                                            self._children_name_map["message_digest_keies"] = "message-digest-keies"
                                            self._children_yang_names.add("message-digest-keies")
                                            self._segment_path = lambda: "authentication"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication, ['key'], name, value)


                                        class Type(Entity):
                                            """
                                            Authentication type
                                            
                                            .. attribute:: authen_type
                                            
                                            	Authentication type code 
                                            	**type**\:  :py:class:`OspfAuthentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthentication>`
                                            
                                            .. attribute:: keychain_authen_type
                                            
                                            	Keychain authentication type
                                            	**type**\:  :py:class:`OspfKeychainAuth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuth>`
                                            
                                            .. attribute:: keychain_name
                                            
                                            	Keychain name
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.Type, self).__init__()

                                                self.yang_name = "type"
                                                self.yang_parent_name = "authentication"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('authen_type', YLeaf(YType.enumeration, 'authen-type')),
                                                    ('keychain_authen_type', YLeaf(YType.enumeration, 'keychain-authen-type')),
                                                    ('keychain_name', YLeaf(YType.str, 'keychain-name')),
                                                ])
                                                self.authen_type = None
                                                self.keychain_authen_type = None
                                                self.keychain_name = None
                                                self._segment_path = lambda: "type"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.Type, ['authen_type', 'keychain_authen_type', 'keychain_name'], name, value)


                                        class MessageDigestKeies(Entity):
                                            """
                                            Message digest authentication password (key)
                                            configurations, first 16 chars used
                                            
                                            .. attribute:: message_digest_key
                                            
                                            	Message digest authentication password (key) configuration
                                            	**type**\: list of  		 :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies, self).__init__()

                                                self.yang_name = "message-digest-keies"
                                                self.yang_parent_name = "authentication"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("message-digest-key", ("message_digest_key", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies.MessageDigestKey))])
                                                self._leafs = OrderedDict()

                                                self.message_digest_key = YList(self)
                                                self._segment_path = lambda: "message-digest-keies"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies, [], name, value)


                                            class MessageDigestKey(Entity):
                                                """
                                                Message digest authentication password (key)
                                                configuration
                                                
                                                .. attribute:: key_id  (key)
                                                
                                                	Key ID
                                                	**type**\: int
                                                
                                                	**range:** 1..255
                                                
                                                .. attribute:: password
                                                
                                                	Password
                                                	**type**\: str
                                                
                                                	**pattern:** (!.+)\|([^!].+)
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies.MessageDigestKey, self).__init__()

                                                    self.yang_name = "message-digest-key"
                                                    self.yang_parent_name = "message-digest-keies"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['key_id']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('key_id', YLeaf(YType.uint32, 'key-id')),
                                                        ('password', YLeaf(YType.str, 'password')),
                                                    ])
                                                    self.key_id = None
                                                    self.password = None
                                                    self._segment_path = lambda: "message-digest-key" + "[key-id='" + str(self.key_id) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies.MessageDigestKey, ['key_id', 'password'], name, value)


                                    class DeadIntervalMinimal(Entity):
                                        """
                                        Interval after which a neighbor is declared dead
                                        
                                        .. attribute:: interval
                                        
                                        	Interval size in seconds after which a neighbor is declared dead
                                        	**type**\: int
                                        
                                        	**range:** 1..65535
                                        
                                        	**units**\: second
                                        
                                        .. attribute:: multiplier
                                        
                                        	Number of Hellos in one second
                                        	**type**\: int
                                        
                                        	**range:** 3..20
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal, self).__init__()

                                            self.yang_name = "dead-interval-minimal"
                                            self.yang_parent_name = "virtual-link-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('interval', YLeaf(YType.uint32, 'interval')),
                                                ('multiplier', YLeaf(YType.uint32, 'multiplier')),
                                            ])
                                            self.interval = None
                                            self.multiplier = None
                                            self._segment_path = lambda: "dead-interval-minimal"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal, ['interval', 'multiplier'], name, value)


                            class ShamLinkScopes(Entity):
                                """
                                Sham Link scope configurations
                                
                                .. attribute:: sham_link_scope
                                
                                	Sham Link configuration
                                	**type**\: list of  		 :py:class:`ShamLinkScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes, self).__init__()

                                    self.yang_name = "sham-link-scopes"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([("sham-link-scope", ("sham_link_scope", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope))])
                                    self._leafs = OrderedDict()

                                    self.sham_link_scope = YList(self)
                                    self._segment_path = lambda: "sham-link-scopes"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes, [], name, value)


                                class ShamLinkScope(Entity):
                                    """
                                    Sham Link configuration
                                    
                                    .. attribute:: source_address  (key)
                                    
                                    	Address of the local sham\-link endpoint
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: destination_address  (key)
                                    
                                    	Address of the remote sham\-link endpoint
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: source
                                    
                                    	Address of the local sham\-link endpoint. Enter an IP Address
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: cost
                                    
                                    	Interface cost
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: authentication
                                    
                                    	Authentication
                                    	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication>`
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Interval between HELLO packets in seconds
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Number of seconds to delay transmission of LSAs
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 1
                                    
                                    .. attribute:: dead_interval_minimal
                                    
                                    	Interval after which a neighbor is declared dead
                                    	**type**\:  :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal>`
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Time in seconds between retransmitting lost link state advertisements
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 5
                                    
                                    .. attribute:: running
                                    
                                    	Enable routing on an IP network
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope, self).__init__()

                                        self.yang_name = "sham-link-scope"
                                        self.yang_parent_name = "sham-link-scopes"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['source_address','destination_address']
                                        self._child_container_classes = OrderedDict([("authentication", ("authentication", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication)), ("dead-interval-minimal", ("dead_interval_minimal", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('source_address', YLeaf(YType.str, 'source-address')),
                                            ('destination_address', YLeaf(YType.str, 'destination-address')),
                                            ('source', YLeaf(YType.str, 'source')),
                                            ('cost', YLeaf(YType.uint32, 'cost')),
                                            ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                                            ('transmit_delay', YLeaf(YType.uint32, 'transmit-delay')),
                                            ('retransmit_interval', YLeaf(YType.uint32, 'retransmit-interval')),
                                            ('running', YLeaf(YType.empty, 'running')),
                                        ])
                                        self.source_address = None
                                        self.destination_address = None
                                        self.source = None
                                        self.cost = None
                                        self.hello_interval = None
                                        self.transmit_delay = None
                                        self.retransmit_interval = None
                                        self.running = None

                                        self.authentication = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication()
                                        self.authentication.parent = self
                                        self._children_name_map["authentication"] = "authentication"
                                        self._children_yang_names.add("authentication")

                                        self.dead_interval_minimal = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal()
                                        self.dead_interval_minimal.parent = self
                                        self._children_name_map["dead_interval_minimal"] = "dead-interval-minimal"
                                        self._children_yang_names.add("dead-interval-minimal")
                                        self._segment_path = lambda: "sham-link-scope" + "[source-address='" + str(self.source_address) + "']" + "[destination-address='" + str(self.destination_address) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope, ['source_address', 'destination_address', 'source', 'cost', 'hello_interval', 'transmit_delay', 'retransmit_interval', 'running'], name, value)


                                    class Authentication(Entity):
                                        """
                                        Authentication
                                        
                                        .. attribute:: type
                                        
                                        	Authentication type
                                        	**type**\:  :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.Type>`
                                        
                                        .. attribute:: message_digest_keies
                                        
                                        	Message digest authentication password (key) configurations, first 16 chars used
                                        	**type**\:  :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies>`
                                        
                                        .. attribute:: key
                                        
                                        	Authentication key configuration
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication, self).__init__()

                                            self.yang_name = "authentication"
                                            self.yang_parent_name = "sham-link-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("type", ("type", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.Type)), ("message-digest-keies", ("message_digest_keies", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('key', YLeaf(YType.str, 'key')),
                                            ])
                                            self.key = None

                                            self.type = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.Type()
                                            self.type.parent = self
                                            self._children_name_map["type"] = "type"
                                            self._children_yang_names.add("type")

                                            self.message_digest_keies = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies()
                                            self.message_digest_keies.parent = self
                                            self._children_name_map["message_digest_keies"] = "message-digest-keies"
                                            self._children_yang_names.add("message-digest-keies")
                                            self._segment_path = lambda: "authentication"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication, ['key'], name, value)


                                        class Type(Entity):
                                            """
                                            Authentication type
                                            
                                            .. attribute:: authen_type
                                            
                                            	Authentication type code 
                                            	**type**\:  :py:class:`OspfAuthentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthentication>`
                                            
                                            .. attribute:: keychain_authen_type
                                            
                                            	Keychain authentication type
                                            	**type**\:  :py:class:`OspfKeychainAuth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuth>`
                                            
                                            .. attribute:: keychain_name
                                            
                                            	Keychain name
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.Type, self).__init__()

                                                self.yang_name = "type"
                                                self.yang_parent_name = "authentication"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('authen_type', YLeaf(YType.enumeration, 'authen-type')),
                                                    ('keychain_authen_type', YLeaf(YType.enumeration, 'keychain-authen-type')),
                                                    ('keychain_name', YLeaf(YType.str, 'keychain-name')),
                                                ])
                                                self.authen_type = None
                                                self.keychain_authen_type = None
                                                self.keychain_name = None
                                                self._segment_path = lambda: "type"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.Type, ['authen_type', 'keychain_authen_type', 'keychain_name'], name, value)


                                        class MessageDigestKeies(Entity):
                                            """
                                            Message digest authentication password (key)
                                            configurations, first 16 chars used
                                            
                                            .. attribute:: message_digest_key
                                            
                                            	Message digest authentication password (key) configuration
                                            	**type**\: list of  		 :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies, self).__init__()

                                                self.yang_name = "message-digest-keies"
                                                self.yang_parent_name = "authentication"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("message-digest-key", ("message_digest_key", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies.MessageDigestKey))])
                                                self._leafs = OrderedDict()

                                                self.message_digest_key = YList(self)
                                                self._segment_path = lambda: "message-digest-keies"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies, [], name, value)


                                            class MessageDigestKey(Entity):
                                                """
                                                Message digest authentication password (key)
                                                configuration
                                                
                                                .. attribute:: key_id  (key)
                                                
                                                	Key ID
                                                	**type**\: int
                                                
                                                	**range:** 1..255
                                                
                                                .. attribute:: password
                                                
                                                	Password
                                                	**type**\: str
                                                
                                                	**pattern:** (!.+)\|([^!].+)
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies.MessageDigestKey, self).__init__()

                                                    self.yang_name = "message-digest-key"
                                                    self.yang_parent_name = "message-digest-keies"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['key_id']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('key_id', YLeaf(YType.uint32, 'key-id')),
                                                        ('password', YLeaf(YType.str, 'password')),
                                                    ])
                                                    self.key_id = None
                                                    self.password = None
                                                    self._segment_path = lambda: "message-digest-key" + "[key-id='" + str(self.key_id) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies.MessageDigestKey, ['key_id', 'password'], name, value)


                                    class DeadIntervalMinimal(Entity):
                                        """
                                        Interval after which a neighbor is declared dead
                                        
                                        .. attribute:: interval
                                        
                                        	Interval size in seconds after which a neighbor is declared dead
                                        	**type**\: int
                                        
                                        	**range:** 1..65535
                                        
                                        	**units**\: second
                                        
                                        .. attribute:: multiplier
                                        
                                        	Number of Hellos in one second
                                        	**type**\: int
                                        
                                        	**range:** 3..20
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal, self).__init__()

                                            self.yang_name = "dead-interval-minimal"
                                            self.yang_parent_name = "sham-link-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('interval', YLeaf(YType.uint32, 'interval')),
                                                ('multiplier', YLeaf(YType.uint32, 'multiplier')),
                                            ])
                                            self.interval = None
                                            self.multiplier = None
                                            self._segment_path = lambda: "dead-interval-minimal"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal, ['interval', 'multiplier'], name, value)


                            class AreaScope(Entity):
                                """
                                Area scope configuration
                                
                                .. attribute:: distribute_list
                                
                                	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                                	**type**\:  :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.DistributeList>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: cost
                                
                                	Interface cost
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: bfd
                                
                                	BFD configuration
                                	**type**\:  :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Bfd>`
                                
                                .. attribute:: prefix_suppression_primary
                                
                                	Enable/Disable prefix suppression for primary addresses
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: mtu_ignore
                                
                                	Enable/Disable ignoring of MTU in DBD packets
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: authentication
                                
                                	Authentication
                                	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication>`
                                
                                .. attribute:: ldp_sync_igp_shortcuts
                                
                                	Enable/Disable MPLS LDP sync for igp\-shortcuts
                                	**type**\: bool
                                
                                .. attribute:: ldp_auto_config
                                
                                	Enable MPLS LDP Auto Config
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: security
                                
                                	Container class for security related configuration parameters
                                	**type**\:  :py:class:`Security <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Security>`
                                
                                .. attribute:: network_type
                                
                                	Type of attached network
                                	**type**\:  :py:class:`OspfNetwork <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfNetwork>`
                                
                                .. attribute:: hello_interval
                                
                                	Interval between HELLO packets in seconds
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: loopback_stub_network
                                
                                	Enable/Disable advertising loopback as a stub network
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: prefix_suppression_secondary
                                
                                	Enable/Disable prefix suppression for secondary addresses
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: demand_circuit
                                
                                	Enable/Disable OSPF demand circuit
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: passive
                                
                                	When enabled, prevent sending HELLO packets over link
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: transmit_delay
                                
                                	Number of seconds to delay transmission of LSAs
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 1
                                
                                .. attribute:: packet_size
                                
                                	Customize size of OSPF packets upto MTU
                                	**type**\: int
                                
                                	**range:** 576..10000
                                
                                .. attribute:: ldp_sync
                                
                                	Enable/Disable MPLS LDP sync
                                	**type**\: bool
                                
                                .. attribute:: database_filter
                                
                                	Filter OSPF LSA during synchronization and flooding
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: dead_interval_minimal
                                
                                	Interval after which a neighbor is declared dead
                                	**type**\:  :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.DeadIntervalMinimal>`
                                
                                .. attribute:: fast_reroute
                                
                                	Fast\-reroute configuration
                                	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute>`
                                
                                .. attribute:: link_down_fast_detect
                                
                                	Enable/Disable registration for early interface down notifications
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: segment_routing_forwarding
                                
                                	segment\-routing forwarding configuration Applicableonly in Default VRF
                                	**type**\:  :py:class:`OspfSegmentRoutingForwarding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRoutingForwarding>`
                                
                                .. attribute:: retransmit_interval
                                
                                	Time in seconds between retransmitting lost link state advertisements
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 5
                                
                                .. attribute:: priority
                                
                                	Router priority for DR and BDR election
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                	**default value**\: 1
                                
                                .. attribute:: flood_reduction
                                
                                	Enable/Disable OSPF flood reduction
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: cost_fallback
                                
                                	Interface fallback cost
                                	**type**\:  :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.CostFallback>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope, self).__init__()

                                    self.yang_name = "area-scope"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("distribute-list", ("distribute_list", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.DistributeList)), ("bfd", ("bfd", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Bfd)), ("authentication", ("authentication", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication)), ("security", ("security", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Security)), ("dead-interval-minimal", ("dead_interval_minimal", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.DeadIntervalMinimal)), ("fast-reroute", ("fast_reroute", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute)), ("cost-fallback", ("cost_fallback", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.CostFallback))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('cost', YLeaf(YType.uint32, 'cost')),
                                        ('prefix_suppression_primary', YLeaf(YType.boolean, 'prefix-suppression-primary')),
                                        ('mtu_ignore', YLeaf(YType.boolean, 'mtu-ignore')),
                                        ('ldp_sync_igp_shortcuts', YLeaf(YType.boolean, 'ldp-sync-igp-shortcuts')),
                                        ('ldp_auto_config', YLeaf(YType.empty, 'ldp-auto-config')),
                                        ('network_type', YLeaf(YType.enumeration, 'network-type')),
                                        ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                                        ('loopback_stub_network', YLeaf(YType.boolean, 'loopback-stub-network')),
                                        ('prefix_suppression_secondary', YLeaf(YType.boolean, 'prefix-suppression-secondary')),
                                        ('demand_circuit', YLeaf(YType.boolean, 'demand-circuit')),
                                        ('passive', YLeaf(YType.boolean, 'passive')),
                                        ('transmit_delay', YLeaf(YType.uint32, 'transmit-delay')),
                                        ('packet_size', YLeaf(YType.uint32, 'packet-size')),
                                        ('ldp_sync', YLeaf(YType.boolean, 'ldp-sync')),
                                        ('database_filter', YLeaf(YType.boolean, 'database-filter')),
                                        ('link_down_fast_detect', YLeaf(YType.boolean, 'link-down-fast-detect')),
                                        ('segment_routing_forwarding', YLeaf(YType.enumeration, 'segment-routing-forwarding')),
                                        ('retransmit_interval', YLeaf(YType.uint32, 'retransmit-interval')),
                                        ('priority', YLeaf(YType.uint32, 'priority')),
                                        ('flood_reduction', YLeaf(YType.boolean, 'flood-reduction')),
                                    ])
                                    self.cost = None
                                    self.prefix_suppression_primary = None
                                    self.mtu_ignore = None
                                    self.ldp_sync_igp_shortcuts = None
                                    self.ldp_auto_config = None
                                    self.network_type = None
                                    self.hello_interval = None
                                    self.loopback_stub_network = None
                                    self.prefix_suppression_secondary = None
                                    self.demand_circuit = None
                                    self.passive = None
                                    self.transmit_delay = None
                                    self.packet_size = None
                                    self.ldp_sync = None
                                    self.database_filter = None
                                    self.link_down_fast_detect = None
                                    self.segment_routing_forwarding = None
                                    self.retransmit_interval = None
                                    self.priority = None
                                    self.flood_reduction = None

                                    self.distribute_list = None
                                    self._children_name_map["distribute_list"] = "distribute-list"
                                    self._children_yang_names.add("distribute-list")

                                    self.bfd = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Bfd()
                                    self.bfd.parent = self
                                    self._children_name_map["bfd"] = "bfd"
                                    self._children_yang_names.add("bfd")

                                    self.authentication = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication()
                                    self.authentication.parent = self
                                    self._children_name_map["authentication"] = "authentication"
                                    self._children_yang_names.add("authentication")

                                    self.security = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Security()
                                    self.security.parent = self
                                    self._children_name_map["security"] = "security"
                                    self._children_yang_names.add("security")

                                    self.dead_interval_minimal = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.DeadIntervalMinimal()
                                    self.dead_interval_minimal.parent = self
                                    self._children_name_map["dead_interval_minimal"] = "dead-interval-minimal"
                                    self._children_yang_names.add("dead-interval-minimal")

                                    self.fast_reroute = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute()
                                    self.fast_reroute.parent = self
                                    self._children_name_map["fast_reroute"] = "fast-reroute"
                                    self._children_yang_names.add("fast-reroute")

                                    self.cost_fallback = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.CostFallback()
                                    self.cost_fallback.parent = self
                                    self._children_name_map["cost_fallback"] = "cost-fallback"
                                    self._children_yang_names.add("cost-fallback")
                                    self._segment_path = lambda: "area-scope"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope, ['cost', 'prefix_suppression_primary', 'mtu_ignore', 'ldp_sync_igp_shortcuts', 'ldp_auto_config', 'network_type', 'hello_interval', 'loopback_stub_network', 'prefix_suppression_secondary', 'demand_circuit', 'passive', 'transmit_delay', 'packet_size', 'ldp_sync', 'database_filter', 'link_down_fast_detect', 'segment_routing_forwarding', 'retransmit_interval', 'priority', 'flood_reduction'], name, value)


                                class DistributeList(Entity):
                                    """
                                    Filter networks intalled to RIB (disable as ACL
                                    name means filtering is disabled)
                                    
                                    .. attribute:: access_list_name
                                    
                                    	Access Control List name
                                    	**type**\: str
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route Policy name
                                    	**type**\: str
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.DistributeList, self).__init__()

                                        self.yang_name = "distribute-list"
                                        self.yang_parent_name = "area-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('access_list_name', YLeaf(YType.str, 'access-list-name')),
                                            ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
                                        ])
                                        self.access_list_name = None
                                        self.route_policy_name = None
                                        self._segment_path = lambda: "distribute-list"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.DistributeList, ['access_list_name', 'route_policy_name'], name, value)


                                class Bfd(Entity):
                                    """
                                    BFD configuration
                                    
                                    .. attribute:: interval
                                    
                                    	Hello interval for BFD sessions created by OSPF
                                    	**type**\: int
                                    
                                    	**range:** 3..30000
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: detection_multiplier
                                    
                                    	Detection multiplier for BFD sessions created by OSPF
                                    	**type**\: int
                                    
                                    	**range:** 2..50
                                    
                                    .. attribute:: fast_detect_mode
                                    
                                    	 use of Bidirectional Forwarding Detection
                                    	**type**\:  :py:class:`BfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.BfdEnableMode>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Bfd, self).__init__()

                                        self.yang_name = "bfd"
                                        self.yang_parent_name = "area-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interval', YLeaf(YType.uint32, 'interval')),
                                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                                            ('fast_detect_mode', YLeaf(YType.enumeration, 'fast-detect-mode')),
                                        ])
                                        self.interval = None
                                        self.detection_multiplier = None
                                        self.fast_detect_mode = None
                                        self._segment_path = lambda: "bfd"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Bfd, ['interval', 'detection_multiplier', 'fast_detect_mode'], name, value)


                                class Authentication(Entity):
                                    """
                                    Authentication
                                    
                                    .. attribute:: type
                                    
                                    	Authentication type
                                    	**type**\:  :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication.Type>`
                                    
                                    .. attribute:: message_digest_keies
                                    
                                    	Message digest authentication password (key) configurations, first 16 chars used
                                    	**type**\:  :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies>`
                                    
                                    .. attribute:: key
                                    
                                    	Authentication key configuration
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication, self).__init__()

                                        self.yang_name = "authentication"
                                        self.yang_parent_name = "area-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("type", ("type", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication.Type)), ("message-digest-keies", ("message_digest_keies", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('key', YLeaf(YType.str, 'key')),
                                        ])
                                        self.key = None

                                        self.type = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication.Type()
                                        self.type.parent = self
                                        self._children_name_map["type"] = "type"
                                        self._children_yang_names.add("type")

                                        self.message_digest_keies = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies()
                                        self.message_digest_keies.parent = self
                                        self._children_name_map["message_digest_keies"] = "message-digest-keies"
                                        self._children_yang_names.add("message-digest-keies")
                                        self._segment_path = lambda: "authentication"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication, ['key'], name, value)


                                    class Type(Entity):
                                        """
                                        Authentication type
                                        
                                        .. attribute:: authen_type
                                        
                                        	Authentication type code 
                                        	**type**\:  :py:class:`OspfAuthentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthentication>`
                                        
                                        .. attribute:: keychain_authen_type
                                        
                                        	Keychain authentication type
                                        	**type**\:  :py:class:`OspfKeychainAuth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuth>`
                                        
                                        .. attribute:: keychain_name
                                        
                                        	Keychain name
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication.Type, self).__init__()

                                            self.yang_name = "type"
                                            self.yang_parent_name = "authentication"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('authen_type', YLeaf(YType.enumeration, 'authen-type')),
                                                ('keychain_authen_type', YLeaf(YType.enumeration, 'keychain-authen-type')),
                                                ('keychain_name', YLeaf(YType.str, 'keychain-name')),
                                            ])
                                            self.authen_type = None
                                            self.keychain_authen_type = None
                                            self.keychain_name = None
                                            self._segment_path = lambda: "type"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication.Type, ['authen_type', 'keychain_authen_type', 'keychain_name'], name, value)


                                    class MessageDigestKeies(Entity):
                                        """
                                        Message digest authentication password (key)
                                        configurations, first 16 chars used
                                        
                                        .. attribute:: message_digest_key
                                        
                                        	Message digest authentication password (key) configuration
                                        	**type**\: list of  		 :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies, self).__init__()

                                            self.yang_name = "message-digest-keies"
                                            self.yang_parent_name = "authentication"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("message-digest-key", ("message_digest_key", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies.MessageDigestKey))])
                                            self._leafs = OrderedDict()

                                            self.message_digest_key = YList(self)
                                            self._segment_path = lambda: "message-digest-keies"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies, [], name, value)


                                        class MessageDigestKey(Entity):
                                            """
                                            Message digest authentication password (key)
                                            configuration
                                            
                                            .. attribute:: key_id  (key)
                                            
                                            	Key ID
                                            	**type**\: int
                                            
                                            	**range:** 1..255
                                            
                                            .. attribute:: password
                                            
                                            	Password
                                            	**type**\: str
                                            
                                            	**pattern:** (!.+)\|([^!].+)
                                            
                                            	**mandatory**\: True
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies.MessageDigestKey, self).__init__()

                                                self.yang_name = "message-digest-key"
                                                self.yang_parent_name = "message-digest-keies"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['key_id']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('key_id', YLeaf(YType.uint32, 'key-id')),
                                                    ('password', YLeaf(YType.str, 'password')),
                                                ])
                                                self.key_id = None
                                                self.password = None
                                                self._segment_path = lambda: "message-digest-key" + "[key-id='" + str(self.key_id) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies.MessageDigestKey, ['key_id', 'password'], name, value)


                                class Security(Entity):
                                    """
                                    Container class for security related
                                    configuration parameters
                                    
                                    .. attribute:: ttl
                                    
                                    	Enabling turns on TTL security
                                    	**type**\:  :py:class:`Ttl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Security.Ttl>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Security, self).__init__()

                                        self.yang_name = "security"
                                        self.yang_parent_name = "area-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("ttl", ("ttl", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Security.Ttl))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.ttl = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Security.Ttl()
                                        self.ttl.parent = self
                                        self._children_name_map["ttl"] = "ttl"
                                        self._children_yang_names.add("ttl")
                                        self._segment_path = lambda: "security"


                                    class Ttl(Entity):
                                        """
                                        Enabling turns on TTL security
                                        
                                        .. attribute:: enable
                                        
                                        	Enable TTL security
                                        	**type**\: bool
                                        
                                        .. attribute:: hop_count
                                        
                                        	Hop count
                                        	**type**\: int
                                        
                                        	**range:** 1..254
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Security.Ttl, self).__init__()

                                            self.yang_name = "ttl"
                                            self.yang_parent_name = "security"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('enable', YLeaf(YType.boolean, 'enable')),
                                                ('hop_count', YLeaf(YType.uint32, 'hop-count')),
                                            ])
                                            self.enable = None
                                            self.hop_count = None
                                            self._segment_path = lambda: "ttl"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Security.Ttl, ['enable', 'hop_count'], name, value)


                                class DeadIntervalMinimal(Entity):
                                    """
                                    Interval after which a neighbor is declared dead
                                    
                                    .. attribute:: interval
                                    
                                    	Interval size in seconds after which a neighbor is declared dead
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: multiplier
                                    
                                    	Number of Hellos in one second
                                    	**type**\: int
                                    
                                    	**range:** 3..20
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.DeadIntervalMinimal, self).__init__()

                                        self.yang_name = "dead-interval-minimal"
                                        self.yang_parent_name = "area-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interval', YLeaf(YType.uint32, 'interval')),
                                            ('multiplier', YLeaf(YType.uint32, 'multiplier')),
                                        ])
                                        self.interval = None
                                        self.multiplier = None
                                        self._segment_path = lambda: "dead-interval-minimal"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.DeadIntervalMinimal, ['interval', 'multiplier'], name, value)


                                class FastReroute(Entity):
                                    """
                                    Fast\-reroute configuration
                                    
                                    .. attribute:: per_link
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink>`
                                    
                                    .. attribute:: per_prefix
                                    
                                    	Fast\-reroute per\-prefix global configuration
                                    	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix>`
                                    
                                    .. attribute:: fast_reroute_enable
                                    
                                    	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                    	**type**\:  :py:class:`OspfFastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastReroute>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute, self).__init__()

                                        self.yang_name = "fast-reroute"
                                        self.yang_parent_name = "area-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("per-link", ("per_link", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('fast_reroute_enable', YLeaf(YType.enumeration, 'fast-reroute-enable')),
                                        ])
                                        self.fast_reroute_enable = None

                                        self.per_link = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink()
                                        self.per_link.parent = self
                                        self._children_name_map["per_link"] = "per-link"
                                        self._children_yang_names.add("per-link")

                                        self.per_prefix = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix()
                                        self.per_prefix.parent = self
                                        self._children_name_map["per_prefix"] = "per-prefix"
                                        self._children_yang_names.add("per-prefix")
                                        self._segment_path = lambda: "fast-reroute"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute, ['fast_reroute_enable'], name, value)


                                    class PerLink(Entity):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                        	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink, self).__init__()

                                            self.yang_name = "per-link"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                            ])
                                            self.fast_reroute_use_candidate_only = None

                                            self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                            self._children_yang_names.add("candidate-interfaces")

                                            self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._children_yang_names.add("exclude-interfaces")
                                            self._segment_path = lambda: "per-link"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                        class CandidateInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface))])
                                                self._leafs = OrderedDict()

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(Entity):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                        class ExcludeInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup or UCMP
                                            	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface))])
                                                self._leafs = OrderedDict()

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(Entity):
                                                """
                                                Exclude an interface from becoming a backup or
                                                UCMP
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                    class PerPrefix(Entity):
                                        """
                                        Fast\-reroute per\-prefix global configuration
                                        
                                        .. attribute:: remote_lfa
                                        
                                        	Remote LFA configuration
                                        	**type**\:  :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.RemoteLfa>`
                                        
                                        .. attribute:: tiebreakers
                                        
                                        	Fast\-reroute tiebreakers configurations
                                        	**type**\:  :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers>`
                                        
                                        .. attribute:: topology_independent_lfa
                                        
                                        	Topology Independet LFA configuration
                                        	**type**\: bool
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                        	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix, self).__init__()

                                            self.yang_name = "per-prefix"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("remote-lfa", ("remote_lfa", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.RemoteLfa)), ("tiebreakers", ("tiebreakers", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers)), ("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('topology_independent_lfa', YLeaf(YType.boolean, 'topology-independent-lfa')),
                                                ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                            ])
                                            self.topology_independent_lfa = None
                                            self.fast_reroute_use_candidate_only = None

                                            self.remote_lfa = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.RemoteLfa()
                                            self.remote_lfa.parent = self
                                            self._children_name_map["remote_lfa"] = "remote-lfa"
                                            self._children_yang_names.add("remote-lfa")

                                            self.tiebreakers = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers()
                                            self.tiebreakers.parent = self
                                            self._children_name_map["tiebreakers"] = "tiebreakers"
                                            self._children_yang_names.add("tiebreakers")

                                            self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                            self._children_yang_names.add("candidate-interfaces")

                                            self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._children_yang_names.add("exclude-interfaces")
                                            self._segment_path = lambda: "per-prefix"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix, ['topology_independent_lfa', 'fast_reroute_use_candidate_only'], name, value)


                                        class RemoteLfa(Entity):
                                            """
                                            Remote LFA configuration
                                            
                                            .. attribute:: tunnel
                                            
                                            	Enable/Disable remote LFA computation
                                            	**type**\:  :py:class:`OspfFrrRlfaTunnel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFrrRlfaTunnel>`
                                            
                                            .. attribute:: maximum_cost
                                            
                                            	Maximum path cost to remote LFA
                                            	**type**\: int
                                            
                                            	**range:** 1..4294967295
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.RemoteLfa, self).__init__()

                                                self.yang_name = "remote-lfa"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('tunnel', YLeaf(YType.enumeration, 'tunnel')),
                                                    ('maximum_cost', YLeaf(YType.uint32, 'maximum-cost')),
                                                ])
                                                self.tunnel = None
                                                self.maximum_cost = None
                                                self._segment_path = lambda: "remote-lfa"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.RemoteLfa, ['tunnel', 'maximum_cost'], name, value)


                                        class Tiebreakers(Entity):
                                            """
                                            Fast\-reroute tiebreakers configurations
                                            
                                            .. attribute:: tiebreaker
                                            
                                            	Fast\-reroute tiebreakers configuration
                                            	**type**\: list of  		 :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers, self).__init__()

                                                self.yang_name = "tiebreakers"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("tiebreaker", ("tiebreaker", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker))])
                                                self._leafs = OrderedDict()

                                                self.tiebreaker = YList(self)
                                                self._segment_path = lambda: "tiebreakers"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers, [], name, value)


                                            class Tiebreaker(Entity):
                                                """
                                                Fast\-reroute tiebreakers configuration
                                                
                                                .. attribute:: tiebreaker_type  (key)
                                                
                                                	Tiebreaker type
                                                	**type**\:  :py:class:`OspfFastRerouteTiebreakersIntf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakersIntf>`
                                                
                                                .. attribute:: tiebreaker_index
                                                
                                                	Index value for a tiebreaker, 0 to disable
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, self).__init__()

                                                    self.yang_name = "tiebreaker"
                                                    self.yang_parent_name = "tiebreakers"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['tiebreaker_type']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('tiebreaker_type', YLeaf(YType.enumeration, 'tiebreaker-type')),
                                                        ('tiebreaker_index', YLeaf(YType.uint32, 'tiebreaker-index')),
                                                    ])
                                                    self.tiebreaker_type = None
                                                    self.tiebreaker_index = None
                                                    self._segment_path = lambda: "tiebreaker" + "[tiebreaker-type='" + str(self.tiebreaker_type) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, ['tiebreaker_type', 'tiebreaker_index'], name, value)


                                        class CandidateInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface))])
                                                self._leafs = OrderedDict()

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(Entity):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                        class ExcludeInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup or UCMP
                                            	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface))])
                                                self._leafs = OrderedDict()

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(Entity):
                                                """
                                                Exclude an interface from becoming a backup or
                                                UCMP
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                class CostFallback(Entity):
                                    """
                                    Interface fallback cost
                                    
                                    .. attribute:: cost
                                    
                                    	Fallback cost of link
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: threshold
                                    
                                    	Bandwidth threshold
                                    	**type**\: int
                                    
                                    	**range:** 1..4294967
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.CostFallback, self).__init__()

                                        self.yang_name = "cost-fallback"
                                        self.yang_parent_name = "area-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('cost', YLeaf(YType.uint32, 'cost')),
                                            ('threshold', YLeaf(YType.uint32, 'threshold')),
                                        ])
                                        self.cost = None
                                        self.threshold = None
                                        self._segment_path = lambda: "cost-fallback"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.CostFallback, ['cost', 'threshold'], name, value)


                            class NameScopes(Entity):
                                """
                                Name scope configurations
                                
                                .. attribute:: name_scope
                                
                                	Name scope configuration
                                	**type**\: list of  		 :py:class:`NameScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes, self).__init__()

                                    self.yang_name = "name-scopes"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([("name-scope", ("name_scope", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope))])
                                    self._leafs = OrderedDict()

                                    self.name_scope = YList(self)
                                    self._segment_path = lambda: "name-scopes"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes, [], name, value)


                                class NameScope(Entity):
                                    """
                                    Name scope configuration
                                    
                                    .. attribute:: interface_name  (key)
                                    
                                    	Name of Interface to configure
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: prefix_sid
                                    
                                    	Prefix SID
                                    	**type**\:  :py:class:`PrefixSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.PrefixSid>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: prefix_sid_strict
                                    
                                    	Strict Prefix SID
                                    	**type**\:  :py:class:`PrefixSidStrict <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.PrefixSidStrict>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: distribute_list
                                    
                                    	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                                    	**type**\:  :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DistributeList>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: cost
                                    
                                    	Interface cost
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: bfd
                                    
                                    	BFD configuration
                                    	**type**\:  :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Bfd>`
                                    
                                    .. attribute:: prefix_suppression_primary
                                    
                                    	Enable/Disable prefix suppression for primary addresses
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: mtu_ignore
                                    
                                    	Enable/Disable ignoring of MTU in DBD packets
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: authentication
                                    
                                    	Authentication
                                    	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication>`
                                    
                                    .. attribute:: ldp_sync_igp_shortcuts
                                    
                                    	Enable/Disable MPLS LDP sync for igp\-shortcuts
                                    	**type**\: bool
                                    
                                    .. attribute:: ldp_auto_config
                                    
                                    	Enable MPLS LDP Auto Config
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: security
                                    
                                    	Container class for security related configuration parameters
                                    	**type**\:  :py:class:`Security <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security>`
                                    
                                    .. attribute:: neighbors
                                    
                                    	Neighbor router configuration information
                                    	**type**\:  :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors>`
                                    
                                    .. attribute:: network_type
                                    
                                    	Type of attached network
                                    	**type**\:  :py:class:`OspfNetwork <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfNetwork>`
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Interval between HELLO packets in seconds
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: loopback_stub_network
                                    
                                    	Enable/Disable advertising loopback as a stub network
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: prefix_suppression_secondary
                                    
                                    	Enable/Disable prefix suppression for secondary addresses
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: demand_circuit
                                    
                                    	Enable/Disable OSPF demand circuit
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: passive
                                    
                                    	When enabled, prevent sending HELLO packets over link
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Number of seconds to delay transmission of LSAs
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 1
                                    
                                    .. attribute:: packet_size
                                    
                                    	Customize size of OSPF packets upto MTU
                                    	**type**\: int
                                    
                                    	**range:** 576..10000
                                    
                                    .. attribute:: ldp_sync
                                    
                                    	Enable/Disable MPLS LDP sync
                                    	**type**\: bool
                                    
                                    .. attribute:: database_filter
                                    
                                    	Filter OSPF LSA during synchronization and flooding
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: dead_interval_minimal
                                    
                                    	Interval after which a neighbor is declared dead
                                    	**type**\:  :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DeadIntervalMinimal>`
                                    
                                    .. attribute:: fast_reroute
                                    
                                    	Fast\-reroute configuration
                                    	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute>`
                                    
                                    .. attribute:: link_down_fast_detect
                                    
                                    	Enable/Disable registration for early interface down notifications
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: segment_routing_forwarding
                                    
                                    	segment\-routing forwarding configuration Applicableonly in Default VRF
                                    	**type**\:  :py:class:`OspfSegmentRoutingForwarding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRoutingForwarding>`
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Time in seconds between retransmitting lost link state advertisements
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 5
                                    
                                    .. attribute:: priority
                                    
                                    	Router priority for DR and BDR election
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    	**default value**\: 1
                                    
                                    .. attribute:: flood_reduction
                                    
                                    	Enable/Disable OSPF flood reduction
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: cost_fallback
                                    
                                    	Interface fallback cost
                                    	**type**\:  :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.CostFallback>`
                                    
                                    .. attribute:: running
                                    
                                    	Enable routing on an IP network
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope, self).__init__()

                                        self.yang_name = "name-scope"
                                        self.yang_parent_name = "name-scopes"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['interface_name']
                                        self._child_container_classes = OrderedDict([("prefix-sid", ("prefix_sid", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.PrefixSid)), ("prefix-sid-strict", ("prefix_sid_strict", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.PrefixSidStrict)), ("distribute-list", ("distribute_list", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DistributeList)), ("bfd", ("bfd", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Bfd)), ("authentication", ("authentication", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication)), ("security", ("security", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security)), ("neighbors", ("neighbors", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors)), ("dead-interval-minimal", ("dead_interval_minimal", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DeadIntervalMinimal)), ("fast-reroute", ("fast_reroute", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute)), ("cost-fallback", ("cost_fallback", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.CostFallback))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                                            ('cost', YLeaf(YType.uint32, 'cost')),
                                            ('prefix_suppression_primary', YLeaf(YType.boolean, 'prefix-suppression-primary')),
                                            ('mtu_ignore', YLeaf(YType.boolean, 'mtu-ignore')),
                                            ('ldp_sync_igp_shortcuts', YLeaf(YType.boolean, 'ldp-sync-igp-shortcuts')),
                                            ('ldp_auto_config', YLeaf(YType.empty, 'ldp-auto-config')),
                                            ('network_type', YLeaf(YType.enumeration, 'network-type')),
                                            ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                                            ('loopback_stub_network', YLeaf(YType.boolean, 'loopback-stub-network')),
                                            ('prefix_suppression_secondary', YLeaf(YType.boolean, 'prefix-suppression-secondary')),
                                            ('demand_circuit', YLeaf(YType.boolean, 'demand-circuit')),
                                            ('passive', YLeaf(YType.boolean, 'passive')),
                                            ('transmit_delay', YLeaf(YType.uint32, 'transmit-delay')),
                                            ('packet_size', YLeaf(YType.uint32, 'packet-size')),
                                            ('ldp_sync', YLeaf(YType.boolean, 'ldp-sync')),
                                            ('database_filter', YLeaf(YType.boolean, 'database-filter')),
                                            ('link_down_fast_detect', YLeaf(YType.boolean, 'link-down-fast-detect')),
                                            ('segment_routing_forwarding', YLeaf(YType.enumeration, 'segment-routing-forwarding')),
                                            ('retransmit_interval', YLeaf(YType.uint32, 'retransmit-interval')),
                                            ('priority', YLeaf(YType.uint32, 'priority')),
                                            ('flood_reduction', YLeaf(YType.boolean, 'flood-reduction')),
                                            ('running', YLeaf(YType.empty, 'running')),
                                        ])
                                        self.interface_name = None
                                        self.cost = None
                                        self.prefix_suppression_primary = None
                                        self.mtu_ignore = None
                                        self.ldp_sync_igp_shortcuts = None
                                        self.ldp_auto_config = None
                                        self.network_type = None
                                        self.hello_interval = None
                                        self.loopback_stub_network = None
                                        self.prefix_suppression_secondary = None
                                        self.demand_circuit = None
                                        self.passive = None
                                        self.transmit_delay = None
                                        self.packet_size = None
                                        self.ldp_sync = None
                                        self.database_filter = None
                                        self.link_down_fast_detect = None
                                        self.segment_routing_forwarding = None
                                        self.retransmit_interval = None
                                        self.priority = None
                                        self.flood_reduction = None
                                        self.running = None

                                        self.prefix_sid = None
                                        self._children_name_map["prefix_sid"] = "prefix-sid"
                                        self._children_yang_names.add("prefix-sid")

                                        self.prefix_sid_strict = None
                                        self._children_name_map["prefix_sid_strict"] = "prefix-sid-strict"
                                        self._children_yang_names.add("prefix-sid-strict")

                                        self.distribute_list = None
                                        self._children_name_map["distribute_list"] = "distribute-list"
                                        self._children_yang_names.add("distribute-list")

                                        self.bfd = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Bfd()
                                        self.bfd.parent = self
                                        self._children_name_map["bfd"] = "bfd"
                                        self._children_yang_names.add("bfd")

                                        self.authentication = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication()
                                        self.authentication.parent = self
                                        self._children_name_map["authentication"] = "authentication"
                                        self._children_yang_names.add("authentication")

                                        self.security = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security()
                                        self.security.parent = self
                                        self._children_name_map["security"] = "security"
                                        self._children_yang_names.add("security")

                                        self.neighbors = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors()
                                        self.neighbors.parent = self
                                        self._children_name_map["neighbors"] = "neighbors"
                                        self._children_yang_names.add("neighbors")

                                        self.dead_interval_minimal = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DeadIntervalMinimal()
                                        self.dead_interval_minimal.parent = self
                                        self._children_name_map["dead_interval_minimal"] = "dead-interval-minimal"
                                        self._children_yang_names.add("dead-interval-minimal")

                                        self.fast_reroute = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute()
                                        self.fast_reroute.parent = self
                                        self._children_name_map["fast_reroute"] = "fast-reroute"
                                        self._children_yang_names.add("fast-reroute")

                                        self.cost_fallback = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.CostFallback()
                                        self.cost_fallback.parent = self
                                        self._children_name_map["cost_fallback"] = "cost-fallback"
                                        self._children_yang_names.add("cost-fallback")
                                        self._segment_path = lambda: "name-scope" + "[interface-name='" + str(self.interface_name) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope, ['interface_name', 'cost', 'prefix_suppression_primary', 'mtu_ignore', 'ldp_sync_igp_shortcuts', 'ldp_auto_config', 'network_type', 'hello_interval', 'loopback_stub_network', 'prefix_suppression_secondary', 'demand_circuit', 'passive', 'transmit_delay', 'packet_size', 'ldp_sync', 'database_filter', 'link_down_fast_detect', 'segment_routing_forwarding', 'retransmit_interval', 'priority', 'flood_reduction', 'running'], name, value)


                                    class PrefixSid(Entity):
                                        """
                                        Prefix SID
                                        
                                        .. attribute:: sid_value
                                        
                                        	SID value
                                        	**type**\: int
                                        
                                        	**range:** 0..1048575
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: explicit_null
                                        
                                        	Force Penultimate Hop To Send Explicit\-Null Label
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: type
                                        
                                        	OSPF SID Type
                                        	**type**\:  :py:class:`OspfSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSid>`
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: n_flag_clear
                                        
                                        	Not a node SID
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.PrefixSid, self).__init__()

                                            self.yang_name = "prefix-sid"
                                            self.yang_parent_name = "name-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                                ('explicit_null', YLeaf(YType.boolean, 'explicit-null')),
                                                ('type', YLeaf(YType.enumeration, 'type')),
                                                ('n_flag_clear', YLeaf(YType.boolean, 'n-flag-clear')),
                                            ])
                                            self.sid_value = None
                                            self.explicit_null = None
                                            self.type = None
                                            self.n_flag_clear = None
                                            self._segment_path = lambda: "prefix-sid"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.PrefixSid, ['sid_value', 'explicit_null', 'type', 'n_flag_clear'], name, value)


                                    class PrefixSidStrict(Entity):
                                        """
                                        Strict Prefix SID
                                        
                                        .. attribute:: sid_value
                                        
                                        	SID value
                                        	**type**\: int
                                        
                                        	**range:** 0..1048575
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: explicit_null
                                        
                                        	Force Penultimate Hop To Send Explicit\-Null Label
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: type
                                        
                                        	OSPF SID Type
                                        	**type**\:  :py:class:`OspfSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSid>`
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: n_flag_clear
                                        
                                        	Not a node SID
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.PrefixSidStrict, self).__init__()

                                            self.yang_name = "prefix-sid-strict"
                                            self.yang_parent_name = "name-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                                ('explicit_null', YLeaf(YType.boolean, 'explicit-null')),
                                                ('type', YLeaf(YType.enumeration, 'type')),
                                                ('n_flag_clear', YLeaf(YType.boolean, 'n-flag-clear')),
                                            ])
                                            self.sid_value = None
                                            self.explicit_null = None
                                            self.type = None
                                            self.n_flag_clear = None
                                            self._segment_path = lambda: "prefix-sid-strict"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.PrefixSidStrict, ['sid_value', 'explicit_null', 'type', 'n_flag_clear'], name, value)


                                    class DistributeList(Entity):
                                        """
                                        Filter networks intalled to RIB (disable as ACL
                                        name means filtering is disabled)
                                        
                                        .. attribute:: access_list_name
                                        
                                        	Access Control List name
                                        	**type**\: str
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route Policy name
                                        	**type**\: str
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DistributeList, self).__init__()

                                            self.yang_name = "distribute-list"
                                            self.yang_parent_name = "name-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('access_list_name', YLeaf(YType.str, 'access-list-name')),
                                                ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
                                            ])
                                            self.access_list_name = None
                                            self.route_policy_name = None
                                            self._segment_path = lambda: "distribute-list"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DistributeList, ['access_list_name', 'route_policy_name'], name, value)


                                    class Bfd(Entity):
                                        """
                                        BFD configuration
                                        
                                        .. attribute:: interval
                                        
                                        	Hello interval for BFD sessions created by OSPF
                                        	**type**\: int
                                        
                                        	**range:** 3..30000
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: detection_multiplier
                                        
                                        	Detection multiplier for BFD sessions created by OSPF
                                        	**type**\: int
                                        
                                        	**range:** 2..50
                                        
                                        .. attribute:: fast_detect_mode
                                        
                                        	 use of Bidirectional Forwarding Detection
                                        	**type**\:  :py:class:`BfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.BfdEnableMode>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Bfd, self).__init__()

                                            self.yang_name = "bfd"
                                            self.yang_parent_name = "name-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('interval', YLeaf(YType.uint32, 'interval')),
                                                ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                                                ('fast_detect_mode', YLeaf(YType.enumeration, 'fast-detect-mode')),
                                            ])
                                            self.interval = None
                                            self.detection_multiplier = None
                                            self.fast_detect_mode = None
                                            self._segment_path = lambda: "bfd"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Bfd, ['interval', 'detection_multiplier', 'fast_detect_mode'], name, value)


                                    class Authentication(Entity):
                                        """
                                        Authentication
                                        
                                        .. attribute:: type
                                        
                                        	Authentication type
                                        	**type**\:  :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.Type>`
                                        
                                        .. attribute:: message_digest_keies
                                        
                                        	Message digest authentication password (key) configurations, first 16 chars used
                                        	**type**\:  :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies>`
                                        
                                        .. attribute:: key
                                        
                                        	Authentication key configuration
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication, self).__init__()

                                            self.yang_name = "authentication"
                                            self.yang_parent_name = "name-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("type", ("type", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.Type)), ("message-digest-keies", ("message_digest_keies", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('key', YLeaf(YType.str, 'key')),
                                            ])
                                            self.key = None

                                            self.type = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.Type()
                                            self.type.parent = self
                                            self._children_name_map["type"] = "type"
                                            self._children_yang_names.add("type")

                                            self.message_digest_keies = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies()
                                            self.message_digest_keies.parent = self
                                            self._children_name_map["message_digest_keies"] = "message-digest-keies"
                                            self._children_yang_names.add("message-digest-keies")
                                            self._segment_path = lambda: "authentication"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication, ['key'], name, value)


                                        class Type(Entity):
                                            """
                                            Authentication type
                                            
                                            .. attribute:: authen_type
                                            
                                            	Authentication type code 
                                            	**type**\:  :py:class:`OspfAuthentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthentication>`
                                            
                                            .. attribute:: keychain_authen_type
                                            
                                            	Keychain authentication type
                                            	**type**\:  :py:class:`OspfKeychainAuth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuth>`
                                            
                                            .. attribute:: keychain_name
                                            
                                            	Keychain name
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.Type, self).__init__()

                                                self.yang_name = "type"
                                                self.yang_parent_name = "authentication"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('authen_type', YLeaf(YType.enumeration, 'authen-type')),
                                                    ('keychain_authen_type', YLeaf(YType.enumeration, 'keychain-authen-type')),
                                                    ('keychain_name', YLeaf(YType.str, 'keychain-name')),
                                                ])
                                                self.authen_type = None
                                                self.keychain_authen_type = None
                                                self.keychain_name = None
                                                self._segment_path = lambda: "type"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.Type, ['authen_type', 'keychain_authen_type', 'keychain_name'], name, value)


                                        class MessageDigestKeies(Entity):
                                            """
                                            Message digest authentication password (key)
                                            configurations, first 16 chars used
                                            
                                            .. attribute:: message_digest_key
                                            
                                            	Message digest authentication password (key) configuration
                                            	**type**\: list of  		 :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies, self).__init__()

                                                self.yang_name = "message-digest-keies"
                                                self.yang_parent_name = "authentication"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("message-digest-key", ("message_digest_key", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies.MessageDigestKey))])
                                                self._leafs = OrderedDict()

                                                self.message_digest_key = YList(self)
                                                self._segment_path = lambda: "message-digest-keies"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies, [], name, value)


                                            class MessageDigestKey(Entity):
                                                """
                                                Message digest authentication password (key)
                                                configuration
                                                
                                                .. attribute:: key_id  (key)
                                                
                                                	Key ID
                                                	**type**\: int
                                                
                                                	**range:** 1..255
                                                
                                                .. attribute:: password
                                                
                                                	Password
                                                	**type**\: str
                                                
                                                	**pattern:** (!.+)\|([^!].+)
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies.MessageDigestKey, self).__init__()

                                                    self.yang_name = "message-digest-key"
                                                    self.yang_parent_name = "message-digest-keies"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['key_id']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('key_id', YLeaf(YType.uint32, 'key-id')),
                                                        ('password', YLeaf(YType.str, 'password')),
                                                    ])
                                                    self.key_id = None
                                                    self.password = None
                                                    self._segment_path = lambda: "message-digest-key" + "[key-id='" + str(self.key_id) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies.MessageDigestKey, ['key_id', 'password'], name, value)


                                    class Security(Entity):
                                        """
                                        Container class for security related
                                        configuration parameters
                                        
                                        .. attribute:: ttl
                                        
                                        	Enabling turns on TTL security
                                        	**type**\:  :py:class:`Ttl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security.Ttl>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security, self).__init__()

                                            self.yang_name = "security"
                                            self.yang_parent_name = "name-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("ttl", ("ttl", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security.Ttl))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict()

                                            self.ttl = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security.Ttl()
                                            self.ttl.parent = self
                                            self._children_name_map["ttl"] = "ttl"
                                            self._children_yang_names.add("ttl")
                                            self._segment_path = lambda: "security"


                                        class Ttl(Entity):
                                            """
                                            Enabling turns on TTL security
                                            
                                            .. attribute:: enable
                                            
                                            	Enable TTL security
                                            	**type**\: bool
                                            
                                            .. attribute:: hop_count
                                            
                                            	Hop count
                                            	**type**\: int
                                            
                                            	**range:** 1..254
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security.Ttl, self).__init__()

                                                self.yang_name = "ttl"
                                                self.yang_parent_name = "security"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('enable', YLeaf(YType.boolean, 'enable')),
                                                    ('hop_count', YLeaf(YType.uint32, 'hop-count')),
                                                ])
                                                self.enable = None
                                                self.hop_count = None
                                                self._segment_path = lambda: "ttl"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security.Ttl, ['enable', 'hop_count'], name, value)


                                    class Neighbors(Entity):
                                        """
                                        Neighbor router configuration information
                                        
                                        .. attribute:: neighbor
                                        
                                        	Router configuration information for a particular neighbor
                                        	**type**\: list of  		 :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors.Neighbor>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors, self).__init__()

                                            self.yang_name = "neighbors"
                                            self.yang_parent_name = "name-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("neighbor", ("neighbor", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors.Neighbor))])
                                            self._leafs = OrderedDict()

                                            self.neighbor = YList(self)
                                            self._segment_path = lambda: "neighbors"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors, [], name, value)


                                        class Neighbor(Entity):
                                            """
                                            Router configuration information for a
                                            particular neighbor
                                            
                                            .. attribute:: neighbor_address  (key)
                                            
                                            	Neighbor IP address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: priority
                                            
                                            	OSPF priority of non\-broadcast neighbor
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: poll_interval
                                            
                                            	OSPF dead router poll\-interval in seconds
                                            	**type**\: int
                                            
                                            	**range:** 0..65535
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 40
                                            
                                            .. attribute:: cost
                                            
                                            	OSPF cost for point\-to\-multipoint neighbor
                                            	**type**\: int
                                            
                                            	**range:** 1..65535
                                            
                                            	**default value**\: 1
                                            
                                            .. attribute:: database_filter
                                            
                                            	Database filter\: Filter OSPF LSA during synchronization and flooding for point\-to\-multipoint
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors.Neighbor, self).__init__()

                                                self.yang_name = "neighbor"
                                                self.yang_parent_name = "neighbors"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['neighbor_address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('priority', YLeaf(YType.uint32, 'priority')),
                                                    ('poll_interval', YLeaf(YType.uint32, 'poll-interval')),
                                                    ('cost', YLeaf(YType.uint32, 'cost')),
                                                    ('database_filter', YLeaf(YType.boolean, 'database-filter')),
                                                ])
                                                self.neighbor_address = None
                                                self.priority = None
                                                self.poll_interval = None
                                                self.cost = None
                                                self.database_filter = None
                                                self._segment_path = lambda: "neighbor" + "[neighbor-address='" + str(self.neighbor_address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors.Neighbor, ['neighbor_address', 'priority', 'poll_interval', 'cost', 'database_filter'], name, value)


                                    class DeadIntervalMinimal(Entity):
                                        """
                                        Interval after which a neighbor is declared dead
                                        
                                        .. attribute:: interval
                                        
                                        	Interval size in seconds after which a neighbor is declared dead
                                        	**type**\: int
                                        
                                        	**range:** 1..65535
                                        
                                        	**units**\: second
                                        
                                        .. attribute:: multiplier
                                        
                                        	Number of Hellos in one second
                                        	**type**\: int
                                        
                                        	**range:** 3..20
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DeadIntervalMinimal, self).__init__()

                                            self.yang_name = "dead-interval-minimal"
                                            self.yang_parent_name = "name-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('interval', YLeaf(YType.uint32, 'interval')),
                                                ('multiplier', YLeaf(YType.uint32, 'multiplier')),
                                            ])
                                            self.interval = None
                                            self.multiplier = None
                                            self._segment_path = lambda: "dead-interval-minimal"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DeadIntervalMinimal, ['interval', 'multiplier'], name, value)


                                    class FastReroute(Entity):
                                        """
                                        Fast\-reroute configuration
                                        
                                        .. attribute:: per_link
                                        
                                        	Fast\-reroute per\-link configuration
                                        	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink>`
                                        
                                        .. attribute:: per_prefix
                                        
                                        	Fast\-reroute per\-prefix global configuration
                                        	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix>`
                                        
                                        .. attribute:: fast_reroute_enable
                                        
                                        	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                        	**type**\:  :py:class:`OspfFastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastReroute>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute, self).__init__()

                                            self.yang_name = "fast-reroute"
                                            self.yang_parent_name = "name-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("per-link", ("per_link", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('fast_reroute_enable', YLeaf(YType.enumeration, 'fast-reroute-enable')),
                                            ])
                                            self.fast_reroute_enable = None

                                            self.per_link = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink()
                                            self.per_link.parent = self
                                            self._children_name_map["per_link"] = "per-link"
                                            self._children_yang_names.add("per-link")

                                            self.per_prefix = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix()
                                            self.per_prefix.parent = self
                                            self._children_name_map["per_prefix"] = "per-prefix"
                                            self._children_yang_names.add("per-prefix")
                                            self._segment_path = lambda: "fast-reroute"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute, ['fast_reroute_enable'], name, value)


                                        class PerLink(Entity):
                                            """
                                            Fast\-reroute per\-link configuration
                                            
                                            .. attribute:: fast_reroute_use_candidate_only
                                            
                                            	Use only interfaces on the candidate list as a backup path
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: candidate_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                            	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces>`
                                            
                                            .. attribute:: exclude_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                            	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink, self).__init__()

                                                self.yang_name = "per-link"
                                                self.yang_parent_name = "fast-reroute"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                                ])
                                                self.fast_reroute_use_candidate_only = None

                                                self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces()
                                                self.candidate_interfaces.parent = self
                                                self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                                self._children_yang_names.add("candidate-interfaces")

                                                self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces()
                                                self.exclude_interfaces.parent = self
                                                self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                                self._children_yang_names.add("exclude-interfaces")
                                                self._segment_path = lambda: "per-link"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                            class CandidateInterfaces(Entity):
                                                """
                                                Fast\-reroute per\-link/per\-prefix candidate
                                                interface configuration
                                                
                                                .. attribute:: candidate_interface
                                                
                                                	Candidate backup interface
                                                	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                                    self.yang_name = "candidate-interfaces"
                                                    self.yang_parent_name = "per-link"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface))])
                                                    self._leafs = OrderedDict()

                                                    self.candidate_interface = YList(self)
                                                    self._segment_path = lambda: "candidate-interfaces"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                                class CandidateInterface(Entity):
                                                    """
                                                    Candidate backup interface
                                                    
                                                    .. attribute:: interface_name  (key)
                                                    
                                                    	Interface
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                        self.yang_name = "candidate-interface"
                                                        self.yang_parent_name = "candidate-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['interface_name']
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                        ])
                                                        self.interface_name = None
                                                        self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                            class ExcludeInterfaces(Entity):
                                                """
                                                Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                                interface configuration
                                                
                                                .. attribute:: exclude_interface
                                                
                                                	Exclude an interface from becoming a backup or UCMP
                                                	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                                    self.yang_name = "exclude-interfaces"
                                                    self.yang_parent_name = "per-link"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface))])
                                                    self._leafs = OrderedDict()

                                                    self.exclude_interface = YList(self)
                                                    self._segment_path = lambda: "exclude-interfaces"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                                class ExcludeInterface(Entity):
                                                    """
                                                    Exclude an interface from becoming a backup or
                                                    UCMP
                                                    
                                                    .. attribute:: interface_name  (key)
                                                    
                                                    	Interface
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                        self.yang_name = "exclude-interface"
                                                        self.yang_parent_name = "exclude-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['interface_name']
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                        ])
                                                        self.interface_name = None
                                                        self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                        class PerPrefix(Entity):
                                            """
                                            Fast\-reroute per\-prefix global configuration
                                            
                                            .. attribute:: remote_lfa
                                            
                                            	Remote LFA configuration
                                            	**type**\:  :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa>`
                                            
                                            .. attribute:: tiebreakers
                                            
                                            	Fast\-reroute tiebreakers configurations
                                            	**type**\:  :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers>`
                                            
                                            .. attribute:: topology_independent_lfa
                                            
                                            	Topology Independet LFA configuration
                                            	**type**\: bool
                                            
                                            .. attribute:: fast_reroute_use_candidate_only
                                            
                                            	Use only interfaces on the candidate list as a backup path
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: candidate_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                            	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                            
                                            .. attribute:: exclude_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                            	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix, self).__init__()

                                                self.yang_name = "per-prefix"
                                                self.yang_parent_name = "fast-reroute"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("remote-lfa", ("remote_lfa", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa)), ("tiebreakers", ("tiebreakers", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers)), ("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('topology_independent_lfa', YLeaf(YType.boolean, 'topology-independent-lfa')),
                                                    ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                                ])
                                                self.topology_independent_lfa = None
                                                self.fast_reroute_use_candidate_only = None

                                                self.remote_lfa = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa()
                                                self.remote_lfa.parent = self
                                                self._children_name_map["remote_lfa"] = "remote-lfa"
                                                self._children_yang_names.add("remote-lfa")

                                                self.tiebreakers = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers()
                                                self.tiebreakers.parent = self
                                                self._children_name_map["tiebreakers"] = "tiebreakers"
                                                self._children_yang_names.add("tiebreakers")

                                                self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces()
                                                self.candidate_interfaces.parent = self
                                                self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                                self._children_yang_names.add("candidate-interfaces")

                                                self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                                self.exclude_interfaces.parent = self
                                                self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                                self._children_yang_names.add("exclude-interfaces")
                                                self._segment_path = lambda: "per-prefix"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix, ['topology_independent_lfa', 'fast_reroute_use_candidate_only'], name, value)


                                            class RemoteLfa(Entity):
                                                """
                                                Remote LFA configuration
                                                
                                                .. attribute:: tunnel
                                                
                                                	Enable/Disable remote LFA computation
                                                	**type**\:  :py:class:`OspfFrrRlfaTunnel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFrrRlfaTunnel>`
                                                
                                                .. attribute:: maximum_cost
                                                
                                                	Maximum path cost to remote LFA
                                                	**type**\: int
                                                
                                                	**range:** 1..4294967295
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa, self).__init__()

                                                    self.yang_name = "remote-lfa"
                                                    self.yang_parent_name = "per-prefix"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('tunnel', YLeaf(YType.enumeration, 'tunnel')),
                                                        ('maximum_cost', YLeaf(YType.uint32, 'maximum-cost')),
                                                    ])
                                                    self.tunnel = None
                                                    self.maximum_cost = None
                                                    self._segment_path = lambda: "remote-lfa"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa, ['tunnel', 'maximum_cost'], name, value)


                                            class Tiebreakers(Entity):
                                                """
                                                Fast\-reroute tiebreakers configurations
                                                
                                                .. attribute:: tiebreaker
                                                
                                                	Fast\-reroute tiebreakers configuration
                                                	**type**\: list of  		 :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers, self).__init__()

                                                    self.yang_name = "tiebreakers"
                                                    self.yang_parent_name = "per-prefix"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("tiebreaker", ("tiebreaker", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker))])
                                                    self._leafs = OrderedDict()

                                                    self.tiebreaker = YList(self)
                                                    self._segment_path = lambda: "tiebreakers"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers, [], name, value)


                                                class Tiebreaker(Entity):
                                                    """
                                                    Fast\-reroute tiebreakers configuration
                                                    
                                                    .. attribute:: tiebreaker_type  (key)
                                                    
                                                    	Tiebreaker type
                                                    	**type**\:  :py:class:`OspfFastRerouteTiebreakersIntf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakersIntf>`
                                                    
                                                    .. attribute:: tiebreaker_index
                                                    
                                                    	Index value for a tiebreaker, 0 to disable
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..255
                                                    
                                                    	**mandatory**\: True
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, self).__init__()

                                                        self.yang_name = "tiebreaker"
                                                        self.yang_parent_name = "tiebreakers"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['tiebreaker_type']
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('tiebreaker_type', YLeaf(YType.enumeration, 'tiebreaker-type')),
                                                            ('tiebreaker_index', YLeaf(YType.uint32, 'tiebreaker-index')),
                                                        ])
                                                        self.tiebreaker_type = None
                                                        self.tiebreaker_index = None
                                                        self._segment_path = lambda: "tiebreaker" + "[tiebreaker-type='" + str(self.tiebreaker_type) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, ['tiebreaker_type', 'tiebreaker_index'], name, value)


                                            class CandidateInterfaces(Entity):
                                                """
                                                Fast\-reroute per\-link/per\-prefix candidate
                                                interface configuration
                                                
                                                .. attribute:: candidate_interface
                                                
                                                	Candidate backup interface
                                                	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                                    self.yang_name = "candidate-interfaces"
                                                    self.yang_parent_name = "per-prefix"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface))])
                                                    self._leafs = OrderedDict()

                                                    self.candidate_interface = YList(self)
                                                    self._segment_path = lambda: "candidate-interfaces"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                                class CandidateInterface(Entity):
                                                    """
                                                    Candidate backup interface
                                                    
                                                    .. attribute:: interface_name  (key)
                                                    
                                                    	Interface
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                        self.yang_name = "candidate-interface"
                                                        self.yang_parent_name = "candidate-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['interface_name']
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                        ])
                                                        self.interface_name = None
                                                        self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                            class ExcludeInterfaces(Entity):
                                                """
                                                Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                                interface configuration
                                                
                                                .. attribute:: exclude_interface
                                                
                                                	Exclude an interface from becoming a backup or UCMP
                                                	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                                    self.yang_name = "exclude-interfaces"
                                                    self.yang_parent_name = "per-prefix"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface))])
                                                    self._leafs = OrderedDict()

                                                    self.exclude_interface = YList(self)
                                                    self._segment_path = lambda: "exclude-interfaces"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                                class ExcludeInterface(Entity):
                                                    """
                                                    Exclude an interface from becoming a backup or
                                                    UCMP
                                                    
                                                    .. attribute:: interface_name  (key)
                                                    
                                                    	Interface
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                        self.yang_name = "exclude-interface"
                                                        self.yang_parent_name = "exclude-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['interface_name']
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                        ])
                                                        self.interface_name = None
                                                        self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                    class CostFallback(Entity):
                                        """
                                        Interface fallback cost
                                        
                                        .. attribute:: cost
                                        
                                        	Fallback cost of link
                                        	**type**\: int
                                        
                                        	**range:** 1..65535
                                        
                                        .. attribute:: threshold
                                        
                                        	Bandwidth threshold
                                        	**type**\: int
                                        
                                        	**range:** 1..4294967
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.CostFallback, self).__init__()

                                            self.yang_name = "cost-fallback"
                                            self.yang_parent_name = "name-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('cost', YLeaf(YType.uint32, 'cost')),
                                                ('threshold', YLeaf(YType.uint32, 'threshold')),
                                            ])
                                            self.cost = None
                                            self.threshold = None
                                            self._segment_path = lambda: "cost-fallback"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.CostFallback, ['cost', 'threshold'], name, value)


                            class MultiAreaInterfaceScopes(Entity):
                                """
                                Multi Area Interface scope configurations
                                
                                .. attribute:: multi_area_interface_scope
                                
                                	Multi Area Interface configuration
                                	**type**\: list of  		 :py:class:`MultiAreaInterfaceScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes, self).__init__()

                                    self.yang_name = "multi-area-interface-scopes"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([("multi-area-interface-scope", ("multi_area_interface_scope", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope))])
                                    self._leafs = OrderedDict()

                                    self.multi_area_interface_scope = YList(self)
                                    self._segment_path = lambda: "multi-area-interface-scopes"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes, [], name, value)


                                class MultiAreaInterfaceScope(Entity):
                                    """
                                    Multi Area Interface configuration
                                    
                                    .. attribute:: interface_name  (key)
                                    
                                    	Name of Multi Area Interface to configure
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: distribute_list
                                    
                                    	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                                    	**type**\:  :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DistributeList>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: cost
                                    
                                    	Interface cost
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: mtu_ignore
                                    
                                    	Enable/Disable ignoring of MTU in DBD packets
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: authentication
                                    
                                    	Authentication
                                    	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication>`
                                    
                                    .. attribute:: neighbors
                                    
                                    	Neighbor router configuration information
                                    	**type**\:  :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors>`
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Interval between HELLO packets in seconds
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: passive
                                    
                                    	When enabled, prevent sending HELLO packets over link
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Number of seconds to delay transmission of LSAs
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 1
                                    
                                    .. attribute:: packet_size
                                    
                                    	Customize size of OSPF packets upto MTU
                                    	**type**\: int
                                    
                                    	**range:** 576..10000
                                    
                                    .. attribute:: database_filter
                                    
                                    	Filter OSPF LSA during synchronization and flooding
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: dead_interval_minimal
                                    
                                    	Interval after which a neighbor is declared dead
                                    	**type**\:  :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal>`
                                    
                                    .. attribute:: fast_reroute
                                    
                                    	Fast\-reroute configuration
                                    	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute>`
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Time in seconds between retransmitting lost link state advertisements
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 5
                                    
                                    .. attribute:: cost_fallback
                                    
                                    	Interface fallback cost
                                    	**type**\:  :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback>`
                                    
                                    .. attribute:: running
                                    
                                    	Enable routing on an IP network
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope, self).__init__()

                                        self.yang_name = "multi-area-interface-scope"
                                        self.yang_parent_name = "multi-area-interface-scopes"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['interface_name']
                                        self._child_container_classes = OrderedDict([("distribute-list", ("distribute_list", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DistributeList)), ("authentication", ("authentication", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication)), ("neighbors", ("neighbors", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors)), ("dead-interval-minimal", ("dead_interval_minimal", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal)), ("fast-reroute", ("fast_reroute", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute)), ("cost-fallback", ("cost_fallback", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                                            ('cost', YLeaf(YType.uint32, 'cost')),
                                            ('mtu_ignore', YLeaf(YType.boolean, 'mtu-ignore')),
                                            ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                                            ('passive', YLeaf(YType.boolean, 'passive')),
                                            ('transmit_delay', YLeaf(YType.uint32, 'transmit-delay')),
                                            ('packet_size', YLeaf(YType.uint32, 'packet-size')),
                                            ('database_filter', YLeaf(YType.boolean, 'database-filter')),
                                            ('retransmit_interval', YLeaf(YType.uint32, 'retransmit-interval')),
                                            ('running', YLeaf(YType.empty, 'running')),
                                        ])
                                        self.interface_name = None
                                        self.cost = None
                                        self.mtu_ignore = None
                                        self.hello_interval = None
                                        self.passive = None
                                        self.transmit_delay = None
                                        self.packet_size = None
                                        self.database_filter = None
                                        self.retransmit_interval = None
                                        self.running = None

                                        self.distribute_list = None
                                        self._children_name_map["distribute_list"] = "distribute-list"
                                        self._children_yang_names.add("distribute-list")

                                        self.authentication = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication()
                                        self.authentication.parent = self
                                        self._children_name_map["authentication"] = "authentication"
                                        self._children_yang_names.add("authentication")

                                        self.neighbors = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors()
                                        self.neighbors.parent = self
                                        self._children_name_map["neighbors"] = "neighbors"
                                        self._children_yang_names.add("neighbors")

                                        self.dead_interval_minimal = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal()
                                        self.dead_interval_minimal.parent = self
                                        self._children_name_map["dead_interval_minimal"] = "dead-interval-minimal"
                                        self._children_yang_names.add("dead-interval-minimal")

                                        self.fast_reroute = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute()
                                        self.fast_reroute.parent = self
                                        self._children_name_map["fast_reroute"] = "fast-reroute"
                                        self._children_yang_names.add("fast-reroute")

                                        self.cost_fallback = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback()
                                        self.cost_fallback.parent = self
                                        self._children_name_map["cost_fallback"] = "cost-fallback"
                                        self._children_yang_names.add("cost-fallback")
                                        self._segment_path = lambda: "multi-area-interface-scope" + "[interface-name='" + str(self.interface_name) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope, ['interface_name', 'cost', 'mtu_ignore', 'hello_interval', 'passive', 'transmit_delay', 'packet_size', 'database_filter', 'retransmit_interval', 'running'], name, value)


                                    class DistributeList(Entity):
                                        """
                                        Filter networks intalled to RIB (disable as ACL
                                        name means filtering is disabled)
                                        
                                        .. attribute:: access_list_name
                                        
                                        	Access Control List name
                                        	**type**\: str
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route Policy name
                                        	**type**\: str
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DistributeList, self).__init__()

                                            self.yang_name = "distribute-list"
                                            self.yang_parent_name = "multi-area-interface-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('access_list_name', YLeaf(YType.str, 'access-list-name')),
                                                ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
                                            ])
                                            self.access_list_name = None
                                            self.route_policy_name = None
                                            self._segment_path = lambda: "distribute-list"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DistributeList, ['access_list_name', 'route_policy_name'], name, value)


                                    class Authentication(Entity):
                                        """
                                        Authentication
                                        
                                        .. attribute:: type
                                        
                                        	Authentication type
                                        	**type**\:  :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type>`
                                        
                                        .. attribute:: message_digest_keies
                                        
                                        	Message digest authentication password (key) configurations, first 16 chars used
                                        	**type**\:  :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies>`
                                        
                                        .. attribute:: key
                                        
                                        	Authentication key configuration
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication, self).__init__()

                                            self.yang_name = "authentication"
                                            self.yang_parent_name = "multi-area-interface-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("type", ("type", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type)), ("message-digest-keies", ("message_digest_keies", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('key', YLeaf(YType.str, 'key')),
                                            ])
                                            self.key = None

                                            self.type = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type()
                                            self.type.parent = self
                                            self._children_name_map["type"] = "type"
                                            self._children_yang_names.add("type")

                                            self.message_digest_keies = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies()
                                            self.message_digest_keies.parent = self
                                            self._children_name_map["message_digest_keies"] = "message-digest-keies"
                                            self._children_yang_names.add("message-digest-keies")
                                            self._segment_path = lambda: "authentication"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication, ['key'], name, value)


                                        class Type(Entity):
                                            """
                                            Authentication type
                                            
                                            .. attribute:: authen_type
                                            
                                            	Authentication type code 
                                            	**type**\:  :py:class:`OspfAuthentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthentication>`
                                            
                                            .. attribute:: keychain_authen_type
                                            
                                            	Keychain authentication type
                                            	**type**\:  :py:class:`OspfKeychainAuth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuth>`
                                            
                                            .. attribute:: keychain_name
                                            
                                            	Keychain name
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type, self).__init__()

                                                self.yang_name = "type"
                                                self.yang_parent_name = "authentication"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('authen_type', YLeaf(YType.enumeration, 'authen-type')),
                                                    ('keychain_authen_type', YLeaf(YType.enumeration, 'keychain-authen-type')),
                                                    ('keychain_name', YLeaf(YType.str, 'keychain-name')),
                                                ])
                                                self.authen_type = None
                                                self.keychain_authen_type = None
                                                self.keychain_name = None
                                                self._segment_path = lambda: "type"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type, ['authen_type', 'keychain_authen_type', 'keychain_name'], name, value)


                                        class MessageDigestKeies(Entity):
                                            """
                                            Message digest authentication password (key)
                                            configurations, first 16 chars used
                                            
                                            .. attribute:: message_digest_key
                                            
                                            	Message digest authentication password (key) configuration
                                            	**type**\: list of  		 :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies, self).__init__()

                                                self.yang_name = "message-digest-keies"
                                                self.yang_parent_name = "authentication"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("message-digest-key", ("message_digest_key", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies.MessageDigestKey))])
                                                self._leafs = OrderedDict()

                                                self.message_digest_key = YList(self)
                                                self._segment_path = lambda: "message-digest-keies"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies, [], name, value)


                                            class MessageDigestKey(Entity):
                                                """
                                                Message digest authentication password (key)
                                                configuration
                                                
                                                .. attribute:: key_id  (key)
                                                
                                                	Key ID
                                                	**type**\: int
                                                
                                                	**range:** 1..255
                                                
                                                .. attribute:: password
                                                
                                                	Password
                                                	**type**\: str
                                                
                                                	**pattern:** (!.+)\|([^!].+)
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies.MessageDigestKey, self).__init__()

                                                    self.yang_name = "message-digest-key"
                                                    self.yang_parent_name = "message-digest-keies"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['key_id']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('key_id', YLeaf(YType.uint32, 'key-id')),
                                                        ('password', YLeaf(YType.str, 'password')),
                                                    ])
                                                    self.key_id = None
                                                    self.password = None
                                                    self._segment_path = lambda: "message-digest-key" + "[key-id='" + str(self.key_id) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies.MessageDigestKey, ['key_id', 'password'], name, value)


                                    class Neighbors(Entity):
                                        """
                                        Neighbor router configuration information
                                        
                                        .. attribute:: neighbor
                                        
                                        	Router configuration information for a particular neighbor
                                        	**type**\: list of  		 :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors.Neighbor>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors, self).__init__()

                                            self.yang_name = "neighbors"
                                            self.yang_parent_name = "multi-area-interface-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("neighbor", ("neighbor", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors.Neighbor))])
                                            self._leafs = OrderedDict()

                                            self.neighbor = YList(self)
                                            self._segment_path = lambda: "neighbors"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors, [], name, value)


                                        class Neighbor(Entity):
                                            """
                                            Router configuration information for a
                                            particular neighbor
                                            
                                            .. attribute:: neighbor_address  (key)
                                            
                                            	Neighbor IP address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: priority
                                            
                                            	OSPF priority of non\-broadcast neighbor
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: poll_interval
                                            
                                            	OSPF dead router poll\-interval in seconds
                                            	**type**\: int
                                            
                                            	**range:** 0..65535
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 40
                                            
                                            .. attribute:: cost
                                            
                                            	OSPF cost for point\-to\-multipoint neighbor
                                            	**type**\: int
                                            
                                            	**range:** 1..65535
                                            
                                            	**default value**\: 1
                                            
                                            .. attribute:: database_filter
                                            
                                            	Database filter\: Filter OSPF LSA during synchronization and flooding for point\-to\-multipoint
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors.Neighbor, self).__init__()

                                                self.yang_name = "neighbor"
                                                self.yang_parent_name = "neighbors"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['neighbor_address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('priority', YLeaf(YType.uint32, 'priority')),
                                                    ('poll_interval', YLeaf(YType.uint32, 'poll-interval')),
                                                    ('cost', YLeaf(YType.uint32, 'cost')),
                                                    ('database_filter', YLeaf(YType.boolean, 'database-filter')),
                                                ])
                                                self.neighbor_address = None
                                                self.priority = None
                                                self.poll_interval = None
                                                self.cost = None
                                                self.database_filter = None
                                                self._segment_path = lambda: "neighbor" + "[neighbor-address='" + str(self.neighbor_address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors.Neighbor, ['neighbor_address', 'priority', 'poll_interval', 'cost', 'database_filter'], name, value)


                                    class DeadIntervalMinimal(Entity):
                                        """
                                        Interval after which a neighbor is declared dead
                                        
                                        .. attribute:: interval
                                        
                                        	Interval size in seconds after which a neighbor is declared dead
                                        	**type**\: int
                                        
                                        	**range:** 1..65535
                                        
                                        	**units**\: second
                                        
                                        .. attribute:: multiplier
                                        
                                        	Number of Hellos in one second
                                        	**type**\: int
                                        
                                        	**range:** 3..20
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal, self).__init__()

                                            self.yang_name = "dead-interval-minimal"
                                            self.yang_parent_name = "multi-area-interface-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('interval', YLeaf(YType.uint32, 'interval')),
                                                ('multiplier', YLeaf(YType.uint32, 'multiplier')),
                                            ])
                                            self.interval = None
                                            self.multiplier = None
                                            self._segment_path = lambda: "dead-interval-minimal"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal, ['interval', 'multiplier'], name, value)


                                    class FastReroute(Entity):
                                        """
                                        Fast\-reroute configuration
                                        
                                        .. attribute:: per_link
                                        
                                        	Fast\-reroute per\-link configuration
                                        	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink>`
                                        
                                        .. attribute:: per_prefix
                                        
                                        	Fast\-reroute per\-prefix global configuration
                                        	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix>`
                                        
                                        .. attribute:: fast_reroute_enable
                                        
                                        	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                        	**type**\:  :py:class:`OspfFastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastReroute>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute, self).__init__()

                                            self.yang_name = "fast-reroute"
                                            self.yang_parent_name = "multi-area-interface-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("per-link", ("per_link", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('fast_reroute_enable', YLeaf(YType.enumeration, 'fast-reroute-enable')),
                                            ])
                                            self.fast_reroute_enable = None

                                            self.per_link = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink()
                                            self.per_link.parent = self
                                            self._children_name_map["per_link"] = "per-link"
                                            self._children_yang_names.add("per-link")

                                            self.per_prefix = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix()
                                            self.per_prefix.parent = self
                                            self._children_name_map["per_prefix"] = "per-prefix"
                                            self._children_yang_names.add("per-prefix")
                                            self._segment_path = lambda: "fast-reroute"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute, ['fast_reroute_enable'], name, value)


                                        class PerLink(Entity):
                                            """
                                            Fast\-reroute per\-link configuration
                                            
                                            .. attribute:: fast_reroute_use_candidate_only
                                            
                                            	Use only interfaces on the candidate list as a backup path
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: candidate_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                            	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces>`
                                            
                                            .. attribute:: exclude_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                            	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink, self).__init__()

                                                self.yang_name = "per-link"
                                                self.yang_parent_name = "fast-reroute"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                                ])
                                                self.fast_reroute_use_candidate_only = None

                                                self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces()
                                                self.candidate_interfaces.parent = self
                                                self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                                self._children_yang_names.add("candidate-interfaces")

                                                self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces()
                                                self.exclude_interfaces.parent = self
                                                self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                                self._children_yang_names.add("exclude-interfaces")
                                                self._segment_path = lambda: "per-link"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                            class CandidateInterfaces(Entity):
                                                """
                                                Fast\-reroute per\-link/per\-prefix candidate
                                                interface configuration
                                                
                                                .. attribute:: candidate_interface
                                                
                                                	Candidate backup interface
                                                	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                                    self.yang_name = "candidate-interfaces"
                                                    self.yang_parent_name = "per-link"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface))])
                                                    self._leafs = OrderedDict()

                                                    self.candidate_interface = YList(self)
                                                    self._segment_path = lambda: "candidate-interfaces"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                                class CandidateInterface(Entity):
                                                    """
                                                    Candidate backup interface
                                                    
                                                    .. attribute:: interface_name  (key)
                                                    
                                                    	Interface
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                        self.yang_name = "candidate-interface"
                                                        self.yang_parent_name = "candidate-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['interface_name']
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                        ])
                                                        self.interface_name = None
                                                        self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                            class ExcludeInterfaces(Entity):
                                                """
                                                Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                                interface configuration
                                                
                                                .. attribute:: exclude_interface
                                                
                                                	Exclude an interface from becoming a backup or UCMP
                                                	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                                    self.yang_name = "exclude-interfaces"
                                                    self.yang_parent_name = "per-link"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface))])
                                                    self._leafs = OrderedDict()

                                                    self.exclude_interface = YList(self)
                                                    self._segment_path = lambda: "exclude-interfaces"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                                class ExcludeInterface(Entity):
                                                    """
                                                    Exclude an interface from becoming a backup or
                                                    UCMP
                                                    
                                                    .. attribute:: interface_name  (key)
                                                    
                                                    	Interface
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                        self.yang_name = "exclude-interface"
                                                        self.yang_parent_name = "exclude-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['interface_name']
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                        ])
                                                        self.interface_name = None
                                                        self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                        class PerPrefix(Entity):
                                            """
                                            Fast\-reroute per\-prefix global configuration
                                            
                                            .. attribute:: remote_lfa
                                            
                                            	Remote LFA configuration
                                            	**type**\:  :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa>`
                                            
                                            .. attribute:: tiebreakers
                                            
                                            	Fast\-reroute tiebreakers configurations
                                            	**type**\:  :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers>`
                                            
                                            .. attribute:: topology_independent_lfa
                                            
                                            	Topology Independet LFA configuration
                                            	**type**\: bool
                                            
                                            .. attribute:: fast_reroute_use_candidate_only
                                            
                                            	Use only interfaces on the candidate list as a backup path
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: candidate_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                            	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                            
                                            .. attribute:: exclude_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                            	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix, self).__init__()

                                                self.yang_name = "per-prefix"
                                                self.yang_parent_name = "fast-reroute"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("remote-lfa", ("remote_lfa", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa)), ("tiebreakers", ("tiebreakers", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers)), ("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('topology_independent_lfa', YLeaf(YType.boolean, 'topology-independent-lfa')),
                                                    ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                                ])
                                                self.topology_independent_lfa = None
                                                self.fast_reroute_use_candidate_only = None

                                                self.remote_lfa = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa()
                                                self.remote_lfa.parent = self
                                                self._children_name_map["remote_lfa"] = "remote-lfa"
                                                self._children_yang_names.add("remote-lfa")

                                                self.tiebreakers = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers()
                                                self.tiebreakers.parent = self
                                                self._children_name_map["tiebreakers"] = "tiebreakers"
                                                self._children_yang_names.add("tiebreakers")

                                                self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces()
                                                self.candidate_interfaces.parent = self
                                                self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                                self._children_yang_names.add("candidate-interfaces")

                                                self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                                self.exclude_interfaces.parent = self
                                                self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                                self._children_yang_names.add("exclude-interfaces")
                                                self._segment_path = lambda: "per-prefix"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix, ['topology_independent_lfa', 'fast_reroute_use_candidate_only'], name, value)


                                            class RemoteLfa(Entity):
                                                """
                                                Remote LFA configuration
                                                
                                                .. attribute:: tunnel
                                                
                                                	Enable/Disable remote LFA computation
                                                	**type**\:  :py:class:`OspfFrrRlfaTunnel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFrrRlfaTunnel>`
                                                
                                                .. attribute:: maximum_cost
                                                
                                                	Maximum path cost to remote LFA
                                                	**type**\: int
                                                
                                                	**range:** 1..4294967295
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa, self).__init__()

                                                    self.yang_name = "remote-lfa"
                                                    self.yang_parent_name = "per-prefix"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('tunnel', YLeaf(YType.enumeration, 'tunnel')),
                                                        ('maximum_cost', YLeaf(YType.uint32, 'maximum-cost')),
                                                    ])
                                                    self.tunnel = None
                                                    self.maximum_cost = None
                                                    self._segment_path = lambda: "remote-lfa"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa, ['tunnel', 'maximum_cost'], name, value)


                                            class Tiebreakers(Entity):
                                                """
                                                Fast\-reroute tiebreakers configurations
                                                
                                                .. attribute:: tiebreaker
                                                
                                                	Fast\-reroute tiebreakers configuration
                                                	**type**\: list of  		 :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers, self).__init__()

                                                    self.yang_name = "tiebreakers"
                                                    self.yang_parent_name = "per-prefix"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("tiebreaker", ("tiebreaker", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker))])
                                                    self._leafs = OrderedDict()

                                                    self.tiebreaker = YList(self)
                                                    self._segment_path = lambda: "tiebreakers"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers, [], name, value)


                                                class Tiebreaker(Entity):
                                                    """
                                                    Fast\-reroute tiebreakers configuration
                                                    
                                                    .. attribute:: tiebreaker_type  (key)
                                                    
                                                    	Tiebreaker type
                                                    	**type**\:  :py:class:`OspfFastRerouteTiebreakersIntf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakersIntf>`
                                                    
                                                    .. attribute:: tiebreaker_index
                                                    
                                                    	Index value for a tiebreaker, 0 to disable
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..255
                                                    
                                                    	**mandatory**\: True
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, self).__init__()

                                                        self.yang_name = "tiebreaker"
                                                        self.yang_parent_name = "tiebreakers"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['tiebreaker_type']
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('tiebreaker_type', YLeaf(YType.enumeration, 'tiebreaker-type')),
                                                            ('tiebreaker_index', YLeaf(YType.uint32, 'tiebreaker-index')),
                                                        ])
                                                        self.tiebreaker_type = None
                                                        self.tiebreaker_index = None
                                                        self._segment_path = lambda: "tiebreaker" + "[tiebreaker-type='" + str(self.tiebreaker_type) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, ['tiebreaker_type', 'tiebreaker_index'], name, value)


                                            class CandidateInterfaces(Entity):
                                                """
                                                Fast\-reroute per\-link/per\-prefix candidate
                                                interface configuration
                                                
                                                .. attribute:: candidate_interface
                                                
                                                	Candidate backup interface
                                                	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                                    self.yang_name = "candidate-interfaces"
                                                    self.yang_parent_name = "per-prefix"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface))])
                                                    self._leafs = OrderedDict()

                                                    self.candidate_interface = YList(self)
                                                    self._segment_path = lambda: "candidate-interfaces"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                                class CandidateInterface(Entity):
                                                    """
                                                    Candidate backup interface
                                                    
                                                    .. attribute:: interface_name  (key)
                                                    
                                                    	Interface
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                        self.yang_name = "candidate-interface"
                                                        self.yang_parent_name = "candidate-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['interface_name']
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                        ])
                                                        self.interface_name = None
                                                        self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                            class ExcludeInterfaces(Entity):
                                                """
                                                Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                                interface configuration
                                                
                                                .. attribute:: exclude_interface
                                                
                                                	Exclude an interface from becoming a backup or UCMP
                                                	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                                    self.yang_name = "exclude-interfaces"
                                                    self.yang_parent_name = "per-prefix"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface))])
                                                    self._leafs = OrderedDict()

                                                    self.exclude_interface = YList(self)
                                                    self._segment_path = lambda: "exclude-interfaces"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                                class ExcludeInterface(Entity):
                                                    """
                                                    Exclude an interface from becoming a backup or
                                                    UCMP
                                                    
                                                    .. attribute:: interface_name  (key)
                                                    
                                                    	Interface
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                        self.yang_name = "exclude-interface"
                                                        self.yang_parent_name = "exclude-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['interface_name']
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                        ])
                                                        self.interface_name = None
                                                        self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                    class CostFallback(Entity):
                                        """
                                        Interface fallback cost
                                        
                                        .. attribute:: cost
                                        
                                        	Fallback cost of link
                                        	**type**\: int
                                        
                                        	**range:** 1..65535
                                        
                                        .. attribute:: threshold
                                        
                                        	Bandwidth threshold
                                        	**type**\: int
                                        
                                        	**range:** 1..4294967
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback, self).__init__()

                                            self.yang_name = "cost-fallback"
                                            self.yang_parent_name = "multi-area-interface-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('cost', YLeaf(YType.uint32, 'cost')),
                                                ('threshold', YLeaf(YType.uint32, 'threshold')),
                                            ])
                                            self.cost = None
                                            self.threshold = None
                                            self._segment_path = lambda: "cost-fallback"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback, ['cost', 'threshold'], name, value)


                            class AreaRanges(Entity):
                                """
                                Summarize routes matching address/mask (border
                                routers only)
                                
                                .. attribute:: area_range
                                
                                	Ordering index
                                	**type**\: list of  		 :py:class:`AreaRange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaRanges.AreaRange>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaRanges, self).__init__()

                                    self.yang_name = "area-ranges"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([("area-range", ("area_range", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaRanges.AreaRange))])
                                    self._leafs = OrderedDict()

                                    self.area_range = YList(self)
                                    self._segment_path = lambda: "area-ranges"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaRanges, [], name, value)


                                class AreaRange(Entity):
                                    """
                                    Ordering index
                                    
                                    .. attribute:: address  (key)
                                    
                                    	IP address to match
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: netmask  (key)
                                    
                                    	IP netmask for address
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: not_advertise
                                    
                                    	Do not advertise this range
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaRanges.AreaRange, self).__init__()

                                        self.yang_name = "area-range"
                                        self.yang_parent_name = "area-ranges"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['address','netmask']
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('address', YLeaf(YType.str, 'address')),
                                            ('netmask', YLeaf(YType.str, 'netmask')),
                                            ('not_advertise', YLeaf(YType.boolean, 'not-advertise')),
                                        ])
                                        self.address = None
                                        self.netmask = None
                                        self.not_advertise = None
                                        self._segment_path = lambda: "area-range" + "[address='" + str(self.address) + "']" + "[netmask='" + str(self.netmask) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaRanges.AreaRange, ['address', 'netmask', 'not_advertise'], name, value)


                            class Nssa(Entity):
                                """
                                Specify area as a NSSA area
                                
                                .. attribute:: no_redistribution
                                
                                	No redistribution into this NSSA area
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: default_info_originate
                                
                                	Originate Type 7 default into NSSA area
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: no_summary
                                
                                	Do not send summary LSA into NSSA
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: nssa_def_metric
                                
                                	OSPF default metric
                                	**type**\: int
                                
                                	**range:** 1..16777214
                                
                                .. attribute:: metric_type
                                
                                	OSPF External metric type
                                	**type**\:  :py:class:`OspfLinkStateMetric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetric>`
                                
                                	**default value**\: type2
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Nssa, self).__init__()

                                    self.yang_name = "nssa"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('no_redistribution', YLeaf(YType.boolean, 'no-redistribution')),
                                        ('default_info_originate', YLeaf(YType.boolean, 'default-info-originate')),
                                        ('no_summary', YLeaf(YType.boolean, 'no-summary')),
                                        ('nssa_def_metric', YLeaf(YType.uint32, 'nssa-def-metric')),
                                        ('metric_type', YLeaf(YType.enumeration, 'metric-type')),
                                    ])
                                    self.no_redistribution = None
                                    self.default_info_originate = None
                                    self.no_summary = None
                                    self.nssa_def_metric = None
                                    self.metric_type = None
                                    self._segment_path = lambda: "nssa"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Nssa, ['no_redistribution', 'default_info_originate', 'no_summary', 'nssa_def_metric', 'metric_type'], name, value)


                        class AreaAreaId(Entity):
                            """
                            Configuration for a particular area
                            
                            .. attribute:: area_id  (key)
                            
                            	Area ID if in integer format
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: virtual_link_scopes
                            
                            	Virtual Link scope configurations
                            	**type**\:  :py:class:`VirtualLinkScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes>`
                            
                            .. attribute:: sham_link_scopes
                            
                            	Sham Link scope configurations
                            	**type**\:  :py:class:`ShamLinkScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes>`
                            
                            .. attribute:: area_scope
                            
                            	Area scope configuration
                            	**type**\:  :py:class:`AreaScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope>`
                            
                            .. attribute:: name_scopes
                            
                            	Name scope configurations
                            	**type**\:  :py:class:`NameScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes>`
                            
                            .. attribute:: multi_area_interface_scopes
                            
                            	Multi Area Interface scope configurations
                            	**type**\:  :py:class:`MultiAreaInterfaceScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes>`
                            
                            .. attribute:: area_ranges
                            
                            	Summarize routes matching address/mask (border routers only)
                            	**type**\:  :py:class:`AreaRanges <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaRanges>`
                            
                            .. attribute:: nssa
                            
                            	Specify area as a NSSA area
                            	**type**\:  :py:class:`Nssa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Nssa>`
                            
                            .. attribute:: route_policy_in
                            
                            	Configure a route policy for inbound type\-3 lsa filtering
                            	**type**\: str
                            
                            .. attribute:: default_cost
                            
                            	Set the summary default\-cost of a NSSA/stub area
                            	**type**\: int
                            
                            	**range:** 1..16777215
                            
                            	**default value**\: 1
                            
                            .. attribute:: route_policy_out
                            
                            	Configure a route policy for outbound type\-3 lsa filtering
                            	**type**\: str
                            
                            .. attribute:: stub
                            
                            	Specify the area as a stub area (send summary LSA stub area)
                            	**type**\: bool
                            
                            .. attribute:: mpls_traffic_eng
                            
                            	Configure an OSPF area to run MPLS Traffic Engineering
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: external_out
                            
                            	Enable/Disable an OSPF area to advertise intra\-area prefixes out of this area as external
                            	**type**\: bool
                            
                            .. attribute:: summary_in
                            
                            	Enable/Disable an OSPF area to advertise external prefixes into this area as summary
                            	**type**\: bool
                            
                            .. attribute:: segment_routing
                            
                            	segment\-routing configuration Applicable only in Default VRF
                            	**type**\:  :py:class:`OspfSegmentRouting <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRouting>`
                            
                            .. attribute:: running
                            
                            	Enable routing on an IP network
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId, self).__init__()

                                self.yang_name = "area-area-id"
                                self.yang_parent_name = "area-addresses"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['area_id']
                                self._child_container_classes = OrderedDict([("virtual-link-scopes", ("virtual_link_scopes", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes)), ("sham-link-scopes", ("sham_link_scopes", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes)), ("area-scope", ("area_scope", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope)), ("name-scopes", ("name_scopes", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes)), ("multi-area-interface-scopes", ("multi_area_interface_scopes", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes)), ("area-ranges", ("area_ranges", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaRanges)), ("nssa", ("nssa", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Nssa))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('area_id', YLeaf(YType.uint32, 'area-id')),
                                    ('route_policy_in', YLeaf(YType.str, 'route-policy-in')),
                                    ('default_cost', YLeaf(YType.uint32, 'default-cost')),
                                    ('route_policy_out', YLeaf(YType.str, 'route-policy-out')),
                                    ('stub', YLeaf(YType.boolean, 'stub')),
                                    ('mpls_traffic_eng', YLeaf(YType.empty, 'mpls-traffic-eng')),
                                    ('external_out', YLeaf(YType.boolean, 'external-out')),
                                    ('summary_in', YLeaf(YType.boolean, 'summary-in')),
                                    ('segment_routing', YLeaf(YType.enumeration, 'segment-routing')),
                                    ('running', YLeaf(YType.empty, 'running')),
                                ])
                                self.area_id = None
                                self.route_policy_in = None
                                self.default_cost = None
                                self.route_policy_out = None
                                self.stub = None
                                self.mpls_traffic_eng = None
                                self.external_out = None
                                self.summary_in = None
                                self.segment_routing = None
                                self.running = None

                                self.virtual_link_scopes = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes()
                                self.virtual_link_scopes.parent = self
                                self._children_name_map["virtual_link_scopes"] = "virtual-link-scopes"
                                self._children_yang_names.add("virtual-link-scopes")

                                self.sham_link_scopes = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes()
                                self.sham_link_scopes.parent = self
                                self._children_name_map["sham_link_scopes"] = "sham-link-scopes"
                                self._children_yang_names.add("sham-link-scopes")

                                self.area_scope = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope()
                                self.area_scope.parent = self
                                self._children_name_map["area_scope"] = "area-scope"
                                self._children_yang_names.add("area-scope")

                                self.name_scopes = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes()
                                self.name_scopes.parent = self
                                self._children_name_map["name_scopes"] = "name-scopes"
                                self._children_yang_names.add("name-scopes")

                                self.multi_area_interface_scopes = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes()
                                self.multi_area_interface_scopes.parent = self
                                self._children_name_map["multi_area_interface_scopes"] = "multi-area-interface-scopes"
                                self._children_yang_names.add("multi-area-interface-scopes")

                                self.area_ranges = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaRanges()
                                self.area_ranges.parent = self
                                self._children_name_map["area_ranges"] = "area-ranges"
                                self._children_yang_names.add("area-ranges")

                                self.nssa = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Nssa()
                                self.nssa.parent = self
                                self._children_name_map["nssa"] = "nssa"
                                self._children_yang_names.add("nssa")
                                self._segment_path = lambda: "area-area-id" + "[area-id='" + str(self.area_id) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId, ['area_id', 'route_policy_in', 'default_cost', 'route_policy_out', 'stub', 'mpls_traffic_eng', 'external_out', 'summary_in', 'segment_routing', 'running'], name, value)


                            class VirtualLinkScopes(Entity):
                                """
                                Virtual Link scope configurations
                                
                                .. attribute:: virtual_link_scope
                                
                                	Virtual Link configuration
                                	**type**\: list of  		 :py:class:`VirtualLinkScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes, self).__init__()

                                    self.yang_name = "virtual-link-scopes"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([("virtual-link-scope", ("virtual_link_scope", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope))])
                                    self._leafs = OrderedDict()

                                    self.virtual_link_scope = YList(self)
                                    self._segment_path = lambda: "virtual-link-scopes"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes, [], name, value)


                                class VirtualLinkScope(Entity):
                                    """
                                    Virtual Link configuration
                                    
                                    .. attribute:: address  (key)
                                    
                                    	Router ID of virtual link neighbor
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: authentication
                                    
                                    	Authentication
                                    	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication>`
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Interval between HELLO packets in seconds
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Number of seconds to delay transmission of LSAs
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 1
                                    
                                    .. attribute:: dead_interval_minimal
                                    
                                    	Interval after which a neighbor is declared dead
                                    	**type**\:  :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal>`
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Time in seconds between retransmitting lost link state advertisements
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 5
                                    
                                    .. attribute:: running
                                    
                                    	Enable routing on an IP network
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope, self).__init__()

                                        self.yang_name = "virtual-link-scope"
                                        self.yang_parent_name = "virtual-link-scopes"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['address']
                                        self._child_container_classes = OrderedDict([("authentication", ("authentication", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication)), ("dead-interval-minimal", ("dead_interval_minimal", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('address', YLeaf(YType.str, 'address')),
                                            ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                                            ('transmit_delay', YLeaf(YType.uint32, 'transmit-delay')),
                                            ('retransmit_interval', YLeaf(YType.uint32, 'retransmit-interval')),
                                            ('running', YLeaf(YType.empty, 'running')),
                                        ])
                                        self.address = None
                                        self.hello_interval = None
                                        self.transmit_delay = None
                                        self.retransmit_interval = None
                                        self.running = None

                                        self.authentication = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication()
                                        self.authentication.parent = self
                                        self._children_name_map["authentication"] = "authentication"
                                        self._children_yang_names.add("authentication")

                                        self.dead_interval_minimal = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal()
                                        self.dead_interval_minimal.parent = self
                                        self._children_name_map["dead_interval_minimal"] = "dead-interval-minimal"
                                        self._children_yang_names.add("dead-interval-minimal")
                                        self._segment_path = lambda: "virtual-link-scope" + "[address='" + str(self.address) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope, ['address', 'hello_interval', 'transmit_delay', 'retransmit_interval', 'running'], name, value)


                                    class Authentication(Entity):
                                        """
                                        Authentication
                                        
                                        .. attribute:: type
                                        
                                        	Authentication type
                                        	**type**\:  :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.Type>`
                                        
                                        .. attribute:: message_digest_keies
                                        
                                        	Message digest authentication password (key) configurations, first 16 chars used
                                        	**type**\:  :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies>`
                                        
                                        .. attribute:: key
                                        
                                        	Authentication key configuration
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication, self).__init__()

                                            self.yang_name = "authentication"
                                            self.yang_parent_name = "virtual-link-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("type", ("type", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.Type)), ("message-digest-keies", ("message_digest_keies", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('key', YLeaf(YType.str, 'key')),
                                            ])
                                            self.key = None

                                            self.type = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.Type()
                                            self.type.parent = self
                                            self._children_name_map["type"] = "type"
                                            self._children_yang_names.add("type")

                                            self.message_digest_keies = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies()
                                            self.message_digest_keies.parent = self
                                            self._children_name_map["message_digest_keies"] = "message-digest-keies"
                                            self._children_yang_names.add("message-digest-keies")
                                            self._segment_path = lambda: "authentication"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication, ['key'], name, value)


                                        class Type(Entity):
                                            """
                                            Authentication type
                                            
                                            .. attribute:: authen_type
                                            
                                            	Authentication type code 
                                            	**type**\:  :py:class:`OspfAuthentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthentication>`
                                            
                                            .. attribute:: keychain_authen_type
                                            
                                            	Keychain authentication type
                                            	**type**\:  :py:class:`OspfKeychainAuth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuth>`
                                            
                                            .. attribute:: keychain_name
                                            
                                            	Keychain name
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.Type, self).__init__()

                                                self.yang_name = "type"
                                                self.yang_parent_name = "authentication"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('authen_type', YLeaf(YType.enumeration, 'authen-type')),
                                                    ('keychain_authen_type', YLeaf(YType.enumeration, 'keychain-authen-type')),
                                                    ('keychain_name', YLeaf(YType.str, 'keychain-name')),
                                                ])
                                                self.authen_type = None
                                                self.keychain_authen_type = None
                                                self.keychain_name = None
                                                self._segment_path = lambda: "type"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.Type, ['authen_type', 'keychain_authen_type', 'keychain_name'], name, value)


                                        class MessageDigestKeies(Entity):
                                            """
                                            Message digest authentication password (key)
                                            configurations, first 16 chars used
                                            
                                            .. attribute:: message_digest_key
                                            
                                            	Message digest authentication password (key) configuration
                                            	**type**\: list of  		 :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies, self).__init__()

                                                self.yang_name = "message-digest-keies"
                                                self.yang_parent_name = "authentication"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("message-digest-key", ("message_digest_key", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies.MessageDigestKey))])
                                                self._leafs = OrderedDict()

                                                self.message_digest_key = YList(self)
                                                self._segment_path = lambda: "message-digest-keies"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies, [], name, value)


                                            class MessageDigestKey(Entity):
                                                """
                                                Message digest authentication password (key)
                                                configuration
                                                
                                                .. attribute:: key_id  (key)
                                                
                                                	Key ID
                                                	**type**\: int
                                                
                                                	**range:** 1..255
                                                
                                                .. attribute:: password
                                                
                                                	Password
                                                	**type**\: str
                                                
                                                	**pattern:** (!.+)\|([^!].+)
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies.MessageDigestKey, self).__init__()

                                                    self.yang_name = "message-digest-key"
                                                    self.yang_parent_name = "message-digest-keies"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['key_id']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('key_id', YLeaf(YType.uint32, 'key-id')),
                                                        ('password', YLeaf(YType.str, 'password')),
                                                    ])
                                                    self.key_id = None
                                                    self.password = None
                                                    self._segment_path = lambda: "message-digest-key" + "[key-id='" + str(self.key_id) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies.MessageDigestKey, ['key_id', 'password'], name, value)


                                    class DeadIntervalMinimal(Entity):
                                        """
                                        Interval after which a neighbor is declared dead
                                        
                                        .. attribute:: interval
                                        
                                        	Interval size in seconds after which a neighbor is declared dead
                                        	**type**\: int
                                        
                                        	**range:** 1..65535
                                        
                                        	**units**\: second
                                        
                                        .. attribute:: multiplier
                                        
                                        	Number of Hellos in one second
                                        	**type**\: int
                                        
                                        	**range:** 3..20
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal, self).__init__()

                                            self.yang_name = "dead-interval-minimal"
                                            self.yang_parent_name = "virtual-link-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('interval', YLeaf(YType.uint32, 'interval')),
                                                ('multiplier', YLeaf(YType.uint32, 'multiplier')),
                                            ])
                                            self.interval = None
                                            self.multiplier = None
                                            self._segment_path = lambda: "dead-interval-minimal"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal, ['interval', 'multiplier'], name, value)


                            class ShamLinkScopes(Entity):
                                """
                                Sham Link scope configurations
                                
                                .. attribute:: sham_link_scope
                                
                                	Sham Link configuration
                                	**type**\: list of  		 :py:class:`ShamLinkScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes, self).__init__()

                                    self.yang_name = "sham-link-scopes"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([("sham-link-scope", ("sham_link_scope", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope))])
                                    self._leafs = OrderedDict()

                                    self.sham_link_scope = YList(self)
                                    self._segment_path = lambda: "sham-link-scopes"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes, [], name, value)


                                class ShamLinkScope(Entity):
                                    """
                                    Sham Link configuration
                                    
                                    .. attribute:: source_address  (key)
                                    
                                    	Address of the local sham\-link endpoint
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: destination_address  (key)
                                    
                                    	Address of the remote sham\-link endpoint
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: source
                                    
                                    	Address of the local sham\-link endpoint. Enter an IP Address
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: cost
                                    
                                    	Interface cost
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: authentication
                                    
                                    	Authentication
                                    	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication>`
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Interval between HELLO packets in seconds
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Number of seconds to delay transmission of LSAs
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 1
                                    
                                    .. attribute:: dead_interval_minimal
                                    
                                    	Interval after which a neighbor is declared dead
                                    	**type**\:  :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal>`
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Time in seconds between retransmitting lost link state advertisements
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 5
                                    
                                    .. attribute:: running
                                    
                                    	Enable routing on an IP network
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope, self).__init__()

                                        self.yang_name = "sham-link-scope"
                                        self.yang_parent_name = "sham-link-scopes"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['source_address','destination_address']
                                        self._child_container_classes = OrderedDict([("authentication", ("authentication", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication)), ("dead-interval-minimal", ("dead_interval_minimal", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('source_address', YLeaf(YType.str, 'source-address')),
                                            ('destination_address', YLeaf(YType.str, 'destination-address')),
                                            ('source', YLeaf(YType.str, 'source')),
                                            ('cost', YLeaf(YType.uint32, 'cost')),
                                            ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                                            ('transmit_delay', YLeaf(YType.uint32, 'transmit-delay')),
                                            ('retransmit_interval', YLeaf(YType.uint32, 'retransmit-interval')),
                                            ('running', YLeaf(YType.empty, 'running')),
                                        ])
                                        self.source_address = None
                                        self.destination_address = None
                                        self.source = None
                                        self.cost = None
                                        self.hello_interval = None
                                        self.transmit_delay = None
                                        self.retransmit_interval = None
                                        self.running = None

                                        self.authentication = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication()
                                        self.authentication.parent = self
                                        self._children_name_map["authentication"] = "authentication"
                                        self._children_yang_names.add("authentication")

                                        self.dead_interval_minimal = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal()
                                        self.dead_interval_minimal.parent = self
                                        self._children_name_map["dead_interval_minimal"] = "dead-interval-minimal"
                                        self._children_yang_names.add("dead-interval-minimal")
                                        self._segment_path = lambda: "sham-link-scope" + "[source-address='" + str(self.source_address) + "']" + "[destination-address='" + str(self.destination_address) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope, ['source_address', 'destination_address', 'source', 'cost', 'hello_interval', 'transmit_delay', 'retransmit_interval', 'running'], name, value)


                                    class Authentication(Entity):
                                        """
                                        Authentication
                                        
                                        .. attribute:: type
                                        
                                        	Authentication type
                                        	**type**\:  :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.Type>`
                                        
                                        .. attribute:: message_digest_keies
                                        
                                        	Message digest authentication password (key) configurations, first 16 chars used
                                        	**type**\:  :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies>`
                                        
                                        .. attribute:: key
                                        
                                        	Authentication key configuration
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication, self).__init__()

                                            self.yang_name = "authentication"
                                            self.yang_parent_name = "sham-link-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("type", ("type", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.Type)), ("message-digest-keies", ("message_digest_keies", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('key', YLeaf(YType.str, 'key')),
                                            ])
                                            self.key = None

                                            self.type = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.Type()
                                            self.type.parent = self
                                            self._children_name_map["type"] = "type"
                                            self._children_yang_names.add("type")

                                            self.message_digest_keies = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies()
                                            self.message_digest_keies.parent = self
                                            self._children_name_map["message_digest_keies"] = "message-digest-keies"
                                            self._children_yang_names.add("message-digest-keies")
                                            self._segment_path = lambda: "authentication"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication, ['key'], name, value)


                                        class Type(Entity):
                                            """
                                            Authentication type
                                            
                                            .. attribute:: authen_type
                                            
                                            	Authentication type code 
                                            	**type**\:  :py:class:`OspfAuthentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthentication>`
                                            
                                            .. attribute:: keychain_authen_type
                                            
                                            	Keychain authentication type
                                            	**type**\:  :py:class:`OspfKeychainAuth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuth>`
                                            
                                            .. attribute:: keychain_name
                                            
                                            	Keychain name
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.Type, self).__init__()

                                                self.yang_name = "type"
                                                self.yang_parent_name = "authentication"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('authen_type', YLeaf(YType.enumeration, 'authen-type')),
                                                    ('keychain_authen_type', YLeaf(YType.enumeration, 'keychain-authen-type')),
                                                    ('keychain_name', YLeaf(YType.str, 'keychain-name')),
                                                ])
                                                self.authen_type = None
                                                self.keychain_authen_type = None
                                                self.keychain_name = None
                                                self._segment_path = lambda: "type"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.Type, ['authen_type', 'keychain_authen_type', 'keychain_name'], name, value)


                                        class MessageDigestKeies(Entity):
                                            """
                                            Message digest authentication password (key)
                                            configurations, first 16 chars used
                                            
                                            .. attribute:: message_digest_key
                                            
                                            	Message digest authentication password (key) configuration
                                            	**type**\: list of  		 :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies, self).__init__()

                                                self.yang_name = "message-digest-keies"
                                                self.yang_parent_name = "authentication"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("message-digest-key", ("message_digest_key", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies.MessageDigestKey))])
                                                self._leafs = OrderedDict()

                                                self.message_digest_key = YList(self)
                                                self._segment_path = lambda: "message-digest-keies"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies, [], name, value)


                                            class MessageDigestKey(Entity):
                                                """
                                                Message digest authentication password (key)
                                                configuration
                                                
                                                .. attribute:: key_id  (key)
                                                
                                                	Key ID
                                                	**type**\: int
                                                
                                                	**range:** 1..255
                                                
                                                .. attribute:: password
                                                
                                                	Password
                                                	**type**\: str
                                                
                                                	**pattern:** (!.+)\|([^!].+)
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies.MessageDigestKey, self).__init__()

                                                    self.yang_name = "message-digest-key"
                                                    self.yang_parent_name = "message-digest-keies"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['key_id']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('key_id', YLeaf(YType.uint32, 'key-id')),
                                                        ('password', YLeaf(YType.str, 'password')),
                                                    ])
                                                    self.key_id = None
                                                    self.password = None
                                                    self._segment_path = lambda: "message-digest-key" + "[key-id='" + str(self.key_id) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies.MessageDigestKey, ['key_id', 'password'], name, value)


                                    class DeadIntervalMinimal(Entity):
                                        """
                                        Interval after which a neighbor is declared dead
                                        
                                        .. attribute:: interval
                                        
                                        	Interval size in seconds after which a neighbor is declared dead
                                        	**type**\: int
                                        
                                        	**range:** 1..65535
                                        
                                        	**units**\: second
                                        
                                        .. attribute:: multiplier
                                        
                                        	Number of Hellos in one second
                                        	**type**\: int
                                        
                                        	**range:** 3..20
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal, self).__init__()

                                            self.yang_name = "dead-interval-minimal"
                                            self.yang_parent_name = "sham-link-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('interval', YLeaf(YType.uint32, 'interval')),
                                                ('multiplier', YLeaf(YType.uint32, 'multiplier')),
                                            ])
                                            self.interval = None
                                            self.multiplier = None
                                            self._segment_path = lambda: "dead-interval-minimal"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal, ['interval', 'multiplier'], name, value)


                            class AreaScope(Entity):
                                """
                                Area scope configuration
                                
                                .. attribute:: distribute_list
                                
                                	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                                	**type**\:  :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.DistributeList>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: cost
                                
                                	Interface cost
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: bfd
                                
                                	BFD configuration
                                	**type**\:  :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Bfd>`
                                
                                .. attribute:: prefix_suppression_primary
                                
                                	Enable/Disable prefix suppression for primary addresses
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: mtu_ignore
                                
                                	Enable/Disable ignoring of MTU in DBD packets
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: authentication
                                
                                	Authentication
                                	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication>`
                                
                                .. attribute:: ldp_sync_igp_shortcuts
                                
                                	Enable/Disable MPLS LDP sync for igp\-shortcuts
                                	**type**\: bool
                                
                                .. attribute:: ldp_auto_config
                                
                                	Enable MPLS LDP Auto Config
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: security
                                
                                	Container class for security related configuration parameters
                                	**type**\:  :py:class:`Security <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Security>`
                                
                                .. attribute:: network_type
                                
                                	Type of attached network
                                	**type**\:  :py:class:`OspfNetwork <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfNetwork>`
                                
                                .. attribute:: hello_interval
                                
                                	Interval between HELLO packets in seconds
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: loopback_stub_network
                                
                                	Enable/Disable advertising loopback as a stub network
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: prefix_suppression_secondary
                                
                                	Enable/Disable prefix suppression for secondary addresses
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: demand_circuit
                                
                                	Enable/Disable OSPF demand circuit
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: passive
                                
                                	When enabled, prevent sending HELLO packets over link
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: transmit_delay
                                
                                	Number of seconds to delay transmission of LSAs
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 1
                                
                                .. attribute:: packet_size
                                
                                	Customize size of OSPF packets upto MTU
                                	**type**\: int
                                
                                	**range:** 576..10000
                                
                                .. attribute:: ldp_sync
                                
                                	Enable/Disable MPLS LDP sync
                                	**type**\: bool
                                
                                .. attribute:: database_filter
                                
                                	Filter OSPF LSA during synchronization and flooding
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: dead_interval_minimal
                                
                                	Interval after which a neighbor is declared dead
                                	**type**\:  :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.DeadIntervalMinimal>`
                                
                                .. attribute:: fast_reroute
                                
                                	Fast\-reroute configuration
                                	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute>`
                                
                                .. attribute:: link_down_fast_detect
                                
                                	Enable/Disable registration for early interface down notifications
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: segment_routing_forwarding
                                
                                	segment\-routing forwarding configuration Applicableonly in Default VRF
                                	**type**\:  :py:class:`OspfSegmentRoutingForwarding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRoutingForwarding>`
                                
                                .. attribute:: retransmit_interval
                                
                                	Time in seconds between retransmitting lost link state advertisements
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 5
                                
                                .. attribute:: priority
                                
                                	Router priority for DR and BDR election
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                	**default value**\: 1
                                
                                .. attribute:: flood_reduction
                                
                                	Enable/Disable OSPF flood reduction
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: cost_fallback
                                
                                	Interface fallback cost
                                	**type**\:  :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.CostFallback>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope, self).__init__()

                                    self.yang_name = "area-scope"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("distribute-list", ("distribute_list", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.DistributeList)), ("bfd", ("bfd", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Bfd)), ("authentication", ("authentication", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication)), ("security", ("security", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Security)), ("dead-interval-minimal", ("dead_interval_minimal", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.DeadIntervalMinimal)), ("fast-reroute", ("fast_reroute", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute)), ("cost-fallback", ("cost_fallback", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.CostFallback))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('cost', YLeaf(YType.uint32, 'cost')),
                                        ('prefix_suppression_primary', YLeaf(YType.boolean, 'prefix-suppression-primary')),
                                        ('mtu_ignore', YLeaf(YType.boolean, 'mtu-ignore')),
                                        ('ldp_sync_igp_shortcuts', YLeaf(YType.boolean, 'ldp-sync-igp-shortcuts')),
                                        ('ldp_auto_config', YLeaf(YType.empty, 'ldp-auto-config')),
                                        ('network_type', YLeaf(YType.enumeration, 'network-type')),
                                        ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                                        ('loopback_stub_network', YLeaf(YType.boolean, 'loopback-stub-network')),
                                        ('prefix_suppression_secondary', YLeaf(YType.boolean, 'prefix-suppression-secondary')),
                                        ('demand_circuit', YLeaf(YType.boolean, 'demand-circuit')),
                                        ('passive', YLeaf(YType.boolean, 'passive')),
                                        ('transmit_delay', YLeaf(YType.uint32, 'transmit-delay')),
                                        ('packet_size', YLeaf(YType.uint32, 'packet-size')),
                                        ('ldp_sync', YLeaf(YType.boolean, 'ldp-sync')),
                                        ('database_filter', YLeaf(YType.boolean, 'database-filter')),
                                        ('link_down_fast_detect', YLeaf(YType.boolean, 'link-down-fast-detect')),
                                        ('segment_routing_forwarding', YLeaf(YType.enumeration, 'segment-routing-forwarding')),
                                        ('retransmit_interval', YLeaf(YType.uint32, 'retransmit-interval')),
                                        ('priority', YLeaf(YType.uint32, 'priority')),
                                        ('flood_reduction', YLeaf(YType.boolean, 'flood-reduction')),
                                    ])
                                    self.cost = None
                                    self.prefix_suppression_primary = None
                                    self.mtu_ignore = None
                                    self.ldp_sync_igp_shortcuts = None
                                    self.ldp_auto_config = None
                                    self.network_type = None
                                    self.hello_interval = None
                                    self.loopback_stub_network = None
                                    self.prefix_suppression_secondary = None
                                    self.demand_circuit = None
                                    self.passive = None
                                    self.transmit_delay = None
                                    self.packet_size = None
                                    self.ldp_sync = None
                                    self.database_filter = None
                                    self.link_down_fast_detect = None
                                    self.segment_routing_forwarding = None
                                    self.retransmit_interval = None
                                    self.priority = None
                                    self.flood_reduction = None

                                    self.distribute_list = None
                                    self._children_name_map["distribute_list"] = "distribute-list"
                                    self._children_yang_names.add("distribute-list")

                                    self.bfd = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Bfd()
                                    self.bfd.parent = self
                                    self._children_name_map["bfd"] = "bfd"
                                    self._children_yang_names.add("bfd")

                                    self.authentication = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication()
                                    self.authentication.parent = self
                                    self._children_name_map["authentication"] = "authentication"
                                    self._children_yang_names.add("authentication")

                                    self.security = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Security()
                                    self.security.parent = self
                                    self._children_name_map["security"] = "security"
                                    self._children_yang_names.add("security")

                                    self.dead_interval_minimal = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.DeadIntervalMinimal()
                                    self.dead_interval_minimal.parent = self
                                    self._children_name_map["dead_interval_minimal"] = "dead-interval-minimal"
                                    self._children_yang_names.add("dead-interval-minimal")

                                    self.fast_reroute = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute()
                                    self.fast_reroute.parent = self
                                    self._children_name_map["fast_reroute"] = "fast-reroute"
                                    self._children_yang_names.add("fast-reroute")

                                    self.cost_fallback = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.CostFallback()
                                    self.cost_fallback.parent = self
                                    self._children_name_map["cost_fallback"] = "cost-fallback"
                                    self._children_yang_names.add("cost-fallback")
                                    self._segment_path = lambda: "area-scope"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope, ['cost', 'prefix_suppression_primary', 'mtu_ignore', 'ldp_sync_igp_shortcuts', 'ldp_auto_config', 'network_type', 'hello_interval', 'loopback_stub_network', 'prefix_suppression_secondary', 'demand_circuit', 'passive', 'transmit_delay', 'packet_size', 'ldp_sync', 'database_filter', 'link_down_fast_detect', 'segment_routing_forwarding', 'retransmit_interval', 'priority', 'flood_reduction'], name, value)


                                class DistributeList(Entity):
                                    """
                                    Filter networks intalled to RIB (disable as ACL
                                    name means filtering is disabled)
                                    
                                    .. attribute:: access_list_name
                                    
                                    	Access Control List name
                                    	**type**\: str
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route Policy name
                                    	**type**\: str
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.DistributeList, self).__init__()

                                        self.yang_name = "distribute-list"
                                        self.yang_parent_name = "area-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('access_list_name', YLeaf(YType.str, 'access-list-name')),
                                            ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
                                        ])
                                        self.access_list_name = None
                                        self.route_policy_name = None
                                        self._segment_path = lambda: "distribute-list"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.DistributeList, ['access_list_name', 'route_policy_name'], name, value)


                                class Bfd(Entity):
                                    """
                                    BFD configuration
                                    
                                    .. attribute:: interval
                                    
                                    	Hello interval for BFD sessions created by OSPF
                                    	**type**\: int
                                    
                                    	**range:** 3..30000
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: detection_multiplier
                                    
                                    	Detection multiplier for BFD sessions created by OSPF
                                    	**type**\: int
                                    
                                    	**range:** 2..50
                                    
                                    .. attribute:: fast_detect_mode
                                    
                                    	 use of Bidirectional Forwarding Detection
                                    	**type**\:  :py:class:`BfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.BfdEnableMode>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Bfd, self).__init__()

                                        self.yang_name = "bfd"
                                        self.yang_parent_name = "area-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interval', YLeaf(YType.uint32, 'interval')),
                                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                                            ('fast_detect_mode', YLeaf(YType.enumeration, 'fast-detect-mode')),
                                        ])
                                        self.interval = None
                                        self.detection_multiplier = None
                                        self.fast_detect_mode = None
                                        self._segment_path = lambda: "bfd"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Bfd, ['interval', 'detection_multiplier', 'fast_detect_mode'], name, value)


                                class Authentication(Entity):
                                    """
                                    Authentication
                                    
                                    .. attribute:: type
                                    
                                    	Authentication type
                                    	**type**\:  :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.Type>`
                                    
                                    .. attribute:: message_digest_keies
                                    
                                    	Message digest authentication password (key) configurations, first 16 chars used
                                    	**type**\:  :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies>`
                                    
                                    .. attribute:: key
                                    
                                    	Authentication key configuration
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication, self).__init__()

                                        self.yang_name = "authentication"
                                        self.yang_parent_name = "area-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("type", ("type", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.Type)), ("message-digest-keies", ("message_digest_keies", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('key', YLeaf(YType.str, 'key')),
                                        ])
                                        self.key = None

                                        self.type = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.Type()
                                        self.type.parent = self
                                        self._children_name_map["type"] = "type"
                                        self._children_yang_names.add("type")

                                        self.message_digest_keies = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies()
                                        self.message_digest_keies.parent = self
                                        self._children_name_map["message_digest_keies"] = "message-digest-keies"
                                        self._children_yang_names.add("message-digest-keies")
                                        self._segment_path = lambda: "authentication"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication, ['key'], name, value)


                                    class Type(Entity):
                                        """
                                        Authentication type
                                        
                                        .. attribute:: authen_type
                                        
                                        	Authentication type code 
                                        	**type**\:  :py:class:`OspfAuthentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthentication>`
                                        
                                        .. attribute:: keychain_authen_type
                                        
                                        	Keychain authentication type
                                        	**type**\:  :py:class:`OspfKeychainAuth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuth>`
                                        
                                        .. attribute:: keychain_name
                                        
                                        	Keychain name
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.Type, self).__init__()

                                            self.yang_name = "type"
                                            self.yang_parent_name = "authentication"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('authen_type', YLeaf(YType.enumeration, 'authen-type')),
                                                ('keychain_authen_type', YLeaf(YType.enumeration, 'keychain-authen-type')),
                                                ('keychain_name', YLeaf(YType.str, 'keychain-name')),
                                            ])
                                            self.authen_type = None
                                            self.keychain_authen_type = None
                                            self.keychain_name = None
                                            self._segment_path = lambda: "type"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.Type, ['authen_type', 'keychain_authen_type', 'keychain_name'], name, value)


                                    class MessageDigestKeies(Entity):
                                        """
                                        Message digest authentication password (key)
                                        configurations, first 16 chars used
                                        
                                        .. attribute:: message_digest_key
                                        
                                        	Message digest authentication password (key) configuration
                                        	**type**\: list of  		 :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies, self).__init__()

                                            self.yang_name = "message-digest-keies"
                                            self.yang_parent_name = "authentication"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("message-digest-key", ("message_digest_key", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies.MessageDigestKey))])
                                            self._leafs = OrderedDict()

                                            self.message_digest_key = YList(self)
                                            self._segment_path = lambda: "message-digest-keies"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies, [], name, value)


                                        class MessageDigestKey(Entity):
                                            """
                                            Message digest authentication password (key)
                                            configuration
                                            
                                            .. attribute:: key_id  (key)
                                            
                                            	Key ID
                                            	**type**\: int
                                            
                                            	**range:** 1..255
                                            
                                            .. attribute:: password
                                            
                                            	Password
                                            	**type**\: str
                                            
                                            	**pattern:** (!.+)\|([^!].+)
                                            
                                            	**mandatory**\: True
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies.MessageDigestKey, self).__init__()

                                                self.yang_name = "message-digest-key"
                                                self.yang_parent_name = "message-digest-keies"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['key_id']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('key_id', YLeaf(YType.uint32, 'key-id')),
                                                    ('password', YLeaf(YType.str, 'password')),
                                                ])
                                                self.key_id = None
                                                self.password = None
                                                self._segment_path = lambda: "message-digest-key" + "[key-id='" + str(self.key_id) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies.MessageDigestKey, ['key_id', 'password'], name, value)


                                class Security(Entity):
                                    """
                                    Container class for security related
                                    configuration parameters
                                    
                                    .. attribute:: ttl
                                    
                                    	Enabling turns on TTL security
                                    	**type**\:  :py:class:`Ttl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Security.Ttl>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Security, self).__init__()

                                        self.yang_name = "security"
                                        self.yang_parent_name = "area-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("ttl", ("ttl", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Security.Ttl))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.ttl = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Security.Ttl()
                                        self.ttl.parent = self
                                        self._children_name_map["ttl"] = "ttl"
                                        self._children_yang_names.add("ttl")
                                        self._segment_path = lambda: "security"


                                    class Ttl(Entity):
                                        """
                                        Enabling turns on TTL security
                                        
                                        .. attribute:: enable
                                        
                                        	Enable TTL security
                                        	**type**\: bool
                                        
                                        .. attribute:: hop_count
                                        
                                        	Hop count
                                        	**type**\: int
                                        
                                        	**range:** 1..254
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Security.Ttl, self).__init__()

                                            self.yang_name = "ttl"
                                            self.yang_parent_name = "security"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('enable', YLeaf(YType.boolean, 'enable')),
                                                ('hop_count', YLeaf(YType.uint32, 'hop-count')),
                                            ])
                                            self.enable = None
                                            self.hop_count = None
                                            self._segment_path = lambda: "ttl"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Security.Ttl, ['enable', 'hop_count'], name, value)


                                class DeadIntervalMinimal(Entity):
                                    """
                                    Interval after which a neighbor is declared dead
                                    
                                    .. attribute:: interval
                                    
                                    	Interval size in seconds after which a neighbor is declared dead
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: multiplier
                                    
                                    	Number of Hellos in one second
                                    	**type**\: int
                                    
                                    	**range:** 3..20
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.DeadIntervalMinimal, self).__init__()

                                        self.yang_name = "dead-interval-minimal"
                                        self.yang_parent_name = "area-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interval', YLeaf(YType.uint32, 'interval')),
                                            ('multiplier', YLeaf(YType.uint32, 'multiplier')),
                                        ])
                                        self.interval = None
                                        self.multiplier = None
                                        self._segment_path = lambda: "dead-interval-minimal"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.DeadIntervalMinimal, ['interval', 'multiplier'], name, value)


                                class FastReroute(Entity):
                                    """
                                    Fast\-reroute configuration
                                    
                                    .. attribute:: per_link
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink>`
                                    
                                    .. attribute:: per_prefix
                                    
                                    	Fast\-reroute per\-prefix global configuration
                                    	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix>`
                                    
                                    .. attribute:: fast_reroute_enable
                                    
                                    	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                    	**type**\:  :py:class:`OspfFastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastReroute>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute, self).__init__()

                                        self.yang_name = "fast-reroute"
                                        self.yang_parent_name = "area-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("per-link", ("per_link", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('fast_reroute_enable', YLeaf(YType.enumeration, 'fast-reroute-enable')),
                                        ])
                                        self.fast_reroute_enable = None

                                        self.per_link = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink()
                                        self.per_link.parent = self
                                        self._children_name_map["per_link"] = "per-link"
                                        self._children_yang_names.add("per-link")

                                        self.per_prefix = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix()
                                        self.per_prefix.parent = self
                                        self._children_name_map["per_prefix"] = "per-prefix"
                                        self._children_yang_names.add("per-prefix")
                                        self._segment_path = lambda: "fast-reroute"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute, ['fast_reroute_enable'], name, value)


                                    class PerLink(Entity):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                        	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink, self).__init__()

                                            self.yang_name = "per-link"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                            ])
                                            self.fast_reroute_use_candidate_only = None

                                            self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                            self._children_yang_names.add("candidate-interfaces")

                                            self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._children_yang_names.add("exclude-interfaces")
                                            self._segment_path = lambda: "per-link"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                        class CandidateInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface))])
                                                self._leafs = OrderedDict()

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(Entity):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                        class ExcludeInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup or UCMP
                                            	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface))])
                                                self._leafs = OrderedDict()

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(Entity):
                                                """
                                                Exclude an interface from becoming a backup or
                                                UCMP
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                    class PerPrefix(Entity):
                                        """
                                        Fast\-reroute per\-prefix global configuration
                                        
                                        .. attribute:: remote_lfa
                                        
                                        	Remote LFA configuration
                                        	**type**\:  :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.RemoteLfa>`
                                        
                                        .. attribute:: tiebreakers
                                        
                                        	Fast\-reroute tiebreakers configurations
                                        	**type**\:  :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers>`
                                        
                                        .. attribute:: topology_independent_lfa
                                        
                                        	Topology Independet LFA configuration
                                        	**type**\: bool
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                        	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix, self).__init__()

                                            self.yang_name = "per-prefix"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("remote-lfa", ("remote_lfa", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.RemoteLfa)), ("tiebreakers", ("tiebreakers", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers)), ("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('topology_independent_lfa', YLeaf(YType.boolean, 'topology-independent-lfa')),
                                                ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                            ])
                                            self.topology_independent_lfa = None
                                            self.fast_reroute_use_candidate_only = None

                                            self.remote_lfa = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.RemoteLfa()
                                            self.remote_lfa.parent = self
                                            self._children_name_map["remote_lfa"] = "remote-lfa"
                                            self._children_yang_names.add("remote-lfa")

                                            self.tiebreakers = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers()
                                            self.tiebreakers.parent = self
                                            self._children_name_map["tiebreakers"] = "tiebreakers"
                                            self._children_yang_names.add("tiebreakers")

                                            self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                            self._children_yang_names.add("candidate-interfaces")

                                            self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._children_yang_names.add("exclude-interfaces")
                                            self._segment_path = lambda: "per-prefix"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix, ['topology_independent_lfa', 'fast_reroute_use_candidate_only'], name, value)


                                        class RemoteLfa(Entity):
                                            """
                                            Remote LFA configuration
                                            
                                            .. attribute:: tunnel
                                            
                                            	Enable/Disable remote LFA computation
                                            	**type**\:  :py:class:`OspfFrrRlfaTunnel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFrrRlfaTunnel>`
                                            
                                            .. attribute:: maximum_cost
                                            
                                            	Maximum path cost to remote LFA
                                            	**type**\: int
                                            
                                            	**range:** 1..4294967295
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.RemoteLfa, self).__init__()

                                                self.yang_name = "remote-lfa"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('tunnel', YLeaf(YType.enumeration, 'tunnel')),
                                                    ('maximum_cost', YLeaf(YType.uint32, 'maximum-cost')),
                                                ])
                                                self.tunnel = None
                                                self.maximum_cost = None
                                                self._segment_path = lambda: "remote-lfa"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.RemoteLfa, ['tunnel', 'maximum_cost'], name, value)


                                        class Tiebreakers(Entity):
                                            """
                                            Fast\-reroute tiebreakers configurations
                                            
                                            .. attribute:: tiebreaker
                                            
                                            	Fast\-reroute tiebreakers configuration
                                            	**type**\: list of  		 :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers, self).__init__()

                                                self.yang_name = "tiebreakers"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("tiebreaker", ("tiebreaker", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker))])
                                                self._leafs = OrderedDict()

                                                self.tiebreaker = YList(self)
                                                self._segment_path = lambda: "tiebreakers"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers, [], name, value)


                                            class Tiebreaker(Entity):
                                                """
                                                Fast\-reroute tiebreakers configuration
                                                
                                                .. attribute:: tiebreaker_type  (key)
                                                
                                                	Tiebreaker type
                                                	**type**\:  :py:class:`OspfFastRerouteTiebreakersIntf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakersIntf>`
                                                
                                                .. attribute:: tiebreaker_index
                                                
                                                	Index value for a tiebreaker, 0 to disable
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, self).__init__()

                                                    self.yang_name = "tiebreaker"
                                                    self.yang_parent_name = "tiebreakers"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['tiebreaker_type']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('tiebreaker_type', YLeaf(YType.enumeration, 'tiebreaker-type')),
                                                        ('tiebreaker_index', YLeaf(YType.uint32, 'tiebreaker-index')),
                                                    ])
                                                    self.tiebreaker_type = None
                                                    self.tiebreaker_index = None
                                                    self._segment_path = lambda: "tiebreaker" + "[tiebreaker-type='" + str(self.tiebreaker_type) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, ['tiebreaker_type', 'tiebreaker_index'], name, value)


                                        class CandidateInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface))])
                                                self._leafs = OrderedDict()

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(Entity):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                        class ExcludeInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup or UCMP
                                            	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface))])
                                                self._leafs = OrderedDict()

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(Entity):
                                                """
                                                Exclude an interface from becoming a backup or
                                                UCMP
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                class CostFallback(Entity):
                                    """
                                    Interface fallback cost
                                    
                                    .. attribute:: cost
                                    
                                    	Fallback cost of link
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: threshold
                                    
                                    	Bandwidth threshold
                                    	**type**\: int
                                    
                                    	**range:** 1..4294967
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.CostFallback, self).__init__()

                                        self.yang_name = "cost-fallback"
                                        self.yang_parent_name = "area-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('cost', YLeaf(YType.uint32, 'cost')),
                                            ('threshold', YLeaf(YType.uint32, 'threshold')),
                                        ])
                                        self.cost = None
                                        self.threshold = None
                                        self._segment_path = lambda: "cost-fallback"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.CostFallback, ['cost', 'threshold'], name, value)


                            class NameScopes(Entity):
                                """
                                Name scope configurations
                                
                                .. attribute:: name_scope
                                
                                	Name scope configuration
                                	**type**\: list of  		 :py:class:`NameScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes, self).__init__()

                                    self.yang_name = "name-scopes"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([("name-scope", ("name_scope", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope))])
                                    self._leafs = OrderedDict()

                                    self.name_scope = YList(self)
                                    self._segment_path = lambda: "name-scopes"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes, [], name, value)


                                class NameScope(Entity):
                                    """
                                    Name scope configuration
                                    
                                    .. attribute:: interface_name  (key)
                                    
                                    	Name of Interface to configure
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: prefix_sid
                                    
                                    	Prefix SID
                                    	**type**\:  :py:class:`PrefixSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.PrefixSid>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: prefix_sid_strict
                                    
                                    	Strict Prefix SID
                                    	**type**\:  :py:class:`PrefixSidStrict <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.PrefixSidStrict>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: distribute_list
                                    
                                    	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                                    	**type**\:  :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DistributeList>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: cost
                                    
                                    	Interface cost
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: bfd
                                    
                                    	BFD configuration
                                    	**type**\:  :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Bfd>`
                                    
                                    .. attribute:: prefix_suppression_primary
                                    
                                    	Enable/Disable prefix suppression for primary addresses
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: mtu_ignore
                                    
                                    	Enable/Disable ignoring of MTU in DBD packets
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: authentication
                                    
                                    	Authentication
                                    	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication>`
                                    
                                    .. attribute:: ldp_sync_igp_shortcuts
                                    
                                    	Enable/Disable MPLS LDP sync for igp\-shortcuts
                                    	**type**\: bool
                                    
                                    .. attribute:: ldp_auto_config
                                    
                                    	Enable MPLS LDP Auto Config
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: security
                                    
                                    	Container class for security related configuration parameters
                                    	**type**\:  :py:class:`Security <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security>`
                                    
                                    .. attribute:: neighbors
                                    
                                    	Neighbor router configuration information
                                    	**type**\:  :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors>`
                                    
                                    .. attribute:: network_type
                                    
                                    	Type of attached network
                                    	**type**\:  :py:class:`OspfNetwork <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfNetwork>`
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Interval between HELLO packets in seconds
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: loopback_stub_network
                                    
                                    	Enable/Disable advertising loopback as a stub network
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: prefix_suppression_secondary
                                    
                                    	Enable/Disable prefix suppression for secondary addresses
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: demand_circuit
                                    
                                    	Enable/Disable OSPF demand circuit
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: passive
                                    
                                    	When enabled, prevent sending HELLO packets over link
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Number of seconds to delay transmission of LSAs
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 1
                                    
                                    .. attribute:: packet_size
                                    
                                    	Customize size of OSPF packets upto MTU
                                    	**type**\: int
                                    
                                    	**range:** 576..10000
                                    
                                    .. attribute:: ldp_sync
                                    
                                    	Enable/Disable MPLS LDP sync
                                    	**type**\: bool
                                    
                                    .. attribute:: database_filter
                                    
                                    	Filter OSPF LSA during synchronization and flooding
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: dead_interval_minimal
                                    
                                    	Interval after which a neighbor is declared dead
                                    	**type**\:  :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DeadIntervalMinimal>`
                                    
                                    .. attribute:: fast_reroute
                                    
                                    	Fast\-reroute configuration
                                    	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute>`
                                    
                                    .. attribute:: link_down_fast_detect
                                    
                                    	Enable/Disable registration for early interface down notifications
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: segment_routing_forwarding
                                    
                                    	segment\-routing forwarding configuration Applicableonly in Default VRF
                                    	**type**\:  :py:class:`OspfSegmentRoutingForwarding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRoutingForwarding>`
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Time in seconds between retransmitting lost link state advertisements
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 5
                                    
                                    .. attribute:: priority
                                    
                                    	Router priority for DR and BDR election
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    	**default value**\: 1
                                    
                                    .. attribute:: flood_reduction
                                    
                                    	Enable/Disable OSPF flood reduction
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: cost_fallback
                                    
                                    	Interface fallback cost
                                    	**type**\:  :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.CostFallback>`
                                    
                                    .. attribute:: running
                                    
                                    	Enable routing on an IP network
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope, self).__init__()

                                        self.yang_name = "name-scope"
                                        self.yang_parent_name = "name-scopes"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['interface_name']
                                        self._child_container_classes = OrderedDict([("prefix-sid", ("prefix_sid", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.PrefixSid)), ("prefix-sid-strict", ("prefix_sid_strict", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.PrefixSidStrict)), ("distribute-list", ("distribute_list", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DistributeList)), ("bfd", ("bfd", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Bfd)), ("authentication", ("authentication", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication)), ("security", ("security", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security)), ("neighbors", ("neighbors", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors)), ("dead-interval-minimal", ("dead_interval_minimal", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DeadIntervalMinimal)), ("fast-reroute", ("fast_reroute", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute)), ("cost-fallback", ("cost_fallback", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.CostFallback))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                                            ('cost', YLeaf(YType.uint32, 'cost')),
                                            ('prefix_suppression_primary', YLeaf(YType.boolean, 'prefix-suppression-primary')),
                                            ('mtu_ignore', YLeaf(YType.boolean, 'mtu-ignore')),
                                            ('ldp_sync_igp_shortcuts', YLeaf(YType.boolean, 'ldp-sync-igp-shortcuts')),
                                            ('ldp_auto_config', YLeaf(YType.empty, 'ldp-auto-config')),
                                            ('network_type', YLeaf(YType.enumeration, 'network-type')),
                                            ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                                            ('loopback_stub_network', YLeaf(YType.boolean, 'loopback-stub-network')),
                                            ('prefix_suppression_secondary', YLeaf(YType.boolean, 'prefix-suppression-secondary')),
                                            ('demand_circuit', YLeaf(YType.boolean, 'demand-circuit')),
                                            ('passive', YLeaf(YType.boolean, 'passive')),
                                            ('transmit_delay', YLeaf(YType.uint32, 'transmit-delay')),
                                            ('packet_size', YLeaf(YType.uint32, 'packet-size')),
                                            ('ldp_sync', YLeaf(YType.boolean, 'ldp-sync')),
                                            ('database_filter', YLeaf(YType.boolean, 'database-filter')),
                                            ('link_down_fast_detect', YLeaf(YType.boolean, 'link-down-fast-detect')),
                                            ('segment_routing_forwarding', YLeaf(YType.enumeration, 'segment-routing-forwarding')),
                                            ('retransmit_interval', YLeaf(YType.uint32, 'retransmit-interval')),
                                            ('priority', YLeaf(YType.uint32, 'priority')),
                                            ('flood_reduction', YLeaf(YType.boolean, 'flood-reduction')),
                                            ('running', YLeaf(YType.empty, 'running')),
                                        ])
                                        self.interface_name = None
                                        self.cost = None
                                        self.prefix_suppression_primary = None
                                        self.mtu_ignore = None
                                        self.ldp_sync_igp_shortcuts = None
                                        self.ldp_auto_config = None
                                        self.network_type = None
                                        self.hello_interval = None
                                        self.loopback_stub_network = None
                                        self.prefix_suppression_secondary = None
                                        self.demand_circuit = None
                                        self.passive = None
                                        self.transmit_delay = None
                                        self.packet_size = None
                                        self.ldp_sync = None
                                        self.database_filter = None
                                        self.link_down_fast_detect = None
                                        self.segment_routing_forwarding = None
                                        self.retransmit_interval = None
                                        self.priority = None
                                        self.flood_reduction = None
                                        self.running = None

                                        self.prefix_sid = None
                                        self._children_name_map["prefix_sid"] = "prefix-sid"
                                        self._children_yang_names.add("prefix-sid")

                                        self.prefix_sid_strict = None
                                        self._children_name_map["prefix_sid_strict"] = "prefix-sid-strict"
                                        self._children_yang_names.add("prefix-sid-strict")

                                        self.distribute_list = None
                                        self._children_name_map["distribute_list"] = "distribute-list"
                                        self._children_yang_names.add("distribute-list")

                                        self.bfd = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Bfd()
                                        self.bfd.parent = self
                                        self._children_name_map["bfd"] = "bfd"
                                        self._children_yang_names.add("bfd")

                                        self.authentication = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication()
                                        self.authentication.parent = self
                                        self._children_name_map["authentication"] = "authentication"
                                        self._children_yang_names.add("authentication")

                                        self.security = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security()
                                        self.security.parent = self
                                        self._children_name_map["security"] = "security"
                                        self._children_yang_names.add("security")

                                        self.neighbors = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors()
                                        self.neighbors.parent = self
                                        self._children_name_map["neighbors"] = "neighbors"
                                        self._children_yang_names.add("neighbors")

                                        self.dead_interval_minimal = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DeadIntervalMinimal()
                                        self.dead_interval_minimal.parent = self
                                        self._children_name_map["dead_interval_minimal"] = "dead-interval-minimal"
                                        self._children_yang_names.add("dead-interval-minimal")

                                        self.fast_reroute = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute()
                                        self.fast_reroute.parent = self
                                        self._children_name_map["fast_reroute"] = "fast-reroute"
                                        self._children_yang_names.add("fast-reroute")

                                        self.cost_fallback = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.CostFallback()
                                        self.cost_fallback.parent = self
                                        self._children_name_map["cost_fallback"] = "cost-fallback"
                                        self._children_yang_names.add("cost-fallback")
                                        self._segment_path = lambda: "name-scope" + "[interface-name='" + str(self.interface_name) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope, ['interface_name', 'cost', 'prefix_suppression_primary', 'mtu_ignore', 'ldp_sync_igp_shortcuts', 'ldp_auto_config', 'network_type', 'hello_interval', 'loopback_stub_network', 'prefix_suppression_secondary', 'demand_circuit', 'passive', 'transmit_delay', 'packet_size', 'ldp_sync', 'database_filter', 'link_down_fast_detect', 'segment_routing_forwarding', 'retransmit_interval', 'priority', 'flood_reduction', 'running'], name, value)


                                    class PrefixSid(Entity):
                                        """
                                        Prefix SID
                                        
                                        .. attribute:: sid_value
                                        
                                        	SID value
                                        	**type**\: int
                                        
                                        	**range:** 0..1048575
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: explicit_null
                                        
                                        	Force Penultimate Hop To Send Explicit\-Null Label
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: type
                                        
                                        	OSPF SID Type
                                        	**type**\:  :py:class:`OspfSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSid>`
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: n_flag_clear
                                        
                                        	Not a node SID
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.PrefixSid, self).__init__()

                                            self.yang_name = "prefix-sid"
                                            self.yang_parent_name = "name-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                                ('explicit_null', YLeaf(YType.boolean, 'explicit-null')),
                                                ('type', YLeaf(YType.enumeration, 'type')),
                                                ('n_flag_clear', YLeaf(YType.boolean, 'n-flag-clear')),
                                            ])
                                            self.sid_value = None
                                            self.explicit_null = None
                                            self.type = None
                                            self.n_flag_clear = None
                                            self._segment_path = lambda: "prefix-sid"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.PrefixSid, ['sid_value', 'explicit_null', 'type', 'n_flag_clear'], name, value)


                                    class PrefixSidStrict(Entity):
                                        """
                                        Strict Prefix SID
                                        
                                        .. attribute:: sid_value
                                        
                                        	SID value
                                        	**type**\: int
                                        
                                        	**range:** 0..1048575
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: explicit_null
                                        
                                        	Force Penultimate Hop To Send Explicit\-Null Label
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: type
                                        
                                        	OSPF SID Type
                                        	**type**\:  :py:class:`OspfSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSid>`
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: n_flag_clear
                                        
                                        	Not a node SID
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.PrefixSidStrict, self).__init__()

                                            self.yang_name = "prefix-sid-strict"
                                            self.yang_parent_name = "name-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                                ('explicit_null', YLeaf(YType.boolean, 'explicit-null')),
                                                ('type', YLeaf(YType.enumeration, 'type')),
                                                ('n_flag_clear', YLeaf(YType.boolean, 'n-flag-clear')),
                                            ])
                                            self.sid_value = None
                                            self.explicit_null = None
                                            self.type = None
                                            self.n_flag_clear = None
                                            self._segment_path = lambda: "prefix-sid-strict"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.PrefixSidStrict, ['sid_value', 'explicit_null', 'type', 'n_flag_clear'], name, value)


                                    class DistributeList(Entity):
                                        """
                                        Filter networks intalled to RIB (disable as ACL
                                        name means filtering is disabled)
                                        
                                        .. attribute:: access_list_name
                                        
                                        	Access Control List name
                                        	**type**\: str
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route Policy name
                                        	**type**\: str
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DistributeList, self).__init__()

                                            self.yang_name = "distribute-list"
                                            self.yang_parent_name = "name-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('access_list_name', YLeaf(YType.str, 'access-list-name')),
                                                ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
                                            ])
                                            self.access_list_name = None
                                            self.route_policy_name = None
                                            self._segment_path = lambda: "distribute-list"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DistributeList, ['access_list_name', 'route_policy_name'], name, value)


                                    class Bfd(Entity):
                                        """
                                        BFD configuration
                                        
                                        .. attribute:: interval
                                        
                                        	Hello interval for BFD sessions created by OSPF
                                        	**type**\: int
                                        
                                        	**range:** 3..30000
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: detection_multiplier
                                        
                                        	Detection multiplier for BFD sessions created by OSPF
                                        	**type**\: int
                                        
                                        	**range:** 2..50
                                        
                                        .. attribute:: fast_detect_mode
                                        
                                        	 use of Bidirectional Forwarding Detection
                                        	**type**\:  :py:class:`BfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.BfdEnableMode>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Bfd, self).__init__()

                                            self.yang_name = "bfd"
                                            self.yang_parent_name = "name-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('interval', YLeaf(YType.uint32, 'interval')),
                                                ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                                                ('fast_detect_mode', YLeaf(YType.enumeration, 'fast-detect-mode')),
                                            ])
                                            self.interval = None
                                            self.detection_multiplier = None
                                            self.fast_detect_mode = None
                                            self._segment_path = lambda: "bfd"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Bfd, ['interval', 'detection_multiplier', 'fast_detect_mode'], name, value)


                                    class Authentication(Entity):
                                        """
                                        Authentication
                                        
                                        .. attribute:: type
                                        
                                        	Authentication type
                                        	**type**\:  :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.Type>`
                                        
                                        .. attribute:: message_digest_keies
                                        
                                        	Message digest authentication password (key) configurations, first 16 chars used
                                        	**type**\:  :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies>`
                                        
                                        .. attribute:: key
                                        
                                        	Authentication key configuration
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication, self).__init__()

                                            self.yang_name = "authentication"
                                            self.yang_parent_name = "name-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("type", ("type", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.Type)), ("message-digest-keies", ("message_digest_keies", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('key', YLeaf(YType.str, 'key')),
                                            ])
                                            self.key = None

                                            self.type = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.Type()
                                            self.type.parent = self
                                            self._children_name_map["type"] = "type"
                                            self._children_yang_names.add("type")

                                            self.message_digest_keies = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies()
                                            self.message_digest_keies.parent = self
                                            self._children_name_map["message_digest_keies"] = "message-digest-keies"
                                            self._children_yang_names.add("message-digest-keies")
                                            self._segment_path = lambda: "authentication"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication, ['key'], name, value)


                                        class Type(Entity):
                                            """
                                            Authentication type
                                            
                                            .. attribute:: authen_type
                                            
                                            	Authentication type code 
                                            	**type**\:  :py:class:`OspfAuthentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthentication>`
                                            
                                            .. attribute:: keychain_authen_type
                                            
                                            	Keychain authentication type
                                            	**type**\:  :py:class:`OspfKeychainAuth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuth>`
                                            
                                            .. attribute:: keychain_name
                                            
                                            	Keychain name
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.Type, self).__init__()

                                                self.yang_name = "type"
                                                self.yang_parent_name = "authentication"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('authen_type', YLeaf(YType.enumeration, 'authen-type')),
                                                    ('keychain_authen_type', YLeaf(YType.enumeration, 'keychain-authen-type')),
                                                    ('keychain_name', YLeaf(YType.str, 'keychain-name')),
                                                ])
                                                self.authen_type = None
                                                self.keychain_authen_type = None
                                                self.keychain_name = None
                                                self._segment_path = lambda: "type"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.Type, ['authen_type', 'keychain_authen_type', 'keychain_name'], name, value)


                                        class MessageDigestKeies(Entity):
                                            """
                                            Message digest authentication password (key)
                                            configurations, first 16 chars used
                                            
                                            .. attribute:: message_digest_key
                                            
                                            	Message digest authentication password (key) configuration
                                            	**type**\: list of  		 :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies, self).__init__()

                                                self.yang_name = "message-digest-keies"
                                                self.yang_parent_name = "authentication"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("message-digest-key", ("message_digest_key", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies.MessageDigestKey))])
                                                self._leafs = OrderedDict()

                                                self.message_digest_key = YList(self)
                                                self._segment_path = lambda: "message-digest-keies"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies, [], name, value)


                                            class MessageDigestKey(Entity):
                                                """
                                                Message digest authentication password (key)
                                                configuration
                                                
                                                .. attribute:: key_id  (key)
                                                
                                                	Key ID
                                                	**type**\: int
                                                
                                                	**range:** 1..255
                                                
                                                .. attribute:: password
                                                
                                                	Password
                                                	**type**\: str
                                                
                                                	**pattern:** (!.+)\|([^!].+)
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies.MessageDigestKey, self).__init__()

                                                    self.yang_name = "message-digest-key"
                                                    self.yang_parent_name = "message-digest-keies"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['key_id']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('key_id', YLeaf(YType.uint32, 'key-id')),
                                                        ('password', YLeaf(YType.str, 'password')),
                                                    ])
                                                    self.key_id = None
                                                    self.password = None
                                                    self._segment_path = lambda: "message-digest-key" + "[key-id='" + str(self.key_id) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies.MessageDigestKey, ['key_id', 'password'], name, value)


                                    class Security(Entity):
                                        """
                                        Container class for security related
                                        configuration parameters
                                        
                                        .. attribute:: ttl
                                        
                                        	Enabling turns on TTL security
                                        	**type**\:  :py:class:`Ttl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security.Ttl>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security, self).__init__()

                                            self.yang_name = "security"
                                            self.yang_parent_name = "name-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("ttl", ("ttl", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security.Ttl))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict()

                                            self.ttl = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security.Ttl()
                                            self.ttl.parent = self
                                            self._children_name_map["ttl"] = "ttl"
                                            self._children_yang_names.add("ttl")
                                            self._segment_path = lambda: "security"


                                        class Ttl(Entity):
                                            """
                                            Enabling turns on TTL security
                                            
                                            .. attribute:: enable
                                            
                                            	Enable TTL security
                                            	**type**\: bool
                                            
                                            .. attribute:: hop_count
                                            
                                            	Hop count
                                            	**type**\: int
                                            
                                            	**range:** 1..254
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security.Ttl, self).__init__()

                                                self.yang_name = "ttl"
                                                self.yang_parent_name = "security"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('enable', YLeaf(YType.boolean, 'enable')),
                                                    ('hop_count', YLeaf(YType.uint32, 'hop-count')),
                                                ])
                                                self.enable = None
                                                self.hop_count = None
                                                self._segment_path = lambda: "ttl"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security.Ttl, ['enable', 'hop_count'], name, value)


                                    class Neighbors(Entity):
                                        """
                                        Neighbor router configuration information
                                        
                                        .. attribute:: neighbor
                                        
                                        	Router configuration information for a particular neighbor
                                        	**type**\: list of  		 :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors.Neighbor>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors, self).__init__()

                                            self.yang_name = "neighbors"
                                            self.yang_parent_name = "name-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("neighbor", ("neighbor", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors.Neighbor))])
                                            self._leafs = OrderedDict()

                                            self.neighbor = YList(self)
                                            self._segment_path = lambda: "neighbors"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors, [], name, value)


                                        class Neighbor(Entity):
                                            """
                                            Router configuration information for a
                                            particular neighbor
                                            
                                            .. attribute:: neighbor_address  (key)
                                            
                                            	Neighbor IP address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: priority
                                            
                                            	OSPF priority of non\-broadcast neighbor
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: poll_interval
                                            
                                            	OSPF dead router poll\-interval in seconds
                                            	**type**\: int
                                            
                                            	**range:** 0..65535
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 40
                                            
                                            .. attribute:: cost
                                            
                                            	OSPF cost for point\-to\-multipoint neighbor
                                            	**type**\: int
                                            
                                            	**range:** 1..65535
                                            
                                            	**default value**\: 1
                                            
                                            .. attribute:: database_filter
                                            
                                            	Database filter\: Filter OSPF LSA during synchronization and flooding for point\-to\-multipoint
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors.Neighbor, self).__init__()

                                                self.yang_name = "neighbor"
                                                self.yang_parent_name = "neighbors"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['neighbor_address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('priority', YLeaf(YType.uint32, 'priority')),
                                                    ('poll_interval', YLeaf(YType.uint32, 'poll-interval')),
                                                    ('cost', YLeaf(YType.uint32, 'cost')),
                                                    ('database_filter', YLeaf(YType.boolean, 'database-filter')),
                                                ])
                                                self.neighbor_address = None
                                                self.priority = None
                                                self.poll_interval = None
                                                self.cost = None
                                                self.database_filter = None
                                                self._segment_path = lambda: "neighbor" + "[neighbor-address='" + str(self.neighbor_address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors.Neighbor, ['neighbor_address', 'priority', 'poll_interval', 'cost', 'database_filter'], name, value)


                                    class DeadIntervalMinimal(Entity):
                                        """
                                        Interval after which a neighbor is declared dead
                                        
                                        .. attribute:: interval
                                        
                                        	Interval size in seconds after which a neighbor is declared dead
                                        	**type**\: int
                                        
                                        	**range:** 1..65535
                                        
                                        	**units**\: second
                                        
                                        .. attribute:: multiplier
                                        
                                        	Number of Hellos in one second
                                        	**type**\: int
                                        
                                        	**range:** 3..20
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DeadIntervalMinimal, self).__init__()

                                            self.yang_name = "dead-interval-minimal"
                                            self.yang_parent_name = "name-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('interval', YLeaf(YType.uint32, 'interval')),
                                                ('multiplier', YLeaf(YType.uint32, 'multiplier')),
                                            ])
                                            self.interval = None
                                            self.multiplier = None
                                            self._segment_path = lambda: "dead-interval-minimal"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DeadIntervalMinimal, ['interval', 'multiplier'], name, value)


                                    class FastReroute(Entity):
                                        """
                                        Fast\-reroute configuration
                                        
                                        .. attribute:: per_link
                                        
                                        	Fast\-reroute per\-link configuration
                                        	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink>`
                                        
                                        .. attribute:: per_prefix
                                        
                                        	Fast\-reroute per\-prefix global configuration
                                        	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix>`
                                        
                                        .. attribute:: fast_reroute_enable
                                        
                                        	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                        	**type**\:  :py:class:`OspfFastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastReroute>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute, self).__init__()

                                            self.yang_name = "fast-reroute"
                                            self.yang_parent_name = "name-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("per-link", ("per_link", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('fast_reroute_enable', YLeaf(YType.enumeration, 'fast-reroute-enable')),
                                            ])
                                            self.fast_reroute_enable = None

                                            self.per_link = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink()
                                            self.per_link.parent = self
                                            self._children_name_map["per_link"] = "per-link"
                                            self._children_yang_names.add("per-link")

                                            self.per_prefix = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix()
                                            self.per_prefix.parent = self
                                            self._children_name_map["per_prefix"] = "per-prefix"
                                            self._children_yang_names.add("per-prefix")
                                            self._segment_path = lambda: "fast-reroute"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute, ['fast_reroute_enable'], name, value)


                                        class PerLink(Entity):
                                            """
                                            Fast\-reroute per\-link configuration
                                            
                                            .. attribute:: fast_reroute_use_candidate_only
                                            
                                            	Use only interfaces on the candidate list as a backup path
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: candidate_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                            	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces>`
                                            
                                            .. attribute:: exclude_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                            	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink, self).__init__()

                                                self.yang_name = "per-link"
                                                self.yang_parent_name = "fast-reroute"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                                ])
                                                self.fast_reroute_use_candidate_only = None

                                                self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces()
                                                self.candidate_interfaces.parent = self
                                                self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                                self._children_yang_names.add("candidate-interfaces")

                                                self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces()
                                                self.exclude_interfaces.parent = self
                                                self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                                self._children_yang_names.add("exclude-interfaces")
                                                self._segment_path = lambda: "per-link"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                            class CandidateInterfaces(Entity):
                                                """
                                                Fast\-reroute per\-link/per\-prefix candidate
                                                interface configuration
                                                
                                                .. attribute:: candidate_interface
                                                
                                                	Candidate backup interface
                                                	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                                    self.yang_name = "candidate-interfaces"
                                                    self.yang_parent_name = "per-link"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface))])
                                                    self._leafs = OrderedDict()

                                                    self.candidate_interface = YList(self)
                                                    self._segment_path = lambda: "candidate-interfaces"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                                class CandidateInterface(Entity):
                                                    """
                                                    Candidate backup interface
                                                    
                                                    .. attribute:: interface_name  (key)
                                                    
                                                    	Interface
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                        self.yang_name = "candidate-interface"
                                                        self.yang_parent_name = "candidate-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['interface_name']
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                        ])
                                                        self.interface_name = None
                                                        self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                            class ExcludeInterfaces(Entity):
                                                """
                                                Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                                interface configuration
                                                
                                                .. attribute:: exclude_interface
                                                
                                                	Exclude an interface from becoming a backup or UCMP
                                                	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                                    self.yang_name = "exclude-interfaces"
                                                    self.yang_parent_name = "per-link"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface))])
                                                    self._leafs = OrderedDict()

                                                    self.exclude_interface = YList(self)
                                                    self._segment_path = lambda: "exclude-interfaces"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                                class ExcludeInterface(Entity):
                                                    """
                                                    Exclude an interface from becoming a backup or
                                                    UCMP
                                                    
                                                    .. attribute:: interface_name  (key)
                                                    
                                                    	Interface
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                        self.yang_name = "exclude-interface"
                                                        self.yang_parent_name = "exclude-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['interface_name']
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                        ])
                                                        self.interface_name = None
                                                        self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                        class PerPrefix(Entity):
                                            """
                                            Fast\-reroute per\-prefix global configuration
                                            
                                            .. attribute:: remote_lfa
                                            
                                            	Remote LFA configuration
                                            	**type**\:  :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa>`
                                            
                                            .. attribute:: tiebreakers
                                            
                                            	Fast\-reroute tiebreakers configurations
                                            	**type**\:  :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers>`
                                            
                                            .. attribute:: topology_independent_lfa
                                            
                                            	Topology Independet LFA configuration
                                            	**type**\: bool
                                            
                                            .. attribute:: fast_reroute_use_candidate_only
                                            
                                            	Use only interfaces on the candidate list as a backup path
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: candidate_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                            	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                            
                                            .. attribute:: exclude_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                            	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix, self).__init__()

                                                self.yang_name = "per-prefix"
                                                self.yang_parent_name = "fast-reroute"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("remote-lfa", ("remote_lfa", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa)), ("tiebreakers", ("tiebreakers", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers)), ("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('topology_independent_lfa', YLeaf(YType.boolean, 'topology-independent-lfa')),
                                                    ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                                ])
                                                self.topology_independent_lfa = None
                                                self.fast_reroute_use_candidate_only = None

                                                self.remote_lfa = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa()
                                                self.remote_lfa.parent = self
                                                self._children_name_map["remote_lfa"] = "remote-lfa"
                                                self._children_yang_names.add("remote-lfa")

                                                self.tiebreakers = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers()
                                                self.tiebreakers.parent = self
                                                self._children_name_map["tiebreakers"] = "tiebreakers"
                                                self._children_yang_names.add("tiebreakers")

                                                self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces()
                                                self.candidate_interfaces.parent = self
                                                self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                                self._children_yang_names.add("candidate-interfaces")

                                                self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                                self.exclude_interfaces.parent = self
                                                self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                                self._children_yang_names.add("exclude-interfaces")
                                                self._segment_path = lambda: "per-prefix"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix, ['topology_independent_lfa', 'fast_reroute_use_candidate_only'], name, value)


                                            class RemoteLfa(Entity):
                                                """
                                                Remote LFA configuration
                                                
                                                .. attribute:: tunnel
                                                
                                                	Enable/Disable remote LFA computation
                                                	**type**\:  :py:class:`OspfFrrRlfaTunnel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFrrRlfaTunnel>`
                                                
                                                .. attribute:: maximum_cost
                                                
                                                	Maximum path cost to remote LFA
                                                	**type**\: int
                                                
                                                	**range:** 1..4294967295
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa, self).__init__()

                                                    self.yang_name = "remote-lfa"
                                                    self.yang_parent_name = "per-prefix"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('tunnel', YLeaf(YType.enumeration, 'tunnel')),
                                                        ('maximum_cost', YLeaf(YType.uint32, 'maximum-cost')),
                                                    ])
                                                    self.tunnel = None
                                                    self.maximum_cost = None
                                                    self._segment_path = lambda: "remote-lfa"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa, ['tunnel', 'maximum_cost'], name, value)


                                            class Tiebreakers(Entity):
                                                """
                                                Fast\-reroute tiebreakers configurations
                                                
                                                .. attribute:: tiebreaker
                                                
                                                	Fast\-reroute tiebreakers configuration
                                                	**type**\: list of  		 :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers, self).__init__()

                                                    self.yang_name = "tiebreakers"
                                                    self.yang_parent_name = "per-prefix"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("tiebreaker", ("tiebreaker", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker))])
                                                    self._leafs = OrderedDict()

                                                    self.tiebreaker = YList(self)
                                                    self._segment_path = lambda: "tiebreakers"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers, [], name, value)


                                                class Tiebreaker(Entity):
                                                    """
                                                    Fast\-reroute tiebreakers configuration
                                                    
                                                    .. attribute:: tiebreaker_type  (key)
                                                    
                                                    	Tiebreaker type
                                                    	**type**\:  :py:class:`OspfFastRerouteTiebreakersIntf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakersIntf>`
                                                    
                                                    .. attribute:: tiebreaker_index
                                                    
                                                    	Index value for a tiebreaker, 0 to disable
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..255
                                                    
                                                    	**mandatory**\: True
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, self).__init__()

                                                        self.yang_name = "tiebreaker"
                                                        self.yang_parent_name = "tiebreakers"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['tiebreaker_type']
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('tiebreaker_type', YLeaf(YType.enumeration, 'tiebreaker-type')),
                                                            ('tiebreaker_index', YLeaf(YType.uint32, 'tiebreaker-index')),
                                                        ])
                                                        self.tiebreaker_type = None
                                                        self.tiebreaker_index = None
                                                        self._segment_path = lambda: "tiebreaker" + "[tiebreaker-type='" + str(self.tiebreaker_type) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, ['tiebreaker_type', 'tiebreaker_index'], name, value)


                                            class CandidateInterfaces(Entity):
                                                """
                                                Fast\-reroute per\-link/per\-prefix candidate
                                                interface configuration
                                                
                                                .. attribute:: candidate_interface
                                                
                                                	Candidate backup interface
                                                	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                                    self.yang_name = "candidate-interfaces"
                                                    self.yang_parent_name = "per-prefix"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface))])
                                                    self._leafs = OrderedDict()

                                                    self.candidate_interface = YList(self)
                                                    self._segment_path = lambda: "candidate-interfaces"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                                class CandidateInterface(Entity):
                                                    """
                                                    Candidate backup interface
                                                    
                                                    .. attribute:: interface_name  (key)
                                                    
                                                    	Interface
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                        self.yang_name = "candidate-interface"
                                                        self.yang_parent_name = "candidate-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['interface_name']
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                        ])
                                                        self.interface_name = None
                                                        self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                            class ExcludeInterfaces(Entity):
                                                """
                                                Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                                interface configuration
                                                
                                                .. attribute:: exclude_interface
                                                
                                                	Exclude an interface from becoming a backup or UCMP
                                                	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                                    self.yang_name = "exclude-interfaces"
                                                    self.yang_parent_name = "per-prefix"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface))])
                                                    self._leafs = OrderedDict()

                                                    self.exclude_interface = YList(self)
                                                    self._segment_path = lambda: "exclude-interfaces"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                                class ExcludeInterface(Entity):
                                                    """
                                                    Exclude an interface from becoming a backup or
                                                    UCMP
                                                    
                                                    .. attribute:: interface_name  (key)
                                                    
                                                    	Interface
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                        self.yang_name = "exclude-interface"
                                                        self.yang_parent_name = "exclude-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['interface_name']
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                        ])
                                                        self.interface_name = None
                                                        self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                    class CostFallback(Entity):
                                        """
                                        Interface fallback cost
                                        
                                        .. attribute:: cost
                                        
                                        	Fallback cost of link
                                        	**type**\: int
                                        
                                        	**range:** 1..65535
                                        
                                        .. attribute:: threshold
                                        
                                        	Bandwidth threshold
                                        	**type**\: int
                                        
                                        	**range:** 1..4294967
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.CostFallback, self).__init__()

                                            self.yang_name = "cost-fallback"
                                            self.yang_parent_name = "name-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('cost', YLeaf(YType.uint32, 'cost')),
                                                ('threshold', YLeaf(YType.uint32, 'threshold')),
                                            ])
                                            self.cost = None
                                            self.threshold = None
                                            self._segment_path = lambda: "cost-fallback"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.CostFallback, ['cost', 'threshold'], name, value)


                            class MultiAreaInterfaceScopes(Entity):
                                """
                                Multi Area Interface scope configurations
                                
                                .. attribute:: multi_area_interface_scope
                                
                                	Multi Area Interface configuration
                                	**type**\: list of  		 :py:class:`MultiAreaInterfaceScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes, self).__init__()

                                    self.yang_name = "multi-area-interface-scopes"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([("multi-area-interface-scope", ("multi_area_interface_scope", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope))])
                                    self._leafs = OrderedDict()

                                    self.multi_area_interface_scope = YList(self)
                                    self._segment_path = lambda: "multi-area-interface-scopes"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes, [], name, value)


                                class MultiAreaInterfaceScope(Entity):
                                    """
                                    Multi Area Interface configuration
                                    
                                    .. attribute:: interface_name  (key)
                                    
                                    	Name of Multi Area Interface to configure
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: distribute_list
                                    
                                    	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                                    	**type**\:  :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DistributeList>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: cost
                                    
                                    	Interface cost
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: mtu_ignore
                                    
                                    	Enable/Disable ignoring of MTU in DBD packets
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: authentication
                                    
                                    	Authentication
                                    	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication>`
                                    
                                    .. attribute:: neighbors
                                    
                                    	Neighbor router configuration information
                                    	**type**\:  :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors>`
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Interval between HELLO packets in seconds
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: passive
                                    
                                    	When enabled, prevent sending HELLO packets over link
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Number of seconds to delay transmission of LSAs
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 1
                                    
                                    .. attribute:: packet_size
                                    
                                    	Customize size of OSPF packets upto MTU
                                    	**type**\: int
                                    
                                    	**range:** 576..10000
                                    
                                    .. attribute:: database_filter
                                    
                                    	Filter OSPF LSA during synchronization and flooding
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: dead_interval_minimal
                                    
                                    	Interval after which a neighbor is declared dead
                                    	**type**\:  :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal>`
                                    
                                    .. attribute:: fast_reroute
                                    
                                    	Fast\-reroute configuration
                                    	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute>`
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Time in seconds between retransmitting lost link state advertisements
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 5
                                    
                                    .. attribute:: cost_fallback
                                    
                                    	Interface fallback cost
                                    	**type**\:  :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback>`
                                    
                                    .. attribute:: running
                                    
                                    	Enable routing on an IP network
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope, self).__init__()

                                        self.yang_name = "multi-area-interface-scope"
                                        self.yang_parent_name = "multi-area-interface-scopes"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['interface_name']
                                        self._child_container_classes = OrderedDict([("distribute-list", ("distribute_list", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DistributeList)), ("authentication", ("authentication", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication)), ("neighbors", ("neighbors", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors)), ("dead-interval-minimal", ("dead_interval_minimal", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal)), ("fast-reroute", ("fast_reroute", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute)), ("cost-fallback", ("cost_fallback", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                                            ('cost', YLeaf(YType.uint32, 'cost')),
                                            ('mtu_ignore', YLeaf(YType.boolean, 'mtu-ignore')),
                                            ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                                            ('passive', YLeaf(YType.boolean, 'passive')),
                                            ('transmit_delay', YLeaf(YType.uint32, 'transmit-delay')),
                                            ('packet_size', YLeaf(YType.uint32, 'packet-size')),
                                            ('database_filter', YLeaf(YType.boolean, 'database-filter')),
                                            ('retransmit_interval', YLeaf(YType.uint32, 'retransmit-interval')),
                                            ('running', YLeaf(YType.empty, 'running')),
                                        ])
                                        self.interface_name = None
                                        self.cost = None
                                        self.mtu_ignore = None
                                        self.hello_interval = None
                                        self.passive = None
                                        self.transmit_delay = None
                                        self.packet_size = None
                                        self.database_filter = None
                                        self.retransmit_interval = None
                                        self.running = None

                                        self.distribute_list = None
                                        self._children_name_map["distribute_list"] = "distribute-list"
                                        self._children_yang_names.add("distribute-list")

                                        self.authentication = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication()
                                        self.authentication.parent = self
                                        self._children_name_map["authentication"] = "authentication"
                                        self._children_yang_names.add("authentication")

                                        self.neighbors = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors()
                                        self.neighbors.parent = self
                                        self._children_name_map["neighbors"] = "neighbors"
                                        self._children_yang_names.add("neighbors")

                                        self.dead_interval_minimal = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal()
                                        self.dead_interval_minimal.parent = self
                                        self._children_name_map["dead_interval_minimal"] = "dead-interval-minimal"
                                        self._children_yang_names.add("dead-interval-minimal")

                                        self.fast_reroute = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute()
                                        self.fast_reroute.parent = self
                                        self._children_name_map["fast_reroute"] = "fast-reroute"
                                        self._children_yang_names.add("fast-reroute")

                                        self.cost_fallback = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback()
                                        self.cost_fallback.parent = self
                                        self._children_name_map["cost_fallback"] = "cost-fallback"
                                        self._children_yang_names.add("cost-fallback")
                                        self._segment_path = lambda: "multi-area-interface-scope" + "[interface-name='" + str(self.interface_name) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope, ['interface_name', 'cost', 'mtu_ignore', 'hello_interval', 'passive', 'transmit_delay', 'packet_size', 'database_filter', 'retransmit_interval', 'running'], name, value)


                                    class DistributeList(Entity):
                                        """
                                        Filter networks intalled to RIB (disable as ACL
                                        name means filtering is disabled)
                                        
                                        .. attribute:: access_list_name
                                        
                                        	Access Control List name
                                        	**type**\: str
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route Policy name
                                        	**type**\: str
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DistributeList, self).__init__()

                                            self.yang_name = "distribute-list"
                                            self.yang_parent_name = "multi-area-interface-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('access_list_name', YLeaf(YType.str, 'access-list-name')),
                                                ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
                                            ])
                                            self.access_list_name = None
                                            self.route_policy_name = None
                                            self._segment_path = lambda: "distribute-list"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DistributeList, ['access_list_name', 'route_policy_name'], name, value)


                                    class Authentication(Entity):
                                        """
                                        Authentication
                                        
                                        .. attribute:: type
                                        
                                        	Authentication type
                                        	**type**\:  :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type>`
                                        
                                        .. attribute:: message_digest_keies
                                        
                                        	Message digest authentication password (key) configurations, first 16 chars used
                                        	**type**\:  :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies>`
                                        
                                        .. attribute:: key
                                        
                                        	Authentication key configuration
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication, self).__init__()

                                            self.yang_name = "authentication"
                                            self.yang_parent_name = "multi-area-interface-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("type", ("type", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type)), ("message-digest-keies", ("message_digest_keies", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('key', YLeaf(YType.str, 'key')),
                                            ])
                                            self.key = None

                                            self.type = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type()
                                            self.type.parent = self
                                            self._children_name_map["type"] = "type"
                                            self._children_yang_names.add("type")

                                            self.message_digest_keies = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies()
                                            self.message_digest_keies.parent = self
                                            self._children_name_map["message_digest_keies"] = "message-digest-keies"
                                            self._children_yang_names.add("message-digest-keies")
                                            self._segment_path = lambda: "authentication"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication, ['key'], name, value)


                                        class Type(Entity):
                                            """
                                            Authentication type
                                            
                                            .. attribute:: authen_type
                                            
                                            	Authentication type code 
                                            	**type**\:  :py:class:`OspfAuthentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthentication>`
                                            
                                            .. attribute:: keychain_authen_type
                                            
                                            	Keychain authentication type
                                            	**type**\:  :py:class:`OspfKeychainAuth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuth>`
                                            
                                            .. attribute:: keychain_name
                                            
                                            	Keychain name
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type, self).__init__()

                                                self.yang_name = "type"
                                                self.yang_parent_name = "authentication"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('authen_type', YLeaf(YType.enumeration, 'authen-type')),
                                                    ('keychain_authen_type', YLeaf(YType.enumeration, 'keychain-authen-type')),
                                                    ('keychain_name', YLeaf(YType.str, 'keychain-name')),
                                                ])
                                                self.authen_type = None
                                                self.keychain_authen_type = None
                                                self.keychain_name = None
                                                self._segment_path = lambda: "type"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type, ['authen_type', 'keychain_authen_type', 'keychain_name'], name, value)


                                        class MessageDigestKeies(Entity):
                                            """
                                            Message digest authentication password (key)
                                            configurations, first 16 chars used
                                            
                                            .. attribute:: message_digest_key
                                            
                                            	Message digest authentication password (key) configuration
                                            	**type**\: list of  		 :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies, self).__init__()

                                                self.yang_name = "message-digest-keies"
                                                self.yang_parent_name = "authentication"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("message-digest-key", ("message_digest_key", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies.MessageDigestKey))])
                                                self._leafs = OrderedDict()

                                                self.message_digest_key = YList(self)
                                                self._segment_path = lambda: "message-digest-keies"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies, [], name, value)


                                            class MessageDigestKey(Entity):
                                                """
                                                Message digest authentication password (key)
                                                configuration
                                                
                                                .. attribute:: key_id  (key)
                                                
                                                	Key ID
                                                	**type**\: int
                                                
                                                	**range:** 1..255
                                                
                                                .. attribute:: password
                                                
                                                	Password
                                                	**type**\: str
                                                
                                                	**pattern:** (!.+)\|([^!].+)
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies.MessageDigestKey, self).__init__()

                                                    self.yang_name = "message-digest-key"
                                                    self.yang_parent_name = "message-digest-keies"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['key_id']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('key_id', YLeaf(YType.uint32, 'key-id')),
                                                        ('password', YLeaf(YType.str, 'password')),
                                                    ])
                                                    self.key_id = None
                                                    self.password = None
                                                    self._segment_path = lambda: "message-digest-key" + "[key-id='" + str(self.key_id) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies.MessageDigestKey, ['key_id', 'password'], name, value)


                                    class Neighbors(Entity):
                                        """
                                        Neighbor router configuration information
                                        
                                        .. attribute:: neighbor
                                        
                                        	Router configuration information for a particular neighbor
                                        	**type**\: list of  		 :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors.Neighbor>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors, self).__init__()

                                            self.yang_name = "neighbors"
                                            self.yang_parent_name = "multi-area-interface-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("neighbor", ("neighbor", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors.Neighbor))])
                                            self._leafs = OrderedDict()

                                            self.neighbor = YList(self)
                                            self._segment_path = lambda: "neighbors"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors, [], name, value)


                                        class Neighbor(Entity):
                                            """
                                            Router configuration information for a
                                            particular neighbor
                                            
                                            .. attribute:: neighbor_address  (key)
                                            
                                            	Neighbor IP address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: priority
                                            
                                            	OSPF priority of non\-broadcast neighbor
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: poll_interval
                                            
                                            	OSPF dead router poll\-interval in seconds
                                            	**type**\: int
                                            
                                            	**range:** 0..65535
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 40
                                            
                                            .. attribute:: cost
                                            
                                            	OSPF cost for point\-to\-multipoint neighbor
                                            	**type**\: int
                                            
                                            	**range:** 1..65535
                                            
                                            	**default value**\: 1
                                            
                                            .. attribute:: database_filter
                                            
                                            	Database filter\: Filter OSPF LSA during synchronization and flooding for point\-to\-multipoint
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors.Neighbor, self).__init__()

                                                self.yang_name = "neighbor"
                                                self.yang_parent_name = "neighbors"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['neighbor_address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('priority', YLeaf(YType.uint32, 'priority')),
                                                    ('poll_interval', YLeaf(YType.uint32, 'poll-interval')),
                                                    ('cost', YLeaf(YType.uint32, 'cost')),
                                                    ('database_filter', YLeaf(YType.boolean, 'database-filter')),
                                                ])
                                                self.neighbor_address = None
                                                self.priority = None
                                                self.poll_interval = None
                                                self.cost = None
                                                self.database_filter = None
                                                self._segment_path = lambda: "neighbor" + "[neighbor-address='" + str(self.neighbor_address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors.Neighbor, ['neighbor_address', 'priority', 'poll_interval', 'cost', 'database_filter'], name, value)


                                    class DeadIntervalMinimal(Entity):
                                        """
                                        Interval after which a neighbor is declared dead
                                        
                                        .. attribute:: interval
                                        
                                        	Interval size in seconds after which a neighbor is declared dead
                                        	**type**\: int
                                        
                                        	**range:** 1..65535
                                        
                                        	**units**\: second
                                        
                                        .. attribute:: multiplier
                                        
                                        	Number of Hellos in one second
                                        	**type**\: int
                                        
                                        	**range:** 3..20
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal, self).__init__()

                                            self.yang_name = "dead-interval-minimal"
                                            self.yang_parent_name = "multi-area-interface-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('interval', YLeaf(YType.uint32, 'interval')),
                                                ('multiplier', YLeaf(YType.uint32, 'multiplier')),
                                            ])
                                            self.interval = None
                                            self.multiplier = None
                                            self._segment_path = lambda: "dead-interval-minimal"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal, ['interval', 'multiplier'], name, value)


                                    class FastReroute(Entity):
                                        """
                                        Fast\-reroute configuration
                                        
                                        .. attribute:: per_link
                                        
                                        	Fast\-reroute per\-link configuration
                                        	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink>`
                                        
                                        .. attribute:: per_prefix
                                        
                                        	Fast\-reroute per\-prefix global configuration
                                        	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix>`
                                        
                                        .. attribute:: fast_reroute_enable
                                        
                                        	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                        	**type**\:  :py:class:`OspfFastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastReroute>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute, self).__init__()

                                            self.yang_name = "fast-reroute"
                                            self.yang_parent_name = "multi-area-interface-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("per-link", ("per_link", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('fast_reroute_enable', YLeaf(YType.enumeration, 'fast-reroute-enable')),
                                            ])
                                            self.fast_reroute_enable = None

                                            self.per_link = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink()
                                            self.per_link.parent = self
                                            self._children_name_map["per_link"] = "per-link"
                                            self._children_yang_names.add("per-link")

                                            self.per_prefix = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix()
                                            self.per_prefix.parent = self
                                            self._children_name_map["per_prefix"] = "per-prefix"
                                            self._children_yang_names.add("per-prefix")
                                            self._segment_path = lambda: "fast-reroute"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute, ['fast_reroute_enable'], name, value)


                                        class PerLink(Entity):
                                            """
                                            Fast\-reroute per\-link configuration
                                            
                                            .. attribute:: fast_reroute_use_candidate_only
                                            
                                            	Use only interfaces on the candidate list as a backup path
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: candidate_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                            	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces>`
                                            
                                            .. attribute:: exclude_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                            	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink, self).__init__()

                                                self.yang_name = "per-link"
                                                self.yang_parent_name = "fast-reroute"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                                ])
                                                self.fast_reroute_use_candidate_only = None

                                                self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces()
                                                self.candidate_interfaces.parent = self
                                                self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                                self._children_yang_names.add("candidate-interfaces")

                                                self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces()
                                                self.exclude_interfaces.parent = self
                                                self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                                self._children_yang_names.add("exclude-interfaces")
                                                self._segment_path = lambda: "per-link"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                            class CandidateInterfaces(Entity):
                                                """
                                                Fast\-reroute per\-link/per\-prefix candidate
                                                interface configuration
                                                
                                                .. attribute:: candidate_interface
                                                
                                                	Candidate backup interface
                                                	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                                    self.yang_name = "candidate-interfaces"
                                                    self.yang_parent_name = "per-link"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface))])
                                                    self._leafs = OrderedDict()

                                                    self.candidate_interface = YList(self)
                                                    self._segment_path = lambda: "candidate-interfaces"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                                class CandidateInterface(Entity):
                                                    """
                                                    Candidate backup interface
                                                    
                                                    .. attribute:: interface_name  (key)
                                                    
                                                    	Interface
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                        self.yang_name = "candidate-interface"
                                                        self.yang_parent_name = "candidate-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['interface_name']
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                        ])
                                                        self.interface_name = None
                                                        self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                            class ExcludeInterfaces(Entity):
                                                """
                                                Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                                interface configuration
                                                
                                                .. attribute:: exclude_interface
                                                
                                                	Exclude an interface from becoming a backup or UCMP
                                                	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                                    self.yang_name = "exclude-interfaces"
                                                    self.yang_parent_name = "per-link"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface))])
                                                    self._leafs = OrderedDict()

                                                    self.exclude_interface = YList(self)
                                                    self._segment_path = lambda: "exclude-interfaces"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                                class ExcludeInterface(Entity):
                                                    """
                                                    Exclude an interface from becoming a backup or
                                                    UCMP
                                                    
                                                    .. attribute:: interface_name  (key)
                                                    
                                                    	Interface
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                        self.yang_name = "exclude-interface"
                                                        self.yang_parent_name = "exclude-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['interface_name']
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                        ])
                                                        self.interface_name = None
                                                        self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                        class PerPrefix(Entity):
                                            """
                                            Fast\-reroute per\-prefix global configuration
                                            
                                            .. attribute:: remote_lfa
                                            
                                            	Remote LFA configuration
                                            	**type**\:  :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa>`
                                            
                                            .. attribute:: tiebreakers
                                            
                                            	Fast\-reroute tiebreakers configurations
                                            	**type**\:  :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers>`
                                            
                                            .. attribute:: topology_independent_lfa
                                            
                                            	Topology Independet LFA configuration
                                            	**type**\: bool
                                            
                                            .. attribute:: fast_reroute_use_candidate_only
                                            
                                            	Use only interfaces on the candidate list as a backup path
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: candidate_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                            	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                            
                                            .. attribute:: exclude_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                            	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix, self).__init__()

                                                self.yang_name = "per-prefix"
                                                self.yang_parent_name = "fast-reroute"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("remote-lfa", ("remote_lfa", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa)), ("tiebreakers", ("tiebreakers", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers)), ("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('topology_independent_lfa', YLeaf(YType.boolean, 'topology-independent-lfa')),
                                                    ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                                ])
                                                self.topology_independent_lfa = None
                                                self.fast_reroute_use_candidate_only = None

                                                self.remote_lfa = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa()
                                                self.remote_lfa.parent = self
                                                self._children_name_map["remote_lfa"] = "remote-lfa"
                                                self._children_yang_names.add("remote-lfa")

                                                self.tiebreakers = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers()
                                                self.tiebreakers.parent = self
                                                self._children_name_map["tiebreakers"] = "tiebreakers"
                                                self._children_yang_names.add("tiebreakers")

                                                self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces()
                                                self.candidate_interfaces.parent = self
                                                self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                                self._children_yang_names.add("candidate-interfaces")

                                                self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                                self.exclude_interfaces.parent = self
                                                self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                                self._children_yang_names.add("exclude-interfaces")
                                                self._segment_path = lambda: "per-prefix"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix, ['topology_independent_lfa', 'fast_reroute_use_candidate_only'], name, value)


                                            class RemoteLfa(Entity):
                                                """
                                                Remote LFA configuration
                                                
                                                .. attribute:: tunnel
                                                
                                                	Enable/Disable remote LFA computation
                                                	**type**\:  :py:class:`OspfFrrRlfaTunnel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFrrRlfaTunnel>`
                                                
                                                .. attribute:: maximum_cost
                                                
                                                	Maximum path cost to remote LFA
                                                	**type**\: int
                                                
                                                	**range:** 1..4294967295
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa, self).__init__()

                                                    self.yang_name = "remote-lfa"
                                                    self.yang_parent_name = "per-prefix"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('tunnel', YLeaf(YType.enumeration, 'tunnel')),
                                                        ('maximum_cost', YLeaf(YType.uint32, 'maximum-cost')),
                                                    ])
                                                    self.tunnel = None
                                                    self.maximum_cost = None
                                                    self._segment_path = lambda: "remote-lfa"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa, ['tunnel', 'maximum_cost'], name, value)


                                            class Tiebreakers(Entity):
                                                """
                                                Fast\-reroute tiebreakers configurations
                                                
                                                .. attribute:: tiebreaker
                                                
                                                	Fast\-reroute tiebreakers configuration
                                                	**type**\: list of  		 :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers, self).__init__()

                                                    self.yang_name = "tiebreakers"
                                                    self.yang_parent_name = "per-prefix"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("tiebreaker", ("tiebreaker", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker))])
                                                    self._leafs = OrderedDict()

                                                    self.tiebreaker = YList(self)
                                                    self._segment_path = lambda: "tiebreakers"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers, [], name, value)


                                                class Tiebreaker(Entity):
                                                    """
                                                    Fast\-reroute tiebreakers configuration
                                                    
                                                    .. attribute:: tiebreaker_type  (key)
                                                    
                                                    	Tiebreaker type
                                                    	**type**\:  :py:class:`OspfFastRerouteTiebreakersIntf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakersIntf>`
                                                    
                                                    .. attribute:: tiebreaker_index
                                                    
                                                    	Index value for a tiebreaker, 0 to disable
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..255
                                                    
                                                    	**mandatory**\: True
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, self).__init__()

                                                        self.yang_name = "tiebreaker"
                                                        self.yang_parent_name = "tiebreakers"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['tiebreaker_type']
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('tiebreaker_type', YLeaf(YType.enumeration, 'tiebreaker-type')),
                                                            ('tiebreaker_index', YLeaf(YType.uint32, 'tiebreaker-index')),
                                                        ])
                                                        self.tiebreaker_type = None
                                                        self.tiebreaker_index = None
                                                        self._segment_path = lambda: "tiebreaker" + "[tiebreaker-type='" + str(self.tiebreaker_type) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, ['tiebreaker_type', 'tiebreaker_index'], name, value)


                                            class CandidateInterfaces(Entity):
                                                """
                                                Fast\-reroute per\-link/per\-prefix candidate
                                                interface configuration
                                                
                                                .. attribute:: candidate_interface
                                                
                                                	Candidate backup interface
                                                	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                                    self.yang_name = "candidate-interfaces"
                                                    self.yang_parent_name = "per-prefix"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface))])
                                                    self._leafs = OrderedDict()

                                                    self.candidate_interface = YList(self)
                                                    self._segment_path = lambda: "candidate-interfaces"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                                class CandidateInterface(Entity):
                                                    """
                                                    Candidate backup interface
                                                    
                                                    .. attribute:: interface_name  (key)
                                                    
                                                    	Interface
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                        self.yang_name = "candidate-interface"
                                                        self.yang_parent_name = "candidate-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['interface_name']
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                        ])
                                                        self.interface_name = None
                                                        self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                            class ExcludeInterfaces(Entity):
                                                """
                                                Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                                interface configuration
                                                
                                                .. attribute:: exclude_interface
                                                
                                                	Exclude an interface from becoming a backup or UCMP
                                                	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                                    self.yang_name = "exclude-interfaces"
                                                    self.yang_parent_name = "per-prefix"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface))])
                                                    self._leafs = OrderedDict()

                                                    self.exclude_interface = YList(self)
                                                    self._segment_path = lambda: "exclude-interfaces"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                                class ExcludeInterface(Entity):
                                                    """
                                                    Exclude an interface from becoming a backup or
                                                    UCMP
                                                    
                                                    .. attribute:: interface_name  (key)
                                                    
                                                    	Interface
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                        self.yang_name = "exclude-interface"
                                                        self.yang_parent_name = "exclude-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['interface_name']
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                        ])
                                                        self.interface_name = None
                                                        self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                    class CostFallback(Entity):
                                        """
                                        Interface fallback cost
                                        
                                        .. attribute:: cost
                                        
                                        	Fallback cost of link
                                        	**type**\: int
                                        
                                        	**range:** 1..65535
                                        
                                        .. attribute:: threshold
                                        
                                        	Bandwidth threshold
                                        	**type**\: int
                                        
                                        	**range:** 1..4294967
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback, self).__init__()

                                            self.yang_name = "cost-fallback"
                                            self.yang_parent_name = "multi-area-interface-scope"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('cost', YLeaf(YType.uint32, 'cost')),
                                                ('threshold', YLeaf(YType.uint32, 'threshold')),
                                            ])
                                            self.cost = None
                                            self.threshold = None
                                            self._segment_path = lambda: "cost-fallback"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback, ['cost', 'threshold'], name, value)


                            class AreaRanges(Entity):
                                """
                                Summarize routes matching address/mask (border
                                routers only)
                                
                                .. attribute:: area_range
                                
                                	Ordering index
                                	**type**\: list of  		 :py:class:`AreaRange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaRanges.AreaRange>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaRanges, self).__init__()

                                    self.yang_name = "area-ranges"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([("area-range", ("area_range", Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaRanges.AreaRange))])
                                    self._leafs = OrderedDict()

                                    self.area_range = YList(self)
                                    self._segment_path = lambda: "area-ranges"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaRanges, [], name, value)


                                class AreaRange(Entity):
                                    """
                                    Ordering index
                                    
                                    .. attribute:: address  (key)
                                    
                                    	IP address to match
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: netmask  (key)
                                    
                                    	IP netmask for address
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: not_advertise
                                    
                                    	Do not advertise this range
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaRanges.AreaRange, self).__init__()

                                        self.yang_name = "area-range"
                                        self.yang_parent_name = "area-ranges"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['address','netmask']
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('address', YLeaf(YType.str, 'address')),
                                            ('netmask', YLeaf(YType.str, 'netmask')),
                                            ('not_advertise', YLeaf(YType.boolean, 'not-advertise')),
                                        ])
                                        self.address = None
                                        self.netmask = None
                                        self.not_advertise = None
                                        self._segment_path = lambda: "area-range" + "[address='" + str(self.address) + "']" + "[netmask='" + str(self.netmask) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaRanges.AreaRange, ['address', 'netmask', 'not_advertise'], name, value)


                            class Nssa(Entity):
                                """
                                Specify area as a NSSA area
                                
                                .. attribute:: no_redistribution
                                
                                	No redistribution into this NSSA area
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: default_info_originate
                                
                                	Originate Type 7 default into NSSA area
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: no_summary
                                
                                	Do not send summary LSA into NSSA
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: nssa_def_metric
                                
                                	OSPF default metric
                                	**type**\: int
                                
                                	**range:** 1..16777214
                                
                                .. attribute:: metric_type
                                
                                	OSPF External metric type
                                	**type**\:  :py:class:`OspfLinkStateMetric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetric>`
                                
                                	**default value**\: type2
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Nssa, self).__init__()

                                    self.yang_name = "nssa"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('no_redistribution', YLeaf(YType.boolean, 'no-redistribution')),
                                        ('default_info_originate', YLeaf(YType.boolean, 'default-info-originate')),
                                        ('no_summary', YLeaf(YType.boolean, 'no-summary')),
                                        ('nssa_def_metric', YLeaf(YType.uint32, 'nssa-def-metric')),
                                        ('metric_type', YLeaf(YType.enumeration, 'metric-type')),
                                    ])
                                    self.no_redistribution = None
                                    self.default_info_originate = None
                                    self.no_summary = None
                                    self.nssa_def_metric = None
                                    self.metric_type = None
                                    self._segment_path = lambda: "nssa"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Nssa, ['no_redistribution', 'default_info_originate', 'no_summary', 'nssa_def_metric', 'metric_type'], name, value)


                    class Timers(Entity):
                        """
                        Adjust routing timers
                        
                        .. attribute:: spf_timer
                        
                        	OSPF SPF timers (in milliseconds)
                        	**type**\:  :py:class:`SpfTimer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Timers.SpfTimer>`
                        
                        .. attribute:: lsa_generation_timer
                        
                        	OSPF LSA timers (in milliseconds)
                        	**type**\:  :py:class:`LsaGenerationTimer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Timers.LsaGenerationTimer>`
                        
                        .. attribute:: lsa_pacing_flood
                        
                        	Seconds between group of LSAs being refreshed or maxaged
                        	**type**\: int
                        
                        	**range:** 5..100
                        
                        	**units**\: second
                        
                        .. attribute:: fast_reroute_timer
                        
                        	Number of ms between end of SPF and start of IPFRR computation
                        	**type**\: int
                        
                        	**range:** 50..600000
                        
                        	**units**\: millisecond
                        
                        	**default value**\: 500
                        
                        .. attribute:: lsa_refresh
                        
                        	How often self\-originated LSAs should be refreshed
                        	**type**\: int
                        
                        	**range:** 1800..2700
                        
                        	**units**\: second
                        
                        	**default value**\: 1800
                        
                        .. attribute:: lsa_group_pacing
                        
                        	LSA group pacing timer (Seconds between group of LSAs being refreshed or maxaged)
                        	**type**\: int
                        
                        	**range:** 10..1800
                        
                        	**units**\: second
                        
                        	**default value**\: 240
                        
                        .. attribute:: lsa_min_arrival
                        
                        	MinLSArrival timer (minimum interval in milliseconds between accepting the same LSA)
                        	**type**\: int
                        
                        	**range:** 0..600000
                        
                        	**units**\: millisecond
                        
                        	**default value**\: 100
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.Vrfs.Vrf.Timers, self).__init__()

                            self.yang_name = "timers"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("spf-timer", ("spf_timer", Ospf.Processes.Process.Vrfs.Vrf.Timers.SpfTimer)), ("lsa-generation-timer", ("lsa_generation_timer", Ospf.Processes.Process.Vrfs.Vrf.Timers.LsaGenerationTimer))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('lsa_pacing_flood', YLeaf(YType.uint32, 'lsa-pacing-flood')),
                                ('fast_reroute_timer', YLeaf(YType.uint32, 'fast-reroute-timer')),
                                ('lsa_refresh', YLeaf(YType.uint32, 'lsa-refresh')),
                                ('lsa_group_pacing', YLeaf(YType.uint32, 'lsa-group-pacing')),
                                ('lsa_min_arrival', YLeaf(YType.uint32, 'lsa-min-arrival')),
                            ])
                            self.lsa_pacing_flood = None
                            self.fast_reroute_timer = None
                            self.lsa_refresh = None
                            self.lsa_group_pacing = None
                            self.lsa_min_arrival = None

                            self.spf_timer = Ospf.Processes.Process.Vrfs.Vrf.Timers.SpfTimer()
                            self.spf_timer.parent = self
                            self._children_name_map["spf_timer"] = "spf-timer"
                            self._children_yang_names.add("spf-timer")

                            self.lsa_generation_timer = Ospf.Processes.Process.Vrfs.Vrf.Timers.LsaGenerationTimer()
                            self.lsa_generation_timer.parent = self
                            self._children_name_map["lsa_generation_timer"] = "lsa-generation-timer"
                            self._children_yang_names.add("lsa-generation-timer")
                            self._segment_path = lambda: "timers"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.Timers, ['lsa_pacing_flood', 'fast_reroute_timer', 'lsa_refresh', 'lsa_group_pacing', 'lsa_min_arrival'], name, value)


                        class SpfTimer(Entity):
                            """
                            OSPF SPF timers (in milliseconds)
                            
                            .. attribute:: initial_delay
                            
                            	Number of milliseconds before first SPF run
                            	**type**\: int
                            
                            	**range:** 1..600000
                            
                            	**units**\: millisecond
                            
                            	**default value**\: 5000
                            
                            .. attribute:: backoff_increment
                            
                            	Number of milliseconds delay between successive SPF runs
                            	**type**\: int
                            
                            	**range:** 1..600000
                            
                            	**units**\: millisecond
                            
                            	**default value**\: 10000
                            
                            .. attribute:: max_delay
                            
                            	Max number of milliseconds between consecutive SPF calculations
                            	**type**\: int
                            
                            	**range:** 1..600000
                            
                            	**units**\: millisecond
                            
                            	**default value**\: 10000
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.Timers.SpfTimer, self).__init__()

                                self.yang_name = "spf-timer"
                                self.yang_parent_name = "timers"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('initial_delay', YLeaf(YType.uint32, 'initial-delay')),
                                    ('backoff_increment', YLeaf(YType.uint32, 'backoff-increment')),
                                    ('max_delay', YLeaf(YType.uint32, 'max-delay')),
                                ])
                                self.initial_delay = None
                                self.backoff_increment = None
                                self.max_delay = None
                                self._segment_path = lambda: "spf-timer"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.Timers.SpfTimer, ['initial_delay', 'backoff_increment', 'max_delay'], name, value)


                        class LsaGenerationTimer(Entity):
                            """
                            OSPF LSA timers (in milliseconds)
                            
                            .. attribute:: initial_delay
                            
                            	Number of milliseconds before generating first LSA
                            	**type**\: int
                            
                            	**range:** 0..600000
                            
                            	**units**\: millisecond
                            
                            	**default value**\: 50
                            
                            .. attribute:: backoff_increment
                            
                            	Number of milliseconds delay between successive LSA builds
                            	**type**\: int
                            
                            	**range:** 1..600000
                            
                            	**units**\: millisecond
                            
                            	**default value**\: 200
                            
                            .. attribute:: max_delay
                            
                            	Max number of milliseconds between consecutive LSA builds 
                            	**type**\: int
                            
                            	**range:** 1..600000
                            
                            	**units**\: millisecond
                            
                            	**default value**\: 200
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.Vrfs.Vrf.Timers.LsaGenerationTimer, self).__init__()

                                self.yang_name = "lsa-generation-timer"
                                self.yang_parent_name = "timers"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('initial_delay', YLeaf(YType.uint32, 'initial-delay')),
                                    ('backoff_increment', YLeaf(YType.uint32, 'backoff-increment')),
                                    ('max_delay', YLeaf(YType.uint32, 'max-delay')),
                                ])
                                self.initial_delay = None
                                self.backoff_increment = None
                                self.max_delay = None
                                self._segment_path = lambda: "lsa-generation-timer"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.Vrfs.Vrf.Timers.LsaGenerationTimer, ['initial_delay', 'backoff_increment', 'max_delay'], name, value)


            class TraceBufs(Entity):
                """
                Configuration to change size of trace buffer
                
                .. attribute:: trace_buf
                
                	Changes the size of the specified trace buffer
                	**type**\: list of  		 :py:class:`TraceBuf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.TraceBufs.TraceBuf>`
                
                

                """

                _prefix = 'ipv4-ospf-cfg'
                _revision = '2017-07-14'

                def __init__(self):
                    super(Ospf.Processes.Process.TraceBufs, self).__init__()

                    self.yang_name = "trace-bufs"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("trace-buf", ("trace_buf", Ospf.Processes.Process.TraceBufs.TraceBuf))])
                    self._leafs = OrderedDict()

                    self.trace_buf = YList(self)
                    self._segment_path = lambda: "trace-bufs"

                def __setattr__(self, name, value):
                    self._perform_setattr(Ospf.Processes.Process.TraceBufs, [], name, value)


                class TraceBuf(Entity):
                    """
                    Changes the size of the specified trace
                    buffer
                    
                    .. attribute:: trace_buf_name  (key)
                    
                    	Name for this trace buffer
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: bufsize
                    
                    	Buffer size
                    	**type**\:  :py:class:`OspfTraceBufSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfTraceBufSize>`
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospf.Processes.Process.TraceBufs.TraceBuf, self).__init__()

                        self.yang_name = "trace-buf"
                        self.yang_parent_name = "trace-bufs"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['trace_buf_name']
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('trace_buf_name', YLeaf(YType.str, 'trace-buf-name')),
                            ('bufsize', YLeaf(YType.enumeration, 'bufsize')),
                        ])
                        self.trace_buf_name = None
                        self.bufsize = None
                        self._segment_path = lambda: "trace-buf" + "[trace-buf-name='" + str(self.trace_buf_name) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospf.Processes.Process.TraceBufs.TraceBuf, ['trace_buf_name', 'bufsize'], name, value)


            class GracefulShutdownTimers(Entity):
                """
                Adjust routing timers
                
                .. attribute:: graceful_shutdown_retain_routes
                
                	Time to keep OSPF routes active after graceful shutdown(in seconds)
                	**type**\: int
                
                	**range:** 0..90
                
                	**units**\: second
                
                	**default value**\: 5
                
                .. attribute:: graceful_shutdown_initial_delay
                
                	Number of seconds to delay before beginning graceful shutdown
                	**type**\: int
                
                	**range:** 0..90
                
                	**units**\: second
                
                	**default value**\: 5
                
                

                """

                _prefix = 'ipv4-ospf-cfg'
                _revision = '2017-07-14'

                def __init__(self):
                    super(Ospf.Processes.Process.GracefulShutdownTimers, self).__init__()

                    self.yang_name = "graceful-shutdown-timers"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('graceful_shutdown_retain_routes', YLeaf(YType.uint32, 'graceful-shutdown-retain-routes')),
                        ('graceful_shutdown_initial_delay', YLeaf(YType.uint32, 'graceful-shutdown-initial-delay')),
                    ])
                    self.graceful_shutdown_retain_routes = None
                    self.graceful_shutdown_initial_delay = None
                    self._segment_path = lambda: "graceful-shutdown-timers"

                def __setattr__(self, name, value):
                    self._perform_setattr(Ospf.Processes.Process.GracefulShutdownTimers, ['graceful_shutdown_retain_routes', 'graceful_shutdown_initial_delay'], name, value)


            class DefaultVrf(Entity):
                """
                Default VRF related configuration
                
                .. attribute:: monitor_convergence
                
                	Enable convergence monitoring
                	**type**\:  :py:class:`MonitorConvergence <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.MonitorConvergence>`
                
                .. attribute:: segment_routing
                
                	Segment Routing instance scoped parameters
                	**type**\:  :py:class:`SegmentRouting <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.SegmentRouting>`
                
                .. attribute:: mpls
                
                	Configure MPLS routing protocol parameters
                	**type**\:  :py:class:`Mpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Mpls>`
                
                .. attribute:: microloop
                
                	Microloop configuration
                	**type**\:  :py:class:`Microloop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Microloop>`
                
                .. attribute:: ignore_mospf
                
                	Ignore MOSPF (Type 6) LSAs
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: maximum_redistribute_prefix
                
                	Maximum number of prefixes redistributed into OSPF
                	**type**\:  :py:class:`MaximumRedistributePrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.MaximumRedistributePrefix>`
                
                .. attribute:: default_information
                
                	Control distribution of default information
                	**type**\:  :py:class:`DefaultInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.DefaultInformation>`
                
                .. attribute:: af
                
                	OSPF address family
                	**type**\:  :py:class:`Af <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Af>`
                
                	**presence node**\: True
                
                .. attribute:: queue
                
                	Adjust OSPF input queue sizes and processing quantums
                	**type**\:  :py:class:`Queue <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Queue>`
                
                .. attribute:: router_id
                
                	Router ID for this OSPF process. Enter an IP Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: type7
                
                	Prefer type7 externals over type5
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: max_metric
                
                	Set maximum metric configuration
                	**type**\:  :py:class:`MaxMetric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.MaxMetric>`
                
                .. attribute:: snmp_context
                
                	OSPF SNMP context configuration
                	**type**\: str
                
                .. attribute:: maximum_interfaces
                
                	Max number of interfaces allowed to be configured
                	**type**\: int
                
                	**range:** 1..4294967295
                
                	**default value**\: 1024
                
                .. attribute:: no_opaque
                
                	Disable opaque LSAs
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: nsf
                
                	Non Stop Forwarding configuration
                	**type**\:  :py:class:`Nsf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Nsf>`
                
                .. attribute:: process_scope
                
                	Process scope configuration
                	**type**\:  :py:class:`ProcessScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope>`
                
                .. attribute:: spf_prefix_priority
                
                	Configure a route\-policy for prioritizing RIB route install
                	**type**\: str
                
                .. attribute:: redistribution
                
                	Redistribute configurations
                	**type**\:  :py:class:`Redistribution <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Redistribution>`
                
                .. attribute:: adjacency_stagger
                
                	Staggering OSPF adjacency bring up
                	**type**\:  :py:class:`AdjacencyStagger <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AdjacencyStagger>`
                
                .. attribute:: max_lsa
                
                	Set max\-lsa configuration
                	**type**\:  :py:class:`MaxLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.MaxLsa>`
                
                	**presence node**\: True
                
                .. attribute:: auto_cost
                
                	Controls automatic cost based on bandwidth
                	**type**\:  :py:class:`AutoCost <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AutoCost>`
                
                .. attribute:: ucmp
                
                	Unequal Cost Multi\-ptah configuration
                	**type**\:  :py:class:`Ucmp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Ucmp>`
                
                .. attribute:: maximum_paths
                
                	Forward packets over multiple paths (number of paths)
                	**type**\: int
                
                	**range:** 1..64
                
                .. attribute:: fast_reroute
                
                	Fast\-reroute instance scoped parameters
                	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.FastReroute>`
                
                .. attribute:: summary_prefixes
                
                	Configure IP prefix summary
                	**type**\:  :py:class:`SummaryPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.SummaryPrefixes>`
                
                .. attribute:: adjacency_changes
                
                	Log changes in adjacency state
                	**type**\:  :py:class:`OspfLogAdj <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLogAdj>`
                
                .. attribute:: outgoing_route_updates
                
                	Filter outgoing routing updates
                	**type**\:  :py:class:`OutgoingRouteUpdates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.OutgoingRouteUpdates>`
                
                .. attribute:: distance
                
                	Administrative distance configuration
                	**type**\:  :py:class:`Distance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Distance>`
                
                .. attribute:: area_addresses
                
                	Area configuration
                	**type**\:  :py:class:`AreaAddresses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses>`
                
                .. attribute:: timers
                
                	Adjust routing timers
                	**type**\:  :py:class:`Timers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Timers>`
                
                .. attribute:: default_metric
                
                	Set default metric of redistributed routes
                	**type**\: int
                
                	**range:** 1..16777214
                
                	**default value**\: 1
                
                

                """

                _prefix = 'ipv4-ospf-cfg'
                _revision = '2017-07-14'

                def __init__(self):
                    super(Ospf.Processes.Process.DefaultVrf, self).__init__()

                    self.yang_name = "default-vrf"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("monitor-convergence", ("monitor_convergence", Ospf.Processes.Process.DefaultVrf.MonitorConvergence)), ("segment-routing", ("segment_routing", Ospf.Processes.Process.DefaultVrf.SegmentRouting)), ("mpls", ("mpls", Ospf.Processes.Process.DefaultVrf.Mpls)), ("microloop", ("microloop", Ospf.Processes.Process.DefaultVrf.Microloop)), ("maximum-redistribute-prefix", ("maximum_redistribute_prefix", Ospf.Processes.Process.DefaultVrf.MaximumRedistributePrefix)), ("default-information", ("default_information", Ospf.Processes.Process.DefaultVrf.DefaultInformation)), ("af", ("af", Ospf.Processes.Process.DefaultVrf.Af)), ("queue", ("queue", Ospf.Processes.Process.DefaultVrf.Queue)), ("max-metric", ("max_metric", Ospf.Processes.Process.DefaultVrf.MaxMetric)), ("nsf", ("nsf", Ospf.Processes.Process.DefaultVrf.Nsf)), ("process-scope", ("process_scope", Ospf.Processes.Process.DefaultVrf.ProcessScope)), ("redistribution", ("redistribution", Ospf.Processes.Process.DefaultVrf.Redistribution)), ("adjacency-stagger", ("adjacency_stagger", Ospf.Processes.Process.DefaultVrf.AdjacencyStagger)), ("max-lsa", ("max_lsa", Ospf.Processes.Process.DefaultVrf.MaxLsa)), ("auto-cost", ("auto_cost", Ospf.Processes.Process.DefaultVrf.AutoCost)), ("ucmp", ("ucmp", Ospf.Processes.Process.DefaultVrf.Ucmp)), ("fast-reroute", ("fast_reroute", Ospf.Processes.Process.DefaultVrf.FastReroute)), ("summary-prefixes", ("summary_prefixes", Ospf.Processes.Process.DefaultVrf.SummaryPrefixes)), ("outgoing-route-updates", ("outgoing_route_updates", Ospf.Processes.Process.DefaultVrf.OutgoingRouteUpdates)), ("distance", ("distance", Ospf.Processes.Process.DefaultVrf.Distance)), ("area-addresses", ("area_addresses", Ospf.Processes.Process.DefaultVrf.AreaAddresses)), ("timers", ("timers", Ospf.Processes.Process.DefaultVrf.Timers))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('ignore_mospf', YLeaf(YType.empty, 'ignore-mospf')),
                        ('router_id', YLeaf(YType.str, 'router-id')),
                        ('type7', YLeaf(YType.empty, 'type7')),
                        ('snmp_context', YLeaf(YType.str, 'snmp-context')),
                        ('maximum_interfaces', YLeaf(YType.uint32, 'maximum-interfaces')),
                        ('no_opaque', YLeaf(YType.empty, 'no-opaque')),
                        ('spf_prefix_priority', YLeaf(YType.str, 'spf-prefix-priority')),
                        ('maximum_paths', YLeaf(YType.uint32, 'maximum-paths')),
                        ('adjacency_changes', YLeaf(YType.enumeration, 'adjacency-changes')),
                        ('default_metric', YLeaf(YType.uint32, 'default-metric')),
                    ])
                    self.ignore_mospf = None
                    self.router_id = None
                    self.type7 = None
                    self.snmp_context = None
                    self.maximum_interfaces = None
                    self.no_opaque = None
                    self.spf_prefix_priority = None
                    self.maximum_paths = None
                    self.adjacency_changes = None
                    self.default_metric = None

                    self.monitor_convergence = Ospf.Processes.Process.DefaultVrf.MonitorConvergence()
                    self.monitor_convergence.parent = self
                    self._children_name_map["monitor_convergence"] = "monitor-convergence"
                    self._children_yang_names.add("monitor-convergence")

                    self.segment_routing = Ospf.Processes.Process.DefaultVrf.SegmentRouting()
                    self.segment_routing.parent = self
                    self._children_name_map["segment_routing"] = "segment-routing"
                    self._children_yang_names.add("segment-routing")

                    self.mpls = Ospf.Processes.Process.DefaultVrf.Mpls()
                    self.mpls.parent = self
                    self._children_name_map["mpls"] = "mpls"
                    self._children_yang_names.add("mpls")

                    self.microloop = Ospf.Processes.Process.DefaultVrf.Microloop()
                    self.microloop.parent = self
                    self._children_name_map["microloop"] = "microloop"
                    self._children_yang_names.add("microloop")

                    self.maximum_redistribute_prefix = Ospf.Processes.Process.DefaultVrf.MaximumRedistributePrefix()
                    self.maximum_redistribute_prefix.parent = self
                    self._children_name_map["maximum_redistribute_prefix"] = "maximum-redistribute-prefix"
                    self._children_yang_names.add("maximum-redistribute-prefix")

                    self.default_information = Ospf.Processes.Process.DefaultVrf.DefaultInformation()
                    self.default_information.parent = self
                    self._children_name_map["default_information"] = "default-information"
                    self._children_yang_names.add("default-information")

                    self.af = None
                    self._children_name_map["af"] = "af"
                    self._children_yang_names.add("af")

                    self.queue = Ospf.Processes.Process.DefaultVrf.Queue()
                    self.queue.parent = self
                    self._children_name_map["queue"] = "queue"
                    self._children_yang_names.add("queue")

                    self.max_metric = Ospf.Processes.Process.DefaultVrf.MaxMetric()
                    self.max_metric.parent = self
                    self._children_name_map["max_metric"] = "max-metric"
                    self._children_yang_names.add("max-metric")

                    self.nsf = Ospf.Processes.Process.DefaultVrf.Nsf()
                    self.nsf.parent = self
                    self._children_name_map["nsf"] = "nsf"
                    self._children_yang_names.add("nsf")

                    self.process_scope = Ospf.Processes.Process.DefaultVrf.ProcessScope()
                    self.process_scope.parent = self
                    self._children_name_map["process_scope"] = "process-scope"
                    self._children_yang_names.add("process-scope")

                    self.redistribution = Ospf.Processes.Process.DefaultVrf.Redistribution()
                    self.redistribution.parent = self
                    self._children_name_map["redistribution"] = "redistribution"
                    self._children_yang_names.add("redistribution")

                    self.adjacency_stagger = Ospf.Processes.Process.DefaultVrf.AdjacencyStagger()
                    self.adjacency_stagger.parent = self
                    self._children_name_map["adjacency_stagger"] = "adjacency-stagger"
                    self._children_yang_names.add("adjacency-stagger")

                    self.max_lsa = None
                    self._children_name_map["max_lsa"] = "max-lsa"
                    self._children_yang_names.add("max-lsa")

                    self.auto_cost = Ospf.Processes.Process.DefaultVrf.AutoCost()
                    self.auto_cost.parent = self
                    self._children_name_map["auto_cost"] = "auto-cost"
                    self._children_yang_names.add("auto-cost")

                    self.ucmp = Ospf.Processes.Process.DefaultVrf.Ucmp()
                    self.ucmp.parent = self
                    self._children_name_map["ucmp"] = "ucmp"
                    self._children_yang_names.add("ucmp")

                    self.fast_reroute = Ospf.Processes.Process.DefaultVrf.FastReroute()
                    self.fast_reroute.parent = self
                    self._children_name_map["fast_reroute"] = "fast-reroute"
                    self._children_yang_names.add("fast-reroute")

                    self.summary_prefixes = Ospf.Processes.Process.DefaultVrf.SummaryPrefixes()
                    self.summary_prefixes.parent = self
                    self._children_name_map["summary_prefixes"] = "summary-prefixes"
                    self._children_yang_names.add("summary-prefixes")

                    self.outgoing_route_updates = Ospf.Processes.Process.DefaultVrf.OutgoingRouteUpdates()
                    self.outgoing_route_updates.parent = self
                    self._children_name_map["outgoing_route_updates"] = "outgoing-route-updates"
                    self._children_yang_names.add("outgoing-route-updates")

                    self.distance = Ospf.Processes.Process.DefaultVrf.Distance()
                    self.distance.parent = self
                    self._children_name_map["distance"] = "distance"
                    self._children_yang_names.add("distance")

                    self.area_addresses = Ospf.Processes.Process.DefaultVrf.AreaAddresses()
                    self.area_addresses.parent = self
                    self._children_name_map["area_addresses"] = "area-addresses"
                    self._children_yang_names.add("area-addresses")

                    self.timers = Ospf.Processes.Process.DefaultVrf.Timers()
                    self.timers.parent = self
                    self._children_name_map["timers"] = "timers"
                    self._children_yang_names.add("timers")
                    self._segment_path = lambda: "default-vrf"

                def __setattr__(self, name, value):
                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf, ['ignore_mospf', 'router_id', 'type7', 'snmp_context', 'maximum_interfaces', 'no_opaque', 'spf_prefix_priority', 'maximum_paths', 'adjacency_changes', 'default_metric'], name, value)


                class MonitorConvergence(Entity):
                    """
                    Enable convergence monitoring
                    
                    .. attribute:: enable
                    
                    	Enable convergence monitoring
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: prefix_list
                    
                    	Enable the monitoring of individual prefixes (prefix list name)
                    	**type**\: str
                    
                    .. attribute:: track_ip_frr
                    
                    	Enable the Tracking of IP\-Frr Convergence
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: track_external_routes
                    
                    	Enable the monitoring of External routes
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: track_summary_routes
                    
                    	Enable the monitoring of Summary routes
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospf.Processes.Process.DefaultVrf.MonitorConvergence, self).__init__()

                        self.yang_name = "monitor-convergence"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('enable', YLeaf(YType.empty, 'enable')),
                            ('prefix_list', YLeaf(YType.str, 'prefix-list')),
                            ('track_ip_frr', YLeaf(YType.empty, 'track-ip-frr')),
                            ('track_external_routes', YLeaf(YType.empty, 'track-external-routes')),
                            ('track_summary_routes', YLeaf(YType.empty, 'track-summary-routes')),
                        ])
                        self.enable = None
                        self.prefix_list = None
                        self.track_ip_frr = None
                        self.track_external_routes = None
                        self.track_summary_routes = None
                        self._segment_path = lambda: "monitor-convergence"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.MonitorConvergence, ['enable', 'prefix_list', 'track_ip_frr', 'track_external_routes', 'track_summary_routes'], name, value)


                class SegmentRouting(Entity):
                    """
                    Segment Routing instance scoped parameters
                    
                    .. attribute:: sr_prefer
                    
                    	Prefer segment routing labels over LDP labels
                    	**type**\:  :py:class:`SrPrefer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.SegmentRouting.SrPrefer>`
                    
                    .. attribute:: prefix_sid_map_receive_disable
                    
                    	Disable prefix\-SID mapping client
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: prefix_sid_map_advertise_local
                    
                    	Enable advertisement of local SRMS entries
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: strict_spf_disable
                    
                    	Strict\-SPF support and SID advertisement
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospf.Processes.Process.DefaultVrf.SegmentRouting, self).__init__()

                        self.yang_name = "segment-routing"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("sr-prefer", ("sr_prefer", Ospf.Processes.Process.DefaultVrf.SegmentRouting.SrPrefer))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('prefix_sid_map_receive_disable', YLeaf(YType.empty, 'prefix-sid-map-receive-disable')),
                            ('prefix_sid_map_advertise_local', YLeaf(YType.empty, 'prefix-sid-map-advertise-local')),
                            ('strict_spf_disable', YLeaf(YType.empty, 'strict-spf-disable')),
                        ])
                        self.prefix_sid_map_receive_disable = None
                        self.prefix_sid_map_advertise_local = None
                        self.strict_spf_disable = None

                        self.sr_prefer = Ospf.Processes.Process.DefaultVrf.SegmentRouting.SrPrefer()
                        self.sr_prefer.parent = self
                        self._children_name_map["sr_prefer"] = "sr-prefer"
                        self._children_yang_names.add("sr-prefer")
                        self._segment_path = lambda: "segment-routing"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.SegmentRouting, ['prefix_sid_map_receive_disable', 'prefix_sid_map_advertise_local', 'strict_spf_disable'], name, value)


                    class SrPrefer(Entity):
                        """
                        Prefer segment routing labels over LDP
                        labels
                        
                        .. attribute:: enable
                        
                        	Enable SR labels to be preferred over LDP labels
                        	**type**\: bool
                        
                        .. attribute:: prefix_list_name
                        
                        	Name of the Prefix List
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.SegmentRouting.SrPrefer, self).__init__()

                            self.yang_name = "sr-prefer"
                            self.yang_parent_name = "segment-routing"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('enable', YLeaf(YType.boolean, 'enable')),
                                ('prefix_list_name', YLeaf(YType.str, 'prefix-list-name')),
                            ])
                            self.enable = None
                            self.prefix_list_name = None
                            self._segment_path = lambda: "sr-prefer"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.SegmentRouting.SrPrefer, ['enable', 'prefix_list_name'], name, value)


                class Mpls(Entity):
                    """
                    Configure MPLS routing protocol parameters
                    
                    .. attribute:: mpls_router_id
                    
                    	MPLS\-TE stable loopback address for this OSPF process.Enter either as IP Address or Interface name, but not both. Unused field must be nil
                    	**type**\:  :py:class:`MplsRouterId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Mpls.MplsRouterId>`
                    
                    .. attribute:: igp_intact
                    
                    	Enable igp\-intact mode in OSPF
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: ldp_sync_update
                    
                    	Enable LDP sync induced metric propagation
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: multicast_intact
                    
                    	Enable multicast\-intact mode in OSPF
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: autoroute_exclude
                    
                    	Exclude IP destinations from using TE tunnels
                    	**type**\: str
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospf.Processes.Process.DefaultVrf.Mpls, self).__init__()

                        self.yang_name = "mpls"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("mpls-router-id", ("mpls_router_id", Ospf.Processes.Process.DefaultVrf.Mpls.MplsRouterId))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('igp_intact', YLeaf(YType.empty, 'igp-intact')),
                            ('ldp_sync_update', YLeaf(YType.empty, 'ldp-sync-update')),
                            ('multicast_intact', YLeaf(YType.empty, 'multicast-intact')),
                            ('autoroute_exclude', YLeaf(YType.str, 'autoroute-exclude')),
                        ])
                        self.igp_intact = None
                        self.ldp_sync_update = None
                        self.multicast_intact = None
                        self.autoroute_exclude = None

                        self.mpls_router_id = Ospf.Processes.Process.DefaultVrf.Mpls.MplsRouterId()
                        self.mpls_router_id.parent = self
                        self._children_name_map["mpls_router_id"] = "mpls-router-id"
                        self._children_yang_names.add("mpls-router-id")
                        self._segment_path = lambda: "mpls"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.Mpls, ['igp_intact', 'ldp_sync_update', 'multicast_intact', 'autoroute_exclude'], name, value)


                    class MplsRouterId(Entity):
                        """
                        MPLS\-TE stable loopback address for this
                        OSPF process.Enter either as IP Address or
                        Interface name, but not both. Unused field
                        must be nil
                        
                        .. attribute:: address
                        
                        	MPLS\-TE stable IP address for this OSPF process
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: interface_name
                        
                        	MPLS\-TE stable loopback interface for this OSPF process
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.Mpls.MplsRouterId, self).__init__()

                            self.yang_name = "mpls-router-id"
                            self.yang_parent_name = "mpls"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('address', YLeaf(YType.str, 'address')),
                                ('interface_name', YLeaf(YType.str, 'interface-name')),
                            ])
                            self.address = None
                            self.interface_name = None
                            self._segment_path = lambda: "mpls-router-id"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.Mpls.MplsRouterId, ['address', 'interface_name'], name, value)


                class Microloop(Entity):
                    """
                    Microloop configuration
                    
                    .. attribute:: avoidance
                    
                    	Microloop avoidance configuration
                    	**type**\:  :py:class:`Avoidance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Microloop.Avoidance>`
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospf.Processes.Process.DefaultVrf.Microloop, self).__init__()

                        self.yang_name = "microloop"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("avoidance", ("avoidance", Ospf.Processes.Process.DefaultVrf.Microloop.Avoidance))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict()

                        self.avoidance = Ospf.Processes.Process.DefaultVrf.Microloop.Avoidance()
                        self.avoidance.parent = self
                        self._children_name_map["avoidance"] = "avoidance"
                        self._children_yang_names.add("avoidance")
                        self._segment_path = lambda: "microloop"


                    class Avoidance(Entity):
                        """
                        Microloop avoidance configuration
                        
                        .. attribute:: enable
                        
                        	MicroLoop avoidance feature enable configuration
                        	**type**\:  :py:class:`OspfUloopAvoidance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfUloopAvoidance>`
                        
                        	**default value**\: all
                        
                        .. attribute:: rib_update_delay
                        
                        	Delay to introduce between SPF and RIB update in msecs
                        	**type**\: int
                        
                        	**range:** 1..600000
                        
                        	**units**\: millisecond
                        
                        	**default value**\: 5000
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.Microloop.Avoidance, self).__init__()

                            self.yang_name = "avoidance"
                            self.yang_parent_name = "microloop"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('enable', YLeaf(YType.enumeration, 'enable')),
                                ('rib_update_delay', YLeaf(YType.uint32, 'rib-update-delay')),
                            ])
                            self.enable = None
                            self.rib_update_delay = None
                            self._segment_path = lambda: "avoidance"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.Microloop.Avoidance, ['enable', 'rib_update_delay'], name, value)


                class MaximumRedistributePrefix(Entity):
                    """
                    Maximum number of prefixes redistributed into
                    OSPF
                    
                    .. attribute:: number_of_prefixes
                    
                    	Maximum number of prefixes redistributed
                    	**type**\: int
                    
                    	**range:** 1..4294967295
                    
                    .. attribute:: threshold
                    
                    	Threshold value (%) at which to generate a warning msg
                    	**type**\: int
                    
                    	**range:** 1..100
                    
                    .. attribute:: warning_only
                    
                    	Only give warning messsage when limit is exceeded
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospf.Processes.Process.DefaultVrf.MaximumRedistributePrefix, self).__init__()

                        self.yang_name = "maximum-redistribute-prefix"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number_of_prefixes', YLeaf(YType.uint32, 'number-of-prefixes')),
                            ('threshold', YLeaf(YType.uint32, 'threshold')),
                            ('warning_only', YLeaf(YType.boolean, 'warning-only')),
                        ])
                        self.number_of_prefixes = None
                        self.threshold = None
                        self.warning_only = None
                        self._segment_path = lambda: "maximum-redistribute-prefix"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.MaximumRedistributePrefix, ['number_of_prefixes', 'threshold', 'warning_only'], name, value)


                class DefaultInformation(Entity):
                    """
                    Control distribution of default information
                    
                    .. attribute:: always_advertise
                    
                    	Always advertise default route
                    	**type**\: bool
                    
                    	**default value**\: false
                    
                    .. attribute:: metric
                    
                    	OSPF metric
                    	**type**\: int
                    
                    	**range:** 1..16777214
                    
                    	**default value**\: 1
                    
                    .. attribute:: metric_type
                    
                    	OSPF External metric type
                    	**type**\:  :py:class:`OspfLinkStateMetric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetric>`
                    
                    	**default value**\: type2
                    
                    .. attribute:: route_policy_name
                    
                    	Routing policy name
                    	**type**\: str
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospf.Processes.Process.DefaultVrf.DefaultInformation, self).__init__()

                        self.yang_name = "default-information"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('always_advertise', YLeaf(YType.boolean, 'always-advertise')),
                            ('metric', YLeaf(YType.uint32, 'metric')),
                            ('metric_type', YLeaf(YType.enumeration, 'metric-type')),
                            ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
                        ])
                        self.always_advertise = None
                        self.metric = None
                        self.metric_type = None
                        self.route_policy_name = None
                        self._segment_path = lambda: "default-information"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.DefaultInformation, ['always_advertise', 'metric', 'metric_type', 'route_policy_name'], name, value)


                class Af(Entity):
                    """
                    OSPF address family
                    
                    .. attribute:: af_name
                    
                    	Address family
                    	**type**\:  :py:class:`OspfAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAddressFamily>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: saf_name
                    
                    	Sub\-Address family
                    	**type**\:  :py:class:`OspfSubAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSubAddressFamily>`
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospf.Processes.Process.DefaultVrf.Af, self).__init__()

                        self.yang_name = "af"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self.is_presence_container = True
                        self._leafs = OrderedDict([
                            ('af_name', YLeaf(YType.enumeration, 'af-name')),
                            ('saf_name', YLeaf(YType.enumeration, 'saf-name')),
                        ])
                        self.af_name = None
                        self.saf_name = None
                        self._segment_path = lambda: "af"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.Af, ['af_name', 'saf_name'], name, value)


                class Queue(Entity):
                    """
                    Adjust OSPF input queue sizes and processing
                    quantums
                    
                    .. attribute:: dispatch_rate_limited_flush
                    
                    	Maximum number of continuous rate\-limited LSAs processed for FLUSH
                    	**type**\: int
                    
                    	**range:** 30..3000
                    
                    	**default value**\: 150
                    
                    .. attribute:: limit_high
                    
                    	Hello events are dropped when incoming event queue exceeds this
                    	**type**\: int
                    
                    	**range:** 1000..30000
                    
                    	**default value**\: 9500
                    
                    .. attribute:: dispatch_spf_lsa_limit
                    
                    	Maximum number of continuous summary or external LSAs processed
                    	**type**\: int
                    
                    	**range:** 30..3000
                    
                    	**default value**\: 150
                    
                    .. attribute:: limit_low
                    
                    	DBDs/Updates are dropped when incoming event queue exceeds this
                    	**type**\: int
                    
                    	**range:** 1000..30000
                    
                    	**default value**\: 8000
                    
                    .. attribute:: dispatch_rate_limited
                    
                    	Maximum number of continuous rate\-limited LSAs processed
                    	**type**\: int
                    
                    	**range:** 30..3000
                    
                    	**default value**\: 150
                    
                    .. attribute:: limit_medium
                    
                    	LSA ACKs are dropped when incoming event queue exceeds this
                    	**type**\: int
                    
                    	**range:** 1000..30000
                    
                    	**default value**\: 9000
                    
                    .. attribute:: dispatch_incoming
                    
                    	Maximum number of continuous incoming packet\-related events processed
                    	**type**\: int
                    
                    	**range:** 30..3000
                    
                    	**default value**\: 300
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospf.Processes.Process.DefaultVrf.Queue, self).__init__()

                        self.yang_name = "queue"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('dispatch_rate_limited_flush', YLeaf(YType.uint32, 'dispatch-rate-limited-flush')),
                            ('limit_high', YLeaf(YType.uint32, 'limit-high')),
                            ('dispatch_spf_lsa_limit', YLeaf(YType.uint32, 'dispatch-spf-lsa-limit')),
                            ('limit_low', YLeaf(YType.uint32, 'limit-low')),
                            ('dispatch_rate_limited', YLeaf(YType.uint32, 'dispatch-rate-limited')),
                            ('limit_medium', YLeaf(YType.uint32, 'limit-medium')),
                            ('dispatch_incoming', YLeaf(YType.uint32, 'dispatch-incoming')),
                        ])
                        self.dispatch_rate_limited_flush = None
                        self.limit_high = None
                        self.dispatch_spf_lsa_limit = None
                        self.limit_low = None
                        self.dispatch_rate_limited = None
                        self.limit_medium = None
                        self.dispatch_incoming = None
                        self._segment_path = lambda: "queue"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.Queue, ['dispatch_rate_limited_flush', 'limit_high', 'dispatch_spf_lsa_limit', 'limit_low', 'dispatch_rate_limited', 'limit_medium', 'dispatch_incoming'], name, value)


                class MaxMetric(Entity):
                    """
                    Set maximum metric configuration
                    
                    .. attribute:: max_metric_on_proc_restart
                    
                    	Set maximum metric on\-proc\-restart configuration
                    	**type**\:  :py:class:`MaxMetricOnProcRestart <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnProcRestart>`
                    
                    .. attribute:: max_metric_on_startup
                    
                    	Set maximum metric on\-startup configuration
                    	**type**\:  :py:class:`MaxMetricOnStartup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnStartup>`
                    
                    .. attribute:: max_metric_on_proc_migration
                    
                    	Set maximum metric on\-proc\-migration configuration
                    	**type**\:  :py:class:`MaxMetricOnProcMigration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnProcMigration>`
                    
                    .. attribute:: max_metric_always
                    
                    	Set maximum metric always configuration
                    	**type**\:  :py:class:`MaxMetricAlways <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricAlways>`
                    
                    .. attribute:: max_metric_on_switchover
                    
                    	Set maximum metric on\-switchover configuration
                    	**type**\:  :py:class:`MaxMetricOnSwitchover <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnSwitchover>`
                    
                    .. attribute:: max_metric_no_abr_off
                    
                    	Block ABR\-disable mode entry while in max\-metric mode
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospf.Processes.Process.DefaultVrf.MaxMetric, self).__init__()

                        self.yang_name = "max-metric"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("max-metric-on-proc-restart", ("max_metric_on_proc_restart", Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnProcRestart)), ("max-metric-on-startup", ("max_metric_on_startup", Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnStartup)), ("max-metric-on-proc-migration", ("max_metric_on_proc_migration", Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnProcMigration)), ("max-metric-always", ("max_metric_always", Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricAlways)), ("max-metric-on-switchover", ("max_metric_on_switchover", Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnSwitchover))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('max_metric_no_abr_off', YLeaf(YType.empty, 'max-metric-no-abr-off')),
                        ])
                        self.max_metric_no_abr_off = None

                        self.max_metric_on_proc_restart = Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnProcRestart()
                        self.max_metric_on_proc_restart.parent = self
                        self._children_name_map["max_metric_on_proc_restart"] = "max-metric-on-proc-restart"
                        self._children_yang_names.add("max-metric-on-proc-restart")

                        self.max_metric_on_startup = Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnStartup()
                        self.max_metric_on_startup.parent = self
                        self._children_name_map["max_metric_on_startup"] = "max-metric-on-startup"
                        self._children_yang_names.add("max-metric-on-startup")

                        self.max_metric_on_proc_migration = Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnProcMigration()
                        self.max_metric_on_proc_migration.parent = self
                        self._children_name_map["max_metric_on_proc_migration"] = "max-metric-on-proc-migration"
                        self._children_yang_names.add("max-metric-on-proc-migration")

                        self.max_metric_always = Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricAlways()
                        self.max_metric_always.parent = self
                        self._children_name_map["max_metric_always"] = "max-metric-always"
                        self._children_yang_names.add("max-metric-always")

                        self.max_metric_on_switchover = Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnSwitchover()
                        self.max_metric_on_switchover.parent = self
                        self._children_name_map["max_metric_on_switchover"] = "max-metric-on-switchover"
                        self._children_yang_names.add("max-metric-on-switchover")
                        self._segment_path = lambda: "max-metric"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.MaxMetric, ['max_metric_no_abr_off'], name, value)


                    class MaxMetricOnProcRestart(Entity):
                        """
                        Set maximum metric on\-proc\-restart
                        configuration
                        
                        .. attribute:: wait_for_bgp
                        
                        	Let BGP decide when to originate router\-LSA with normal metric
                        	**type**\: bool
                        
                        	**default value**\: false
                        
                        .. attribute:: startup_max
                        
                        	Time in seconds to originate router\-LSA with max\-metric
                        	**type**\: int
                        
                        	**range:** 5..86400
                        
                        	**units**\: second
                        
                        .. attribute:: include_stub
                        
                        	Set maximum metric for stub links in router\-LSAs
                        	**type**\: bool
                        
                        .. attribute:: summary_lsa
                        
                        	Override summary\-lsa metric with max\-metric value
                        	**type**\: bool
                        
                        .. attribute:: summary_lsa_maximum_metric
                        
                        	Overriding metric in summary\-LSAs (default 16711680)
                        	**type**\: int
                        
                        	**range:** 1..16777215
                        
                        .. attribute:: external_lsa
                        
                        	Override external\-lsa metric with max\-metric value
                        	**type**\: bool
                        
                        .. attribute:: external_lsa_maximum_metric
                        
                        	Overriding metric in external\-LSAs (default 16711680)
                        	**type**\: int
                        
                        	**range:** 1..16777215
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnProcRestart, self).__init__()

                            self.yang_name = "max-metric-on-proc-restart"
                            self.yang_parent_name = "max-metric"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('wait_for_bgp', YLeaf(YType.boolean, 'wait-for-bgp')),
                                ('startup_max', YLeaf(YType.uint32, 'startup-max')),
                                ('include_stub', YLeaf(YType.boolean, 'include-stub')),
                                ('summary_lsa', YLeaf(YType.boolean, 'summary-lsa')),
                                ('summary_lsa_maximum_metric', YLeaf(YType.uint32, 'summary-lsa-maximum-metric')),
                                ('external_lsa', YLeaf(YType.boolean, 'external-lsa')),
                                ('external_lsa_maximum_metric', YLeaf(YType.uint32, 'external-lsa-maximum-metric')),
                            ])
                            self.wait_for_bgp = None
                            self.startup_max = None
                            self.include_stub = None
                            self.summary_lsa = None
                            self.summary_lsa_maximum_metric = None
                            self.external_lsa = None
                            self.external_lsa_maximum_metric = None
                            self._segment_path = lambda: "max-metric-on-proc-restart"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnProcRestart, ['wait_for_bgp', 'startup_max', 'include_stub', 'summary_lsa', 'summary_lsa_maximum_metric', 'external_lsa', 'external_lsa_maximum_metric'], name, value)


                    class MaxMetricOnStartup(Entity):
                        """
                        Set maximum metric on\-startup configuration
                        
                        .. attribute:: wait_for_bgp
                        
                        	Let BGP decide when to originate router\-LSA with normal metric
                        	**type**\: bool
                        
                        	**default value**\: false
                        
                        .. attribute:: startup_max
                        
                        	Time in seconds to originate router\-LSA with max\-metric
                        	**type**\: int
                        
                        	**range:** 5..86400
                        
                        	**units**\: second
                        
                        .. attribute:: include_stub
                        
                        	Set maximum metric for stub links in router\-LSAs
                        	**type**\: bool
                        
                        .. attribute:: summary_lsa
                        
                        	Override summary\-lsa metric with max\-metric value
                        	**type**\: bool
                        
                        .. attribute:: summary_lsa_maximum_metric
                        
                        	Overriding metric in summary\-LSAs (default 16711680)
                        	**type**\: int
                        
                        	**range:** 1..16777215
                        
                        .. attribute:: external_lsa
                        
                        	Override external\-lsa metric with max\-metric value
                        	**type**\: bool
                        
                        .. attribute:: external_lsa_maximum_metric
                        
                        	Overriding metric in external\-LSAs (default 16711680)
                        	**type**\: int
                        
                        	**range:** 1..16777215
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnStartup, self).__init__()

                            self.yang_name = "max-metric-on-startup"
                            self.yang_parent_name = "max-metric"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('wait_for_bgp', YLeaf(YType.boolean, 'wait-for-bgp')),
                                ('startup_max', YLeaf(YType.uint32, 'startup-max')),
                                ('include_stub', YLeaf(YType.boolean, 'include-stub')),
                                ('summary_lsa', YLeaf(YType.boolean, 'summary-lsa')),
                                ('summary_lsa_maximum_metric', YLeaf(YType.uint32, 'summary-lsa-maximum-metric')),
                                ('external_lsa', YLeaf(YType.boolean, 'external-lsa')),
                                ('external_lsa_maximum_metric', YLeaf(YType.uint32, 'external-lsa-maximum-metric')),
                            ])
                            self.wait_for_bgp = None
                            self.startup_max = None
                            self.include_stub = None
                            self.summary_lsa = None
                            self.summary_lsa_maximum_metric = None
                            self.external_lsa = None
                            self.external_lsa_maximum_metric = None
                            self._segment_path = lambda: "max-metric-on-startup"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnStartup, ['wait_for_bgp', 'startup_max', 'include_stub', 'summary_lsa', 'summary_lsa_maximum_metric', 'external_lsa', 'external_lsa_maximum_metric'], name, value)


                    class MaxMetricOnProcMigration(Entity):
                        """
                        Set maximum metric on\-proc\-migration
                        configuration
                        
                        .. attribute:: wait_for_bgp
                        
                        	Let BGP decide when to originate router\-LSA with normal metric
                        	**type**\: bool
                        
                        	**default value**\: false
                        
                        .. attribute:: startup_max
                        
                        	Time in seconds to originate router\-LSA with max\-metric
                        	**type**\: int
                        
                        	**range:** 5..86400
                        
                        	**units**\: second
                        
                        .. attribute:: include_stub
                        
                        	Set maximum metric for stub links in router\-LSAs
                        	**type**\: bool
                        
                        .. attribute:: summary_lsa
                        
                        	Override summary\-lsa metric with max\-metric value
                        	**type**\: bool
                        
                        .. attribute:: summary_lsa_maximum_metric
                        
                        	Overriding metric in summary\-LSAs (default 16711680)
                        	**type**\: int
                        
                        	**range:** 1..16777215
                        
                        .. attribute:: external_lsa
                        
                        	Override external\-lsa metric with max\-metric value
                        	**type**\: bool
                        
                        .. attribute:: external_lsa_maximum_metric
                        
                        	Overriding metric in external\-LSAs (default 16711680)
                        	**type**\: int
                        
                        	**range:** 1..16777215
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnProcMigration, self).__init__()

                            self.yang_name = "max-metric-on-proc-migration"
                            self.yang_parent_name = "max-metric"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('wait_for_bgp', YLeaf(YType.boolean, 'wait-for-bgp')),
                                ('startup_max', YLeaf(YType.uint32, 'startup-max')),
                                ('include_stub', YLeaf(YType.boolean, 'include-stub')),
                                ('summary_lsa', YLeaf(YType.boolean, 'summary-lsa')),
                                ('summary_lsa_maximum_metric', YLeaf(YType.uint32, 'summary-lsa-maximum-metric')),
                                ('external_lsa', YLeaf(YType.boolean, 'external-lsa')),
                                ('external_lsa_maximum_metric', YLeaf(YType.uint32, 'external-lsa-maximum-metric')),
                            ])
                            self.wait_for_bgp = None
                            self.startup_max = None
                            self.include_stub = None
                            self.summary_lsa = None
                            self.summary_lsa_maximum_metric = None
                            self.external_lsa = None
                            self.external_lsa_maximum_metric = None
                            self._segment_path = lambda: "max-metric-on-proc-migration"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnProcMigration, ['wait_for_bgp', 'startup_max', 'include_stub', 'summary_lsa', 'summary_lsa_maximum_metric', 'external_lsa', 'external_lsa_maximum_metric'], name, value)


                    class MaxMetricAlways(Entity):
                        """
                        Set maximum metric always configuration
                        
                        .. attribute:: include_stub
                        
                        	Set maximum metric for stub links in router\-LSAs
                        	**type**\: bool
                        
                        	**default value**\: false
                        
                        .. attribute:: summary_lsa
                        
                        	Override summary\-lsa metric with max\-metric value
                        	**type**\: bool
                        
                        .. attribute:: summary_lsa_maximum_metric
                        
                        	Overriding metric in summary\-LSAs (default 16711680)
                        	**type**\: int
                        
                        	**range:** 1..16777215
                        
                        .. attribute:: external_lsa
                        
                        	Override external\-lsa metric with max\-metric value
                        	**type**\: bool
                        
                        .. attribute:: external_lsa_maximum_metric
                        
                        	Overriding metric in external\-LSAs (default 16711680)
                        	**type**\: int
                        
                        	**range:** 1..16777215
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricAlways, self).__init__()

                            self.yang_name = "max-metric-always"
                            self.yang_parent_name = "max-metric"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('include_stub', YLeaf(YType.boolean, 'include-stub')),
                                ('summary_lsa', YLeaf(YType.boolean, 'summary-lsa')),
                                ('summary_lsa_maximum_metric', YLeaf(YType.uint32, 'summary-lsa-maximum-metric')),
                                ('external_lsa', YLeaf(YType.boolean, 'external-lsa')),
                                ('external_lsa_maximum_metric', YLeaf(YType.uint32, 'external-lsa-maximum-metric')),
                            ])
                            self.include_stub = None
                            self.summary_lsa = None
                            self.summary_lsa_maximum_metric = None
                            self.external_lsa = None
                            self.external_lsa_maximum_metric = None
                            self._segment_path = lambda: "max-metric-always"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricAlways, ['include_stub', 'summary_lsa', 'summary_lsa_maximum_metric', 'external_lsa', 'external_lsa_maximum_metric'], name, value)


                    class MaxMetricOnSwitchover(Entity):
                        """
                        Set maximum metric on\-switchover configuration
                        
                        .. attribute:: wait_for_bgp
                        
                        	Let BGP decide when to originate router\-LSA with normal metric
                        	**type**\: bool
                        
                        	**default value**\: false
                        
                        .. attribute:: startup_max
                        
                        	Time in seconds to originate router\-LSA with max\-metric
                        	**type**\: int
                        
                        	**range:** 5..86400
                        
                        	**units**\: second
                        
                        .. attribute:: include_stub
                        
                        	Set maximum metric for stub links in router\-LSAs
                        	**type**\: bool
                        
                        .. attribute:: summary_lsa
                        
                        	Override summary\-lsa metric with max\-metric value
                        	**type**\: bool
                        
                        .. attribute:: summary_lsa_maximum_metric
                        
                        	Overriding metric in summary\-LSAs (default 16711680)
                        	**type**\: int
                        
                        	**range:** 1..16777215
                        
                        .. attribute:: external_lsa
                        
                        	Override external\-lsa metric with max\-metric value
                        	**type**\: bool
                        
                        .. attribute:: external_lsa_maximum_metric
                        
                        	Overriding metric in external\-LSAs (default 16711680)
                        	**type**\: int
                        
                        	**range:** 1..16777215
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnSwitchover, self).__init__()

                            self.yang_name = "max-metric-on-switchover"
                            self.yang_parent_name = "max-metric"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('wait_for_bgp', YLeaf(YType.boolean, 'wait-for-bgp')),
                                ('startup_max', YLeaf(YType.uint32, 'startup-max')),
                                ('include_stub', YLeaf(YType.boolean, 'include-stub')),
                                ('summary_lsa', YLeaf(YType.boolean, 'summary-lsa')),
                                ('summary_lsa_maximum_metric', YLeaf(YType.uint32, 'summary-lsa-maximum-metric')),
                                ('external_lsa', YLeaf(YType.boolean, 'external-lsa')),
                                ('external_lsa_maximum_metric', YLeaf(YType.uint32, 'external-lsa-maximum-metric')),
                            ])
                            self.wait_for_bgp = None
                            self.startup_max = None
                            self.include_stub = None
                            self.summary_lsa = None
                            self.summary_lsa_maximum_metric = None
                            self.external_lsa = None
                            self.external_lsa_maximum_metric = None
                            self._segment_path = lambda: "max-metric-on-switchover"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnSwitchover, ['wait_for_bgp', 'startup_max', 'include_stub', 'summary_lsa', 'summary_lsa_maximum_metric', 'external_lsa', 'external_lsa_maximum_metric'], name, value)


                class Nsf(Entity):
                    """
                    Non Stop Forwarding configuration
                    
                    .. attribute:: lifetime
                    
                    	Maximum route lifetime following restart in seconds
                    	**type**\: int
                    
                    	**range:** 90..1800
                    
                    	**units**\: second
                    
                    	**default value**\: 90
                    
                    .. attribute:: ietf
                    
                    	Enable IETF Non Stop Forwarding
                    	**type**\:  :py:class:`OspfIetfNsf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfIetfNsf>`
                    
                    .. attribute:: ietf_support_role
                    
                    	Disable helper support role for IETF Non Stop Forwarding
                    	**type**\:  :py:class:`OspfIetfNsfSupport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfIetfNsfSupport>`
                    
                    .. attribute:: cisco
                    
                    	Enable Cisco Non Stop Forwarding
                    	**type**\:  :py:class:`OspfCiscoNsf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfCiscoNsf>`
                    
                    .. attribute:: interval
                    
                    	Minimum interval between Non Stop Forwarding restarts in seconds
                    	**type**\: int
                    
                    	**range:** 90..3600
                    
                    	**units**\: second
                    
                    	**default value**\: 90
                    
                    .. attribute:: flush_delay_time
                    
                    	Maximum time allowed for external route learning (seconds)
                    	**type**\: int
                    
                    	**range:** 1..3600
                    
                    	**units**\: second
                    
                    	**default value**\: 60
                    
                    .. attribute:: ietf_strict_lsa_checking
                    
                    	Enable Strict LSA checking of IETF NSF
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospf.Processes.Process.DefaultVrf.Nsf, self).__init__()

                        self.yang_name = "nsf"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('lifetime', YLeaf(YType.uint32, 'lifetime')),
                            ('ietf', YLeaf(YType.enumeration, 'ietf')),
                            ('ietf_support_role', YLeaf(YType.enumeration, 'ietf-support-role')),
                            ('cisco', YLeaf(YType.enumeration, 'cisco')),
                            ('interval', YLeaf(YType.uint32, 'interval')),
                            ('flush_delay_time', YLeaf(YType.uint32, 'flush-delay-time')),
                            ('ietf_strict_lsa_checking', YLeaf(YType.empty, 'ietf-strict-lsa-checking')),
                        ])
                        self.lifetime = None
                        self.ietf = None
                        self.ietf_support_role = None
                        self.cisco = None
                        self.interval = None
                        self.flush_delay_time = None
                        self.ietf_strict_lsa_checking = None
                        self._segment_path = lambda: "nsf"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.Nsf, ['lifetime', 'ietf', 'ietf_support_role', 'cisco', 'interval', 'flush_delay_time', 'ietf_strict_lsa_checking'], name, value)


                class ProcessScope(Entity):
                    """
                    Process scope configuration
                    
                    .. attribute:: srgb
                    
                    	Segment Routing Global Block configuration
                    	**type**\:  :py:class:`Srgb <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.Srgb>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: fast_reroute
                    
                    	Fast\-reroute configuration
                    	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute>`
                    
                    .. attribute:: distribute_list
                    
                    	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                    	**type**\:  :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.DistributeList>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: cost
                    
                    	Interface cost
                    	**type**\: int
                    
                    	**range:** 1..65535
                    
                    .. attribute:: bfd
                    
                    	BFD configuration
                    	**type**\:  :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.Bfd>`
                    
                    .. attribute:: external_out
                    
                    	Enable/Disable an OSPF area to advertise intra\-area prefixes out of this area as external
                    	**type**\: bool
                    
                    .. attribute:: prefix_suppression_primary
                    
                    	Enable/Disable prefix suppression for primary addresses
                    	**type**\: bool
                    
                    	**default value**\: false
                    
                    .. attribute:: mtu_ignore
                    
                    	Enable/Disable ignoring of MTU in DBD packets
                    	**type**\: bool
                    
                    	**default value**\: false
                    
                    .. attribute:: authentication
                    
                    	Authentication
                    	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication>`
                    
                    .. attribute:: ldp_sync_igp_shortcuts
                    
                    	Enable/Disable MPLS LDP sync for igp\-shortcuts
                    	**type**\: bool
                    
                    .. attribute:: ldp_auto_config
                    
                    	Enable MPLS LDP Auto Config
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: security
                    
                    	Container class for security related configuration parameters
                    	**type**\:  :py:class:`Security <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.Security>`
                    
                    .. attribute:: summary_in
                    
                    	Enable/Disable an OSPF area to advertise external prefixes into this area as summary
                    	**type**\: bool
                    
                    .. attribute:: network_type
                    
                    	Type of attached network
                    	**type**\:  :py:class:`OspfNetwork <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfNetwork>`
                    
                    .. attribute:: hello_interval
                    
                    	Interval between HELLO packets in seconds
                    	**type**\: int
                    
                    	**range:** 1..65535
                    
                    	**units**\: second
                    
                    .. attribute:: loopback_stub_network
                    
                    	Enable/Disable advertising loopback as a stub network
                    	**type**\: bool
                    
                    	**default value**\: false
                    
                    .. attribute:: prefix_suppression_secondary
                    
                    	Enable/Disable prefix suppression for secondary addresses
                    	**type**\: bool
                    
                    	**default value**\: false
                    
                    .. attribute:: demand_circuit
                    
                    	Enable/Disable OSPF demand circuit
                    	**type**\: bool
                    
                    	**default value**\: false
                    
                    .. attribute:: segment_routing
                    
                    	segment\-routing configuration Applicable only in Default VRF
                    	**type**\:  :py:class:`OspfSegmentRouting <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRouting>`
                    
                    .. attribute:: passive
                    
                    	When enabled, prevent sending HELLO packets over link
                    	**type**\: bool
                    
                    	**default value**\: false
                    
                    .. attribute:: transmit_delay
                    
                    	Number of seconds to delay transmission of LSAs
                    	**type**\: int
                    
                    	**range:** 1..65535
                    
                    	**units**\: second
                    
                    	**default value**\: 1
                    
                    .. attribute:: packet_size
                    
                    	Customize size of OSPF packets upto MTU
                    	**type**\: int
                    
                    	**range:** 576..10000
                    
                    .. attribute:: ldp_sync
                    
                    	Enable/Disable MPLS LDP sync
                    	**type**\: bool
                    
                    .. attribute:: database_filter
                    
                    	Filter OSPF LSA during synchronization and flooding
                    	**type**\: bool
                    
                    	**default value**\: false
                    
                    .. attribute:: dead_interval_minimal
                    
                    	Interval after which a neighbor is declared dead
                    	**type**\:  :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.DeadIntervalMinimal>`
                    
                    .. attribute:: link_down_fast_detect
                    
                    	Enable/Disable registration for early interface down notifications
                    	**type**\: bool
                    
                    	**default value**\: false
                    
                    .. attribute:: segment_routing_forwarding
                    
                    	segment\-routing forwarding configuration Applicableonly in Default VRF
                    	**type**\:  :py:class:`OspfSegmentRoutingForwarding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRoutingForwarding>`
                    
                    .. attribute:: retransmit_interval
                    
                    	Time in seconds between retransmitting lost link state advertisements
                    	**type**\: int
                    
                    	**range:** 1..65535
                    
                    	**units**\: second
                    
                    	**default value**\: 5
                    
                    .. attribute:: priority
                    
                    	Router priority for DR and BDR election
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**default value**\: 1
                    
                    .. attribute:: flood_reduction
                    
                    	Enable/Disable OSPF flood reduction
                    	**type**\: bool
                    
                    	**default value**\: false
                    
                    .. attribute:: cost_fallback
                    
                    	Interface fallback cost
                    	**type**\:  :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.CostFallback>`
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospf.Processes.Process.DefaultVrf.ProcessScope, self).__init__()

                        self.yang_name = "process-scope"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("srgb", ("srgb", Ospf.Processes.Process.DefaultVrf.ProcessScope.Srgb)), ("fast-reroute", ("fast_reroute", Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute)), ("distribute-list", ("distribute_list", Ospf.Processes.Process.DefaultVrf.ProcessScope.DistributeList)), ("bfd", ("bfd", Ospf.Processes.Process.DefaultVrf.ProcessScope.Bfd)), ("authentication", ("authentication", Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication)), ("security", ("security", Ospf.Processes.Process.DefaultVrf.ProcessScope.Security)), ("dead-interval-minimal", ("dead_interval_minimal", Ospf.Processes.Process.DefaultVrf.ProcessScope.DeadIntervalMinimal)), ("cost-fallback", ("cost_fallback", Ospf.Processes.Process.DefaultVrf.ProcessScope.CostFallback))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('cost', YLeaf(YType.uint32, 'cost')),
                            ('external_out', YLeaf(YType.boolean, 'external-out')),
                            ('prefix_suppression_primary', YLeaf(YType.boolean, 'prefix-suppression-primary')),
                            ('mtu_ignore', YLeaf(YType.boolean, 'mtu-ignore')),
                            ('ldp_sync_igp_shortcuts', YLeaf(YType.boolean, 'ldp-sync-igp-shortcuts')),
                            ('ldp_auto_config', YLeaf(YType.empty, 'ldp-auto-config')),
                            ('summary_in', YLeaf(YType.boolean, 'summary-in')),
                            ('network_type', YLeaf(YType.enumeration, 'network-type')),
                            ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                            ('loopback_stub_network', YLeaf(YType.boolean, 'loopback-stub-network')),
                            ('prefix_suppression_secondary', YLeaf(YType.boolean, 'prefix-suppression-secondary')),
                            ('demand_circuit', YLeaf(YType.boolean, 'demand-circuit')),
                            ('segment_routing', YLeaf(YType.enumeration, 'segment-routing')),
                            ('passive', YLeaf(YType.boolean, 'passive')),
                            ('transmit_delay', YLeaf(YType.uint32, 'transmit-delay')),
                            ('packet_size', YLeaf(YType.uint32, 'packet-size')),
                            ('ldp_sync', YLeaf(YType.boolean, 'ldp-sync')),
                            ('database_filter', YLeaf(YType.boolean, 'database-filter')),
                            ('link_down_fast_detect', YLeaf(YType.boolean, 'link-down-fast-detect')),
                            ('segment_routing_forwarding', YLeaf(YType.enumeration, 'segment-routing-forwarding')),
                            ('retransmit_interval', YLeaf(YType.uint32, 'retransmit-interval')),
                            ('priority', YLeaf(YType.uint32, 'priority')),
                            ('flood_reduction', YLeaf(YType.boolean, 'flood-reduction')),
                        ])
                        self.cost = None
                        self.external_out = None
                        self.prefix_suppression_primary = None
                        self.mtu_ignore = None
                        self.ldp_sync_igp_shortcuts = None
                        self.ldp_auto_config = None
                        self.summary_in = None
                        self.network_type = None
                        self.hello_interval = None
                        self.loopback_stub_network = None
                        self.prefix_suppression_secondary = None
                        self.demand_circuit = None
                        self.segment_routing = None
                        self.passive = None
                        self.transmit_delay = None
                        self.packet_size = None
                        self.ldp_sync = None
                        self.database_filter = None
                        self.link_down_fast_detect = None
                        self.segment_routing_forwarding = None
                        self.retransmit_interval = None
                        self.priority = None
                        self.flood_reduction = None

                        self.srgb = None
                        self._children_name_map["srgb"] = "srgb"
                        self._children_yang_names.add("srgb")

                        self.fast_reroute = Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute()
                        self.fast_reroute.parent = self
                        self._children_name_map["fast_reroute"] = "fast-reroute"
                        self._children_yang_names.add("fast-reroute")

                        self.distribute_list = None
                        self._children_name_map["distribute_list"] = "distribute-list"
                        self._children_yang_names.add("distribute-list")

                        self.bfd = Ospf.Processes.Process.DefaultVrf.ProcessScope.Bfd()
                        self.bfd.parent = self
                        self._children_name_map["bfd"] = "bfd"
                        self._children_yang_names.add("bfd")

                        self.authentication = Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication()
                        self.authentication.parent = self
                        self._children_name_map["authentication"] = "authentication"
                        self._children_yang_names.add("authentication")

                        self.security = Ospf.Processes.Process.DefaultVrf.ProcessScope.Security()
                        self.security.parent = self
                        self._children_name_map["security"] = "security"
                        self._children_yang_names.add("security")

                        self.dead_interval_minimal = Ospf.Processes.Process.DefaultVrf.ProcessScope.DeadIntervalMinimal()
                        self.dead_interval_minimal.parent = self
                        self._children_name_map["dead_interval_minimal"] = "dead-interval-minimal"
                        self._children_yang_names.add("dead-interval-minimal")

                        self.cost_fallback = Ospf.Processes.Process.DefaultVrf.ProcessScope.CostFallback()
                        self.cost_fallback.parent = self
                        self._children_name_map["cost_fallback"] = "cost-fallback"
                        self._children_yang_names.add("cost-fallback")
                        self._segment_path = lambda: "process-scope"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.ProcessScope, ['cost', 'external_out', 'prefix_suppression_primary', 'mtu_ignore', 'ldp_sync_igp_shortcuts', 'ldp_auto_config', 'summary_in', 'network_type', 'hello_interval', 'loopback_stub_network', 'prefix_suppression_secondary', 'demand_circuit', 'segment_routing', 'passive', 'transmit_delay', 'packet_size', 'ldp_sync', 'database_filter', 'link_down_fast_detect', 'segment_routing_forwarding', 'retransmit_interval', 'priority', 'flood_reduction'], name, value)


                    class Srgb(Entity):
                        """
                        Segment Routing Global Block configuration
                        
                        .. attribute:: lower_bound
                        
                        	The lower bound of the SRGB
                        	**type**\: int
                        
                        	**range:** 16000..1048575
                        
                        	**mandatory**\: True
                        
                        .. attribute:: upper_bound
                        
                        	The upper bound of the SRGB
                        	**type**\: int
                        
                        	**range:** 16000..1048575
                        
                        	**mandatory**\: True
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.ProcessScope.Srgb, self).__init__()

                            self.yang_name = "srgb"
                            self.yang_parent_name = "process-scope"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self.is_presence_container = True
                            self._leafs = OrderedDict([
                                ('lower_bound', YLeaf(YType.uint32, 'lower-bound')),
                                ('upper_bound', YLeaf(YType.uint32, 'upper-bound')),
                            ])
                            self.lower_bound = None
                            self.upper_bound = None
                            self._segment_path = lambda: "srgb"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.ProcessScope.Srgb, ['lower_bound', 'upper_bound'], name, value)


                    class FastReroute(Entity):
                        """
                        Fast\-reroute configuration
                        
                        .. attribute:: per_link
                        
                        	Fast\-reroute per\-link configuration
                        	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink>`
                        
                        .. attribute:: per_prefix
                        
                        	Fast\-reroute per\-prefix configuration
                        	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix>`
                        
                        .. attribute:: fast_reroute_enable
                        
                        	Enable/Disable Fast\-reroute per\-link or per\-prefix
                        	**type**\:  :py:class:`OspfProcFastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfProcFastReroute>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute, self).__init__()

                            self.yang_name = "fast-reroute"
                            self.yang_parent_name = "process-scope"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("per-link", ("per_link", Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('fast_reroute_enable', YLeaf(YType.enumeration, 'fast-reroute-enable')),
                            ])
                            self.fast_reroute_enable = None

                            self.per_link = Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink()
                            self.per_link.parent = self
                            self._children_name_map["per_link"] = "per-link"
                            self._children_yang_names.add("per-link")

                            self.per_prefix = Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix()
                            self.per_prefix.parent = self
                            self._children_name_map["per_prefix"] = "per-prefix"
                            self._children_yang_names.add("per-prefix")
                            self._segment_path = lambda: "fast-reroute"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute, ['fast_reroute_enable'], name, value)


                        class PerLink(Entity):
                            """
                            Fast\-reroute per\-link configuration
                            
                            .. attribute:: candidate_interfaces
                            
                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                            	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces>`
                            
                            .. attribute:: fast_reroute_use_candidate_only
                            
                            	Use only interfaces on the candidate list as a backup path
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: exclude_interfaces
                            
                            	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                            	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink, self).__init__()

                                self.yang_name = "per-link"
                                self.yang_parent_name = "fast-reroute"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                ])
                                self.fast_reroute_use_candidate_only = None

                                self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces()
                                self.candidate_interfaces.parent = self
                                self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                self._children_yang_names.add("candidate-interfaces")

                                self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces()
                                self.exclude_interfaces.parent = self
                                self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                self._children_yang_names.add("exclude-interfaces")
                                self._segment_path = lambda: "per-link"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                            class CandidateInterfaces(Entity):
                                """
                                Fast\-reroute per\-link/per\-prefix candidate
                                interface configuration
                                
                                .. attribute:: candidate_interface
                                
                                	Candidate backup interface
                                	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                    self.yang_name = "candidate-interfaces"
                                    self.yang_parent_name = "per-link"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface))])
                                    self._leafs = OrderedDict()

                                    self.candidate_interface = YList(self)
                                    self._segment_path = lambda: "candidate-interfaces"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                class CandidateInterface(Entity):
                                    """
                                    Candidate backup interface
                                    
                                    .. attribute:: interface_name  (key)
                                    
                                    	Interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                        self.yang_name = "candidate-interface"
                                        self.yang_parent_name = "candidate-interfaces"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['interface_name']
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                                        ])
                                        self.interface_name = None
                                        self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                            class ExcludeInterfaces(Entity):
                                """
                                Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                interface configuration
                                
                                .. attribute:: exclude_interface
                                
                                	Exclude an interface from becoming a backup or UCMP
                                	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                    self.yang_name = "exclude-interfaces"
                                    self.yang_parent_name = "per-link"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface))])
                                    self._leafs = OrderedDict()

                                    self.exclude_interface = YList(self)
                                    self._segment_path = lambda: "exclude-interfaces"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                class ExcludeInterface(Entity):
                                    """
                                    Exclude an interface from becoming a backup or
                                    UCMP
                                    
                                    .. attribute:: interface_name  (key)
                                    
                                    	Interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                        self.yang_name = "exclude-interface"
                                        self.yang_parent_name = "exclude-interfaces"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['interface_name']
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                                        ])
                                        self.interface_name = None
                                        self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                        class PerPrefix(Entity):
                            """
                            Fast\-reroute per\-prefix configuration
                            
                            .. attribute:: remote_lfa
                            
                            	Remote LFA configuration
                            	**type**\:  :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.RemoteLfa>`
                            
                            .. attribute:: topology_independent_lfa
                            
                            	Topology Independet LFA configuration
                            	**type**\: bool
                            
                            .. attribute:: candidate_interfaces
                            
                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                            	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces>`
                            
                            .. attribute:: fast_reroute_use_candidate_only
                            
                            	Use only interfaces on the candidate list as a backup path
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: exclude_interfaces
                            
                            	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                            	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix, self).__init__()

                                self.yang_name = "per-prefix"
                                self.yang_parent_name = "fast-reroute"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("remote-lfa", ("remote_lfa", Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.RemoteLfa)), ("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('topology_independent_lfa', YLeaf(YType.boolean, 'topology-independent-lfa')),
                                    ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                ])
                                self.topology_independent_lfa = None
                                self.fast_reroute_use_candidate_only = None

                                self.remote_lfa = Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.RemoteLfa()
                                self.remote_lfa.parent = self
                                self._children_name_map["remote_lfa"] = "remote-lfa"
                                self._children_yang_names.add("remote-lfa")

                                self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces()
                                self.candidate_interfaces.parent = self
                                self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                self._children_yang_names.add("candidate-interfaces")

                                self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                self.exclude_interfaces.parent = self
                                self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                self._children_yang_names.add("exclude-interfaces")
                                self._segment_path = lambda: "per-prefix"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix, ['topology_independent_lfa', 'fast_reroute_use_candidate_only'], name, value)


                            class RemoteLfa(Entity):
                                """
                                Remote LFA configuration
                                
                                .. attribute:: tunnel
                                
                                	Enable/Disable remote LFA computation
                                	**type**\:  :py:class:`OspfProcFrrRlfaTunnel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfProcFrrRlfaTunnel>`
                                
                                .. attribute:: maximum_cost
                                
                                	Maximum path cost to remote LFA
                                	**type**\: int
                                
                                	**range:** 1..4294967295
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.RemoteLfa, self).__init__()

                                    self.yang_name = "remote-lfa"
                                    self.yang_parent_name = "per-prefix"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('tunnel', YLeaf(YType.enumeration, 'tunnel')),
                                        ('maximum_cost', YLeaf(YType.uint32, 'maximum-cost')),
                                    ])
                                    self.tunnel = None
                                    self.maximum_cost = None
                                    self._segment_path = lambda: "remote-lfa"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.RemoteLfa, ['tunnel', 'maximum_cost'], name, value)


                            class CandidateInterfaces(Entity):
                                """
                                Fast\-reroute per\-link/per\-prefix candidate
                                interface configuration
                                
                                .. attribute:: candidate_interface
                                
                                	Candidate backup interface
                                	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                    self.yang_name = "candidate-interfaces"
                                    self.yang_parent_name = "per-prefix"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface))])
                                    self._leafs = OrderedDict()

                                    self.candidate_interface = YList(self)
                                    self._segment_path = lambda: "candidate-interfaces"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                class CandidateInterface(Entity):
                                    """
                                    Candidate backup interface
                                    
                                    .. attribute:: interface_name  (key)
                                    
                                    	Interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                        self.yang_name = "candidate-interface"
                                        self.yang_parent_name = "candidate-interfaces"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['interface_name']
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                                        ])
                                        self.interface_name = None
                                        self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                            class ExcludeInterfaces(Entity):
                                """
                                Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                interface configuration
                                
                                .. attribute:: exclude_interface
                                
                                	Exclude an interface from becoming a backup or UCMP
                                	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                    self.yang_name = "exclude-interfaces"
                                    self.yang_parent_name = "per-prefix"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface))])
                                    self._leafs = OrderedDict()

                                    self.exclude_interface = YList(self)
                                    self._segment_path = lambda: "exclude-interfaces"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                class ExcludeInterface(Entity):
                                    """
                                    Exclude an interface from becoming a backup or
                                    UCMP
                                    
                                    .. attribute:: interface_name  (key)
                                    
                                    	Interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                        self.yang_name = "exclude-interface"
                                        self.yang_parent_name = "exclude-interfaces"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['interface_name']
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                                        ])
                                        self.interface_name = None
                                        self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                    class DistributeList(Entity):
                        """
                        Filter networks intalled to RIB (disable as ACL
                        name means filtering is disabled)
                        
                        .. attribute:: access_list_name
                        
                        	Access Control List name
                        	**type**\: str
                        
                        .. attribute:: route_policy_name
                        
                        	Route Policy name
                        	**type**\: str
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.ProcessScope.DistributeList, self).__init__()

                            self.yang_name = "distribute-list"
                            self.yang_parent_name = "process-scope"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self.is_presence_container = True
                            self._leafs = OrderedDict([
                                ('access_list_name', YLeaf(YType.str, 'access-list-name')),
                                ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
                            ])
                            self.access_list_name = None
                            self.route_policy_name = None
                            self._segment_path = lambda: "distribute-list"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.ProcessScope.DistributeList, ['access_list_name', 'route_policy_name'], name, value)


                    class Bfd(Entity):
                        """
                        BFD configuration
                        
                        .. attribute:: interval
                        
                        	Hello interval for BFD sessions created by OSPF
                        	**type**\: int
                        
                        	**range:** 3..30000
                        
                        	**units**\: millisecond
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection multiplier for BFD sessions created by OSPF
                        	**type**\: int
                        
                        	**range:** 2..50
                        
                        .. attribute:: fast_detect_mode
                        
                        	 use of Bidirectional Forwarding Detection
                        	**type**\:  :py:class:`BfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.BfdEnableMode>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.ProcessScope.Bfd, self).__init__()

                            self.yang_name = "bfd"
                            self.yang_parent_name = "process-scope"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('interval', YLeaf(YType.uint32, 'interval')),
                                ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                                ('fast_detect_mode', YLeaf(YType.enumeration, 'fast-detect-mode')),
                            ])
                            self.interval = None
                            self.detection_multiplier = None
                            self.fast_detect_mode = None
                            self._segment_path = lambda: "bfd"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.ProcessScope.Bfd, ['interval', 'detection_multiplier', 'fast_detect_mode'], name, value)


                    class Authentication(Entity):
                        """
                        Authentication
                        
                        .. attribute:: type
                        
                        	Authentication type
                        	**type**\:  :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication.Type>`
                        
                        .. attribute:: message_digest_keies
                        
                        	Message digest authentication password (key) configurations, first 16 chars used
                        	**type**\:  :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication.MessageDigestKeies>`
                        
                        .. attribute:: key
                        
                        	Authentication key configuration
                        	**type**\: str
                        
                        	**pattern:** (!.+)\|([^!].+)
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication, self).__init__()

                            self.yang_name = "authentication"
                            self.yang_parent_name = "process-scope"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("type", ("type", Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication.Type)), ("message-digest-keies", ("message_digest_keies", Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication.MessageDigestKeies))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('key', YLeaf(YType.str, 'key')),
                            ])
                            self.key = None

                            self.type = Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication.Type()
                            self.type.parent = self
                            self._children_name_map["type"] = "type"
                            self._children_yang_names.add("type")

                            self.message_digest_keies = Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication.MessageDigestKeies()
                            self.message_digest_keies.parent = self
                            self._children_name_map["message_digest_keies"] = "message-digest-keies"
                            self._children_yang_names.add("message-digest-keies")
                            self._segment_path = lambda: "authentication"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication, ['key'], name, value)


                        class Type(Entity):
                            """
                            Authentication type
                            
                            .. attribute:: authen_type
                            
                            	Authentication type code 
                            	**type**\:  :py:class:`OspfAuthentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthentication>`
                            
                            .. attribute:: keychain_authen_type
                            
                            	Keychain authentication type
                            	**type**\:  :py:class:`OspfKeychainAuth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuth>`
                            
                            .. attribute:: keychain_name
                            
                            	Keychain name
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication.Type, self).__init__()

                                self.yang_name = "type"
                                self.yang_parent_name = "authentication"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('authen_type', YLeaf(YType.enumeration, 'authen-type')),
                                    ('keychain_authen_type', YLeaf(YType.enumeration, 'keychain-authen-type')),
                                    ('keychain_name', YLeaf(YType.str, 'keychain-name')),
                                ])
                                self.authen_type = None
                                self.keychain_authen_type = None
                                self.keychain_name = None
                                self._segment_path = lambda: "type"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication.Type, ['authen_type', 'keychain_authen_type', 'keychain_name'], name, value)


                        class MessageDigestKeies(Entity):
                            """
                            Message digest authentication password (key)
                            configurations, first 16 chars used
                            
                            .. attribute:: message_digest_key
                            
                            	Message digest authentication password (key) configuration
                            	**type**\: list of  		 :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication.MessageDigestKeies, self).__init__()

                                self.yang_name = "message-digest-keies"
                                self.yang_parent_name = "authentication"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("message-digest-key", ("message_digest_key", Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication.MessageDigestKeies.MessageDigestKey))])
                                self._leafs = OrderedDict()

                                self.message_digest_key = YList(self)
                                self._segment_path = lambda: "message-digest-keies"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication.MessageDigestKeies, [], name, value)


                            class MessageDigestKey(Entity):
                                """
                                Message digest authentication password (key)
                                configuration
                                
                                .. attribute:: key_id  (key)
                                
                                	Key ID
                                	**type**\: int
                                
                                	**range:** 1..255
                                
                                .. attribute:: password
                                
                                	Password
                                	**type**\: str
                                
                                	**pattern:** (!.+)\|([^!].+)
                                
                                	**mandatory**\: True
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication.MessageDigestKeies.MessageDigestKey, self).__init__()

                                    self.yang_name = "message-digest-key"
                                    self.yang_parent_name = "message-digest-keies"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['key_id']
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('key_id', YLeaf(YType.uint32, 'key-id')),
                                        ('password', YLeaf(YType.str, 'password')),
                                    ])
                                    self.key_id = None
                                    self.password = None
                                    self._segment_path = lambda: "message-digest-key" + "[key-id='" + str(self.key_id) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication.MessageDigestKeies.MessageDigestKey, ['key_id', 'password'], name, value)


                    class Security(Entity):
                        """
                        Container class for security related
                        configuration parameters
                        
                        .. attribute:: ttl
                        
                        	Enabling turns on TTL security
                        	**type**\:  :py:class:`Ttl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.Security.Ttl>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.ProcessScope.Security, self).__init__()

                            self.yang_name = "security"
                            self.yang_parent_name = "process-scope"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("ttl", ("ttl", Ospf.Processes.Process.DefaultVrf.ProcessScope.Security.Ttl))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.ttl = Ospf.Processes.Process.DefaultVrf.ProcessScope.Security.Ttl()
                            self.ttl.parent = self
                            self._children_name_map["ttl"] = "ttl"
                            self._children_yang_names.add("ttl")
                            self._segment_path = lambda: "security"


                        class Ttl(Entity):
                            """
                            Enabling turns on TTL security
                            
                            .. attribute:: enable
                            
                            	Enable TTL security
                            	**type**\: bool
                            
                            .. attribute:: hop_count
                            
                            	Hop count
                            	**type**\: int
                            
                            	**range:** 1..254
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.DefaultVrf.ProcessScope.Security.Ttl, self).__init__()

                                self.yang_name = "ttl"
                                self.yang_parent_name = "security"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('enable', YLeaf(YType.boolean, 'enable')),
                                    ('hop_count', YLeaf(YType.uint32, 'hop-count')),
                                ])
                                self.enable = None
                                self.hop_count = None
                                self._segment_path = lambda: "ttl"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.ProcessScope.Security.Ttl, ['enable', 'hop_count'], name, value)


                    class DeadIntervalMinimal(Entity):
                        """
                        Interval after which a neighbor is declared dead
                        
                        .. attribute:: interval
                        
                        	Interval size in seconds after which a neighbor is declared dead
                        	**type**\: int
                        
                        	**range:** 1..65535
                        
                        	**units**\: second
                        
                        .. attribute:: multiplier
                        
                        	Number of Hellos in one second
                        	**type**\: int
                        
                        	**range:** 3..20
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.ProcessScope.DeadIntervalMinimal, self).__init__()

                            self.yang_name = "dead-interval-minimal"
                            self.yang_parent_name = "process-scope"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('interval', YLeaf(YType.uint32, 'interval')),
                                ('multiplier', YLeaf(YType.uint32, 'multiplier')),
                            ])
                            self.interval = None
                            self.multiplier = None
                            self._segment_path = lambda: "dead-interval-minimal"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.ProcessScope.DeadIntervalMinimal, ['interval', 'multiplier'], name, value)


                    class CostFallback(Entity):
                        """
                        Interface fallback cost
                        
                        .. attribute:: cost
                        
                        	Fallback cost of link
                        	**type**\: int
                        
                        	**range:** 1..65535
                        
                        .. attribute:: threshold
                        
                        	Bandwidth threshold
                        	**type**\: int
                        
                        	**range:** 1..4294967
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.ProcessScope.CostFallback, self).__init__()

                            self.yang_name = "cost-fallback"
                            self.yang_parent_name = "process-scope"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('cost', YLeaf(YType.uint32, 'cost')),
                                ('threshold', YLeaf(YType.uint32, 'threshold')),
                            ])
                            self.cost = None
                            self.threshold = None
                            self._segment_path = lambda: "cost-fallback"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.ProcessScope.CostFallback, ['cost', 'threshold'], name, value)


                class Redistribution(Entity):
                    """
                    Redistribute configurations
                    
                    .. attribute:: redistributes
                    
                    	Redistribute information from another routing protocol
                    	**type**\:  :py:class:`Redistributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes>`
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospf.Processes.Process.DefaultVrf.Redistribution, self).__init__()

                        self.yang_name = "redistribution"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("redistributes", ("redistributes", Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict()

                        self.redistributes = Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes()
                        self.redistributes.parent = self
                        self._children_name_map["redistributes"] = "redistributes"
                        self._children_yang_names.add("redistributes")
                        self._segment_path = lambda: "redistribution"


                    class Redistributes(Entity):
                        """
                        Redistribute information from another routing
                        protocol
                        
                        .. attribute:: redistribute
                        
                        	Redistribute information from another routing protocol
                        	**type**\: list of  		 :py:class:`Redistribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes, self).__init__()

                            self.yang_name = "redistributes"
                            self.yang_parent_name = "redistribution"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("redistribute", ("redistribute", Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute))])
                            self._leafs = OrderedDict()

                            self.redistribute = YList(self)
                            self._segment_path = lambda: "redistributes"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes, [], name, value)


                        class Redistribute(Entity):
                            """
                            Redistribute information from another routing
                            protocol
                            
                            .. attribute:: protocol_name  (key)
                            
                            	Distribute list protocol type
                            	**type**\:  :py:class:`OspfRedistProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRedistProtocol>`
                            
                            .. attribute:: connected_or_static_or_dagr_or_subscriber_or_mobile_or_rip
                            
                            	connected or static or dagr or subscriber or mobile or rip
                            	**type**\:  :py:class:`ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute.ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: application_or_isis_or_ospf
                            
                            	application or isis or ospf
                            	**type**\: list of  		 :py:class:`ApplicationOrIsisOrOspf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute.ApplicationOrIsisOrOspf>`
                            
                            .. attribute:: bgp
                            
                            	bgp
                            	**type**\: list of  		 :py:class:`Bgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute.Bgp>`
                            
                            .. attribute:: eigrp
                            
                            	eigrp
                            	**type**\: list of  		 :py:class:`Eigrp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute.Eigrp>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute, self).__init__()

                                self.yang_name = "redistribute"
                                self.yang_parent_name = "redistributes"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['protocol_name']
                                self._child_container_classes = OrderedDict([("connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip", ("connected_or_static_or_dagr_or_subscriber_or_mobile_or_rip", Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute.ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip))])
                                self._child_list_classes = OrderedDict([("application-or-isis-or-ospf", ("application_or_isis_or_ospf", Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute.ApplicationOrIsisOrOspf)), ("bgp", ("bgp", Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute.Bgp)), ("eigrp", ("eigrp", Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute.Eigrp))])
                                self._leafs = OrderedDict([
                                    ('protocol_name', YLeaf(YType.enumeration, 'protocol-name')),
                                ])
                                self.protocol_name = None

                                self.connected_or_static_or_dagr_or_subscriber_or_mobile_or_rip = None
                                self._children_name_map["connected_or_static_or_dagr_or_subscriber_or_mobile_or_rip"] = "connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip"
                                self._children_yang_names.add("connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip")

                                self.application_or_isis_or_ospf = YList(self)
                                self.bgp = YList(self)
                                self.eigrp = YList(self)
                                self._segment_path = lambda: "redistribute" + "[protocol-name='" + str(self.protocol_name) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute, ['protocol_name'], name, value)


                            class ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip(Entity):
                                """
                                connected or static or dagr or subscriber or
                                mobile or rip
                                
                                .. attribute:: classful
                                
                                	Disallow subnetting
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: default_redistributed_route_metric
                                
                                	Default metric for routes being redistributed into OSPF
                                	**type**\: int
                                
                                	**range:** 1..16777214
                                
                                .. attribute:: tag
                                
                                	Set tag for routes redistributed into OSPF
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: metric_type
                                
                                	Set OSPF External metric type
                                	**type**\:  :py:class:`OspfLinkStateMetric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetric>`
                                
                                .. attribute:: eigrp_route_type
                                
                                	EIGRP route type
                                	**type**\:  :py:class:`OspfEigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfEigrpRoute>`
                                
                                .. attribute:: isis_levels
                                
                                	Levels of ISIS routes
                                	**type**\:  :py:class:`OspfRouteLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevel>`
                                
                                .. attribute:: ospf_internal
                                
                                	OSPF\_Internal route type
                                	**type**\: bool
                                
                                .. attribute:: ospf_external
                                
                                	OSPF external route types
                                	**type**\:  :py:class:`OspfRouteLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevel>`
                                
                                .. attribute:: ospf_nssa_level
                                
                                	OSPF NSSA external route types
                                	**type**\:  :py:class:`OspfRouteLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevel>`
                                
                                .. attribute:: route_policy_name
                                
                                	Routing policy name
                                	**type**\: str
                                
                                .. attribute:: bgp_preserve_med
                                
                                	Preserve MED of BGP routes
                                	**type**\: bool
                                
                                .. attribute:: bgp_preserve_default_info
                                
                                	Preserve Metric and Metric Type of BGP Default Route
                                	**type**\: bool
                                
                                .. attribute:: ospf_redist_lsa_type
                                
                                	LSA type for redistributed routes
                                	**type**\:  :py:class:`OspfRedistLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRedistLsa>`
                                
                                	**default value**\: external
                                
                                .. attribute:: ospfnssa_only
                                
                                	Only redistribute to NSSA areas
                                	**type**\: bool
                                
                                .. attribute:: ospf_use_rib_metric
                                
                                	Use metric from RIB for redistributed routes
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute.ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip, self).__init__()

                                    self.yang_name = "connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip"
                                    self.yang_parent_name = "redistribute"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self.is_presence_container = True
                                    self._leafs = OrderedDict([
                                        ('classful', YLeaf(YType.boolean, 'classful')),
                                        ('default_redistributed_route_metric', YLeaf(YType.uint32, 'default-redistributed-route-metric')),
                                        ('tag', YLeaf(YType.uint32, 'tag')),
                                        ('metric_type', YLeaf(YType.enumeration, 'metric-type')),
                                        ('eigrp_route_type', YLeaf(YType.enumeration, 'eigrp-route-type')),
                                        ('isis_levels', YLeaf(YType.enumeration, 'isis-levels')),
                                        ('ospf_internal', YLeaf(YType.boolean, 'ospf-internal')),
                                        ('ospf_external', YLeaf(YType.enumeration, 'ospf-external')),
                                        ('ospf_nssa_level', YLeaf(YType.enumeration, 'ospf-nssa-level')),
                                        ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
                                        ('bgp_preserve_med', YLeaf(YType.boolean, 'bgp-preserve-med')),
                                        ('bgp_preserve_default_info', YLeaf(YType.boolean, 'bgp-preserve-default-info')),
                                        ('ospf_redist_lsa_type', YLeaf(YType.enumeration, 'ospf-redist-lsa-type')),
                                        ('ospfnssa_only', YLeaf(YType.boolean, 'ospfnssa-only')),
                                        ('ospf_use_rib_metric', YLeaf(YType.boolean, 'ospf-use-rib-metric')),
                                    ])
                                    self.classful = None
                                    self.default_redistributed_route_metric = None
                                    self.tag = None
                                    self.metric_type = None
                                    self.eigrp_route_type = None
                                    self.isis_levels = None
                                    self.ospf_internal = None
                                    self.ospf_external = None
                                    self.ospf_nssa_level = None
                                    self.route_policy_name = None
                                    self.bgp_preserve_med = None
                                    self.bgp_preserve_default_info = None
                                    self.ospf_redist_lsa_type = None
                                    self.ospfnssa_only = None
                                    self.ospf_use_rib_metric = None
                                    self._segment_path = lambda: "connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute.ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip, ['classful', 'default_redistributed_route_metric', 'tag', 'metric_type', 'eigrp_route_type', 'isis_levels', 'ospf_internal', 'ospf_external', 'ospf_nssa_level', 'route_policy_name', 'bgp_preserve_med', 'bgp_preserve_default_info', 'ospf_redist_lsa_type', 'ospfnssa_only', 'ospf_use_rib_metric'], name, value)


                            class ApplicationOrIsisOrOspf(Entity):
                                """
                                application or isis or ospf
                                
                                .. attribute:: instance_name  (key)
                                
                                	OSPF or ISIS process name or protocol name\: bgp, eigrp, connected
                                	**type**\: str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: classful
                                
                                	Disallow subnetting
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: default_redistributed_route_metric
                                
                                	Default metric for routes being redistributed into OSPF
                                	**type**\: int
                                
                                	**range:** 1..16777214
                                
                                .. attribute:: tag
                                
                                	Set tag for routes redistributed into OSPF
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: metric_type
                                
                                	Set OSPF External metric type
                                	**type**\:  :py:class:`OspfLinkStateMetric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetric>`
                                
                                .. attribute:: eigrp_route_type
                                
                                	EIGRP route type
                                	**type**\:  :py:class:`OspfEigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfEigrpRoute>`
                                
                                .. attribute:: isis_levels
                                
                                	Levels of ISIS routes
                                	**type**\:  :py:class:`OspfRouteLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevel>`
                                
                                .. attribute:: ospf_internal
                                
                                	OSPF\_Internal route type
                                	**type**\: bool
                                
                                .. attribute:: ospf_external
                                
                                	OSPF external route types
                                	**type**\:  :py:class:`OspfRouteLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevel>`
                                
                                .. attribute:: ospf_nssa_level
                                
                                	OSPF NSSA external route types
                                	**type**\:  :py:class:`OspfRouteLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevel>`
                                
                                .. attribute:: route_policy_name
                                
                                	Routing policy name
                                	**type**\: str
                                
                                .. attribute:: bgp_preserve_med
                                
                                	Preserve MED of BGP routes
                                	**type**\: bool
                                
                                .. attribute:: bgp_preserve_default_info
                                
                                	Preserve Metric and Metric Type of BGP Default Route
                                	**type**\: bool
                                
                                .. attribute:: ospf_redist_lsa_type
                                
                                	LSA type for redistributed routes
                                	**type**\:  :py:class:`OspfRedistLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRedistLsa>`
                                
                                	**default value**\: external
                                
                                .. attribute:: ospfnssa_only
                                
                                	Only redistribute to NSSA areas
                                	**type**\: bool
                                
                                .. attribute:: ospf_use_rib_metric
                                
                                	Use metric from RIB for redistributed routes
                                	**type**\: bool
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute.ApplicationOrIsisOrOspf, self).__init__()

                                    self.yang_name = "application-or-isis-or-ospf"
                                    self.yang_parent_name = "redistribute"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['instance_name']
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('instance_name', YLeaf(YType.str, 'instance-name')),
                                        ('classful', YLeaf(YType.boolean, 'classful')),
                                        ('default_redistributed_route_metric', YLeaf(YType.uint32, 'default-redistributed-route-metric')),
                                        ('tag', YLeaf(YType.uint32, 'tag')),
                                        ('metric_type', YLeaf(YType.enumeration, 'metric-type')),
                                        ('eigrp_route_type', YLeaf(YType.enumeration, 'eigrp-route-type')),
                                        ('isis_levels', YLeaf(YType.enumeration, 'isis-levels')),
                                        ('ospf_internal', YLeaf(YType.boolean, 'ospf-internal')),
                                        ('ospf_external', YLeaf(YType.enumeration, 'ospf-external')),
                                        ('ospf_nssa_level', YLeaf(YType.enumeration, 'ospf-nssa-level')),
                                        ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
                                        ('bgp_preserve_med', YLeaf(YType.boolean, 'bgp-preserve-med')),
                                        ('bgp_preserve_default_info', YLeaf(YType.boolean, 'bgp-preserve-default-info')),
                                        ('ospf_redist_lsa_type', YLeaf(YType.enumeration, 'ospf-redist-lsa-type')),
                                        ('ospfnssa_only', YLeaf(YType.boolean, 'ospfnssa-only')),
                                        ('ospf_use_rib_metric', YLeaf(YType.boolean, 'ospf-use-rib-metric')),
                                    ])
                                    self.instance_name = None
                                    self.classful = None
                                    self.default_redistributed_route_metric = None
                                    self.tag = None
                                    self.metric_type = None
                                    self.eigrp_route_type = None
                                    self.isis_levels = None
                                    self.ospf_internal = None
                                    self.ospf_external = None
                                    self.ospf_nssa_level = None
                                    self.route_policy_name = None
                                    self.bgp_preserve_med = None
                                    self.bgp_preserve_default_info = None
                                    self.ospf_redist_lsa_type = None
                                    self.ospfnssa_only = None
                                    self.ospf_use_rib_metric = None
                                    self._segment_path = lambda: "application-or-isis-or-ospf" + "[instance-name='" + str(self.instance_name) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute.ApplicationOrIsisOrOspf, ['instance_name', 'classful', 'default_redistributed_route_metric', 'tag', 'metric_type', 'eigrp_route_type', 'isis_levels', 'ospf_internal', 'ospf_external', 'ospf_nssa_level', 'route_policy_name', 'bgp_preserve_med', 'bgp_preserve_default_info', 'ospf_redist_lsa_type', 'ospfnssa_only', 'ospf_use_rib_metric'], name, value)


                            class Bgp(Entity):
                                """
                                bgp
                                
                                .. attribute:: instance_name  (key)
                                
                                	OSPF or ISIS process name or protocol name\: bgp, eigrp, connected
                                	**type**\: str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: as_xx  (key)
                                
                                	First half of BGP AS number in XX.YY format. Mandatory if Protocol is BGP and must not be specified otherwise. Must be a non\-zero value if second half is zero
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: as_yy  (key)
                                
                                	Second half of BGP AS number in XX.YY format . Mandatory if Protocol is BGP or EIGRP and must not be specified otherwise. Must be a non\-zero value if first half is zero
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: classful
                                
                                	Disallow subnetting
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: default_redistributed_route_metric
                                
                                	Default metric for routes being redistributed into OSPF
                                	**type**\: int
                                
                                	**range:** 1..16777214
                                
                                .. attribute:: tag
                                
                                	Set tag for routes redistributed into OSPF
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: metric_type
                                
                                	Set OSPF External metric type
                                	**type**\:  :py:class:`OspfLinkStateMetric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetric>`
                                
                                .. attribute:: eigrp_route_type
                                
                                	EIGRP route type
                                	**type**\:  :py:class:`OspfEigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfEigrpRoute>`
                                
                                .. attribute:: isis_levels
                                
                                	Levels of ISIS routes
                                	**type**\:  :py:class:`OspfRouteLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevel>`
                                
                                .. attribute:: ospf_internal
                                
                                	OSPF\_Internal route type
                                	**type**\: bool
                                
                                .. attribute:: ospf_external
                                
                                	OSPF external route types
                                	**type**\:  :py:class:`OspfRouteLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevel>`
                                
                                .. attribute:: ospf_nssa_level
                                
                                	OSPF NSSA external route types
                                	**type**\:  :py:class:`OspfRouteLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevel>`
                                
                                .. attribute:: route_policy_name
                                
                                	Routing policy name
                                	**type**\: str
                                
                                .. attribute:: bgp_preserve_med
                                
                                	Preserve MED of BGP routes
                                	**type**\: bool
                                
                                .. attribute:: bgp_preserve_default_info
                                
                                	Preserve Metric and Metric Type of BGP Default Route
                                	**type**\: bool
                                
                                .. attribute:: ospf_redist_lsa_type
                                
                                	LSA type for redistributed routes
                                	**type**\:  :py:class:`OspfRedistLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRedistLsa>`
                                
                                	**default value**\: external
                                
                                .. attribute:: ospfnssa_only
                                
                                	Only redistribute to NSSA areas
                                	**type**\: bool
                                
                                .. attribute:: ospf_use_rib_metric
                                
                                	Use metric from RIB for redistributed routes
                                	**type**\: bool
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute.Bgp, self).__init__()

                                    self.yang_name = "bgp"
                                    self.yang_parent_name = "redistribute"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['instance_name','as_xx','as_yy']
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('instance_name', YLeaf(YType.str, 'instance-name')),
                                        ('as_xx', YLeaf(YType.uint32, 'as-xx')),
                                        ('as_yy', YLeaf(YType.uint32, 'as-yy')),
                                        ('classful', YLeaf(YType.boolean, 'classful')),
                                        ('default_redistributed_route_metric', YLeaf(YType.uint32, 'default-redistributed-route-metric')),
                                        ('tag', YLeaf(YType.uint32, 'tag')),
                                        ('metric_type', YLeaf(YType.enumeration, 'metric-type')),
                                        ('eigrp_route_type', YLeaf(YType.enumeration, 'eigrp-route-type')),
                                        ('isis_levels', YLeaf(YType.enumeration, 'isis-levels')),
                                        ('ospf_internal', YLeaf(YType.boolean, 'ospf-internal')),
                                        ('ospf_external', YLeaf(YType.enumeration, 'ospf-external')),
                                        ('ospf_nssa_level', YLeaf(YType.enumeration, 'ospf-nssa-level')),
                                        ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
                                        ('bgp_preserve_med', YLeaf(YType.boolean, 'bgp-preserve-med')),
                                        ('bgp_preserve_default_info', YLeaf(YType.boolean, 'bgp-preserve-default-info')),
                                        ('ospf_redist_lsa_type', YLeaf(YType.enumeration, 'ospf-redist-lsa-type')),
                                        ('ospfnssa_only', YLeaf(YType.boolean, 'ospfnssa-only')),
                                        ('ospf_use_rib_metric', YLeaf(YType.boolean, 'ospf-use-rib-metric')),
                                    ])
                                    self.instance_name = None
                                    self.as_xx = None
                                    self.as_yy = None
                                    self.classful = None
                                    self.default_redistributed_route_metric = None
                                    self.tag = None
                                    self.metric_type = None
                                    self.eigrp_route_type = None
                                    self.isis_levels = None
                                    self.ospf_internal = None
                                    self.ospf_external = None
                                    self.ospf_nssa_level = None
                                    self.route_policy_name = None
                                    self.bgp_preserve_med = None
                                    self.bgp_preserve_default_info = None
                                    self.ospf_redist_lsa_type = None
                                    self.ospfnssa_only = None
                                    self.ospf_use_rib_metric = None
                                    self._segment_path = lambda: "bgp" + "[instance-name='" + str(self.instance_name) + "']" + "[as-xx='" + str(self.as_xx) + "']" + "[as-yy='" + str(self.as_yy) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute.Bgp, ['instance_name', 'as_xx', 'as_yy', 'classful', 'default_redistributed_route_metric', 'tag', 'metric_type', 'eigrp_route_type', 'isis_levels', 'ospf_internal', 'ospf_external', 'ospf_nssa_level', 'route_policy_name', 'bgp_preserve_med', 'bgp_preserve_default_info', 'ospf_redist_lsa_type', 'ospfnssa_only', 'ospf_use_rib_metric'], name, value)


                            class Eigrp(Entity):
                                """
                                eigrp
                                
                                .. attribute:: instance_name  (key)
                                
                                	OSPF or ISIS process name or protocol name\: bgp, eigrp, connected
                                	**type**\: str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: as_xx  (key)
                                
                                	First half of BGP AS number in XX.YY format. Mandatory if Protocol is BGP and must not be specified otherwise. Must be a non\-zero value if second half is zero
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: classful
                                
                                	Disallow subnetting
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: default_redistributed_route_metric
                                
                                	Default metric for routes being redistributed into OSPF
                                	**type**\: int
                                
                                	**range:** 1..16777214
                                
                                .. attribute:: tag
                                
                                	Set tag for routes redistributed into OSPF
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: metric_type
                                
                                	Set OSPF External metric type
                                	**type**\:  :py:class:`OspfLinkStateMetric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetric>`
                                
                                .. attribute:: eigrp_route_type
                                
                                	EIGRP route type
                                	**type**\:  :py:class:`OspfEigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfEigrpRoute>`
                                
                                .. attribute:: isis_levels
                                
                                	Levels of ISIS routes
                                	**type**\:  :py:class:`OspfRouteLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevel>`
                                
                                .. attribute:: ospf_internal
                                
                                	OSPF\_Internal route type
                                	**type**\: bool
                                
                                .. attribute:: ospf_external
                                
                                	OSPF external route types
                                	**type**\:  :py:class:`OspfRouteLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevel>`
                                
                                .. attribute:: ospf_nssa_level
                                
                                	OSPF NSSA external route types
                                	**type**\:  :py:class:`OspfRouteLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevel>`
                                
                                .. attribute:: route_policy_name
                                
                                	Routing policy name
                                	**type**\: str
                                
                                .. attribute:: bgp_preserve_med
                                
                                	Preserve MED of BGP routes
                                	**type**\: bool
                                
                                .. attribute:: bgp_preserve_default_info
                                
                                	Preserve Metric and Metric Type of BGP Default Route
                                	**type**\: bool
                                
                                .. attribute:: ospf_redist_lsa_type
                                
                                	LSA type for redistributed routes
                                	**type**\:  :py:class:`OspfRedistLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRedistLsa>`
                                
                                	**default value**\: external
                                
                                .. attribute:: ospfnssa_only
                                
                                	Only redistribute to NSSA areas
                                	**type**\: bool
                                
                                .. attribute:: ospf_use_rib_metric
                                
                                	Use metric from RIB for redistributed routes
                                	**type**\: bool
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute.Eigrp, self).__init__()

                                    self.yang_name = "eigrp"
                                    self.yang_parent_name = "redistribute"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['instance_name','as_xx']
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('instance_name', YLeaf(YType.str, 'instance-name')),
                                        ('as_xx', YLeaf(YType.uint32, 'as-xx')),
                                        ('classful', YLeaf(YType.boolean, 'classful')),
                                        ('default_redistributed_route_metric', YLeaf(YType.uint32, 'default-redistributed-route-metric')),
                                        ('tag', YLeaf(YType.uint32, 'tag')),
                                        ('metric_type', YLeaf(YType.enumeration, 'metric-type')),
                                        ('eigrp_route_type', YLeaf(YType.enumeration, 'eigrp-route-type')),
                                        ('isis_levels', YLeaf(YType.enumeration, 'isis-levels')),
                                        ('ospf_internal', YLeaf(YType.boolean, 'ospf-internal')),
                                        ('ospf_external', YLeaf(YType.enumeration, 'ospf-external')),
                                        ('ospf_nssa_level', YLeaf(YType.enumeration, 'ospf-nssa-level')),
                                        ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
                                        ('bgp_preserve_med', YLeaf(YType.boolean, 'bgp-preserve-med')),
                                        ('bgp_preserve_default_info', YLeaf(YType.boolean, 'bgp-preserve-default-info')),
                                        ('ospf_redist_lsa_type', YLeaf(YType.enumeration, 'ospf-redist-lsa-type')),
                                        ('ospfnssa_only', YLeaf(YType.boolean, 'ospfnssa-only')),
                                        ('ospf_use_rib_metric', YLeaf(YType.boolean, 'ospf-use-rib-metric')),
                                    ])
                                    self.instance_name = None
                                    self.as_xx = None
                                    self.classful = None
                                    self.default_redistributed_route_metric = None
                                    self.tag = None
                                    self.metric_type = None
                                    self.eigrp_route_type = None
                                    self.isis_levels = None
                                    self.ospf_internal = None
                                    self.ospf_external = None
                                    self.ospf_nssa_level = None
                                    self.route_policy_name = None
                                    self.bgp_preserve_med = None
                                    self.bgp_preserve_default_info = None
                                    self.ospf_redist_lsa_type = None
                                    self.ospfnssa_only = None
                                    self.ospf_use_rib_metric = None
                                    self._segment_path = lambda: "eigrp" + "[instance-name='" + str(self.instance_name) + "']" + "[as-xx='" + str(self.as_xx) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute.Eigrp, ['instance_name', 'as_xx', 'classful', 'default_redistributed_route_metric', 'tag', 'metric_type', 'eigrp_route_type', 'isis_levels', 'ospf_internal', 'ospf_external', 'ospf_nssa_level', 'route_policy_name', 'bgp_preserve_med', 'bgp_preserve_default_info', 'ospf_redist_lsa_type', 'ospfnssa_only', 'ospf_use_rib_metric'], name, value)


                class AdjacencyStagger(Entity):
                    """
                    Staggering OSPF adjacency bring up
                    
                    .. attribute:: disable
                    
                    	Disable OSPF adjacency stagger
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: initial_nbr
                    
                    	Adjacency Stagger\: Initial number of neighbors to bring up per area
                    	**type**\: int
                    
                    	**range:** 1..65535
                    
                    	**default value**\: 2
                    
                    .. attribute:: max_nbr
                    
                    	Adjacency Stagger\: Subsequent simultaneous number of neighbors to bring up
                    	**type**\: int
                    
                    	**range:** 1..65535
                    
                    	**default value**\: 64
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospf.Processes.Process.DefaultVrf.AdjacencyStagger, self).__init__()

                        self.yang_name = "adjacency-stagger"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('disable', YLeaf(YType.empty, 'disable')),
                            ('initial_nbr', YLeaf(YType.uint32, 'initial-nbr')),
                            ('max_nbr', YLeaf(YType.uint32, 'max-nbr')),
                        ])
                        self.disable = None
                        self.initial_nbr = None
                        self.max_nbr = None
                        self._segment_path = lambda: "adjacency-stagger"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AdjacencyStagger, ['disable', 'initial_nbr', 'max_nbr'], name, value)


                class MaxLsa(Entity):
                    """
                    Set max\-lsa configuration
                    
                    .. attribute:: max_lsa_limit
                    
                    	Set maximum number of non self\-generated LSAs
                    	**type**\: int
                    
                    	**range:** 1..4294967294
                    
                    	**mandatory**\: True
                    
                    .. attribute:: max_lsa_threshold
                    
                    	Set max\-lsa threshold for generating a warning message
                    	**type**\: int
                    
                    	**range:** 1..100
                    
                    .. attribute:: max_lsa_warning_only
                    
                    	Only give warning message when limit is exceeded
                    	**type**\: bool
                    
                    .. attribute:: max_lsa_ignore_time
                    
                    	Set time during which all adjacencies are suppressed
                    	**type**\: int
                    
                    	**range:** 1..35791394
                    
                    .. attribute:: max_lsa_ignore_count
                    
                    	Set count on how many times adjacencies can be suppressed
                    	**type**\: int
                    
                    	**range:** 1..4294967294
                    
                    .. attribute:: max_lsa_reset_time
                    
                    	Set number of minutes after which ignore\-count is reset to zero
                    	**type**\: int
                    
                    	**range:** 2..71582788
                    
                    	**units**\: minute
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospf.Processes.Process.DefaultVrf.MaxLsa, self).__init__()

                        self.yang_name = "max-lsa"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self.is_presence_container = True
                        self._leafs = OrderedDict([
                            ('max_lsa_limit', YLeaf(YType.uint32, 'max-lsa-limit')),
                            ('max_lsa_threshold', YLeaf(YType.uint32, 'max-lsa-threshold')),
                            ('max_lsa_warning_only', YLeaf(YType.boolean, 'max-lsa-warning-only')),
                            ('max_lsa_ignore_time', YLeaf(YType.uint32, 'max-lsa-ignore-time')),
                            ('max_lsa_ignore_count', YLeaf(YType.uint32, 'max-lsa-ignore-count')),
                            ('max_lsa_reset_time', YLeaf(YType.uint32, 'max-lsa-reset-time')),
                        ])
                        self.max_lsa_limit = None
                        self.max_lsa_threshold = None
                        self.max_lsa_warning_only = None
                        self.max_lsa_ignore_time = None
                        self.max_lsa_ignore_count = None
                        self.max_lsa_reset_time = None
                        self._segment_path = lambda: "max-lsa"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.MaxLsa, ['max_lsa_limit', 'max_lsa_threshold', 'max_lsa_warning_only', 'max_lsa_ignore_time', 'max_lsa_ignore_count', 'max_lsa_reset_time'], name, value)


                class AutoCost(Entity):
                    """
                    Controls automatic cost based on bandwidth
                    
                    .. attribute:: disable
                    
                    	Disabling auto costing
                    	**type**\: bool
                    
                    	**default value**\: false
                    
                    .. attribute:: bandwidth
                    
                    	The reference bandwidth in terms of Mbits per second
                    	**type**\: int
                    
                    	**range:** 1..4294967
                    
                    	**units**\: Mbit/s
                    
                    	**default value**\: 100
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospf.Processes.Process.DefaultVrf.AutoCost, self).__init__()

                        self.yang_name = "auto-cost"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('disable', YLeaf(YType.boolean, 'disable')),
                            ('bandwidth', YLeaf(YType.uint32, 'bandwidth')),
                        ])
                        self.disable = None
                        self.bandwidth = None
                        self._segment_path = lambda: "auto-cost"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AutoCost, ['disable', 'bandwidth'], name, value)


                class Ucmp(Entity):
                    """
                    Unequal Cost Multi\-ptah configuration
                    
                    .. attribute:: enable
                    
                    	UCMP feature enable configuration
                    	**type**\:  :py:class:`Enable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Ucmp.Enable>`
                    
                    .. attribute:: delay_interval
                    
                    	Delay in msecs between primary SPF and UCMP computation
                    	**type**\: int
                    
                    	**range:** 1..5000
                    
                    	**units**\: millisecond
                    
                    	**default value**\: 100
                    
                    .. attribute:: exclude_interfaces
                    
                    	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                    	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Ucmp.ExcludeInterfaces>`
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospf.Processes.Process.DefaultVrf.Ucmp, self).__init__()

                        self.yang_name = "ucmp"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("enable", ("enable", Ospf.Processes.Process.DefaultVrf.Ucmp.Enable)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.DefaultVrf.Ucmp.ExcludeInterfaces))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('delay_interval', YLeaf(YType.uint32, 'delay-interval')),
                        ])
                        self.delay_interval = None

                        self.enable = Ospf.Processes.Process.DefaultVrf.Ucmp.Enable()
                        self.enable.parent = self
                        self._children_name_map["enable"] = "enable"
                        self._children_yang_names.add("enable")

                        self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.Ucmp.ExcludeInterfaces()
                        self.exclude_interfaces.parent = self
                        self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                        self._children_yang_names.add("exclude-interfaces")
                        self._segment_path = lambda: "ucmp"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.Ucmp, ['delay_interval'], name, value)


                    class Enable(Entity):
                        """
                        UCMP feature enable configuration
                        
                        .. attribute:: variance
                        
                        	Value of variance
                        	**type**\: int
                        
                        	**range:** 101..10000
                        
                        	**default value**\: 200
                        
                        .. attribute:: prefix_list_name
                        
                        	Name of the Prefix List
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.Ucmp.Enable, self).__init__()

                            self.yang_name = "enable"
                            self.yang_parent_name = "ucmp"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('variance', YLeaf(YType.uint32, 'variance')),
                                ('prefix_list_name', YLeaf(YType.str, 'prefix-list-name')),
                            ])
                            self.variance = None
                            self.prefix_list_name = None
                            self._segment_path = lambda: "enable"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.Ucmp.Enable, ['variance', 'prefix_list_name'], name, value)


                    class ExcludeInterfaces(Entity):
                        """
                        Fast\-reroute per\-link/per\-prefix or UCMP exclude
                        interface configuration
                        
                        .. attribute:: exclude_interface
                        
                        	Exclude an interface from becoming a backup or UCMP
                        	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Ucmp.ExcludeInterfaces.ExcludeInterface>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.Ucmp.ExcludeInterfaces, self).__init__()

                            self.yang_name = "exclude-interfaces"
                            self.yang_parent_name = "ucmp"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.DefaultVrf.Ucmp.ExcludeInterfaces.ExcludeInterface))])
                            self._leafs = OrderedDict()

                            self.exclude_interface = YList(self)
                            self._segment_path = lambda: "exclude-interfaces"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.Ucmp.ExcludeInterfaces, [], name, value)


                        class ExcludeInterface(Entity):
                            """
                            Exclude an interface from becoming a backup or
                            UCMP
                            
                            .. attribute:: interface_name  (key)
                            
                            	Interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.DefaultVrf.Ucmp.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                self.yang_name = "exclude-interface"
                                self.yang_parent_name = "exclude-interfaces"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['interface_name']
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                                ])
                                self.interface_name = None
                                self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.Ucmp.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                class FastReroute(Entity):
                    """
                    Fast\-reroute instance scoped parameters
                    
                    .. attribute:: per_link
                    
                    	Fast\-reroute per\-link global configuration
                    	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.FastReroute.PerLink>`
                    
                    .. attribute:: per_prefix
                    
                    	Fast\-reroute per\-prefix global configuration
                    	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.FastReroute.PerPrefix>`
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospf.Processes.Process.DefaultVrf.FastReroute, self).__init__()

                        self.yang_name = "fast-reroute"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("per-link", ("per_link", Ospf.Processes.Process.DefaultVrf.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospf.Processes.Process.DefaultVrf.FastReroute.PerPrefix))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict()

                        self.per_link = Ospf.Processes.Process.DefaultVrf.FastReroute.PerLink()
                        self.per_link.parent = self
                        self._children_name_map["per_link"] = "per-link"
                        self._children_yang_names.add("per-link")

                        self.per_prefix = Ospf.Processes.Process.DefaultVrf.FastReroute.PerPrefix()
                        self.per_prefix.parent = self
                        self._children_name_map["per_prefix"] = "per-prefix"
                        self._children_yang_names.add("per-prefix")
                        self._segment_path = lambda: "fast-reroute"


                    class PerLink(Entity):
                        """
                        Fast\-reroute per\-link global configuration
                        
                        .. attribute:: priority
                        
                        	Fast\-reroute per\-link/per\-prefix priority\-limit command
                        	**type**\:  :py:class:`OspfFastReroutePriority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastReroutePriority>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.FastReroute.PerLink, self).__init__()

                            self.yang_name = "per-link"
                            self.yang_parent_name = "fast-reroute"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('priority', YLeaf(YType.enumeration, 'priority')),
                            ])
                            self.priority = None
                            self._segment_path = lambda: "per-link"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.FastReroute.PerLink, ['priority'], name, value)


                    class PerPrefix(Entity):
                        """
                        Fast\-reroute per\-prefix global configuration
                        
                        .. attribute:: tiebreakers
                        
                        	Fast\-reroute tiebreakers configurations
                        	**type**\:  :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers>`
                        
                        .. attribute:: load_sharing_disable
                        
                        	Disable load sharing between multiple backups
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: priority
                        
                        	Fast\-reroute per\-link/per\-prefix priority\-limit command
                        	**type**\:  :py:class:`OspfFastReroutePriority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastReroutePriority>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.FastReroute.PerPrefix, self).__init__()

                            self.yang_name = "per-prefix"
                            self.yang_parent_name = "fast-reroute"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("tiebreakers", ("tiebreakers", Ospf.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('load_sharing_disable', YLeaf(YType.empty, 'load-sharing-disable')),
                                ('priority', YLeaf(YType.enumeration, 'priority')),
                            ])
                            self.load_sharing_disable = None
                            self.priority = None

                            self.tiebreakers = Ospf.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers()
                            self.tiebreakers.parent = self
                            self._children_name_map["tiebreakers"] = "tiebreakers"
                            self._children_yang_names.add("tiebreakers")
                            self._segment_path = lambda: "per-prefix"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.FastReroute.PerPrefix, ['load_sharing_disable', 'priority'], name, value)


                        class Tiebreakers(Entity):
                            """
                            Fast\-reroute tiebreakers configurations
                            
                            .. attribute:: tiebreaker
                            
                            	Fast\-reroute tiebreakers configuration
                            	**type**\: list of  		 :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers, self).__init__()

                                self.yang_name = "tiebreakers"
                                self.yang_parent_name = "per-prefix"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("tiebreaker", ("tiebreaker", Ospf.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker))])
                                self._leafs = OrderedDict()

                                self.tiebreaker = YList(self)
                                self._segment_path = lambda: "tiebreakers"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers, [], name, value)


                            class Tiebreaker(Entity):
                                """
                                Fast\-reroute tiebreakers configuration
                                
                                .. attribute:: tiebreaker_type  (key)
                                
                                	Tiebreaker type
                                	**type**\:  :py:class:`OspfFastRerouteTiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakers>`
                                
                                .. attribute:: tiebreaker_index
                                
                                	Index value for a tiebreaker, 0 to disable
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                	**mandatory**\: True
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, self).__init__()

                                    self.yang_name = "tiebreaker"
                                    self.yang_parent_name = "tiebreakers"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['tiebreaker_type']
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('tiebreaker_type', YLeaf(YType.enumeration, 'tiebreaker-type')),
                                        ('tiebreaker_index', YLeaf(YType.uint32, 'tiebreaker-index')),
                                    ])
                                    self.tiebreaker_type = None
                                    self.tiebreaker_index = None
                                    self._segment_path = lambda: "tiebreaker" + "[tiebreaker-type='" + str(self.tiebreaker_type) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, ['tiebreaker_type', 'tiebreaker_index'], name, value)


                class SummaryPrefixes(Entity):
                    """
                    Configure IP prefix summary
                    
                    .. attribute:: summary_prefix_data
                    
                    	Data container
                    	**type**\:  :py:class:`SummaryPrefixData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.SummaryPrefixes.SummaryPrefixData>`
                    
                    .. attribute:: prefix_and_netmask
                    
                    	keys\: prefix, netmask
                    	**type**\: list of  		 :py:class:`PrefixAndNetmask <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.SummaryPrefixes.PrefixAndNetmask>`
                    
                    .. attribute:: prefix
                    
                    	keys\: prefix
                    	**type**\: list of  		 :py:class:`Prefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.SummaryPrefixes.Prefix>`
                    
                    .. attribute:: netmask
                    
                    	keys\: netmask
                    	**type**\: list of  		 :py:class:`Netmask <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.SummaryPrefixes.Netmask>`
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospf.Processes.Process.DefaultVrf.SummaryPrefixes, self).__init__()

                        self.yang_name = "summary-prefixes"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("summary-prefix-data", ("summary_prefix_data", Ospf.Processes.Process.DefaultVrf.SummaryPrefixes.SummaryPrefixData))])
                        self._child_list_classes = OrderedDict([("prefix-and-netmask", ("prefix_and_netmask", Ospf.Processes.Process.DefaultVrf.SummaryPrefixes.PrefixAndNetmask)), ("prefix", ("prefix", Ospf.Processes.Process.DefaultVrf.SummaryPrefixes.Prefix)), ("netmask", ("netmask", Ospf.Processes.Process.DefaultVrf.SummaryPrefixes.Netmask))])
                        self._leafs = OrderedDict()

                        self.summary_prefix_data = Ospf.Processes.Process.DefaultVrf.SummaryPrefixes.SummaryPrefixData()
                        self.summary_prefix_data.parent = self
                        self._children_name_map["summary_prefix_data"] = "summary-prefix-data"
                        self._children_yang_names.add("summary-prefix-data")

                        self.prefix_and_netmask = YList(self)
                        self.prefix = YList(self)
                        self.netmask = YList(self)
                        self._segment_path = lambda: "summary-prefixes"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.SummaryPrefixes, [], name, value)


                    class SummaryPrefixData(Entity):
                        """
                        Data container.
                        
                        .. attribute:: not_advertise
                        
                        	Do not advertise when translating OSPF type\-7 LSA
                        	**type**\: bool
                        
                        	**default value**\: false
                        
                        .. attribute:: tag
                        
                        	32\-bit tag value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.SummaryPrefixes.SummaryPrefixData, self).__init__()

                            self.yang_name = "summary-prefix-data"
                            self.yang_parent_name = "summary-prefixes"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('not_advertise', YLeaf(YType.boolean, 'not-advertise')),
                                ('tag', YLeaf(YType.uint32, 'tag')),
                            ])
                            self.not_advertise = None
                            self.tag = None
                            self._segment_path = lambda: "summary-prefix-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.SummaryPrefixes.SummaryPrefixData, ['not_advertise', 'tag'], name, value)


                    class PrefixAndNetmask(Entity):
                        """
                        keys\: prefix, netmask
                        
                        .. attribute:: prefix  (key)
                        
                        	IP summary prefix
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: netmask  (key)
                        
                        	Summary netmask
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: not_advertise
                        
                        	Do not advertise when translating OSPF type\-7 LSA
                        	**type**\: bool
                        
                        	**default value**\: false
                        
                        .. attribute:: tag
                        
                        	32\-bit tag value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.SummaryPrefixes.PrefixAndNetmask, self).__init__()

                            self.yang_name = "prefix-and-netmask"
                            self.yang_parent_name = "summary-prefixes"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['prefix','netmask']
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('prefix', YLeaf(YType.str, 'prefix')),
                                ('netmask', YLeaf(YType.str, 'netmask')),
                                ('not_advertise', YLeaf(YType.boolean, 'not-advertise')),
                                ('tag', YLeaf(YType.uint32, 'tag')),
                            ])
                            self.prefix = None
                            self.netmask = None
                            self.not_advertise = None
                            self.tag = None
                            self._segment_path = lambda: "prefix-and-netmask" + "[prefix='" + str(self.prefix) + "']" + "[netmask='" + str(self.netmask) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.SummaryPrefixes.PrefixAndNetmask, ['prefix', 'netmask', 'not_advertise', 'tag'], name, value)


                    class Prefix(Entity):
                        """
                        keys\: prefix
                        
                        .. attribute:: prefix  (key)
                        
                        	IP summary prefix
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: not_advertise
                        
                        	Do not advertise when translating OSPF type\-7 LSA
                        	**type**\: bool
                        
                        	**default value**\: false
                        
                        .. attribute:: tag
                        
                        	32\-bit tag value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.SummaryPrefixes.Prefix, self).__init__()

                            self.yang_name = "prefix"
                            self.yang_parent_name = "summary-prefixes"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['prefix']
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('prefix', YLeaf(YType.str, 'prefix')),
                                ('not_advertise', YLeaf(YType.boolean, 'not-advertise')),
                                ('tag', YLeaf(YType.uint32, 'tag')),
                            ])
                            self.prefix = None
                            self.not_advertise = None
                            self.tag = None
                            self._segment_path = lambda: "prefix" + "[prefix='" + str(self.prefix) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.SummaryPrefixes.Prefix, ['prefix', 'not_advertise', 'tag'], name, value)


                    class Netmask(Entity):
                        """
                        keys\: netmask
                        
                        .. attribute:: netmask  (key)
                        
                        	Summary netmask
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: not_advertise
                        
                        	Do not advertise when translating OSPF type\-7 LSA
                        	**type**\: bool
                        
                        	**default value**\: false
                        
                        .. attribute:: tag
                        
                        	32\-bit tag value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.SummaryPrefixes.Netmask, self).__init__()

                            self.yang_name = "netmask"
                            self.yang_parent_name = "summary-prefixes"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['netmask']
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('netmask', YLeaf(YType.str, 'netmask')),
                                ('not_advertise', YLeaf(YType.boolean, 'not-advertise')),
                                ('tag', YLeaf(YType.uint32, 'tag')),
                            ])
                            self.netmask = None
                            self.not_advertise = None
                            self.tag = None
                            self._segment_path = lambda: "netmask" + "[netmask='" + str(self.netmask) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.SummaryPrefixes.Netmask, ['netmask', 'not_advertise', 'tag'], name, value)


                class OutgoingRouteUpdates(Entity):
                    """
                    Filter outgoing routing updates
                    
                    .. attribute:: outgoing_route_update
                    
                    	Filter outgoing routing updates for a particular protocol
                    	**type**\: list of  		 :py:class:`OutgoingRouteUpdate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.OutgoingRouteUpdates.OutgoingRouteUpdate>`
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospf.Processes.Process.DefaultVrf.OutgoingRouteUpdates, self).__init__()

                        self.yang_name = "outgoing-route-updates"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("outgoing-route-update", ("outgoing_route_update", Ospf.Processes.Process.DefaultVrf.OutgoingRouteUpdates.OutgoingRouteUpdate))])
                        self._leafs = OrderedDict()

                        self.outgoing_route_update = YList(self)
                        self._segment_path = lambda: "outgoing-route-updates"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.OutgoingRouteUpdates, [], name, value)


                    class OutgoingRouteUpdate(Entity):
                        """
                        Filter outgoing routing updates for a
                        particular protocol
                        
                        .. attribute:: protocol_name  (key)
                        
                        	Distribute list protocol type
                        	**type**\:  :py:class:`OspfDistListProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfDistListProtocol>`
                        
                        .. attribute:: access_list_name
                        
                        	Access Control List name
                        	**type**\: str
                        
                        .. attribute:: as_xx
                        
                        	First half of BGP AS number in XX.YY format.  Mandatory if Protocol is BGP and must not be specified otherwise. Must be a non\-zero value if second half is zero
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: as_yy
                        
                        	Second half of BGP AS number in XX.YY format. Mandatory if Protocol is BGP and must not be specified otherwise. Must be a non\-zero value if first half is zero
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ospf_process_name
                        
                        	OSPF process name
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.OutgoingRouteUpdates.OutgoingRouteUpdate, self).__init__()

                            self.yang_name = "outgoing-route-update"
                            self.yang_parent_name = "outgoing-route-updates"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['protocol_name']
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('protocol_name', YLeaf(YType.enumeration, 'protocol-name')),
                                ('access_list_name', YLeaf(YType.str, 'access-list-name')),
                                ('as_xx', YLeaf(YType.uint32, 'as-xx')),
                                ('as_yy', YLeaf(YType.uint32, 'as-yy')),
                                ('ospf_process_name', YLeaf(YType.str, 'ospf-process-name')),
                            ])
                            self.protocol_name = None
                            self.access_list_name = None
                            self.as_xx = None
                            self.as_yy = None
                            self.ospf_process_name = None
                            self._segment_path = lambda: "outgoing-route-update" + "[protocol-name='" + str(self.protocol_name) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.OutgoingRouteUpdates.OutgoingRouteUpdate, ['protocol_name', 'access_list_name', 'as_xx', 'as_yy', 'ospf_process_name'], name, value)


                class Distance(Entity):
                    """
                    Administrative distance configuration
                    
                    .. attribute:: ospf_distance
                    
                    	OSPF distance configuration
                    	**type**\:  :py:class:`OspfDistance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Distance.OspfDistance>`
                    
                    .. attribute:: ip_distances
                    
                    	IP specific administrative distance configuration
                    	**type**\:  :py:class:`IpDistances <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Distance.IpDistances>`
                    
                    .. attribute:: admin_distance
                    
                    	Define an administrative distance
                    	**type**\: int
                    
                    	**range:** 1..255
                    
                    	**default value**\: 110
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospf.Processes.Process.DefaultVrf.Distance, self).__init__()

                        self.yang_name = "distance"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("ospf-distance", ("ospf_distance", Ospf.Processes.Process.DefaultVrf.Distance.OspfDistance)), ("ip-distances", ("ip_distances", Ospf.Processes.Process.DefaultVrf.Distance.IpDistances))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('admin_distance', YLeaf(YType.uint32, 'admin-distance')),
                        ])
                        self.admin_distance = None

                        self.ospf_distance = Ospf.Processes.Process.DefaultVrf.Distance.OspfDistance()
                        self.ospf_distance.parent = self
                        self._children_name_map["ospf_distance"] = "ospf-distance"
                        self._children_yang_names.add("ospf-distance")

                        self.ip_distances = Ospf.Processes.Process.DefaultVrf.Distance.IpDistances()
                        self.ip_distances.parent = self
                        self._children_name_map["ip_distances"] = "ip-distances"
                        self._children_yang_names.add("ip-distances")
                        self._segment_path = lambda: "distance"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.Distance, ['admin_distance'], name, value)


                    class OspfDistance(Entity):
                        """
                        OSPF distance configuration
                        
                        .. attribute:: intra_area
                        
                        	Distance for intra\-area routes
                        	**type**\: int
                        
                        	**range:** 1..255
                        
                        	**default value**\: 110
                        
                        .. attribute:: inter_area
                        
                        	Distance for inter\-area routes
                        	**type**\: int
                        
                        	**range:** 1..255
                        
                        	**default value**\: 110
                        
                        .. attribute:: external_routes
                        
                        	Distance for external type 5 and type 7 routes
                        	**type**\: int
                        
                        	**range:** 1..255
                        
                        	**default value**\: 110
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.Distance.OspfDistance, self).__init__()

                            self.yang_name = "ospf-distance"
                            self.yang_parent_name = "distance"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('intra_area', YLeaf(YType.uint32, 'intra-area')),
                                ('inter_area', YLeaf(YType.uint32, 'inter-area')),
                                ('external_routes', YLeaf(YType.uint32, 'external-routes')),
                            ])
                            self.intra_area = None
                            self.inter_area = None
                            self.external_routes = None
                            self._segment_path = lambda: "ospf-distance"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.Distance.OspfDistance, ['intra_area', 'inter_area', 'external_routes'], name, value)


                    class IpDistances(Entity):
                        """
                        IP specific administrative distance
                        configuration
                        
                        .. attribute:: ip_distance
                        
                        	Administrative distance configuration for a particular IP address
                        	**type**\: list of  		 :py:class:`IpDistance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Distance.IpDistances.IpDistance>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.Distance.IpDistances, self).__init__()

                            self.yang_name = "ip-distances"
                            self.yang_parent_name = "distance"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("ip-distance", ("ip_distance", Ospf.Processes.Process.DefaultVrf.Distance.IpDistances.IpDistance))])
                            self._leafs = OrderedDict()

                            self.ip_distance = YList(self)
                            self._segment_path = lambda: "ip-distances"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.Distance.IpDistances, [], name, value)


                        class IpDistance(Entity):
                            """
                            Administrative distance configuration for a
                            particular IP address
                            
                            .. attribute:: address  (key)
                            
                            	IP source address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: wildcard  (key)
                            
                            	IP wild card bits \-\- inverted mask
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: distance
                            
                            	Administrative distance
                            	**type**\: int
                            
                            	**range:** 1..255
                            
                            	**default value**\: 110
                            
                            .. attribute:: access_list_name
                            
                            	Access Control List name
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.DefaultVrf.Distance.IpDistances.IpDistance, self).__init__()

                                self.yang_name = "ip-distance"
                                self.yang_parent_name = "ip-distances"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['address','wildcard']
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('address', YLeaf(YType.str, 'address')),
                                    ('wildcard', YLeaf(YType.str, 'wildcard')),
                                    ('distance', YLeaf(YType.uint32, 'distance')),
                                    ('access_list_name', YLeaf(YType.str, 'access-list-name')),
                                ])
                                self.address = None
                                self.wildcard = None
                                self.distance = None
                                self.access_list_name = None
                                self._segment_path = lambda: "ip-distance" + "[address='" + str(self.address) + "']" + "[wildcard='" + str(self.wildcard) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.Distance.IpDistances.IpDistance, ['address', 'wildcard', 'distance', 'access_list_name'], name, value)


                class AreaAddresses(Entity):
                    """
                    Area configuration
                    
                    .. attribute:: area_address
                    
                    	Configuration for a particular area
                    	**type**\: list of  		 :py:class:`AreaAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress>`
                    
                    .. attribute:: area_area_id
                    
                    	Configuration for a particular area
                    	**type**\: list of  		 :py:class:`AreaAreaId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId>`
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses, self).__init__()

                        self.yang_name = "area-addresses"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("area-address", ("area_address", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress)), ("area-area-id", ("area_area_id", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId))])
                        self._leafs = OrderedDict()

                        self.area_address = YList(self)
                        self.area_area_id = YList(self)
                        self._segment_path = lambda: "area-addresses"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses, [], name, value)


                    class AreaAddress(Entity):
                        """
                        Configuration for a particular area
                        
                        .. attribute:: address  (key)
                        
                        	Area ID if in IP address format
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: virtual_link_scopes
                        
                        	Virtual Link scope configurations
                        	**type**\:  :py:class:`VirtualLinkScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes>`
                        
                        .. attribute:: sham_link_scopes
                        
                        	Sham Link scope configurations
                        	**type**\:  :py:class:`ShamLinkScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes>`
                        
                        .. attribute:: area_scope
                        
                        	Area scope configuration
                        	**type**\:  :py:class:`AreaScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope>`
                        
                        .. attribute:: name_scopes
                        
                        	Name scope configurations
                        	**type**\:  :py:class:`NameScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes>`
                        
                        .. attribute:: multi_area_interface_scopes
                        
                        	Multi Area Interface scope configurations
                        	**type**\:  :py:class:`MultiAreaInterfaceScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes>`
                        
                        .. attribute:: area_ranges
                        
                        	Summarize routes matching address/mask (border routers only)
                        	**type**\:  :py:class:`AreaRanges <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaRanges>`
                        
                        .. attribute:: nssa
                        
                        	Specify area as a NSSA area
                        	**type**\:  :py:class:`Nssa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Nssa>`
                        
                        .. attribute:: route_policy_in
                        
                        	Configure a route policy for inbound type\-3 lsa filtering
                        	**type**\: str
                        
                        .. attribute:: default_cost
                        
                        	Set the summary default\-cost of a NSSA/stub area
                        	**type**\: int
                        
                        	**range:** 1..16777215
                        
                        	**default value**\: 1
                        
                        .. attribute:: route_policy_out
                        
                        	Configure a route policy for outbound type\-3 lsa filtering
                        	**type**\: str
                        
                        .. attribute:: stub
                        
                        	Specify the area as a stub area (send summary LSA stub area)
                        	**type**\: bool
                        
                        .. attribute:: mpls_traffic_eng
                        
                        	Configure an OSPF area to run MPLS Traffic Engineering
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: external_out
                        
                        	Enable/Disable an OSPF area to advertise intra\-area prefixes out of this area as external
                        	**type**\: bool
                        
                        .. attribute:: summary_in
                        
                        	Enable/Disable an OSPF area to advertise external prefixes into this area as summary
                        	**type**\: bool
                        
                        .. attribute:: segment_routing
                        
                        	segment\-routing configuration Applicable only in Default VRF
                        	**type**\:  :py:class:`OspfSegmentRouting <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRouting>`
                        
                        .. attribute:: running
                        
                        	Enable routing on an IP network
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress, self).__init__()

                            self.yang_name = "area-address"
                            self.yang_parent_name = "area-addresses"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['address']
                            self._child_container_classes = OrderedDict([("virtual-link-scopes", ("virtual_link_scopes", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes)), ("sham-link-scopes", ("sham_link_scopes", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes)), ("area-scope", ("area_scope", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope)), ("name-scopes", ("name_scopes", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes)), ("multi-area-interface-scopes", ("multi_area_interface_scopes", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes)), ("area-ranges", ("area_ranges", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaRanges)), ("nssa", ("nssa", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Nssa))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('address', YLeaf(YType.str, 'address')),
                                ('route_policy_in', YLeaf(YType.str, 'route-policy-in')),
                                ('default_cost', YLeaf(YType.uint32, 'default-cost')),
                                ('route_policy_out', YLeaf(YType.str, 'route-policy-out')),
                                ('stub', YLeaf(YType.boolean, 'stub')),
                                ('mpls_traffic_eng', YLeaf(YType.empty, 'mpls-traffic-eng')),
                                ('external_out', YLeaf(YType.boolean, 'external-out')),
                                ('summary_in', YLeaf(YType.boolean, 'summary-in')),
                                ('segment_routing', YLeaf(YType.enumeration, 'segment-routing')),
                                ('running', YLeaf(YType.empty, 'running')),
                            ])
                            self.address = None
                            self.route_policy_in = None
                            self.default_cost = None
                            self.route_policy_out = None
                            self.stub = None
                            self.mpls_traffic_eng = None
                            self.external_out = None
                            self.summary_in = None
                            self.segment_routing = None
                            self.running = None

                            self.virtual_link_scopes = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes()
                            self.virtual_link_scopes.parent = self
                            self._children_name_map["virtual_link_scopes"] = "virtual-link-scopes"
                            self._children_yang_names.add("virtual-link-scopes")

                            self.sham_link_scopes = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes()
                            self.sham_link_scopes.parent = self
                            self._children_name_map["sham_link_scopes"] = "sham-link-scopes"
                            self._children_yang_names.add("sham-link-scopes")

                            self.area_scope = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope()
                            self.area_scope.parent = self
                            self._children_name_map["area_scope"] = "area-scope"
                            self._children_yang_names.add("area-scope")

                            self.name_scopes = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes()
                            self.name_scopes.parent = self
                            self._children_name_map["name_scopes"] = "name-scopes"
                            self._children_yang_names.add("name-scopes")

                            self.multi_area_interface_scopes = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes()
                            self.multi_area_interface_scopes.parent = self
                            self._children_name_map["multi_area_interface_scopes"] = "multi-area-interface-scopes"
                            self._children_yang_names.add("multi-area-interface-scopes")

                            self.area_ranges = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaRanges()
                            self.area_ranges.parent = self
                            self._children_name_map["area_ranges"] = "area-ranges"
                            self._children_yang_names.add("area-ranges")

                            self.nssa = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Nssa()
                            self.nssa.parent = self
                            self._children_name_map["nssa"] = "nssa"
                            self._children_yang_names.add("nssa")
                            self._segment_path = lambda: "area-address" + "[address='" + str(self.address) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress, ['address', 'route_policy_in', 'default_cost', 'route_policy_out', 'stub', 'mpls_traffic_eng', 'external_out', 'summary_in', 'segment_routing', 'running'], name, value)


                        class VirtualLinkScopes(Entity):
                            """
                            Virtual Link scope configurations
                            
                            .. attribute:: virtual_link_scope
                            
                            	Virtual Link configuration
                            	**type**\: list of  		 :py:class:`VirtualLinkScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes, self).__init__()

                                self.yang_name = "virtual-link-scopes"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("virtual-link-scope", ("virtual_link_scope", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope))])
                                self._leafs = OrderedDict()

                                self.virtual_link_scope = YList(self)
                                self._segment_path = lambda: "virtual-link-scopes"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes, [], name, value)


                            class VirtualLinkScope(Entity):
                                """
                                Virtual Link configuration
                                
                                .. attribute:: address  (key)
                                
                                	Router ID of virtual link neighbor
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: authentication
                                
                                	Authentication
                                	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication>`
                                
                                .. attribute:: hello_interval
                                
                                	Interval between HELLO packets in seconds
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: transmit_delay
                                
                                	Number of seconds to delay transmission of LSAs
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 1
                                
                                .. attribute:: dead_interval_minimal
                                
                                	Interval after which a neighbor is declared dead
                                	**type**\:  :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal>`
                                
                                .. attribute:: retransmit_interval
                                
                                	Time in seconds between retransmitting lost link state advertisements
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 5
                                
                                .. attribute:: running
                                
                                	Enable routing on an IP network
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope, self).__init__()

                                    self.yang_name = "virtual-link-scope"
                                    self.yang_parent_name = "virtual-link-scopes"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['address']
                                    self._child_container_classes = OrderedDict([("authentication", ("authentication", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication)), ("dead-interval-minimal", ("dead_interval_minimal", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('address', YLeaf(YType.str, 'address')),
                                        ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                                        ('transmit_delay', YLeaf(YType.uint32, 'transmit-delay')),
                                        ('retransmit_interval', YLeaf(YType.uint32, 'retransmit-interval')),
                                        ('running', YLeaf(YType.empty, 'running')),
                                    ])
                                    self.address = None
                                    self.hello_interval = None
                                    self.transmit_delay = None
                                    self.retransmit_interval = None
                                    self.running = None

                                    self.authentication = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication()
                                    self.authentication.parent = self
                                    self._children_name_map["authentication"] = "authentication"
                                    self._children_yang_names.add("authentication")

                                    self.dead_interval_minimal = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal()
                                    self.dead_interval_minimal.parent = self
                                    self._children_name_map["dead_interval_minimal"] = "dead-interval-minimal"
                                    self._children_yang_names.add("dead-interval-minimal")
                                    self._segment_path = lambda: "virtual-link-scope" + "[address='" + str(self.address) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope, ['address', 'hello_interval', 'transmit_delay', 'retransmit_interval', 'running'], name, value)


                                class Authentication(Entity):
                                    """
                                    Authentication
                                    
                                    .. attribute:: type
                                    
                                    	Authentication type
                                    	**type**\:  :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.Type>`
                                    
                                    .. attribute:: message_digest_keies
                                    
                                    	Message digest authentication password (key) configurations, first 16 chars used
                                    	**type**\:  :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies>`
                                    
                                    .. attribute:: key
                                    
                                    	Authentication key configuration
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication, self).__init__()

                                        self.yang_name = "authentication"
                                        self.yang_parent_name = "virtual-link-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("type", ("type", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.Type)), ("message-digest-keies", ("message_digest_keies", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('key', YLeaf(YType.str, 'key')),
                                        ])
                                        self.key = None

                                        self.type = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.Type()
                                        self.type.parent = self
                                        self._children_name_map["type"] = "type"
                                        self._children_yang_names.add("type")

                                        self.message_digest_keies = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies()
                                        self.message_digest_keies.parent = self
                                        self._children_name_map["message_digest_keies"] = "message-digest-keies"
                                        self._children_yang_names.add("message-digest-keies")
                                        self._segment_path = lambda: "authentication"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication, ['key'], name, value)


                                    class Type(Entity):
                                        """
                                        Authentication type
                                        
                                        .. attribute:: authen_type
                                        
                                        	Authentication type code 
                                        	**type**\:  :py:class:`OspfAuthentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthentication>`
                                        
                                        .. attribute:: keychain_authen_type
                                        
                                        	Keychain authentication type
                                        	**type**\:  :py:class:`OspfKeychainAuth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuth>`
                                        
                                        .. attribute:: keychain_name
                                        
                                        	Keychain name
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.Type, self).__init__()

                                            self.yang_name = "type"
                                            self.yang_parent_name = "authentication"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('authen_type', YLeaf(YType.enumeration, 'authen-type')),
                                                ('keychain_authen_type', YLeaf(YType.enumeration, 'keychain-authen-type')),
                                                ('keychain_name', YLeaf(YType.str, 'keychain-name')),
                                            ])
                                            self.authen_type = None
                                            self.keychain_authen_type = None
                                            self.keychain_name = None
                                            self._segment_path = lambda: "type"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.Type, ['authen_type', 'keychain_authen_type', 'keychain_name'], name, value)


                                    class MessageDigestKeies(Entity):
                                        """
                                        Message digest authentication password (key)
                                        configurations, first 16 chars used
                                        
                                        .. attribute:: message_digest_key
                                        
                                        	Message digest authentication password (key) configuration
                                        	**type**\: list of  		 :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies, self).__init__()

                                            self.yang_name = "message-digest-keies"
                                            self.yang_parent_name = "authentication"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("message-digest-key", ("message_digest_key", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies.MessageDigestKey))])
                                            self._leafs = OrderedDict()

                                            self.message_digest_key = YList(self)
                                            self._segment_path = lambda: "message-digest-keies"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies, [], name, value)


                                        class MessageDigestKey(Entity):
                                            """
                                            Message digest authentication password (key)
                                            configuration
                                            
                                            .. attribute:: key_id  (key)
                                            
                                            	Key ID
                                            	**type**\: int
                                            
                                            	**range:** 1..255
                                            
                                            .. attribute:: password
                                            
                                            	Password
                                            	**type**\: str
                                            
                                            	**pattern:** (!.+)\|([^!].+)
                                            
                                            	**mandatory**\: True
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies.MessageDigestKey, self).__init__()

                                                self.yang_name = "message-digest-key"
                                                self.yang_parent_name = "message-digest-keies"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['key_id']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('key_id', YLeaf(YType.uint32, 'key-id')),
                                                    ('password', YLeaf(YType.str, 'password')),
                                                ])
                                                self.key_id = None
                                                self.password = None
                                                self._segment_path = lambda: "message-digest-key" + "[key-id='" + str(self.key_id) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies.MessageDigestKey, ['key_id', 'password'], name, value)


                                class DeadIntervalMinimal(Entity):
                                    """
                                    Interval after which a neighbor is declared dead
                                    
                                    .. attribute:: interval
                                    
                                    	Interval size in seconds after which a neighbor is declared dead
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: multiplier
                                    
                                    	Number of Hellos in one second
                                    	**type**\: int
                                    
                                    	**range:** 3..20
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal, self).__init__()

                                        self.yang_name = "dead-interval-minimal"
                                        self.yang_parent_name = "virtual-link-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interval', YLeaf(YType.uint32, 'interval')),
                                            ('multiplier', YLeaf(YType.uint32, 'multiplier')),
                                        ])
                                        self.interval = None
                                        self.multiplier = None
                                        self._segment_path = lambda: "dead-interval-minimal"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal, ['interval', 'multiplier'], name, value)


                        class ShamLinkScopes(Entity):
                            """
                            Sham Link scope configurations
                            
                            .. attribute:: sham_link_scope
                            
                            	Sham Link configuration
                            	**type**\: list of  		 :py:class:`ShamLinkScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes, self).__init__()

                                self.yang_name = "sham-link-scopes"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("sham-link-scope", ("sham_link_scope", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope))])
                                self._leafs = OrderedDict()

                                self.sham_link_scope = YList(self)
                                self._segment_path = lambda: "sham-link-scopes"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes, [], name, value)


                            class ShamLinkScope(Entity):
                                """
                                Sham Link configuration
                                
                                .. attribute:: source_address  (key)
                                
                                	Address of the local sham\-link endpoint
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: destination_address  (key)
                                
                                	Address of the remote sham\-link endpoint
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: source
                                
                                	Address of the local sham\-link endpoint. Enter an IP Address
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: cost
                                
                                	Interface cost
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: authentication
                                
                                	Authentication
                                	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication>`
                                
                                .. attribute:: hello_interval
                                
                                	Interval between HELLO packets in seconds
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: transmit_delay
                                
                                	Number of seconds to delay transmission of LSAs
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 1
                                
                                .. attribute:: dead_interval_minimal
                                
                                	Interval after which a neighbor is declared dead
                                	**type**\:  :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal>`
                                
                                .. attribute:: retransmit_interval
                                
                                	Time in seconds between retransmitting lost link state advertisements
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 5
                                
                                .. attribute:: running
                                
                                	Enable routing on an IP network
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope, self).__init__()

                                    self.yang_name = "sham-link-scope"
                                    self.yang_parent_name = "sham-link-scopes"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['source_address','destination_address']
                                    self._child_container_classes = OrderedDict([("authentication", ("authentication", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication)), ("dead-interval-minimal", ("dead_interval_minimal", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('source_address', YLeaf(YType.str, 'source-address')),
                                        ('destination_address', YLeaf(YType.str, 'destination-address')),
                                        ('source', YLeaf(YType.str, 'source')),
                                        ('cost', YLeaf(YType.uint32, 'cost')),
                                        ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                                        ('transmit_delay', YLeaf(YType.uint32, 'transmit-delay')),
                                        ('retransmit_interval', YLeaf(YType.uint32, 'retransmit-interval')),
                                        ('running', YLeaf(YType.empty, 'running')),
                                    ])
                                    self.source_address = None
                                    self.destination_address = None
                                    self.source = None
                                    self.cost = None
                                    self.hello_interval = None
                                    self.transmit_delay = None
                                    self.retransmit_interval = None
                                    self.running = None

                                    self.authentication = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication()
                                    self.authentication.parent = self
                                    self._children_name_map["authentication"] = "authentication"
                                    self._children_yang_names.add("authentication")

                                    self.dead_interval_minimal = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal()
                                    self.dead_interval_minimal.parent = self
                                    self._children_name_map["dead_interval_minimal"] = "dead-interval-minimal"
                                    self._children_yang_names.add("dead-interval-minimal")
                                    self._segment_path = lambda: "sham-link-scope" + "[source-address='" + str(self.source_address) + "']" + "[destination-address='" + str(self.destination_address) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope, ['source_address', 'destination_address', 'source', 'cost', 'hello_interval', 'transmit_delay', 'retransmit_interval', 'running'], name, value)


                                class Authentication(Entity):
                                    """
                                    Authentication
                                    
                                    .. attribute:: type
                                    
                                    	Authentication type
                                    	**type**\:  :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.Type>`
                                    
                                    .. attribute:: message_digest_keies
                                    
                                    	Message digest authentication password (key) configurations, first 16 chars used
                                    	**type**\:  :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies>`
                                    
                                    .. attribute:: key
                                    
                                    	Authentication key configuration
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication, self).__init__()

                                        self.yang_name = "authentication"
                                        self.yang_parent_name = "sham-link-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("type", ("type", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.Type)), ("message-digest-keies", ("message_digest_keies", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('key', YLeaf(YType.str, 'key')),
                                        ])
                                        self.key = None

                                        self.type = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.Type()
                                        self.type.parent = self
                                        self._children_name_map["type"] = "type"
                                        self._children_yang_names.add("type")

                                        self.message_digest_keies = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies()
                                        self.message_digest_keies.parent = self
                                        self._children_name_map["message_digest_keies"] = "message-digest-keies"
                                        self._children_yang_names.add("message-digest-keies")
                                        self._segment_path = lambda: "authentication"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication, ['key'], name, value)


                                    class Type(Entity):
                                        """
                                        Authentication type
                                        
                                        .. attribute:: authen_type
                                        
                                        	Authentication type code 
                                        	**type**\:  :py:class:`OspfAuthentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthentication>`
                                        
                                        .. attribute:: keychain_authen_type
                                        
                                        	Keychain authentication type
                                        	**type**\:  :py:class:`OspfKeychainAuth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuth>`
                                        
                                        .. attribute:: keychain_name
                                        
                                        	Keychain name
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.Type, self).__init__()

                                            self.yang_name = "type"
                                            self.yang_parent_name = "authentication"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('authen_type', YLeaf(YType.enumeration, 'authen-type')),
                                                ('keychain_authen_type', YLeaf(YType.enumeration, 'keychain-authen-type')),
                                                ('keychain_name', YLeaf(YType.str, 'keychain-name')),
                                            ])
                                            self.authen_type = None
                                            self.keychain_authen_type = None
                                            self.keychain_name = None
                                            self._segment_path = lambda: "type"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.Type, ['authen_type', 'keychain_authen_type', 'keychain_name'], name, value)


                                    class MessageDigestKeies(Entity):
                                        """
                                        Message digest authentication password (key)
                                        configurations, first 16 chars used
                                        
                                        .. attribute:: message_digest_key
                                        
                                        	Message digest authentication password (key) configuration
                                        	**type**\: list of  		 :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies, self).__init__()

                                            self.yang_name = "message-digest-keies"
                                            self.yang_parent_name = "authentication"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("message-digest-key", ("message_digest_key", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies.MessageDigestKey))])
                                            self._leafs = OrderedDict()

                                            self.message_digest_key = YList(self)
                                            self._segment_path = lambda: "message-digest-keies"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies, [], name, value)


                                        class MessageDigestKey(Entity):
                                            """
                                            Message digest authentication password (key)
                                            configuration
                                            
                                            .. attribute:: key_id  (key)
                                            
                                            	Key ID
                                            	**type**\: int
                                            
                                            	**range:** 1..255
                                            
                                            .. attribute:: password
                                            
                                            	Password
                                            	**type**\: str
                                            
                                            	**pattern:** (!.+)\|([^!].+)
                                            
                                            	**mandatory**\: True
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies.MessageDigestKey, self).__init__()

                                                self.yang_name = "message-digest-key"
                                                self.yang_parent_name = "message-digest-keies"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['key_id']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('key_id', YLeaf(YType.uint32, 'key-id')),
                                                    ('password', YLeaf(YType.str, 'password')),
                                                ])
                                                self.key_id = None
                                                self.password = None
                                                self._segment_path = lambda: "message-digest-key" + "[key-id='" + str(self.key_id) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies.MessageDigestKey, ['key_id', 'password'], name, value)


                                class DeadIntervalMinimal(Entity):
                                    """
                                    Interval after which a neighbor is declared dead
                                    
                                    .. attribute:: interval
                                    
                                    	Interval size in seconds after which a neighbor is declared dead
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: multiplier
                                    
                                    	Number of Hellos in one second
                                    	**type**\: int
                                    
                                    	**range:** 3..20
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal, self).__init__()

                                        self.yang_name = "dead-interval-minimal"
                                        self.yang_parent_name = "sham-link-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interval', YLeaf(YType.uint32, 'interval')),
                                            ('multiplier', YLeaf(YType.uint32, 'multiplier')),
                                        ])
                                        self.interval = None
                                        self.multiplier = None
                                        self._segment_path = lambda: "dead-interval-minimal"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal, ['interval', 'multiplier'], name, value)


                        class AreaScope(Entity):
                            """
                            Area scope configuration
                            
                            .. attribute:: distribute_list
                            
                            	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                            	**type**\:  :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.DistributeList>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: cost
                            
                            	Interface cost
                            	**type**\: int
                            
                            	**range:** 1..65535
                            
                            .. attribute:: bfd
                            
                            	BFD configuration
                            	**type**\:  :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Bfd>`
                            
                            .. attribute:: prefix_suppression_primary
                            
                            	Enable/Disable prefix suppression for primary addresses
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: mtu_ignore
                            
                            	Enable/Disable ignoring of MTU in DBD packets
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: authentication
                            
                            	Authentication
                            	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication>`
                            
                            .. attribute:: ldp_sync_igp_shortcuts
                            
                            	Enable/Disable MPLS LDP sync for igp\-shortcuts
                            	**type**\: bool
                            
                            .. attribute:: ldp_auto_config
                            
                            	Enable MPLS LDP Auto Config
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: security
                            
                            	Container class for security related configuration parameters
                            	**type**\:  :py:class:`Security <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Security>`
                            
                            .. attribute:: network_type
                            
                            	Type of attached network
                            	**type**\:  :py:class:`OspfNetwork <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfNetwork>`
                            
                            .. attribute:: hello_interval
                            
                            	Interval between HELLO packets in seconds
                            	**type**\: int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            .. attribute:: loopback_stub_network
                            
                            	Enable/Disable advertising loopback as a stub network
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: prefix_suppression_secondary
                            
                            	Enable/Disable prefix suppression for secondary addresses
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: demand_circuit
                            
                            	Enable/Disable OSPF demand circuit
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: passive
                            
                            	When enabled, prevent sending HELLO packets over link
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: transmit_delay
                            
                            	Number of seconds to delay transmission of LSAs
                            	**type**\: int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            	**default value**\: 1
                            
                            .. attribute:: packet_size
                            
                            	Customize size of OSPF packets upto MTU
                            	**type**\: int
                            
                            	**range:** 576..10000
                            
                            .. attribute:: ldp_sync
                            
                            	Enable/Disable MPLS LDP sync
                            	**type**\: bool
                            
                            .. attribute:: database_filter
                            
                            	Filter OSPF LSA during synchronization and flooding
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: dead_interval_minimal
                            
                            	Interval after which a neighbor is declared dead
                            	**type**\:  :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.DeadIntervalMinimal>`
                            
                            .. attribute:: fast_reroute
                            
                            	Fast\-reroute configuration
                            	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute>`
                            
                            .. attribute:: link_down_fast_detect
                            
                            	Enable/Disable registration for early interface down notifications
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: segment_routing_forwarding
                            
                            	segment\-routing forwarding configuration Applicableonly in Default VRF
                            	**type**\:  :py:class:`OspfSegmentRoutingForwarding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRoutingForwarding>`
                            
                            .. attribute:: retransmit_interval
                            
                            	Time in seconds between retransmitting lost link state advertisements
                            	**type**\: int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            	**default value**\: 5
                            
                            .. attribute:: priority
                            
                            	Router priority for DR and BDR election
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            	**default value**\: 1
                            
                            .. attribute:: flood_reduction
                            
                            	Enable/Disable OSPF flood reduction
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: cost_fallback
                            
                            	Interface fallback cost
                            	**type**\:  :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.CostFallback>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope, self).__init__()

                                self.yang_name = "area-scope"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("distribute-list", ("distribute_list", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.DistributeList)), ("bfd", ("bfd", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Bfd)), ("authentication", ("authentication", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication)), ("security", ("security", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Security)), ("dead-interval-minimal", ("dead_interval_minimal", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.DeadIntervalMinimal)), ("fast-reroute", ("fast_reroute", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute)), ("cost-fallback", ("cost_fallback", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.CostFallback))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('cost', YLeaf(YType.uint32, 'cost')),
                                    ('prefix_suppression_primary', YLeaf(YType.boolean, 'prefix-suppression-primary')),
                                    ('mtu_ignore', YLeaf(YType.boolean, 'mtu-ignore')),
                                    ('ldp_sync_igp_shortcuts', YLeaf(YType.boolean, 'ldp-sync-igp-shortcuts')),
                                    ('ldp_auto_config', YLeaf(YType.empty, 'ldp-auto-config')),
                                    ('network_type', YLeaf(YType.enumeration, 'network-type')),
                                    ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                                    ('loopback_stub_network', YLeaf(YType.boolean, 'loopback-stub-network')),
                                    ('prefix_suppression_secondary', YLeaf(YType.boolean, 'prefix-suppression-secondary')),
                                    ('demand_circuit', YLeaf(YType.boolean, 'demand-circuit')),
                                    ('passive', YLeaf(YType.boolean, 'passive')),
                                    ('transmit_delay', YLeaf(YType.uint32, 'transmit-delay')),
                                    ('packet_size', YLeaf(YType.uint32, 'packet-size')),
                                    ('ldp_sync', YLeaf(YType.boolean, 'ldp-sync')),
                                    ('database_filter', YLeaf(YType.boolean, 'database-filter')),
                                    ('link_down_fast_detect', YLeaf(YType.boolean, 'link-down-fast-detect')),
                                    ('segment_routing_forwarding', YLeaf(YType.enumeration, 'segment-routing-forwarding')),
                                    ('retransmit_interval', YLeaf(YType.uint32, 'retransmit-interval')),
                                    ('priority', YLeaf(YType.uint32, 'priority')),
                                    ('flood_reduction', YLeaf(YType.boolean, 'flood-reduction')),
                                ])
                                self.cost = None
                                self.prefix_suppression_primary = None
                                self.mtu_ignore = None
                                self.ldp_sync_igp_shortcuts = None
                                self.ldp_auto_config = None
                                self.network_type = None
                                self.hello_interval = None
                                self.loopback_stub_network = None
                                self.prefix_suppression_secondary = None
                                self.demand_circuit = None
                                self.passive = None
                                self.transmit_delay = None
                                self.packet_size = None
                                self.ldp_sync = None
                                self.database_filter = None
                                self.link_down_fast_detect = None
                                self.segment_routing_forwarding = None
                                self.retransmit_interval = None
                                self.priority = None
                                self.flood_reduction = None

                                self.distribute_list = None
                                self._children_name_map["distribute_list"] = "distribute-list"
                                self._children_yang_names.add("distribute-list")

                                self.bfd = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Bfd()
                                self.bfd.parent = self
                                self._children_name_map["bfd"] = "bfd"
                                self._children_yang_names.add("bfd")

                                self.authentication = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication()
                                self.authentication.parent = self
                                self._children_name_map["authentication"] = "authentication"
                                self._children_yang_names.add("authentication")

                                self.security = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Security()
                                self.security.parent = self
                                self._children_name_map["security"] = "security"
                                self._children_yang_names.add("security")

                                self.dead_interval_minimal = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.DeadIntervalMinimal()
                                self.dead_interval_minimal.parent = self
                                self._children_name_map["dead_interval_minimal"] = "dead-interval-minimal"
                                self._children_yang_names.add("dead-interval-minimal")

                                self.fast_reroute = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute()
                                self.fast_reroute.parent = self
                                self._children_name_map["fast_reroute"] = "fast-reroute"
                                self._children_yang_names.add("fast-reroute")

                                self.cost_fallback = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.CostFallback()
                                self.cost_fallback.parent = self
                                self._children_name_map["cost_fallback"] = "cost-fallback"
                                self._children_yang_names.add("cost-fallback")
                                self._segment_path = lambda: "area-scope"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope, ['cost', 'prefix_suppression_primary', 'mtu_ignore', 'ldp_sync_igp_shortcuts', 'ldp_auto_config', 'network_type', 'hello_interval', 'loopback_stub_network', 'prefix_suppression_secondary', 'demand_circuit', 'passive', 'transmit_delay', 'packet_size', 'ldp_sync', 'database_filter', 'link_down_fast_detect', 'segment_routing_forwarding', 'retransmit_interval', 'priority', 'flood_reduction'], name, value)


                            class DistributeList(Entity):
                                """
                                Filter networks intalled to RIB (disable as ACL
                                name means filtering is disabled)
                                
                                .. attribute:: access_list_name
                                
                                	Access Control List name
                                	**type**\: str
                                
                                .. attribute:: route_policy_name
                                
                                	Route Policy name
                                	**type**\: str
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.DistributeList, self).__init__()

                                    self.yang_name = "distribute-list"
                                    self.yang_parent_name = "area-scope"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self.is_presence_container = True
                                    self._leafs = OrderedDict([
                                        ('access_list_name', YLeaf(YType.str, 'access-list-name')),
                                        ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
                                    ])
                                    self.access_list_name = None
                                    self.route_policy_name = None
                                    self._segment_path = lambda: "distribute-list"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.DistributeList, ['access_list_name', 'route_policy_name'], name, value)


                            class Bfd(Entity):
                                """
                                BFD configuration
                                
                                .. attribute:: interval
                                
                                	Hello interval for BFD sessions created by OSPF
                                	**type**\: int
                                
                                	**range:** 3..30000
                                
                                	**units**\: millisecond
                                
                                .. attribute:: detection_multiplier
                                
                                	Detection multiplier for BFD sessions created by OSPF
                                	**type**\: int
                                
                                	**range:** 2..50
                                
                                .. attribute:: fast_detect_mode
                                
                                	 use of Bidirectional Forwarding Detection
                                	**type**\:  :py:class:`BfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.BfdEnableMode>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Bfd, self).__init__()

                                    self.yang_name = "bfd"
                                    self.yang_parent_name = "area-scope"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('interval', YLeaf(YType.uint32, 'interval')),
                                        ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                                        ('fast_detect_mode', YLeaf(YType.enumeration, 'fast-detect-mode')),
                                    ])
                                    self.interval = None
                                    self.detection_multiplier = None
                                    self.fast_detect_mode = None
                                    self._segment_path = lambda: "bfd"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Bfd, ['interval', 'detection_multiplier', 'fast_detect_mode'], name, value)


                            class Authentication(Entity):
                                """
                                Authentication
                                
                                .. attribute:: type
                                
                                	Authentication type
                                	**type**\:  :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication.Type>`
                                
                                .. attribute:: message_digest_keies
                                
                                	Message digest authentication password (key) configurations, first 16 chars used
                                	**type**\:  :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies>`
                                
                                .. attribute:: key
                                
                                	Authentication key configuration
                                	**type**\: str
                                
                                	**pattern:** (!.+)\|([^!].+)
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication, self).__init__()

                                    self.yang_name = "authentication"
                                    self.yang_parent_name = "area-scope"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("type", ("type", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication.Type)), ("message-digest-keies", ("message_digest_keies", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('key', YLeaf(YType.str, 'key')),
                                    ])
                                    self.key = None

                                    self.type = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication.Type()
                                    self.type.parent = self
                                    self._children_name_map["type"] = "type"
                                    self._children_yang_names.add("type")

                                    self.message_digest_keies = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies()
                                    self.message_digest_keies.parent = self
                                    self._children_name_map["message_digest_keies"] = "message-digest-keies"
                                    self._children_yang_names.add("message-digest-keies")
                                    self._segment_path = lambda: "authentication"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication, ['key'], name, value)


                                class Type(Entity):
                                    """
                                    Authentication type
                                    
                                    .. attribute:: authen_type
                                    
                                    	Authentication type code 
                                    	**type**\:  :py:class:`OspfAuthentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthentication>`
                                    
                                    .. attribute:: keychain_authen_type
                                    
                                    	Keychain authentication type
                                    	**type**\:  :py:class:`OspfKeychainAuth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuth>`
                                    
                                    .. attribute:: keychain_name
                                    
                                    	Keychain name
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication.Type, self).__init__()

                                        self.yang_name = "type"
                                        self.yang_parent_name = "authentication"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('authen_type', YLeaf(YType.enumeration, 'authen-type')),
                                            ('keychain_authen_type', YLeaf(YType.enumeration, 'keychain-authen-type')),
                                            ('keychain_name', YLeaf(YType.str, 'keychain-name')),
                                        ])
                                        self.authen_type = None
                                        self.keychain_authen_type = None
                                        self.keychain_name = None
                                        self._segment_path = lambda: "type"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication.Type, ['authen_type', 'keychain_authen_type', 'keychain_name'], name, value)


                                class MessageDigestKeies(Entity):
                                    """
                                    Message digest authentication password (key)
                                    configurations, first 16 chars used
                                    
                                    .. attribute:: message_digest_key
                                    
                                    	Message digest authentication password (key) configuration
                                    	**type**\: list of  		 :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies, self).__init__()

                                        self.yang_name = "message-digest-keies"
                                        self.yang_parent_name = "authentication"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("message-digest-key", ("message_digest_key", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies.MessageDigestKey))])
                                        self._leafs = OrderedDict()

                                        self.message_digest_key = YList(self)
                                        self._segment_path = lambda: "message-digest-keies"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies, [], name, value)


                                    class MessageDigestKey(Entity):
                                        """
                                        Message digest authentication password (key)
                                        configuration
                                        
                                        .. attribute:: key_id  (key)
                                        
                                        	Key ID
                                        	**type**\: int
                                        
                                        	**range:** 1..255
                                        
                                        .. attribute:: password
                                        
                                        	Password
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        	**mandatory**\: True
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies.MessageDigestKey, self).__init__()

                                            self.yang_name = "message-digest-key"
                                            self.yang_parent_name = "message-digest-keies"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['key_id']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('key_id', YLeaf(YType.uint32, 'key-id')),
                                                ('password', YLeaf(YType.str, 'password')),
                                            ])
                                            self.key_id = None
                                            self.password = None
                                            self._segment_path = lambda: "message-digest-key" + "[key-id='" + str(self.key_id) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies.MessageDigestKey, ['key_id', 'password'], name, value)


                            class Security(Entity):
                                """
                                Container class for security related
                                configuration parameters
                                
                                .. attribute:: ttl
                                
                                	Enabling turns on TTL security
                                	**type**\:  :py:class:`Ttl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Security.Ttl>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Security, self).__init__()

                                    self.yang_name = "security"
                                    self.yang_parent_name = "area-scope"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("ttl", ("ttl", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Security.Ttl))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.ttl = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Security.Ttl()
                                    self.ttl.parent = self
                                    self._children_name_map["ttl"] = "ttl"
                                    self._children_yang_names.add("ttl")
                                    self._segment_path = lambda: "security"


                                class Ttl(Entity):
                                    """
                                    Enabling turns on TTL security
                                    
                                    .. attribute:: enable
                                    
                                    	Enable TTL security
                                    	**type**\: bool
                                    
                                    .. attribute:: hop_count
                                    
                                    	Hop count
                                    	**type**\: int
                                    
                                    	**range:** 1..254
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Security.Ttl, self).__init__()

                                        self.yang_name = "ttl"
                                        self.yang_parent_name = "security"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('enable', YLeaf(YType.boolean, 'enable')),
                                            ('hop_count', YLeaf(YType.uint32, 'hop-count')),
                                        ])
                                        self.enable = None
                                        self.hop_count = None
                                        self._segment_path = lambda: "ttl"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Security.Ttl, ['enable', 'hop_count'], name, value)


                            class DeadIntervalMinimal(Entity):
                                """
                                Interval after which a neighbor is declared dead
                                
                                .. attribute:: interval
                                
                                	Interval size in seconds after which a neighbor is declared dead
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: multiplier
                                
                                	Number of Hellos in one second
                                	**type**\: int
                                
                                	**range:** 3..20
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.DeadIntervalMinimal, self).__init__()

                                    self.yang_name = "dead-interval-minimal"
                                    self.yang_parent_name = "area-scope"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('interval', YLeaf(YType.uint32, 'interval')),
                                        ('multiplier', YLeaf(YType.uint32, 'multiplier')),
                                    ])
                                    self.interval = None
                                    self.multiplier = None
                                    self._segment_path = lambda: "dead-interval-minimal"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.DeadIntervalMinimal, ['interval', 'multiplier'], name, value)


                            class FastReroute(Entity):
                                """
                                Fast\-reroute configuration
                                
                                .. attribute:: per_link
                                
                                	Fast\-reroute per\-link configuration
                                	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink>`
                                
                                .. attribute:: per_prefix
                                
                                	Fast\-reroute per\-prefix global configuration
                                	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix>`
                                
                                .. attribute:: fast_reroute_enable
                                
                                	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                	**type**\:  :py:class:`OspfFastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastReroute>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute, self).__init__()

                                    self.yang_name = "fast-reroute"
                                    self.yang_parent_name = "area-scope"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("per-link", ("per_link", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('fast_reroute_enable', YLeaf(YType.enumeration, 'fast-reroute-enable')),
                                    ])
                                    self.fast_reroute_enable = None

                                    self.per_link = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink()
                                    self.per_link.parent = self
                                    self._children_name_map["per_link"] = "per-link"
                                    self._children_yang_names.add("per-link")

                                    self.per_prefix = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix()
                                    self.per_prefix.parent = self
                                    self._children_name_map["per_prefix"] = "per-prefix"
                                    self._children_yang_names.add("per-prefix")
                                    self._segment_path = lambda: "fast-reroute"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute, ['fast_reroute_enable'], name, value)


                                class PerLink(Entity):
                                    """
                                    Fast\-reroute per\-link configuration
                                    
                                    .. attribute:: fast_reroute_use_candidate_only
                                    
                                    	Use only interfaces on the candidate list as a backup path
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: candidate_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                    	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces>`
                                    
                                    .. attribute:: exclude_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                    	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink, self).__init__()

                                        self.yang_name = "per-link"
                                        self.yang_parent_name = "fast-reroute"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                        ])
                                        self.fast_reroute_use_candidate_only = None

                                        self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces()
                                        self.candidate_interfaces.parent = self
                                        self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                        self._children_yang_names.add("candidate-interfaces")

                                        self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces()
                                        self.exclude_interfaces.parent = self
                                        self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                        self._children_yang_names.add("exclude-interfaces")
                                        self._segment_path = lambda: "per-link"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                    class CandidateInterfaces(Entity):
                                        """
                                        Fast\-reroute per\-link/per\-prefix candidate
                                        interface configuration
                                        
                                        .. attribute:: candidate_interface
                                        
                                        	Candidate backup interface
                                        	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                            self.yang_name = "candidate-interfaces"
                                            self.yang_parent_name = "per-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface))])
                                            self._leafs = OrderedDict()

                                            self.candidate_interface = YList(self)
                                            self._segment_path = lambda: "candidate-interfaces"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                        class CandidateInterface(Entity):
                                            """
                                            Candidate backup interface
                                            
                                            .. attribute:: interface_name  (key)
                                            
                                            	Interface
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                self.yang_name = "candidate-interface"
                                                self.yang_parent_name = "candidate-interfaces"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['interface_name']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                ])
                                                self.interface_name = None
                                                self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                    class ExcludeInterfaces(Entity):
                                        """
                                        Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                        interface configuration
                                        
                                        .. attribute:: exclude_interface
                                        
                                        	Exclude an interface from becoming a backup or UCMP
                                        	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                            self.yang_name = "exclude-interfaces"
                                            self.yang_parent_name = "per-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface))])
                                            self._leafs = OrderedDict()

                                            self.exclude_interface = YList(self)
                                            self._segment_path = lambda: "exclude-interfaces"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                        class ExcludeInterface(Entity):
                                            """
                                            Exclude an interface from becoming a backup or
                                            UCMP
                                            
                                            .. attribute:: interface_name  (key)
                                            
                                            	Interface
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                self.yang_name = "exclude-interface"
                                                self.yang_parent_name = "exclude-interfaces"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['interface_name']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                ])
                                                self.interface_name = None
                                                self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                class PerPrefix(Entity):
                                    """
                                    Fast\-reroute per\-prefix global configuration
                                    
                                    .. attribute:: remote_lfa
                                    
                                    	Remote LFA configuration
                                    	**type**\:  :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.RemoteLfa>`
                                    
                                    .. attribute:: tiebreakers
                                    
                                    	Fast\-reroute tiebreakers configurations
                                    	**type**\:  :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers>`
                                    
                                    .. attribute:: topology_independent_lfa
                                    
                                    	Topology Independet LFA configuration
                                    	**type**\: bool
                                    
                                    .. attribute:: fast_reroute_use_candidate_only
                                    
                                    	Use only interfaces on the candidate list as a backup path
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: candidate_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                    	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                    
                                    .. attribute:: exclude_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                    	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix, self).__init__()

                                        self.yang_name = "per-prefix"
                                        self.yang_parent_name = "fast-reroute"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("remote-lfa", ("remote_lfa", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.RemoteLfa)), ("tiebreakers", ("tiebreakers", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers)), ("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('topology_independent_lfa', YLeaf(YType.boolean, 'topology-independent-lfa')),
                                            ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                        ])
                                        self.topology_independent_lfa = None
                                        self.fast_reroute_use_candidate_only = None

                                        self.remote_lfa = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.RemoteLfa()
                                        self.remote_lfa.parent = self
                                        self._children_name_map["remote_lfa"] = "remote-lfa"
                                        self._children_yang_names.add("remote-lfa")

                                        self.tiebreakers = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers()
                                        self.tiebreakers.parent = self
                                        self._children_name_map["tiebreakers"] = "tiebreakers"
                                        self._children_yang_names.add("tiebreakers")

                                        self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces()
                                        self.candidate_interfaces.parent = self
                                        self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                        self._children_yang_names.add("candidate-interfaces")

                                        self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                        self.exclude_interfaces.parent = self
                                        self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                        self._children_yang_names.add("exclude-interfaces")
                                        self._segment_path = lambda: "per-prefix"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix, ['topology_independent_lfa', 'fast_reroute_use_candidate_only'], name, value)


                                    class RemoteLfa(Entity):
                                        """
                                        Remote LFA configuration
                                        
                                        .. attribute:: tunnel
                                        
                                        	Enable/Disable remote LFA computation
                                        	**type**\:  :py:class:`OspfFrrRlfaTunnel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFrrRlfaTunnel>`
                                        
                                        .. attribute:: maximum_cost
                                        
                                        	Maximum path cost to remote LFA
                                        	**type**\: int
                                        
                                        	**range:** 1..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.RemoteLfa, self).__init__()

                                            self.yang_name = "remote-lfa"
                                            self.yang_parent_name = "per-prefix"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('tunnel', YLeaf(YType.enumeration, 'tunnel')),
                                                ('maximum_cost', YLeaf(YType.uint32, 'maximum-cost')),
                                            ])
                                            self.tunnel = None
                                            self.maximum_cost = None
                                            self._segment_path = lambda: "remote-lfa"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.RemoteLfa, ['tunnel', 'maximum_cost'], name, value)


                                    class Tiebreakers(Entity):
                                        """
                                        Fast\-reroute tiebreakers configurations
                                        
                                        .. attribute:: tiebreaker
                                        
                                        	Fast\-reroute tiebreakers configuration
                                        	**type**\: list of  		 :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers, self).__init__()

                                            self.yang_name = "tiebreakers"
                                            self.yang_parent_name = "per-prefix"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("tiebreaker", ("tiebreaker", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker))])
                                            self._leafs = OrderedDict()

                                            self.tiebreaker = YList(self)
                                            self._segment_path = lambda: "tiebreakers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers, [], name, value)


                                        class Tiebreaker(Entity):
                                            """
                                            Fast\-reroute tiebreakers configuration
                                            
                                            .. attribute:: tiebreaker_type  (key)
                                            
                                            	Tiebreaker type
                                            	**type**\:  :py:class:`OspfFastRerouteTiebreakersIntf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakersIntf>`
                                            
                                            .. attribute:: tiebreaker_index
                                            
                                            	Index value for a tiebreaker, 0 to disable
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            	**mandatory**\: True
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, self).__init__()

                                                self.yang_name = "tiebreaker"
                                                self.yang_parent_name = "tiebreakers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['tiebreaker_type']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('tiebreaker_type', YLeaf(YType.enumeration, 'tiebreaker-type')),
                                                    ('tiebreaker_index', YLeaf(YType.uint32, 'tiebreaker-index')),
                                                ])
                                                self.tiebreaker_type = None
                                                self.tiebreaker_index = None
                                                self._segment_path = lambda: "tiebreaker" + "[tiebreaker-type='" + str(self.tiebreaker_type) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, ['tiebreaker_type', 'tiebreaker_index'], name, value)


                                    class CandidateInterfaces(Entity):
                                        """
                                        Fast\-reroute per\-link/per\-prefix candidate
                                        interface configuration
                                        
                                        .. attribute:: candidate_interface
                                        
                                        	Candidate backup interface
                                        	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                            self.yang_name = "candidate-interfaces"
                                            self.yang_parent_name = "per-prefix"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface))])
                                            self._leafs = OrderedDict()

                                            self.candidate_interface = YList(self)
                                            self._segment_path = lambda: "candidate-interfaces"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                        class CandidateInterface(Entity):
                                            """
                                            Candidate backup interface
                                            
                                            .. attribute:: interface_name  (key)
                                            
                                            	Interface
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                self.yang_name = "candidate-interface"
                                                self.yang_parent_name = "candidate-interfaces"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['interface_name']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                ])
                                                self.interface_name = None
                                                self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                    class ExcludeInterfaces(Entity):
                                        """
                                        Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                        interface configuration
                                        
                                        .. attribute:: exclude_interface
                                        
                                        	Exclude an interface from becoming a backup or UCMP
                                        	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                            self.yang_name = "exclude-interfaces"
                                            self.yang_parent_name = "per-prefix"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface))])
                                            self._leafs = OrderedDict()

                                            self.exclude_interface = YList(self)
                                            self._segment_path = lambda: "exclude-interfaces"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                        class ExcludeInterface(Entity):
                                            """
                                            Exclude an interface from becoming a backup or
                                            UCMP
                                            
                                            .. attribute:: interface_name  (key)
                                            
                                            	Interface
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                self.yang_name = "exclude-interface"
                                                self.yang_parent_name = "exclude-interfaces"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['interface_name']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                ])
                                                self.interface_name = None
                                                self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                            class CostFallback(Entity):
                                """
                                Interface fallback cost
                                
                                .. attribute:: cost
                                
                                	Fallback cost of link
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: threshold
                                
                                	Bandwidth threshold
                                	**type**\: int
                                
                                	**range:** 1..4294967
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.CostFallback, self).__init__()

                                    self.yang_name = "cost-fallback"
                                    self.yang_parent_name = "area-scope"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('cost', YLeaf(YType.uint32, 'cost')),
                                        ('threshold', YLeaf(YType.uint32, 'threshold')),
                                    ])
                                    self.cost = None
                                    self.threshold = None
                                    self._segment_path = lambda: "cost-fallback"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.CostFallback, ['cost', 'threshold'], name, value)


                        class NameScopes(Entity):
                            """
                            Name scope configurations
                            
                            .. attribute:: name_scope
                            
                            	Name scope configuration
                            	**type**\: list of  		 :py:class:`NameScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes, self).__init__()

                                self.yang_name = "name-scopes"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("name-scope", ("name_scope", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope))])
                                self._leafs = OrderedDict()

                                self.name_scope = YList(self)
                                self._segment_path = lambda: "name-scopes"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes, [], name, value)


                            class NameScope(Entity):
                                """
                                Name scope configuration
                                
                                .. attribute:: interface_name  (key)
                                
                                	Name of Interface to configure
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: prefix_sid
                                
                                	Prefix SID
                                	**type**\:  :py:class:`PrefixSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.PrefixSid>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: prefix_sid_strict
                                
                                	Strict Prefix SID
                                	**type**\:  :py:class:`PrefixSidStrict <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.PrefixSidStrict>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: distribute_list
                                
                                	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                                	**type**\:  :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DistributeList>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: cost
                                
                                	Interface cost
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: bfd
                                
                                	BFD configuration
                                	**type**\:  :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Bfd>`
                                
                                .. attribute:: prefix_suppression_primary
                                
                                	Enable/Disable prefix suppression for primary addresses
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: mtu_ignore
                                
                                	Enable/Disable ignoring of MTU in DBD packets
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: authentication
                                
                                	Authentication
                                	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication>`
                                
                                .. attribute:: ldp_sync_igp_shortcuts
                                
                                	Enable/Disable MPLS LDP sync for igp\-shortcuts
                                	**type**\: bool
                                
                                .. attribute:: ldp_auto_config
                                
                                	Enable MPLS LDP Auto Config
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: security
                                
                                	Container class for security related configuration parameters
                                	**type**\:  :py:class:`Security <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security>`
                                
                                .. attribute:: neighbors
                                
                                	Neighbor router configuration information
                                	**type**\:  :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors>`
                                
                                .. attribute:: network_type
                                
                                	Type of attached network
                                	**type**\:  :py:class:`OspfNetwork <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfNetwork>`
                                
                                .. attribute:: hello_interval
                                
                                	Interval between HELLO packets in seconds
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: loopback_stub_network
                                
                                	Enable/Disable advertising loopback as a stub network
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: prefix_suppression_secondary
                                
                                	Enable/Disable prefix suppression for secondary addresses
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: demand_circuit
                                
                                	Enable/Disable OSPF demand circuit
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: passive
                                
                                	When enabled, prevent sending HELLO packets over link
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: transmit_delay
                                
                                	Number of seconds to delay transmission of LSAs
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 1
                                
                                .. attribute:: packet_size
                                
                                	Customize size of OSPF packets upto MTU
                                	**type**\: int
                                
                                	**range:** 576..10000
                                
                                .. attribute:: ldp_sync
                                
                                	Enable/Disable MPLS LDP sync
                                	**type**\: bool
                                
                                .. attribute:: database_filter
                                
                                	Filter OSPF LSA during synchronization and flooding
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: dead_interval_minimal
                                
                                	Interval after which a neighbor is declared dead
                                	**type**\:  :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DeadIntervalMinimal>`
                                
                                .. attribute:: fast_reroute
                                
                                	Fast\-reroute configuration
                                	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute>`
                                
                                .. attribute:: link_down_fast_detect
                                
                                	Enable/Disable registration for early interface down notifications
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: segment_routing_forwarding
                                
                                	segment\-routing forwarding configuration Applicableonly in Default VRF
                                	**type**\:  :py:class:`OspfSegmentRoutingForwarding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRoutingForwarding>`
                                
                                .. attribute:: retransmit_interval
                                
                                	Time in seconds between retransmitting lost link state advertisements
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 5
                                
                                .. attribute:: priority
                                
                                	Router priority for DR and BDR election
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                	**default value**\: 1
                                
                                .. attribute:: flood_reduction
                                
                                	Enable/Disable OSPF flood reduction
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: cost_fallback
                                
                                	Interface fallback cost
                                	**type**\:  :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.CostFallback>`
                                
                                .. attribute:: running
                                
                                	Enable routing on an IP network
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope, self).__init__()

                                    self.yang_name = "name-scope"
                                    self.yang_parent_name = "name-scopes"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['interface_name']
                                    self._child_container_classes = OrderedDict([("prefix-sid", ("prefix_sid", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.PrefixSid)), ("prefix-sid-strict", ("prefix_sid_strict", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.PrefixSidStrict)), ("distribute-list", ("distribute_list", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DistributeList)), ("bfd", ("bfd", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Bfd)), ("authentication", ("authentication", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication)), ("security", ("security", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security)), ("neighbors", ("neighbors", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors)), ("dead-interval-minimal", ("dead_interval_minimal", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DeadIntervalMinimal)), ("fast-reroute", ("fast_reroute", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute)), ("cost-fallback", ("cost_fallback", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.CostFallback))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                        ('cost', YLeaf(YType.uint32, 'cost')),
                                        ('prefix_suppression_primary', YLeaf(YType.boolean, 'prefix-suppression-primary')),
                                        ('mtu_ignore', YLeaf(YType.boolean, 'mtu-ignore')),
                                        ('ldp_sync_igp_shortcuts', YLeaf(YType.boolean, 'ldp-sync-igp-shortcuts')),
                                        ('ldp_auto_config', YLeaf(YType.empty, 'ldp-auto-config')),
                                        ('network_type', YLeaf(YType.enumeration, 'network-type')),
                                        ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                                        ('loopback_stub_network', YLeaf(YType.boolean, 'loopback-stub-network')),
                                        ('prefix_suppression_secondary', YLeaf(YType.boolean, 'prefix-suppression-secondary')),
                                        ('demand_circuit', YLeaf(YType.boolean, 'demand-circuit')),
                                        ('passive', YLeaf(YType.boolean, 'passive')),
                                        ('transmit_delay', YLeaf(YType.uint32, 'transmit-delay')),
                                        ('packet_size', YLeaf(YType.uint32, 'packet-size')),
                                        ('ldp_sync', YLeaf(YType.boolean, 'ldp-sync')),
                                        ('database_filter', YLeaf(YType.boolean, 'database-filter')),
                                        ('link_down_fast_detect', YLeaf(YType.boolean, 'link-down-fast-detect')),
                                        ('segment_routing_forwarding', YLeaf(YType.enumeration, 'segment-routing-forwarding')),
                                        ('retransmit_interval', YLeaf(YType.uint32, 'retransmit-interval')),
                                        ('priority', YLeaf(YType.uint32, 'priority')),
                                        ('flood_reduction', YLeaf(YType.boolean, 'flood-reduction')),
                                        ('running', YLeaf(YType.empty, 'running')),
                                    ])
                                    self.interface_name = None
                                    self.cost = None
                                    self.prefix_suppression_primary = None
                                    self.mtu_ignore = None
                                    self.ldp_sync_igp_shortcuts = None
                                    self.ldp_auto_config = None
                                    self.network_type = None
                                    self.hello_interval = None
                                    self.loopback_stub_network = None
                                    self.prefix_suppression_secondary = None
                                    self.demand_circuit = None
                                    self.passive = None
                                    self.transmit_delay = None
                                    self.packet_size = None
                                    self.ldp_sync = None
                                    self.database_filter = None
                                    self.link_down_fast_detect = None
                                    self.segment_routing_forwarding = None
                                    self.retransmit_interval = None
                                    self.priority = None
                                    self.flood_reduction = None
                                    self.running = None

                                    self.prefix_sid = None
                                    self._children_name_map["prefix_sid"] = "prefix-sid"
                                    self._children_yang_names.add("prefix-sid")

                                    self.prefix_sid_strict = None
                                    self._children_name_map["prefix_sid_strict"] = "prefix-sid-strict"
                                    self._children_yang_names.add("prefix-sid-strict")

                                    self.distribute_list = None
                                    self._children_name_map["distribute_list"] = "distribute-list"
                                    self._children_yang_names.add("distribute-list")

                                    self.bfd = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Bfd()
                                    self.bfd.parent = self
                                    self._children_name_map["bfd"] = "bfd"
                                    self._children_yang_names.add("bfd")

                                    self.authentication = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication()
                                    self.authentication.parent = self
                                    self._children_name_map["authentication"] = "authentication"
                                    self._children_yang_names.add("authentication")

                                    self.security = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security()
                                    self.security.parent = self
                                    self._children_name_map["security"] = "security"
                                    self._children_yang_names.add("security")

                                    self.neighbors = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors()
                                    self.neighbors.parent = self
                                    self._children_name_map["neighbors"] = "neighbors"
                                    self._children_yang_names.add("neighbors")

                                    self.dead_interval_minimal = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DeadIntervalMinimal()
                                    self.dead_interval_minimal.parent = self
                                    self._children_name_map["dead_interval_minimal"] = "dead-interval-minimal"
                                    self._children_yang_names.add("dead-interval-minimal")

                                    self.fast_reroute = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute()
                                    self.fast_reroute.parent = self
                                    self._children_name_map["fast_reroute"] = "fast-reroute"
                                    self._children_yang_names.add("fast-reroute")

                                    self.cost_fallback = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.CostFallback()
                                    self.cost_fallback.parent = self
                                    self._children_name_map["cost_fallback"] = "cost-fallback"
                                    self._children_yang_names.add("cost-fallback")
                                    self._segment_path = lambda: "name-scope" + "[interface-name='" + str(self.interface_name) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope, ['interface_name', 'cost', 'prefix_suppression_primary', 'mtu_ignore', 'ldp_sync_igp_shortcuts', 'ldp_auto_config', 'network_type', 'hello_interval', 'loopback_stub_network', 'prefix_suppression_secondary', 'demand_circuit', 'passive', 'transmit_delay', 'packet_size', 'ldp_sync', 'database_filter', 'link_down_fast_detect', 'segment_routing_forwarding', 'retransmit_interval', 'priority', 'flood_reduction', 'running'], name, value)


                                class PrefixSid(Entity):
                                    """
                                    Prefix SID
                                    
                                    .. attribute:: sid_value
                                    
                                    	SID value
                                    	**type**\: int
                                    
                                    	**range:** 0..1048575
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: explicit_null
                                    
                                    	Force Penultimate Hop To Send Explicit\-Null Label
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: type
                                    
                                    	OSPF SID Type
                                    	**type**\:  :py:class:`OspfSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSid>`
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: n_flag_clear
                                    
                                    	Not a node SID
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.PrefixSid, self).__init__()

                                        self.yang_name = "prefix-sid"
                                        self.yang_parent_name = "name-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                            ('explicit_null', YLeaf(YType.boolean, 'explicit-null')),
                                            ('type', YLeaf(YType.enumeration, 'type')),
                                            ('n_flag_clear', YLeaf(YType.boolean, 'n-flag-clear')),
                                        ])
                                        self.sid_value = None
                                        self.explicit_null = None
                                        self.type = None
                                        self.n_flag_clear = None
                                        self._segment_path = lambda: "prefix-sid"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.PrefixSid, ['sid_value', 'explicit_null', 'type', 'n_flag_clear'], name, value)


                                class PrefixSidStrict(Entity):
                                    """
                                    Strict Prefix SID
                                    
                                    .. attribute:: sid_value
                                    
                                    	SID value
                                    	**type**\: int
                                    
                                    	**range:** 0..1048575
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: explicit_null
                                    
                                    	Force Penultimate Hop To Send Explicit\-Null Label
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: type
                                    
                                    	OSPF SID Type
                                    	**type**\:  :py:class:`OspfSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSid>`
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: n_flag_clear
                                    
                                    	Not a node SID
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.PrefixSidStrict, self).__init__()

                                        self.yang_name = "prefix-sid-strict"
                                        self.yang_parent_name = "name-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                            ('explicit_null', YLeaf(YType.boolean, 'explicit-null')),
                                            ('type', YLeaf(YType.enumeration, 'type')),
                                            ('n_flag_clear', YLeaf(YType.boolean, 'n-flag-clear')),
                                        ])
                                        self.sid_value = None
                                        self.explicit_null = None
                                        self.type = None
                                        self.n_flag_clear = None
                                        self._segment_path = lambda: "prefix-sid-strict"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.PrefixSidStrict, ['sid_value', 'explicit_null', 'type', 'n_flag_clear'], name, value)


                                class DistributeList(Entity):
                                    """
                                    Filter networks intalled to RIB (disable as ACL
                                    name means filtering is disabled)
                                    
                                    .. attribute:: access_list_name
                                    
                                    	Access Control List name
                                    	**type**\: str
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route Policy name
                                    	**type**\: str
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DistributeList, self).__init__()

                                        self.yang_name = "distribute-list"
                                        self.yang_parent_name = "name-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('access_list_name', YLeaf(YType.str, 'access-list-name')),
                                            ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
                                        ])
                                        self.access_list_name = None
                                        self.route_policy_name = None
                                        self._segment_path = lambda: "distribute-list"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DistributeList, ['access_list_name', 'route_policy_name'], name, value)


                                class Bfd(Entity):
                                    """
                                    BFD configuration
                                    
                                    .. attribute:: interval
                                    
                                    	Hello interval for BFD sessions created by OSPF
                                    	**type**\: int
                                    
                                    	**range:** 3..30000
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: detection_multiplier
                                    
                                    	Detection multiplier for BFD sessions created by OSPF
                                    	**type**\: int
                                    
                                    	**range:** 2..50
                                    
                                    .. attribute:: fast_detect_mode
                                    
                                    	 use of Bidirectional Forwarding Detection
                                    	**type**\:  :py:class:`BfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.BfdEnableMode>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Bfd, self).__init__()

                                        self.yang_name = "bfd"
                                        self.yang_parent_name = "name-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interval', YLeaf(YType.uint32, 'interval')),
                                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                                            ('fast_detect_mode', YLeaf(YType.enumeration, 'fast-detect-mode')),
                                        ])
                                        self.interval = None
                                        self.detection_multiplier = None
                                        self.fast_detect_mode = None
                                        self._segment_path = lambda: "bfd"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Bfd, ['interval', 'detection_multiplier', 'fast_detect_mode'], name, value)


                                class Authentication(Entity):
                                    """
                                    Authentication
                                    
                                    .. attribute:: type
                                    
                                    	Authentication type
                                    	**type**\:  :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.Type>`
                                    
                                    .. attribute:: message_digest_keies
                                    
                                    	Message digest authentication password (key) configurations, first 16 chars used
                                    	**type**\:  :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies>`
                                    
                                    .. attribute:: key
                                    
                                    	Authentication key configuration
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication, self).__init__()

                                        self.yang_name = "authentication"
                                        self.yang_parent_name = "name-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("type", ("type", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.Type)), ("message-digest-keies", ("message_digest_keies", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('key', YLeaf(YType.str, 'key')),
                                        ])
                                        self.key = None

                                        self.type = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.Type()
                                        self.type.parent = self
                                        self._children_name_map["type"] = "type"
                                        self._children_yang_names.add("type")

                                        self.message_digest_keies = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies()
                                        self.message_digest_keies.parent = self
                                        self._children_name_map["message_digest_keies"] = "message-digest-keies"
                                        self._children_yang_names.add("message-digest-keies")
                                        self._segment_path = lambda: "authentication"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication, ['key'], name, value)


                                    class Type(Entity):
                                        """
                                        Authentication type
                                        
                                        .. attribute:: authen_type
                                        
                                        	Authentication type code 
                                        	**type**\:  :py:class:`OspfAuthentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthentication>`
                                        
                                        .. attribute:: keychain_authen_type
                                        
                                        	Keychain authentication type
                                        	**type**\:  :py:class:`OspfKeychainAuth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuth>`
                                        
                                        .. attribute:: keychain_name
                                        
                                        	Keychain name
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.Type, self).__init__()

                                            self.yang_name = "type"
                                            self.yang_parent_name = "authentication"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('authen_type', YLeaf(YType.enumeration, 'authen-type')),
                                                ('keychain_authen_type', YLeaf(YType.enumeration, 'keychain-authen-type')),
                                                ('keychain_name', YLeaf(YType.str, 'keychain-name')),
                                            ])
                                            self.authen_type = None
                                            self.keychain_authen_type = None
                                            self.keychain_name = None
                                            self._segment_path = lambda: "type"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.Type, ['authen_type', 'keychain_authen_type', 'keychain_name'], name, value)


                                    class MessageDigestKeies(Entity):
                                        """
                                        Message digest authentication password (key)
                                        configurations, first 16 chars used
                                        
                                        .. attribute:: message_digest_key
                                        
                                        	Message digest authentication password (key) configuration
                                        	**type**\: list of  		 :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies, self).__init__()

                                            self.yang_name = "message-digest-keies"
                                            self.yang_parent_name = "authentication"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("message-digest-key", ("message_digest_key", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies.MessageDigestKey))])
                                            self._leafs = OrderedDict()

                                            self.message_digest_key = YList(self)
                                            self._segment_path = lambda: "message-digest-keies"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies, [], name, value)


                                        class MessageDigestKey(Entity):
                                            """
                                            Message digest authentication password (key)
                                            configuration
                                            
                                            .. attribute:: key_id  (key)
                                            
                                            	Key ID
                                            	**type**\: int
                                            
                                            	**range:** 1..255
                                            
                                            .. attribute:: password
                                            
                                            	Password
                                            	**type**\: str
                                            
                                            	**pattern:** (!.+)\|([^!].+)
                                            
                                            	**mandatory**\: True
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies.MessageDigestKey, self).__init__()

                                                self.yang_name = "message-digest-key"
                                                self.yang_parent_name = "message-digest-keies"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['key_id']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('key_id', YLeaf(YType.uint32, 'key-id')),
                                                    ('password', YLeaf(YType.str, 'password')),
                                                ])
                                                self.key_id = None
                                                self.password = None
                                                self._segment_path = lambda: "message-digest-key" + "[key-id='" + str(self.key_id) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies.MessageDigestKey, ['key_id', 'password'], name, value)


                                class Security(Entity):
                                    """
                                    Container class for security related
                                    configuration parameters
                                    
                                    .. attribute:: ttl
                                    
                                    	Enabling turns on TTL security
                                    	**type**\:  :py:class:`Ttl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security.Ttl>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security, self).__init__()

                                        self.yang_name = "security"
                                        self.yang_parent_name = "name-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("ttl", ("ttl", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security.Ttl))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.ttl = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security.Ttl()
                                        self.ttl.parent = self
                                        self._children_name_map["ttl"] = "ttl"
                                        self._children_yang_names.add("ttl")
                                        self._segment_path = lambda: "security"


                                    class Ttl(Entity):
                                        """
                                        Enabling turns on TTL security
                                        
                                        .. attribute:: enable
                                        
                                        	Enable TTL security
                                        	**type**\: bool
                                        
                                        .. attribute:: hop_count
                                        
                                        	Hop count
                                        	**type**\: int
                                        
                                        	**range:** 1..254
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security.Ttl, self).__init__()

                                            self.yang_name = "ttl"
                                            self.yang_parent_name = "security"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('enable', YLeaf(YType.boolean, 'enable')),
                                                ('hop_count', YLeaf(YType.uint32, 'hop-count')),
                                            ])
                                            self.enable = None
                                            self.hop_count = None
                                            self._segment_path = lambda: "ttl"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security.Ttl, ['enable', 'hop_count'], name, value)


                                class Neighbors(Entity):
                                    """
                                    Neighbor router configuration information
                                    
                                    .. attribute:: neighbor
                                    
                                    	Router configuration information for a particular neighbor
                                    	**type**\: list of  		 :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors.Neighbor>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors, self).__init__()

                                        self.yang_name = "neighbors"
                                        self.yang_parent_name = "name-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("neighbor", ("neighbor", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors.Neighbor))])
                                        self._leafs = OrderedDict()

                                        self.neighbor = YList(self)
                                        self._segment_path = lambda: "neighbors"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors, [], name, value)


                                    class Neighbor(Entity):
                                        """
                                        Router configuration information for a
                                        particular neighbor
                                        
                                        .. attribute:: neighbor_address  (key)
                                        
                                        	Neighbor IP address
                                        	**type**\: str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: priority
                                        
                                        	OSPF priority of non\-broadcast neighbor
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        	**default value**\: 0
                                        
                                        .. attribute:: poll_interval
                                        
                                        	OSPF dead router poll\-interval in seconds
                                        	**type**\: int
                                        
                                        	**range:** 0..65535
                                        
                                        	**units**\: second
                                        
                                        	**default value**\: 40
                                        
                                        .. attribute:: cost
                                        
                                        	OSPF cost for point\-to\-multipoint neighbor
                                        	**type**\: int
                                        
                                        	**range:** 1..65535
                                        
                                        	**default value**\: 1
                                        
                                        .. attribute:: database_filter
                                        
                                        	Database filter\: Filter OSPF LSA during synchronization and flooding for point\-to\-multipoint
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors.Neighbor, self).__init__()

                                            self.yang_name = "neighbor"
                                            self.yang_parent_name = "neighbors"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['neighbor_address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                ('priority', YLeaf(YType.uint32, 'priority')),
                                                ('poll_interval', YLeaf(YType.uint32, 'poll-interval')),
                                                ('cost', YLeaf(YType.uint32, 'cost')),
                                                ('database_filter', YLeaf(YType.boolean, 'database-filter')),
                                            ])
                                            self.neighbor_address = None
                                            self.priority = None
                                            self.poll_interval = None
                                            self.cost = None
                                            self.database_filter = None
                                            self._segment_path = lambda: "neighbor" + "[neighbor-address='" + str(self.neighbor_address) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors.Neighbor, ['neighbor_address', 'priority', 'poll_interval', 'cost', 'database_filter'], name, value)


                                class DeadIntervalMinimal(Entity):
                                    """
                                    Interval after which a neighbor is declared dead
                                    
                                    .. attribute:: interval
                                    
                                    	Interval size in seconds after which a neighbor is declared dead
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: multiplier
                                    
                                    	Number of Hellos in one second
                                    	**type**\: int
                                    
                                    	**range:** 3..20
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DeadIntervalMinimal, self).__init__()

                                        self.yang_name = "dead-interval-minimal"
                                        self.yang_parent_name = "name-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interval', YLeaf(YType.uint32, 'interval')),
                                            ('multiplier', YLeaf(YType.uint32, 'multiplier')),
                                        ])
                                        self.interval = None
                                        self.multiplier = None
                                        self._segment_path = lambda: "dead-interval-minimal"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DeadIntervalMinimal, ['interval', 'multiplier'], name, value)


                                class FastReroute(Entity):
                                    """
                                    Fast\-reroute configuration
                                    
                                    .. attribute:: per_link
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink>`
                                    
                                    .. attribute:: per_prefix
                                    
                                    	Fast\-reroute per\-prefix global configuration
                                    	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix>`
                                    
                                    .. attribute:: fast_reroute_enable
                                    
                                    	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                    	**type**\:  :py:class:`OspfFastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastReroute>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute, self).__init__()

                                        self.yang_name = "fast-reroute"
                                        self.yang_parent_name = "name-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("per-link", ("per_link", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('fast_reroute_enable', YLeaf(YType.enumeration, 'fast-reroute-enable')),
                                        ])
                                        self.fast_reroute_enable = None

                                        self.per_link = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink()
                                        self.per_link.parent = self
                                        self._children_name_map["per_link"] = "per-link"
                                        self._children_yang_names.add("per-link")

                                        self.per_prefix = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix()
                                        self.per_prefix.parent = self
                                        self._children_name_map["per_prefix"] = "per-prefix"
                                        self._children_yang_names.add("per-prefix")
                                        self._segment_path = lambda: "fast-reroute"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute, ['fast_reroute_enable'], name, value)


                                    class PerLink(Entity):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                        	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink, self).__init__()

                                            self.yang_name = "per-link"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                            ])
                                            self.fast_reroute_use_candidate_only = None

                                            self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                            self._children_yang_names.add("candidate-interfaces")

                                            self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._children_yang_names.add("exclude-interfaces")
                                            self._segment_path = lambda: "per-link"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                        class CandidateInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface))])
                                                self._leafs = OrderedDict()

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(Entity):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                        class ExcludeInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup or UCMP
                                            	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface))])
                                                self._leafs = OrderedDict()

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(Entity):
                                                """
                                                Exclude an interface from becoming a backup or
                                                UCMP
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                    class PerPrefix(Entity):
                                        """
                                        Fast\-reroute per\-prefix global configuration
                                        
                                        .. attribute:: remote_lfa
                                        
                                        	Remote LFA configuration
                                        	**type**\:  :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa>`
                                        
                                        .. attribute:: tiebreakers
                                        
                                        	Fast\-reroute tiebreakers configurations
                                        	**type**\:  :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers>`
                                        
                                        .. attribute:: topology_independent_lfa
                                        
                                        	Topology Independet LFA configuration
                                        	**type**\: bool
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                        	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix, self).__init__()

                                            self.yang_name = "per-prefix"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("remote-lfa", ("remote_lfa", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa)), ("tiebreakers", ("tiebreakers", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers)), ("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('topology_independent_lfa', YLeaf(YType.boolean, 'topology-independent-lfa')),
                                                ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                            ])
                                            self.topology_independent_lfa = None
                                            self.fast_reroute_use_candidate_only = None

                                            self.remote_lfa = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa()
                                            self.remote_lfa.parent = self
                                            self._children_name_map["remote_lfa"] = "remote-lfa"
                                            self._children_yang_names.add("remote-lfa")

                                            self.tiebreakers = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers()
                                            self.tiebreakers.parent = self
                                            self._children_name_map["tiebreakers"] = "tiebreakers"
                                            self._children_yang_names.add("tiebreakers")

                                            self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                            self._children_yang_names.add("candidate-interfaces")

                                            self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._children_yang_names.add("exclude-interfaces")
                                            self._segment_path = lambda: "per-prefix"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix, ['topology_independent_lfa', 'fast_reroute_use_candidate_only'], name, value)


                                        class RemoteLfa(Entity):
                                            """
                                            Remote LFA configuration
                                            
                                            .. attribute:: tunnel
                                            
                                            	Enable/Disable remote LFA computation
                                            	**type**\:  :py:class:`OspfFrrRlfaTunnel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFrrRlfaTunnel>`
                                            
                                            .. attribute:: maximum_cost
                                            
                                            	Maximum path cost to remote LFA
                                            	**type**\: int
                                            
                                            	**range:** 1..4294967295
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa, self).__init__()

                                                self.yang_name = "remote-lfa"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('tunnel', YLeaf(YType.enumeration, 'tunnel')),
                                                    ('maximum_cost', YLeaf(YType.uint32, 'maximum-cost')),
                                                ])
                                                self.tunnel = None
                                                self.maximum_cost = None
                                                self._segment_path = lambda: "remote-lfa"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa, ['tunnel', 'maximum_cost'], name, value)


                                        class Tiebreakers(Entity):
                                            """
                                            Fast\-reroute tiebreakers configurations
                                            
                                            .. attribute:: tiebreaker
                                            
                                            	Fast\-reroute tiebreakers configuration
                                            	**type**\: list of  		 :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers, self).__init__()

                                                self.yang_name = "tiebreakers"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("tiebreaker", ("tiebreaker", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker))])
                                                self._leafs = OrderedDict()

                                                self.tiebreaker = YList(self)
                                                self._segment_path = lambda: "tiebreakers"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers, [], name, value)


                                            class Tiebreaker(Entity):
                                                """
                                                Fast\-reroute tiebreakers configuration
                                                
                                                .. attribute:: tiebreaker_type  (key)
                                                
                                                	Tiebreaker type
                                                	**type**\:  :py:class:`OspfFastRerouteTiebreakersIntf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakersIntf>`
                                                
                                                .. attribute:: tiebreaker_index
                                                
                                                	Index value for a tiebreaker, 0 to disable
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, self).__init__()

                                                    self.yang_name = "tiebreaker"
                                                    self.yang_parent_name = "tiebreakers"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['tiebreaker_type']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('tiebreaker_type', YLeaf(YType.enumeration, 'tiebreaker-type')),
                                                        ('tiebreaker_index', YLeaf(YType.uint32, 'tiebreaker-index')),
                                                    ])
                                                    self.tiebreaker_type = None
                                                    self.tiebreaker_index = None
                                                    self._segment_path = lambda: "tiebreaker" + "[tiebreaker-type='" + str(self.tiebreaker_type) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, ['tiebreaker_type', 'tiebreaker_index'], name, value)


                                        class CandidateInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface))])
                                                self._leafs = OrderedDict()

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(Entity):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                        class ExcludeInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup or UCMP
                                            	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface))])
                                                self._leafs = OrderedDict()

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(Entity):
                                                """
                                                Exclude an interface from becoming a backup or
                                                UCMP
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                class CostFallback(Entity):
                                    """
                                    Interface fallback cost
                                    
                                    .. attribute:: cost
                                    
                                    	Fallback cost of link
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: threshold
                                    
                                    	Bandwidth threshold
                                    	**type**\: int
                                    
                                    	**range:** 1..4294967
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.CostFallback, self).__init__()

                                        self.yang_name = "cost-fallback"
                                        self.yang_parent_name = "name-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('cost', YLeaf(YType.uint32, 'cost')),
                                            ('threshold', YLeaf(YType.uint32, 'threshold')),
                                        ])
                                        self.cost = None
                                        self.threshold = None
                                        self._segment_path = lambda: "cost-fallback"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.CostFallback, ['cost', 'threshold'], name, value)


                        class MultiAreaInterfaceScopes(Entity):
                            """
                            Multi Area Interface scope configurations
                            
                            .. attribute:: multi_area_interface_scope
                            
                            	Multi Area Interface configuration
                            	**type**\: list of  		 :py:class:`MultiAreaInterfaceScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes, self).__init__()

                                self.yang_name = "multi-area-interface-scopes"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("multi-area-interface-scope", ("multi_area_interface_scope", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope))])
                                self._leafs = OrderedDict()

                                self.multi_area_interface_scope = YList(self)
                                self._segment_path = lambda: "multi-area-interface-scopes"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes, [], name, value)


                            class MultiAreaInterfaceScope(Entity):
                                """
                                Multi Area Interface configuration
                                
                                .. attribute:: interface_name  (key)
                                
                                	Name of Multi Area Interface to configure
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: distribute_list
                                
                                	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                                	**type**\:  :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DistributeList>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: cost
                                
                                	Interface cost
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: mtu_ignore
                                
                                	Enable/Disable ignoring of MTU in DBD packets
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: authentication
                                
                                	Authentication
                                	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication>`
                                
                                .. attribute:: neighbors
                                
                                	Neighbor router configuration information
                                	**type**\:  :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors>`
                                
                                .. attribute:: hello_interval
                                
                                	Interval between HELLO packets in seconds
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: passive
                                
                                	When enabled, prevent sending HELLO packets over link
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: transmit_delay
                                
                                	Number of seconds to delay transmission of LSAs
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 1
                                
                                .. attribute:: packet_size
                                
                                	Customize size of OSPF packets upto MTU
                                	**type**\: int
                                
                                	**range:** 576..10000
                                
                                .. attribute:: database_filter
                                
                                	Filter OSPF LSA during synchronization and flooding
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: dead_interval_minimal
                                
                                	Interval after which a neighbor is declared dead
                                	**type**\:  :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal>`
                                
                                .. attribute:: fast_reroute
                                
                                	Fast\-reroute configuration
                                	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute>`
                                
                                .. attribute:: retransmit_interval
                                
                                	Time in seconds between retransmitting lost link state advertisements
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 5
                                
                                .. attribute:: cost_fallback
                                
                                	Interface fallback cost
                                	**type**\:  :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback>`
                                
                                .. attribute:: running
                                
                                	Enable routing on an IP network
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope, self).__init__()

                                    self.yang_name = "multi-area-interface-scope"
                                    self.yang_parent_name = "multi-area-interface-scopes"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['interface_name']
                                    self._child_container_classes = OrderedDict([("distribute-list", ("distribute_list", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DistributeList)), ("authentication", ("authentication", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication)), ("neighbors", ("neighbors", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors)), ("dead-interval-minimal", ("dead_interval_minimal", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal)), ("fast-reroute", ("fast_reroute", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute)), ("cost-fallback", ("cost_fallback", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                        ('cost', YLeaf(YType.uint32, 'cost')),
                                        ('mtu_ignore', YLeaf(YType.boolean, 'mtu-ignore')),
                                        ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                                        ('passive', YLeaf(YType.boolean, 'passive')),
                                        ('transmit_delay', YLeaf(YType.uint32, 'transmit-delay')),
                                        ('packet_size', YLeaf(YType.uint32, 'packet-size')),
                                        ('database_filter', YLeaf(YType.boolean, 'database-filter')),
                                        ('retransmit_interval', YLeaf(YType.uint32, 'retransmit-interval')),
                                        ('running', YLeaf(YType.empty, 'running')),
                                    ])
                                    self.interface_name = None
                                    self.cost = None
                                    self.mtu_ignore = None
                                    self.hello_interval = None
                                    self.passive = None
                                    self.transmit_delay = None
                                    self.packet_size = None
                                    self.database_filter = None
                                    self.retransmit_interval = None
                                    self.running = None

                                    self.distribute_list = None
                                    self._children_name_map["distribute_list"] = "distribute-list"
                                    self._children_yang_names.add("distribute-list")

                                    self.authentication = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication()
                                    self.authentication.parent = self
                                    self._children_name_map["authentication"] = "authentication"
                                    self._children_yang_names.add("authentication")

                                    self.neighbors = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors()
                                    self.neighbors.parent = self
                                    self._children_name_map["neighbors"] = "neighbors"
                                    self._children_yang_names.add("neighbors")

                                    self.dead_interval_minimal = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal()
                                    self.dead_interval_minimal.parent = self
                                    self._children_name_map["dead_interval_minimal"] = "dead-interval-minimal"
                                    self._children_yang_names.add("dead-interval-minimal")

                                    self.fast_reroute = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute()
                                    self.fast_reroute.parent = self
                                    self._children_name_map["fast_reroute"] = "fast-reroute"
                                    self._children_yang_names.add("fast-reroute")

                                    self.cost_fallback = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback()
                                    self.cost_fallback.parent = self
                                    self._children_name_map["cost_fallback"] = "cost-fallback"
                                    self._children_yang_names.add("cost-fallback")
                                    self._segment_path = lambda: "multi-area-interface-scope" + "[interface-name='" + str(self.interface_name) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope, ['interface_name', 'cost', 'mtu_ignore', 'hello_interval', 'passive', 'transmit_delay', 'packet_size', 'database_filter', 'retransmit_interval', 'running'], name, value)


                                class DistributeList(Entity):
                                    """
                                    Filter networks intalled to RIB (disable as ACL
                                    name means filtering is disabled)
                                    
                                    .. attribute:: access_list_name
                                    
                                    	Access Control List name
                                    	**type**\: str
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route Policy name
                                    	**type**\: str
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DistributeList, self).__init__()

                                        self.yang_name = "distribute-list"
                                        self.yang_parent_name = "multi-area-interface-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('access_list_name', YLeaf(YType.str, 'access-list-name')),
                                            ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
                                        ])
                                        self.access_list_name = None
                                        self.route_policy_name = None
                                        self._segment_path = lambda: "distribute-list"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DistributeList, ['access_list_name', 'route_policy_name'], name, value)


                                class Authentication(Entity):
                                    """
                                    Authentication
                                    
                                    .. attribute:: type
                                    
                                    	Authentication type
                                    	**type**\:  :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type>`
                                    
                                    .. attribute:: message_digest_keies
                                    
                                    	Message digest authentication password (key) configurations, first 16 chars used
                                    	**type**\:  :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies>`
                                    
                                    .. attribute:: key
                                    
                                    	Authentication key configuration
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication, self).__init__()

                                        self.yang_name = "authentication"
                                        self.yang_parent_name = "multi-area-interface-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("type", ("type", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type)), ("message-digest-keies", ("message_digest_keies", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('key', YLeaf(YType.str, 'key')),
                                        ])
                                        self.key = None

                                        self.type = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type()
                                        self.type.parent = self
                                        self._children_name_map["type"] = "type"
                                        self._children_yang_names.add("type")

                                        self.message_digest_keies = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies()
                                        self.message_digest_keies.parent = self
                                        self._children_name_map["message_digest_keies"] = "message-digest-keies"
                                        self._children_yang_names.add("message-digest-keies")
                                        self._segment_path = lambda: "authentication"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication, ['key'], name, value)


                                    class Type(Entity):
                                        """
                                        Authentication type
                                        
                                        .. attribute:: authen_type
                                        
                                        	Authentication type code 
                                        	**type**\:  :py:class:`OspfAuthentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthentication>`
                                        
                                        .. attribute:: keychain_authen_type
                                        
                                        	Keychain authentication type
                                        	**type**\:  :py:class:`OspfKeychainAuth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuth>`
                                        
                                        .. attribute:: keychain_name
                                        
                                        	Keychain name
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type, self).__init__()

                                            self.yang_name = "type"
                                            self.yang_parent_name = "authentication"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('authen_type', YLeaf(YType.enumeration, 'authen-type')),
                                                ('keychain_authen_type', YLeaf(YType.enumeration, 'keychain-authen-type')),
                                                ('keychain_name', YLeaf(YType.str, 'keychain-name')),
                                            ])
                                            self.authen_type = None
                                            self.keychain_authen_type = None
                                            self.keychain_name = None
                                            self._segment_path = lambda: "type"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type, ['authen_type', 'keychain_authen_type', 'keychain_name'], name, value)


                                    class MessageDigestKeies(Entity):
                                        """
                                        Message digest authentication password (key)
                                        configurations, first 16 chars used
                                        
                                        .. attribute:: message_digest_key
                                        
                                        	Message digest authentication password (key) configuration
                                        	**type**\: list of  		 :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies, self).__init__()

                                            self.yang_name = "message-digest-keies"
                                            self.yang_parent_name = "authentication"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("message-digest-key", ("message_digest_key", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies.MessageDigestKey))])
                                            self._leafs = OrderedDict()

                                            self.message_digest_key = YList(self)
                                            self._segment_path = lambda: "message-digest-keies"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies, [], name, value)


                                        class MessageDigestKey(Entity):
                                            """
                                            Message digest authentication password (key)
                                            configuration
                                            
                                            .. attribute:: key_id  (key)
                                            
                                            	Key ID
                                            	**type**\: int
                                            
                                            	**range:** 1..255
                                            
                                            .. attribute:: password
                                            
                                            	Password
                                            	**type**\: str
                                            
                                            	**pattern:** (!.+)\|([^!].+)
                                            
                                            	**mandatory**\: True
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies.MessageDigestKey, self).__init__()

                                                self.yang_name = "message-digest-key"
                                                self.yang_parent_name = "message-digest-keies"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['key_id']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('key_id', YLeaf(YType.uint32, 'key-id')),
                                                    ('password', YLeaf(YType.str, 'password')),
                                                ])
                                                self.key_id = None
                                                self.password = None
                                                self._segment_path = lambda: "message-digest-key" + "[key-id='" + str(self.key_id) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies.MessageDigestKey, ['key_id', 'password'], name, value)


                                class Neighbors(Entity):
                                    """
                                    Neighbor router configuration information
                                    
                                    .. attribute:: neighbor
                                    
                                    	Router configuration information for a particular neighbor
                                    	**type**\: list of  		 :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors.Neighbor>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors, self).__init__()

                                        self.yang_name = "neighbors"
                                        self.yang_parent_name = "multi-area-interface-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("neighbor", ("neighbor", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors.Neighbor))])
                                        self._leafs = OrderedDict()

                                        self.neighbor = YList(self)
                                        self._segment_path = lambda: "neighbors"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors, [], name, value)


                                    class Neighbor(Entity):
                                        """
                                        Router configuration information for a
                                        particular neighbor
                                        
                                        .. attribute:: neighbor_address  (key)
                                        
                                        	Neighbor IP address
                                        	**type**\: str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: priority
                                        
                                        	OSPF priority of non\-broadcast neighbor
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        	**default value**\: 0
                                        
                                        .. attribute:: poll_interval
                                        
                                        	OSPF dead router poll\-interval in seconds
                                        	**type**\: int
                                        
                                        	**range:** 0..65535
                                        
                                        	**units**\: second
                                        
                                        	**default value**\: 40
                                        
                                        .. attribute:: cost
                                        
                                        	OSPF cost for point\-to\-multipoint neighbor
                                        	**type**\: int
                                        
                                        	**range:** 1..65535
                                        
                                        	**default value**\: 1
                                        
                                        .. attribute:: database_filter
                                        
                                        	Database filter\: Filter OSPF LSA during synchronization and flooding for point\-to\-multipoint
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors.Neighbor, self).__init__()

                                            self.yang_name = "neighbor"
                                            self.yang_parent_name = "neighbors"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['neighbor_address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                ('priority', YLeaf(YType.uint32, 'priority')),
                                                ('poll_interval', YLeaf(YType.uint32, 'poll-interval')),
                                                ('cost', YLeaf(YType.uint32, 'cost')),
                                                ('database_filter', YLeaf(YType.boolean, 'database-filter')),
                                            ])
                                            self.neighbor_address = None
                                            self.priority = None
                                            self.poll_interval = None
                                            self.cost = None
                                            self.database_filter = None
                                            self._segment_path = lambda: "neighbor" + "[neighbor-address='" + str(self.neighbor_address) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors.Neighbor, ['neighbor_address', 'priority', 'poll_interval', 'cost', 'database_filter'], name, value)


                                class DeadIntervalMinimal(Entity):
                                    """
                                    Interval after which a neighbor is declared dead
                                    
                                    .. attribute:: interval
                                    
                                    	Interval size in seconds after which a neighbor is declared dead
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: multiplier
                                    
                                    	Number of Hellos in one second
                                    	**type**\: int
                                    
                                    	**range:** 3..20
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal, self).__init__()

                                        self.yang_name = "dead-interval-minimal"
                                        self.yang_parent_name = "multi-area-interface-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interval', YLeaf(YType.uint32, 'interval')),
                                            ('multiplier', YLeaf(YType.uint32, 'multiplier')),
                                        ])
                                        self.interval = None
                                        self.multiplier = None
                                        self._segment_path = lambda: "dead-interval-minimal"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal, ['interval', 'multiplier'], name, value)


                                class FastReroute(Entity):
                                    """
                                    Fast\-reroute configuration
                                    
                                    .. attribute:: per_link
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink>`
                                    
                                    .. attribute:: per_prefix
                                    
                                    	Fast\-reroute per\-prefix global configuration
                                    	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix>`
                                    
                                    .. attribute:: fast_reroute_enable
                                    
                                    	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                    	**type**\:  :py:class:`OspfFastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastReroute>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute, self).__init__()

                                        self.yang_name = "fast-reroute"
                                        self.yang_parent_name = "multi-area-interface-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("per-link", ("per_link", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('fast_reroute_enable', YLeaf(YType.enumeration, 'fast-reroute-enable')),
                                        ])
                                        self.fast_reroute_enable = None

                                        self.per_link = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink()
                                        self.per_link.parent = self
                                        self._children_name_map["per_link"] = "per-link"
                                        self._children_yang_names.add("per-link")

                                        self.per_prefix = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix()
                                        self.per_prefix.parent = self
                                        self._children_name_map["per_prefix"] = "per-prefix"
                                        self._children_yang_names.add("per-prefix")
                                        self._segment_path = lambda: "fast-reroute"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute, ['fast_reroute_enable'], name, value)


                                    class PerLink(Entity):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                        	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink, self).__init__()

                                            self.yang_name = "per-link"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                            ])
                                            self.fast_reroute_use_candidate_only = None

                                            self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                            self._children_yang_names.add("candidate-interfaces")

                                            self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._children_yang_names.add("exclude-interfaces")
                                            self._segment_path = lambda: "per-link"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                        class CandidateInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface))])
                                                self._leafs = OrderedDict()

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(Entity):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                        class ExcludeInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup or UCMP
                                            	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface))])
                                                self._leafs = OrderedDict()

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(Entity):
                                                """
                                                Exclude an interface from becoming a backup or
                                                UCMP
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                    class PerPrefix(Entity):
                                        """
                                        Fast\-reroute per\-prefix global configuration
                                        
                                        .. attribute:: remote_lfa
                                        
                                        	Remote LFA configuration
                                        	**type**\:  :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa>`
                                        
                                        .. attribute:: tiebreakers
                                        
                                        	Fast\-reroute tiebreakers configurations
                                        	**type**\:  :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers>`
                                        
                                        .. attribute:: topology_independent_lfa
                                        
                                        	Topology Independet LFA configuration
                                        	**type**\: bool
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                        	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix, self).__init__()

                                            self.yang_name = "per-prefix"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("remote-lfa", ("remote_lfa", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa)), ("tiebreakers", ("tiebreakers", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers)), ("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('topology_independent_lfa', YLeaf(YType.boolean, 'topology-independent-lfa')),
                                                ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                            ])
                                            self.topology_independent_lfa = None
                                            self.fast_reroute_use_candidate_only = None

                                            self.remote_lfa = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa()
                                            self.remote_lfa.parent = self
                                            self._children_name_map["remote_lfa"] = "remote-lfa"
                                            self._children_yang_names.add("remote-lfa")

                                            self.tiebreakers = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers()
                                            self.tiebreakers.parent = self
                                            self._children_name_map["tiebreakers"] = "tiebreakers"
                                            self._children_yang_names.add("tiebreakers")

                                            self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                            self._children_yang_names.add("candidate-interfaces")

                                            self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._children_yang_names.add("exclude-interfaces")
                                            self._segment_path = lambda: "per-prefix"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix, ['topology_independent_lfa', 'fast_reroute_use_candidate_only'], name, value)


                                        class RemoteLfa(Entity):
                                            """
                                            Remote LFA configuration
                                            
                                            .. attribute:: tunnel
                                            
                                            	Enable/Disable remote LFA computation
                                            	**type**\:  :py:class:`OspfFrrRlfaTunnel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFrrRlfaTunnel>`
                                            
                                            .. attribute:: maximum_cost
                                            
                                            	Maximum path cost to remote LFA
                                            	**type**\: int
                                            
                                            	**range:** 1..4294967295
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa, self).__init__()

                                                self.yang_name = "remote-lfa"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('tunnel', YLeaf(YType.enumeration, 'tunnel')),
                                                    ('maximum_cost', YLeaf(YType.uint32, 'maximum-cost')),
                                                ])
                                                self.tunnel = None
                                                self.maximum_cost = None
                                                self._segment_path = lambda: "remote-lfa"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa, ['tunnel', 'maximum_cost'], name, value)


                                        class Tiebreakers(Entity):
                                            """
                                            Fast\-reroute tiebreakers configurations
                                            
                                            .. attribute:: tiebreaker
                                            
                                            	Fast\-reroute tiebreakers configuration
                                            	**type**\: list of  		 :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers, self).__init__()

                                                self.yang_name = "tiebreakers"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("tiebreaker", ("tiebreaker", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker))])
                                                self._leafs = OrderedDict()

                                                self.tiebreaker = YList(self)
                                                self._segment_path = lambda: "tiebreakers"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers, [], name, value)


                                            class Tiebreaker(Entity):
                                                """
                                                Fast\-reroute tiebreakers configuration
                                                
                                                .. attribute:: tiebreaker_type  (key)
                                                
                                                	Tiebreaker type
                                                	**type**\:  :py:class:`OspfFastRerouteTiebreakersIntf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakersIntf>`
                                                
                                                .. attribute:: tiebreaker_index
                                                
                                                	Index value for a tiebreaker, 0 to disable
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, self).__init__()

                                                    self.yang_name = "tiebreaker"
                                                    self.yang_parent_name = "tiebreakers"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['tiebreaker_type']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('tiebreaker_type', YLeaf(YType.enumeration, 'tiebreaker-type')),
                                                        ('tiebreaker_index', YLeaf(YType.uint32, 'tiebreaker-index')),
                                                    ])
                                                    self.tiebreaker_type = None
                                                    self.tiebreaker_index = None
                                                    self._segment_path = lambda: "tiebreaker" + "[tiebreaker-type='" + str(self.tiebreaker_type) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, ['tiebreaker_type', 'tiebreaker_index'], name, value)


                                        class CandidateInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface))])
                                                self._leafs = OrderedDict()

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(Entity):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                        class ExcludeInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup or UCMP
                                            	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface))])
                                                self._leafs = OrderedDict()

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(Entity):
                                                """
                                                Exclude an interface from becoming a backup or
                                                UCMP
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                class CostFallback(Entity):
                                    """
                                    Interface fallback cost
                                    
                                    .. attribute:: cost
                                    
                                    	Fallback cost of link
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: threshold
                                    
                                    	Bandwidth threshold
                                    	**type**\: int
                                    
                                    	**range:** 1..4294967
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback, self).__init__()

                                        self.yang_name = "cost-fallback"
                                        self.yang_parent_name = "multi-area-interface-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('cost', YLeaf(YType.uint32, 'cost')),
                                            ('threshold', YLeaf(YType.uint32, 'threshold')),
                                        ])
                                        self.cost = None
                                        self.threshold = None
                                        self._segment_path = lambda: "cost-fallback"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback, ['cost', 'threshold'], name, value)


                        class AreaRanges(Entity):
                            """
                            Summarize routes matching address/mask (border
                            routers only)
                            
                            .. attribute:: area_range
                            
                            	Ordering index
                            	**type**\: list of  		 :py:class:`AreaRange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaRanges.AreaRange>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaRanges, self).__init__()

                                self.yang_name = "area-ranges"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("area-range", ("area_range", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaRanges.AreaRange))])
                                self._leafs = OrderedDict()

                                self.area_range = YList(self)
                                self._segment_path = lambda: "area-ranges"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaRanges, [], name, value)


                            class AreaRange(Entity):
                                """
                                Ordering index
                                
                                .. attribute:: address  (key)
                                
                                	IP address to match
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: netmask  (key)
                                
                                	IP netmask for address
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: not_advertise
                                
                                	Do not advertise this range
                                	**type**\: bool
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaRanges.AreaRange, self).__init__()

                                    self.yang_name = "area-range"
                                    self.yang_parent_name = "area-ranges"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['address','netmask']
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('address', YLeaf(YType.str, 'address')),
                                        ('netmask', YLeaf(YType.str, 'netmask')),
                                        ('not_advertise', YLeaf(YType.boolean, 'not-advertise')),
                                    ])
                                    self.address = None
                                    self.netmask = None
                                    self.not_advertise = None
                                    self._segment_path = lambda: "area-range" + "[address='" + str(self.address) + "']" + "[netmask='" + str(self.netmask) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaRanges.AreaRange, ['address', 'netmask', 'not_advertise'], name, value)


                        class Nssa(Entity):
                            """
                            Specify area as a NSSA area
                            
                            .. attribute:: no_redistribution
                            
                            	No redistribution into this NSSA area
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: default_info_originate
                            
                            	Originate Type 7 default into NSSA area
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: no_summary
                            
                            	Do not send summary LSA into NSSA
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: nssa_def_metric
                            
                            	OSPF default metric
                            	**type**\: int
                            
                            	**range:** 1..16777214
                            
                            .. attribute:: metric_type
                            
                            	OSPF External metric type
                            	**type**\:  :py:class:`OspfLinkStateMetric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetric>`
                            
                            	**default value**\: type2
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Nssa, self).__init__()

                                self.yang_name = "nssa"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('no_redistribution', YLeaf(YType.boolean, 'no-redistribution')),
                                    ('default_info_originate', YLeaf(YType.boolean, 'default-info-originate')),
                                    ('no_summary', YLeaf(YType.boolean, 'no-summary')),
                                    ('nssa_def_metric', YLeaf(YType.uint32, 'nssa-def-metric')),
                                    ('metric_type', YLeaf(YType.enumeration, 'metric-type')),
                                ])
                                self.no_redistribution = None
                                self.default_info_originate = None
                                self.no_summary = None
                                self.nssa_def_metric = None
                                self.metric_type = None
                                self._segment_path = lambda: "nssa"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Nssa, ['no_redistribution', 'default_info_originate', 'no_summary', 'nssa_def_metric', 'metric_type'], name, value)


                    class AreaAreaId(Entity):
                        """
                        Configuration for a particular area
                        
                        .. attribute:: area_id  (key)
                        
                        	Area ID if in integer format
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: virtual_link_scopes
                        
                        	Virtual Link scope configurations
                        	**type**\:  :py:class:`VirtualLinkScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes>`
                        
                        .. attribute:: sham_link_scopes
                        
                        	Sham Link scope configurations
                        	**type**\:  :py:class:`ShamLinkScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes>`
                        
                        .. attribute:: area_scope
                        
                        	Area scope configuration
                        	**type**\:  :py:class:`AreaScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope>`
                        
                        .. attribute:: name_scopes
                        
                        	Name scope configurations
                        	**type**\:  :py:class:`NameScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes>`
                        
                        .. attribute:: multi_area_interface_scopes
                        
                        	Multi Area Interface scope configurations
                        	**type**\:  :py:class:`MultiAreaInterfaceScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes>`
                        
                        .. attribute:: area_ranges
                        
                        	Summarize routes matching address/mask (border routers only)
                        	**type**\:  :py:class:`AreaRanges <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaRanges>`
                        
                        .. attribute:: nssa
                        
                        	Specify area as a NSSA area
                        	**type**\:  :py:class:`Nssa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Nssa>`
                        
                        .. attribute:: route_policy_in
                        
                        	Configure a route policy for inbound type\-3 lsa filtering
                        	**type**\: str
                        
                        .. attribute:: default_cost
                        
                        	Set the summary default\-cost of a NSSA/stub area
                        	**type**\: int
                        
                        	**range:** 1..16777215
                        
                        	**default value**\: 1
                        
                        .. attribute:: route_policy_out
                        
                        	Configure a route policy for outbound type\-3 lsa filtering
                        	**type**\: str
                        
                        .. attribute:: stub
                        
                        	Specify the area as a stub area (send summary LSA stub area)
                        	**type**\: bool
                        
                        .. attribute:: mpls_traffic_eng
                        
                        	Configure an OSPF area to run MPLS Traffic Engineering
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: external_out
                        
                        	Enable/Disable an OSPF area to advertise intra\-area prefixes out of this area as external
                        	**type**\: bool
                        
                        .. attribute:: summary_in
                        
                        	Enable/Disable an OSPF area to advertise external prefixes into this area as summary
                        	**type**\: bool
                        
                        .. attribute:: segment_routing
                        
                        	segment\-routing configuration Applicable only in Default VRF
                        	**type**\:  :py:class:`OspfSegmentRouting <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRouting>`
                        
                        .. attribute:: running
                        
                        	Enable routing on an IP network
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId, self).__init__()

                            self.yang_name = "area-area-id"
                            self.yang_parent_name = "area-addresses"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['area_id']
                            self._child_container_classes = OrderedDict([("virtual-link-scopes", ("virtual_link_scopes", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes)), ("sham-link-scopes", ("sham_link_scopes", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes)), ("area-scope", ("area_scope", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope)), ("name-scopes", ("name_scopes", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes)), ("multi-area-interface-scopes", ("multi_area_interface_scopes", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes)), ("area-ranges", ("area_ranges", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaRanges)), ("nssa", ("nssa", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Nssa))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('area_id', YLeaf(YType.uint32, 'area-id')),
                                ('route_policy_in', YLeaf(YType.str, 'route-policy-in')),
                                ('default_cost', YLeaf(YType.uint32, 'default-cost')),
                                ('route_policy_out', YLeaf(YType.str, 'route-policy-out')),
                                ('stub', YLeaf(YType.boolean, 'stub')),
                                ('mpls_traffic_eng', YLeaf(YType.empty, 'mpls-traffic-eng')),
                                ('external_out', YLeaf(YType.boolean, 'external-out')),
                                ('summary_in', YLeaf(YType.boolean, 'summary-in')),
                                ('segment_routing', YLeaf(YType.enumeration, 'segment-routing')),
                                ('running', YLeaf(YType.empty, 'running')),
                            ])
                            self.area_id = None
                            self.route_policy_in = None
                            self.default_cost = None
                            self.route_policy_out = None
                            self.stub = None
                            self.mpls_traffic_eng = None
                            self.external_out = None
                            self.summary_in = None
                            self.segment_routing = None
                            self.running = None

                            self.virtual_link_scopes = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes()
                            self.virtual_link_scopes.parent = self
                            self._children_name_map["virtual_link_scopes"] = "virtual-link-scopes"
                            self._children_yang_names.add("virtual-link-scopes")

                            self.sham_link_scopes = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes()
                            self.sham_link_scopes.parent = self
                            self._children_name_map["sham_link_scopes"] = "sham-link-scopes"
                            self._children_yang_names.add("sham-link-scopes")

                            self.area_scope = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope()
                            self.area_scope.parent = self
                            self._children_name_map["area_scope"] = "area-scope"
                            self._children_yang_names.add("area-scope")

                            self.name_scopes = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes()
                            self.name_scopes.parent = self
                            self._children_name_map["name_scopes"] = "name-scopes"
                            self._children_yang_names.add("name-scopes")

                            self.multi_area_interface_scopes = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes()
                            self.multi_area_interface_scopes.parent = self
                            self._children_name_map["multi_area_interface_scopes"] = "multi-area-interface-scopes"
                            self._children_yang_names.add("multi-area-interface-scopes")

                            self.area_ranges = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaRanges()
                            self.area_ranges.parent = self
                            self._children_name_map["area_ranges"] = "area-ranges"
                            self._children_yang_names.add("area-ranges")

                            self.nssa = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Nssa()
                            self.nssa.parent = self
                            self._children_name_map["nssa"] = "nssa"
                            self._children_yang_names.add("nssa")
                            self._segment_path = lambda: "area-area-id" + "[area-id='" + str(self.area_id) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId, ['area_id', 'route_policy_in', 'default_cost', 'route_policy_out', 'stub', 'mpls_traffic_eng', 'external_out', 'summary_in', 'segment_routing', 'running'], name, value)


                        class VirtualLinkScopes(Entity):
                            """
                            Virtual Link scope configurations
                            
                            .. attribute:: virtual_link_scope
                            
                            	Virtual Link configuration
                            	**type**\: list of  		 :py:class:`VirtualLinkScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes, self).__init__()

                                self.yang_name = "virtual-link-scopes"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("virtual-link-scope", ("virtual_link_scope", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope))])
                                self._leafs = OrderedDict()

                                self.virtual_link_scope = YList(self)
                                self._segment_path = lambda: "virtual-link-scopes"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes, [], name, value)


                            class VirtualLinkScope(Entity):
                                """
                                Virtual Link configuration
                                
                                .. attribute:: address  (key)
                                
                                	Router ID of virtual link neighbor
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: authentication
                                
                                	Authentication
                                	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication>`
                                
                                .. attribute:: hello_interval
                                
                                	Interval between HELLO packets in seconds
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: transmit_delay
                                
                                	Number of seconds to delay transmission of LSAs
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 1
                                
                                .. attribute:: dead_interval_minimal
                                
                                	Interval after which a neighbor is declared dead
                                	**type**\:  :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal>`
                                
                                .. attribute:: retransmit_interval
                                
                                	Time in seconds between retransmitting lost link state advertisements
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 5
                                
                                .. attribute:: running
                                
                                	Enable routing on an IP network
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope, self).__init__()

                                    self.yang_name = "virtual-link-scope"
                                    self.yang_parent_name = "virtual-link-scopes"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['address']
                                    self._child_container_classes = OrderedDict([("authentication", ("authentication", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication)), ("dead-interval-minimal", ("dead_interval_minimal", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('address', YLeaf(YType.str, 'address')),
                                        ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                                        ('transmit_delay', YLeaf(YType.uint32, 'transmit-delay')),
                                        ('retransmit_interval', YLeaf(YType.uint32, 'retransmit-interval')),
                                        ('running', YLeaf(YType.empty, 'running')),
                                    ])
                                    self.address = None
                                    self.hello_interval = None
                                    self.transmit_delay = None
                                    self.retransmit_interval = None
                                    self.running = None

                                    self.authentication = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication()
                                    self.authentication.parent = self
                                    self._children_name_map["authentication"] = "authentication"
                                    self._children_yang_names.add("authentication")

                                    self.dead_interval_minimal = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal()
                                    self.dead_interval_minimal.parent = self
                                    self._children_name_map["dead_interval_minimal"] = "dead-interval-minimal"
                                    self._children_yang_names.add("dead-interval-minimal")
                                    self._segment_path = lambda: "virtual-link-scope" + "[address='" + str(self.address) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope, ['address', 'hello_interval', 'transmit_delay', 'retransmit_interval', 'running'], name, value)


                                class Authentication(Entity):
                                    """
                                    Authentication
                                    
                                    .. attribute:: type
                                    
                                    	Authentication type
                                    	**type**\:  :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.Type>`
                                    
                                    .. attribute:: message_digest_keies
                                    
                                    	Message digest authentication password (key) configurations, first 16 chars used
                                    	**type**\:  :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies>`
                                    
                                    .. attribute:: key
                                    
                                    	Authentication key configuration
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication, self).__init__()

                                        self.yang_name = "authentication"
                                        self.yang_parent_name = "virtual-link-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("type", ("type", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.Type)), ("message-digest-keies", ("message_digest_keies", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('key', YLeaf(YType.str, 'key')),
                                        ])
                                        self.key = None

                                        self.type = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.Type()
                                        self.type.parent = self
                                        self._children_name_map["type"] = "type"
                                        self._children_yang_names.add("type")

                                        self.message_digest_keies = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies()
                                        self.message_digest_keies.parent = self
                                        self._children_name_map["message_digest_keies"] = "message-digest-keies"
                                        self._children_yang_names.add("message-digest-keies")
                                        self._segment_path = lambda: "authentication"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication, ['key'], name, value)


                                    class Type(Entity):
                                        """
                                        Authentication type
                                        
                                        .. attribute:: authen_type
                                        
                                        	Authentication type code 
                                        	**type**\:  :py:class:`OspfAuthentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthentication>`
                                        
                                        .. attribute:: keychain_authen_type
                                        
                                        	Keychain authentication type
                                        	**type**\:  :py:class:`OspfKeychainAuth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuth>`
                                        
                                        .. attribute:: keychain_name
                                        
                                        	Keychain name
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.Type, self).__init__()

                                            self.yang_name = "type"
                                            self.yang_parent_name = "authentication"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('authen_type', YLeaf(YType.enumeration, 'authen-type')),
                                                ('keychain_authen_type', YLeaf(YType.enumeration, 'keychain-authen-type')),
                                                ('keychain_name', YLeaf(YType.str, 'keychain-name')),
                                            ])
                                            self.authen_type = None
                                            self.keychain_authen_type = None
                                            self.keychain_name = None
                                            self._segment_path = lambda: "type"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.Type, ['authen_type', 'keychain_authen_type', 'keychain_name'], name, value)


                                    class MessageDigestKeies(Entity):
                                        """
                                        Message digest authentication password (key)
                                        configurations, first 16 chars used
                                        
                                        .. attribute:: message_digest_key
                                        
                                        	Message digest authentication password (key) configuration
                                        	**type**\: list of  		 :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies, self).__init__()

                                            self.yang_name = "message-digest-keies"
                                            self.yang_parent_name = "authentication"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("message-digest-key", ("message_digest_key", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies.MessageDigestKey))])
                                            self._leafs = OrderedDict()

                                            self.message_digest_key = YList(self)
                                            self._segment_path = lambda: "message-digest-keies"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies, [], name, value)


                                        class MessageDigestKey(Entity):
                                            """
                                            Message digest authentication password (key)
                                            configuration
                                            
                                            .. attribute:: key_id  (key)
                                            
                                            	Key ID
                                            	**type**\: int
                                            
                                            	**range:** 1..255
                                            
                                            .. attribute:: password
                                            
                                            	Password
                                            	**type**\: str
                                            
                                            	**pattern:** (!.+)\|([^!].+)
                                            
                                            	**mandatory**\: True
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies.MessageDigestKey, self).__init__()

                                                self.yang_name = "message-digest-key"
                                                self.yang_parent_name = "message-digest-keies"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['key_id']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('key_id', YLeaf(YType.uint32, 'key-id')),
                                                    ('password', YLeaf(YType.str, 'password')),
                                                ])
                                                self.key_id = None
                                                self.password = None
                                                self._segment_path = lambda: "message-digest-key" + "[key-id='" + str(self.key_id) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies.MessageDigestKey, ['key_id', 'password'], name, value)


                                class DeadIntervalMinimal(Entity):
                                    """
                                    Interval after which a neighbor is declared dead
                                    
                                    .. attribute:: interval
                                    
                                    	Interval size in seconds after which a neighbor is declared dead
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: multiplier
                                    
                                    	Number of Hellos in one second
                                    	**type**\: int
                                    
                                    	**range:** 3..20
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal, self).__init__()

                                        self.yang_name = "dead-interval-minimal"
                                        self.yang_parent_name = "virtual-link-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interval', YLeaf(YType.uint32, 'interval')),
                                            ('multiplier', YLeaf(YType.uint32, 'multiplier')),
                                        ])
                                        self.interval = None
                                        self.multiplier = None
                                        self._segment_path = lambda: "dead-interval-minimal"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal, ['interval', 'multiplier'], name, value)


                        class ShamLinkScopes(Entity):
                            """
                            Sham Link scope configurations
                            
                            .. attribute:: sham_link_scope
                            
                            	Sham Link configuration
                            	**type**\: list of  		 :py:class:`ShamLinkScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes, self).__init__()

                                self.yang_name = "sham-link-scopes"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("sham-link-scope", ("sham_link_scope", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope))])
                                self._leafs = OrderedDict()

                                self.sham_link_scope = YList(self)
                                self._segment_path = lambda: "sham-link-scopes"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes, [], name, value)


                            class ShamLinkScope(Entity):
                                """
                                Sham Link configuration
                                
                                .. attribute:: source_address  (key)
                                
                                	Address of the local sham\-link endpoint
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: destination_address  (key)
                                
                                	Address of the remote sham\-link endpoint
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: source
                                
                                	Address of the local sham\-link endpoint. Enter an IP Address
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: cost
                                
                                	Interface cost
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: authentication
                                
                                	Authentication
                                	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication>`
                                
                                .. attribute:: hello_interval
                                
                                	Interval between HELLO packets in seconds
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: transmit_delay
                                
                                	Number of seconds to delay transmission of LSAs
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 1
                                
                                .. attribute:: dead_interval_minimal
                                
                                	Interval after which a neighbor is declared dead
                                	**type**\:  :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal>`
                                
                                .. attribute:: retransmit_interval
                                
                                	Time in seconds between retransmitting lost link state advertisements
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 5
                                
                                .. attribute:: running
                                
                                	Enable routing on an IP network
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope, self).__init__()

                                    self.yang_name = "sham-link-scope"
                                    self.yang_parent_name = "sham-link-scopes"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['source_address','destination_address']
                                    self._child_container_classes = OrderedDict([("authentication", ("authentication", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication)), ("dead-interval-minimal", ("dead_interval_minimal", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('source_address', YLeaf(YType.str, 'source-address')),
                                        ('destination_address', YLeaf(YType.str, 'destination-address')),
                                        ('source', YLeaf(YType.str, 'source')),
                                        ('cost', YLeaf(YType.uint32, 'cost')),
                                        ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                                        ('transmit_delay', YLeaf(YType.uint32, 'transmit-delay')),
                                        ('retransmit_interval', YLeaf(YType.uint32, 'retransmit-interval')),
                                        ('running', YLeaf(YType.empty, 'running')),
                                    ])
                                    self.source_address = None
                                    self.destination_address = None
                                    self.source = None
                                    self.cost = None
                                    self.hello_interval = None
                                    self.transmit_delay = None
                                    self.retransmit_interval = None
                                    self.running = None

                                    self.authentication = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication()
                                    self.authentication.parent = self
                                    self._children_name_map["authentication"] = "authentication"
                                    self._children_yang_names.add("authentication")

                                    self.dead_interval_minimal = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal()
                                    self.dead_interval_minimal.parent = self
                                    self._children_name_map["dead_interval_minimal"] = "dead-interval-minimal"
                                    self._children_yang_names.add("dead-interval-minimal")
                                    self._segment_path = lambda: "sham-link-scope" + "[source-address='" + str(self.source_address) + "']" + "[destination-address='" + str(self.destination_address) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope, ['source_address', 'destination_address', 'source', 'cost', 'hello_interval', 'transmit_delay', 'retransmit_interval', 'running'], name, value)


                                class Authentication(Entity):
                                    """
                                    Authentication
                                    
                                    .. attribute:: type
                                    
                                    	Authentication type
                                    	**type**\:  :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.Type>`
                                    
                                    .. attribute:: message_digest_keies
                                    
                                    	Message digest authentication password (key) configurations, first 16 chars used
                                    	**type**\:  :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies>`
                                    
                                    .. attribute:: key
                                    
                                    	Authentication key configuration
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication, self).__init__()

                                        self.yang_name = "authentication"
                                        self.yang_parent_name = "sham-link-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("type", ("type", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.Type)), ("message-digest-keies", ("message_digest_keies", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('key', YLeaf(YType.str, 'key')),
                                        ])
                                        self.key = None

                                        self.type = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.Type()
                                        self.type.parent = self
                                        self._children_name_map["type"] = "type"
                                        self._children_yang_names.add("type")

                                        self.message_digest_keies = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies()
                                        self.message_digest_keies.parent = self
                                        self._children_name_map["message_digest_keies"] = "message-digest-keies"
                                        self._children_yang_names.add("message-digest-keies")
                                        self._segment_path = lambda: "authentication"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication, ['key'], name, value)


                                    class Type(Entity):
                                        """
                                        Authentication type
                                        
                                        .. attribute:: authen_type
                                        
                                        	Authentication type code 
                                        	**type**\:  :py:class:`OspfAuthentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthentication>`
                                        
                                        .. attribute:: keychain_authen_type
                                        
                                        	Keychain authentication type
                                        	**type**\:  :py:class:`OspfKeychainAuth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuth>`
                                        
                                        .. attribute:: keychain_name
                                        
                                        	Keychain name
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.Type, self).__init__()

                                            self.yang_name = "type"
                                            self.yang_parent_name = "authentication"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('authen_type', YLeaf(YType.enumeration, 'authen-type')),
                                                ('keychain_authen_type', YLeaf(YType.enumeration, 'keychain-authen-type')),
                                                ('keychain_name', YLeaf(YType.str, 'keychain-name')),
                                            ])
                                            self.authen_type = None
                                            self.keychain_authen_type = None
                                            self.keychain_name = None
                                            self._segment_path = lambda: "type"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.Type, ['authen_type', 'keychain_authen_type', 'keychain_name'], name, value)


                                    class MessageDigestKeies(Entity):
                                        """
                                        Message digest authentication password (key)
                                        configurations, first 16 chars used
                                        
                                        .. attribute:: message_digest_key
                                        
                                        	Message digest authentication password (key) configuration
                                        	**type**\: list of  		 :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies, self).__init__()

                                            self.yang_name = "message-digest-keies"
                                            self.yang_parent_name = "authentication"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("message-digest-key", ("message_digest_key", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies.MessageDigestKey))])
                                            self._leafs = OrderedDict()

                                            self.message_digest_key = YList(self)
                                            self._segment_path = lambda: "message-digest-keies"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies, [], name, value)


                                        class MessageDigestKey(Entity):
                                            """
                                            Message digest authentication password (key)
                                            configuration
                                            
                                            .. attribute:: key_id  (key)
                                            
                                            	Key ID
                                            	**type**\: int
                                            
                                            	**range:** 1..255
                                            
                                            .. attribute:: password
                                            
                                            	Password
                                            	**type**\: str
                                            
                                            	**pattern:** (!.+)\|([^!].+)
                                            
                                            	**mandatory**\: True
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies.MessageDigestKey, self).__init__()

                                                self.yang_name = "message-digest-key"
                                                self.yang_parent_name = "message-digest-keies"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['key_id']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('key_id', YLeaf(YType.uint32, 'key-id')),
                                                    ('password', YLeaf(YType.str, 'password')),
                                                ])
                                                self.key_id = None
                                                self.password = None
                                                self._segment_path = lambda: "message-digest-key" + "[key-id='" + str(self.key_id) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies.MessageDigestKey, ['key_id', 'password'], name, value)


                                class DeadIntervalMinimal(Entity):
                                    """
                                    Interval after which a neighbor is declared dead
                                    
                                    .. attribute:: interval
                                    
                                    	Interval size in seconds after which a neighbor is declared dead
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: multiplier
                                    
                                    	Number of Hellos in one second
                                    	**type**\: int
                                    
                                    	**range:** 3..20
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal, self).__init__()

                                        self.yang_name = "dead-interval-minimal"
                                        self.yang_parent_name = "sham-link-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interval', YLeaf(YType.uint32, 'interval')),
                                            ('multiplier', YLeaf(YType.uint32, 'multiplier')),
                                        ])
                                        self.interval = None
                                        self.multiplier = None
                                        self._segment_path = lambda: "dead-interval-minimal"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal, ['interval', 'multiplier'], name, value)


                        class AreaScope(Entity):
                            """
                            Area scope configuration
                            
                            .. attribute:: distribute_list
                            
                            	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                            	**type**\:  :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.DistributeList>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: cost
                            
                            	Interface cost
                            	**type**\: int
                            
                            	**range:** 1..65535
                            
                            .. attribute:: bfd
                            
                            	BFD configuration
                            	**type**\:  :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Bfd>`
                            
                            .. attribute:: prefix_suppression_primary
                            
                            	Enable/Disable prefix suppression for primary addresses
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: mtu_ignore
                            
                            	Enable/Disable ignoring of MTU in DBD packets
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: authentication
                            
                            	Authentication
                            	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication>`
                            
                            .. attribute:: ldp_sync_igp_shortcuts
                            
                            	Enable/Disable MPLS LDP sync for igp\-shortcuts
                            	**type**\: bool
                            
                            .. attribute:: ldp_auto_config
                            
                            	Enable MPLS LDP Auto Config
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: security
                            
                            	Container class for security related configuration parameters
                            	**type**\:  :py:class:`Security <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Security>`
                            
                            .. attribute:: network_type
                            
                            	Type of attached network
                            	**type**\:  :py:class:`OspfNetwork <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfNetwork>`
                            
                            .. attribute:: hello_interval
                            
                            	Interval between HELLO packets in seconds
                            	**type**\: int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            .. attribute:: loopback_stub_network
                            
                            	Enable/Disable advertising loopback as a stub network
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: prefix_suppression_secondary
                            
                            	Enable/Disable prefix suppression for secondary addresses
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: demand_circuit
                            
                            	Enable/Disable OSPF demand circuit
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: passive
                            
                            	When enabled, prevent sending HELLO packets over link
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: transmit_delay
                            
                            	Number of seconds to delay transmission of LSAs
                            	**type**\: int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            	**default value**\: 1
                            
                            .. attribute:: packet_size
                            
                            	Customize size of OSPF packets upto MTU
                            	**type**\: int
                            
                            	**range:** 576..10000
                            
                            .. attribute:: ldp_sync
                            
                            	Enable/Disable MPLS LDP sync
                            	**type**\: bool
                            
                            .. attribute:: database_filter
                            
                            	Filter OSPF LSA during synchronization and flooding
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: dead_interval_minimal
                            
                            	Interval after which a neighbor is declared dead
                            	**type**\:  :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.DeadIntervalMinimal>`
                            
                            .. attribute:: fast_reroute
                            
                            	Fast\-reroute configuration
                            	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute>`
                            
                            .. attribute:: link_down_fast_detect
                            
                            	Enable/Disable registration for early interface down notifications
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: segment_routing_forwarding
                            
                            	segment\-routing forwarding configuration Applicableonly in Default VRF
                            	**type**\:  :py:class:`OspfSegmentRoutingForwarding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRoutingForwarding>`
                            
                            .. attribute:: retransmit_interval
                            
                            	Time in seconds between retransmitting lost link state advertisements
                            	**type**\: int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            	**default value**\: 5
                            
                            .. attribute:: priority
                            
                            	Router priority for DR and BDR election
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            	**default value**\: 1
                            
                            .. attribute:: flood_reduction
                            
                            	Enable/Disable OSPF flood reduction
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: cost_fallback
                            
                            	Interface fallback cost
                            	**type**\:  :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.CostFallback>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope, self).__init__()

                                self.yang_name = "area-scope"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("distribute-list", ("distribute_list", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.DistributeList)), ("bfd", ("bfd", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Bfd)), ("authentication", ("authentication", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication)), ("security", ("security", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Security)), ("dead-interval-minimal", ("dead_interval_minimal", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.DeadIntervalMinimal)), ("fast-reroute", ("fast_reroute", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute)), ("cost-fallback", ("cost_fallback", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.CostFallback))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('cost', YLeaf(YType.uint32, 'cost')),
                                    ('prefix_suppression_primary', YLeaf(YType.boolean, 'prefix-suppression-primary')),
                                    ('mtu_ignore', YLeaf(YType.boolean, 'mtu-ignore')),
                                    ('ldp_sync_igp_shortcuts', YLeaf(YType.boolean, 'ldp-sync-igp-shortcuts')),
                                    ('ldp_auto_config', YLeaf(YType.empty, 'ldp-auto-config')),
                                    ('network_type', YLeaf(YType.enumeration, 'network-type')),
                                    ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                                    ('loopback_stub_network', YLeaf(YType.boolean, 'loopback-stub-network')),
                                    ('prefix_suppression_secondary', YLeaf(YType.boolean, 'prefix-suppression-secondary')),
                                    ('demand_circuit', YLeaf(YType.boolean, 'demand-circuit')),
                                    ('passive', YLeaf(YType.boolean, 'passive')),
                                    ('transmit_delay', YLeaf(YType.uint32, 'transmit-delay')),
                                    ('packet_size', YLeaf(YType.uint32, 'packet-size')),
                                    ('ldp_sync', YLeaf(YType.boolean, 'ldp-sync')),
                                    ('database_filter', YLeaf(YType.boolean, 'database-filter')),
                                    ('link_down_fast_detect', YLeaf(YType.boolean, 'link-down-fast-detect')),
                                    ('segment_routing_forwarding', YLeaf(YType.enumeration, 'segment-routing-forwarding')),
                                    ('retransmit_interval', YLeaf(YType.uint32, 'retransmit-interval')),
                                    ('priority', YLeaf(YType.uint32, 'priority')),
                                    ('flood_reduction', YLeaf(YType.boolean, 'flood-reduction')),
                                ])
                                self.cost = None
                                self.prefix_suppression_primary = None
                                self.mtu_ignore = None
                                self.ldp_sync_igp_shortcuts = None
                                self.ldp_auto_config = None
                                self.network_type = None
                                self.hello_interval = None
                                self.loopback_stub_network = None
                                self.prefix_suppression_secondary = None
                                self.demand_circuit = None
                                self.passive = None
                                self.transmit_delay = None
                                self.packet_size = None
                                self.ldp_sync = None
                                self.database_filter = None
                                self.link_down_fast_detect = None
                                self.segment_routing_forwarding = None
                                self.retransmit_interval = None
                                self.priority = None
                                self.flood_reduction = None

                                self.distribute_list = None
                                self._children_name_map["distribute_list"] = "distribute-list"
                                self._children_yang_names.add("distribute-list")

                                self.bfd = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Bfd()
                                self.bfd.parent = self
                                self._children_name_map["bfd"] = "bfd"
                                self._children_yang_names.add("bfd")

                                self.authentication = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication()
                                self.authentication.parent = self
                                self._children_name_map["authentication"] = "authentication"
                                self._children_yang_names.add("authentication")

                                self.security = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Security()
                                self.security.parent = self
                                self._children_name_map["security"] = "security"
                                self._children_yang_names.add("security")

                                self.dead_interval_minimal = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.DeadIntervalMinimal()
                                self.dead_interval_minimal.parent = self
                                self._children_name_map["dead_interval_minimal"] = "dead-interval-minimal"
                                self._children_yang_names.add("dead-interval-minimal")

                                self.fast_reroute = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute()
                                self.fast_reroute.parent = self
                                self._children_name_map["fast_reroute"] = "fast-reroute"
                                self._children_yang_names.add("fast-reroute")

                                self.cost_fallback = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.CostFallback()
                                self.cost_fallback.parent = self
                                self._children_name_map["cost_fallback"] = "cost-fallback"
                                self._children_yang_names.add("cost-fallback")
                                self._segment_path = lambda: "area-scope"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope, ['cost', 'prefix_suppression_primary', 'mtu_ignore', 'ldp_sync_igp_shortcuts', 'ldp_auto_config', 'network_type', 'hello_interval', 'loopback_stub_network', 'prefix_suppression_secondary', 'demand_circuit', 'passive', 'transmit_delay', 'packet_size', 'ldp_sync', 'database_filter', 'link_down_fast_detect', 'segment_routing_forwarding', 'retransmit_interval', 'priority', 'flood_reduction'], name, value)


                            class DistributeList(Entity):
                                """
                                Filter networks intalled to RIB (disable as ACL
                                name means filtering is disabled)
                                
                                .. attribute:: access_list_name
                                
                                	Access Control List name
                                	**type**\: str
                                
                                .. attribute:: route_policy_name
                                
                                	Route Policy name
                                	**type**\: str
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.DistributeList, self).__init__()

                                    self.yang_name = "distribute-list"
                                    self.yang_parent_name = "area-scope"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self.is_presence_container = True
                                    self._leafs = OrderedDict([
                                        ('access_list_name', YLeaf(YType.str, 'access-list-name')),
                                        ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
                                    ])
                                    self.access_list_name = None
                                    self.route_policy_name = None
                                    self._segment_path = lambda: "distribute-list"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.DistributeList, ['access_list_name', 'route_policy_name'], name, value)


                            class Bfd(Entity):
                                """
                                BFD configuration
                                
                                .. attribute:: interval
                                
                                	Hello interval for BFD sessions created by OSPF
                                	**type**\: int
                                
                                	**range:** 3..30000
                                
                                	**units**\: millisecond
                                
                                .. attribute:: detection_multiplier
                                
                                	Detection multiplier for BFD sessions created by OSPF
                                	**type**\: int
                                
                                	**range:** 2..50
                                
                                .. attribute:: fast_detect_mode
                                
                                	 use of Bidirectional Forwarding Detection
                                	**type**\:  :py:class:`BfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.BfdEnableMode>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Bfd, self).__init__()

                                    self.yang_name = "bfd"
                                    self.yang_parent_name = "area-scope"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('interval', YLeaf(YType.uint32, 'interval')),
                                        ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                                        ('fast_detect_mode', YLeaf(YType.enumeration, 'fast-detect-mode')),
                                    ])
                                    self.interval = None
                                    self.detection_multiplier = None
                                    self.fast_detect_mode = None
                                    self._segment_path = lambda: "bfd"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Bfd, ['interval', 'detection_multiplier', 'fast_detect_mode'], name, value)


                            class Authentication(Entity):
                                """
                                Authentication
                                
                                .. attribute:: type
                                
                                	Authentication type
                                	**type**\:  :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.Type>`
                                
                                .. attribute:: message_digest_keies
                                
                                	Message digest authentication password (key) configurations, first 16 chars used
                                	**type**\:  :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies>`
                                
                                .. attribute:: key
                                
                                	Authentication key configuration
                                	**type**\: str
                                
                                	**pattern:** (!.+)\|([^!].+)
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication, self).__init__()

                                    self.yang_name = "authentication"
                                    self.yang_parent_name = "area-scope"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("type", ("type", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.Type)), ("message-digest-keies", ("message_digest_keies", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('key', YLeaf(YType.str, 'key')),
                                    ])
                                    self.key = None

                                    self.type = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.Type()
                                    self.type.parent = self
                                    self._children_name_map["type"] = "type"
                                    self._children_yang_names.add("type")

                                    self.message_digest_keies = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies()
                                    self.message_digest_keies.parent = self
                                    self._children_name_map["message_digest_keies"] = "message-digest-keies"
                                    self._children_yang_names.add("message-digest-keies")
                                    self._segment_path = lambda: "authentication"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication, ['key'], name, value)


                                class Type(Entity):
                                    """
                                    Authentication type
                                    
                                    .. attribute:: authen_type
                                    
                                    	Authentication type code 
                                    	**type**\:  :py:class:`OspfAuthentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthentication>`
                                    
                                    .. attribute:: keychain_authen_type
                                    
                                    	Keychain authentication type
                                    	**type**\:  :py:class:`OspfKeychainAuth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuth>`
                                    
                                    .. attribute:: keychain_name
                                    
                                    	Keychain name
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.Type, self).__init__()

                                        self.yang_name = "type"
                                        self.yang_parent_name = "authentication"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('authen_type', YLeaf(YType.enumeration, 'authen-type')),
                                            ('keychain_authen_type', YLeaf(YType.enumeration, 'keychain-authen-type')),
                                            ('keychain_name', YLeaf(YType.str, 'keychain-name')),
                                        ])
                                        self.authen_type = None
                                        self.keychain_authen_type = None
                                        self.keychain_name = None
                                        self._segment_path = lambda: "type"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.Type, ['authen_type', 'keychain_authen_type', 'keychain_name'], name, value)


                                class MessageDigestKeies(Entity):
                                    """
                                    Message digest authentication password (key)
                                    configurations, first 16 chars used
                                    
                                    .. attribute:: message_digest_key
                                    
                                    	Message digest authentication password (key) configuration
                                    	**type**\: list of  		 :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies, self).__init__()

                                        self.yang_name = "message-digest-keies"
                                        self.yang_parent_name = "authentication"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("message-digest-key", ("message_digest_key", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies.MessageDigestKey))])
                                        self._leafs = OrderedDict()

                                        self.message_digest_key = YList(self)
                                        self._segment_path = lambda: "message-digest-keies"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies, [], name, value)


                                    class MessageDigestKey(Entity):
                                        """
                                        Message digest authentication password (key)
                                        configuration
                                        
                                        .. attribute:: key_id  (key)
                                        
                                        	Key ID
                                        	**type**\: int
                                        
                                        	**range:** 1..255
                                        
                                        .. attribute:: password
                                        
                                        	Password
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        	**mandatory**\: True
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies.MessageDigestKey, self).__init__()

                                            self.yang_name = "message-digest-key"
                                            self.yang_parent_name = "message-digest-keies"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['key_id']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('key_id', YLeaf(YType.uint32, 'key-id')),
                                                ('password', YLeaf(YType.str, 'password')),
                                            ])
                                            self.key_id = None
                                            self.password = None
                                            self._segment_path = lambda: "message-digest-key" + "[key-id='" + str(self.key_id) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies.MessageDigestKey, ['key_id', 'password'], name, value)


                            class Security(Entity):
                                """
                                Container class for security related
                                configuration parameters
                                
                                .. attribute:: ttl
                                
                                	Enabling turns on TTL security
                                	**type**\:  :py:class:`Ttl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Security.Ttl>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Security, self).__init__()

                                    self.yang_name = "security"
                                    self.yang_parent_name = "area-scope"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("ttl", ("ttl", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Security.Ttl))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.ttl = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Security.Ttl()
                                    self.ttl.parent = self
                                    self._children_name_map["ttl"] = "ttl"
                                    self._children_yang_names.add("ttl")
                                    self._segment_path = lambda: "security"


                                class Ttl(Entity):
                                    """
                                    Enabling turns on TTL security
                                    
                                    .. attribute:: enable
                                    
                                    	Enable TTL security
                                    	**type**\: bool
                                    
                                    .. attribute:: hop_count
                                    
                                    	Hop count
                                    	**type**\: int
                                    
                                    	**range:** 1..254
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Security.Ttl, self).__init__()

                                        self.yang_name = "ttl"
                                        self.yang_parent_name = "security"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('enable', YLeaf(YType.boolean, 'enable')),
                                            ('hop_count', YLeaf(YType.uint32, 'hop-count')),
                                        ])
                                        self.enable = None
                                        self.hop_count = None
                                        self._segment_path = lambda: "ttl"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Security.Ttl, ['enable', 'hop_count'], name, value)


                            class DeadIntervalMinimal(Entity):
                                """
                                Interval after which a neighbor is declared dead
                                
                                .. attribute:: interval
                                
                                	Interval size in seconds after which a neighbor is declared dead
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: multiplier
                                
                                	Number of Hellos in one second
                                	**type**\: int
                                
                                	**range:** 3..20
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.DeadIntervalMinimal, self).__init__()

                                    self.yang_name = "dead-interval-minimal"
                                    self.yang_parent_name = "area-scope"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('interval', YLeaf(YType.uint32, 'interval')),
                                        ('multiplier', YLeaf(YType.uint32, 'multiplier')),
                                    ])
                                    self.interval = None
                                    self.multiplier = None
                                    self._segment_path = lambda: "dead-interval-minimal"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.DeadIntervalMinimal, ['interval', 'multiplier'], name, value)


                            class FastReroute(Entity):
                                """
                                Fast\-reroute configuration
                                
                                .. attribute:: per_link
                                
                                	Fast\-reroute per\-link configuration
                                	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink>`
                                
                                .. attribute:: per_prefix
                                
                                	Fast\-reroute per\-prefix global configuration
                                	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix>`
                                
                                .. attribute:: fast_reroute_enable
                                
                                	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                	**type**\:  :py:class:`OspfFastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastReroute>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute, self).__init__()

                                    self.yang_name = "fast-reroute"
                                    self.yang_parent_name = "area-scope"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("per-link", ("per_link", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('fast_reroute_enable', YLeaf(YType.enumeration, 'fast-reroute-enable')),
                                    ])
                                    self.fast_reroute_enable = None

                                    self.per_link = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink()
                                    self.per_link.parent = self
                                    self._children_name_map["per_link"] = "per-link"
                                    self._children_yang_names.add("per-link")

                                    self.per_prefix = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix()
                                    self.per_prefix.parent = self
                                    self._children_name_map["per_prefix"] = "per-prefix"
                                    self._children_yang_names.add("per-prefix")
                                    self._segment_path = lambda: "fast-reroute"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute, ['fast_reroute_enable'], name, value)


                                class PerLink(Entity):
                                    """
                                    Fast\-reroute per\-link configuration
                                    
                                    .. attribute:: fast_reroute_use_candidate_only
                                    
                                    	Use only interfaces on the candidate list as a backup path
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: candidate_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                    	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces>`
                                    
                                    .. attribute:: exclude_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                    	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink, self).__init__()

                                        self.yang_name = "per-link"
                                        self.yang_parent_name = "fast-reroute"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                        ])
                                        self.fast_reroute_use_candidate_only = None

                                        self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces()
                                        self.candidate_interfaces.parent = self
                                        self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                        self._children_yang_names.add("candidate-interfaces")

                                        self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces()
                                        self.exclude_interfaces.parent = self
                                        self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                        self._children_yang_names.add("exclude-interfaces")
                                        self._segment_path = lambda: "per-link"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                    class CandidateInterfaces(Entity):
                                        """
                                        Fast\-reroute per\-link/per\-prefix candidate
                                        interface configuration
                                        
                                        .. attribute:: candidate_interface
                                        
                                        	Candidate backup interface
                                        	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                            self.yang_name = "candidate-interfaces"
                                            self.yang_parent_name = "per-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface))])
                                            self._leafs = OrderedDict()

                                            self.candidate_interface = YList(self)
                                            self._segment_path = lambda: "candidate-interfaces"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                        class CandidateInterface(Entity):
                                            """
                                            Candidate backup interface
                                            
                                            .. attribute:: interface_name  (key)
                                            
                                            	Interface
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                self.yang_name = "candidate-interface"
                                                self.yang_parent_name = "candidate-interfaces"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['interface_name']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                ])
                                                self.interface_name = None
                                                self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                    class ExcludeInterfaces(Entity):
                                        """
                                        Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                        interface configuration
                                        
                                        .. attribute:: exclude_interface
                                        
                                        	Exclude an interface from becoming a backup or UCMP
                                        	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                            self.yang_name = "exclude-interfaces"
                                            self.yang_parent_name = "per-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface))])
                                            self._leafs = OrderedDict()

                                            self.exclude_interface = YList(self)
                                            self._segment_path = lambda: "exclude-interfaces"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                        class ExcludeInterface(Entity):
                                            """
                                            Exclude an interface from becoming a backup or
                                            UCMP
                                            
                                            .. attribute:: interface_name  (key)
                                            
                                            	Interface
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                self.yang_name = "exclude-interface"
                                                self.yang_parent_name = "exclude-interfaces"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['interface_name']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                ])
                                                self.interface_name = None
                                                self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                class PerPrefix(Entity):
                                    """
                                    Fast\-reroute per\-prefix global configuration
                                    
                                    .. attribute:: remote_lfa
                                    
                                    	Remote LFA configuration
                                    	**type**\:  :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.RemoteLfa>`
                                    
                                    .. attribute:: tiebreakers
                                    
                                    	Fast\-reroute tiebreakers configurations
                                    	**type**\:  :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers>`
                                    
                                    .. attribute:: topology_independent_lfa
                                    
                                    	Topology Independet LFA configuration
                                    	**type**\: bool
                                    
                                    .. attribute:: fast_reroute_use_candidate_only
                                    
                                    	Use only interfaces on the candidate list as a backup path
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: candidate_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                    	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                    
                                    .. attribute:: exclude_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                    	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix, self).__init__()

                                        self.yang_name = "per-prefix"
                                        self.yang_parent_name = "fast-reroute"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("remote-lfa", ("remote_lfa", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.RemoteLfa)), ("tiebreakers", ("tiebreakers", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers)), ("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('topology_independent_lfa', YLeaf(YType.boolean, 'topology-independent-lfa')),
                                            ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                        ])
                                        self.topology_independent_lfa = None
                                        self.fast_reroute_use_candidate_only = None

                                        self.remote_lfa = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.RemoteLfa()
                                        self.remote_lfa.parent = self
                                        self._children_name_map["remote_lfa"] = "remote-lfa"
                                        self._children_yang_names.add("remote-lfa")

                                        self.tiebreakers = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers()
                                        self.tiebreakers.parent = self
                                        self._children_name_map["tiebreakers"] = "tiebreakers"
                                        self._children_yang_names.add("tiebreakers")

                                        self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces()
                                        self.candidate_interfaces.parent = self
                                        self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                        self._children_yang_names.add("candidate-interfaces")

                                        self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                        self.exclude_interfaces.parent = self
                                        self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                        self._children_yang_names.add("exclude-interfaces")
                                        self._segment_path = lambda: "per-prefix"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix, ['topology_independent_lfa', 'fast_reroute_use_candidate_only'], name, value)


                                    class RemoteLfa(Entity):
                                        """
                                        Remote LFA configuration
                                        
                                        .. attribute:: tunnel
                                        
                                        	Enable/Disable remote LFA computation
                                        	**type**\:  :py:class:`OspfFrrRlfaTunnel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFrrRlfaTunnel>`
                                        
                                        .. attribute:: maximum_cost
                                        
                                        	Maximum path cost to remote LFA
                                        	**type**\: int
                                        
                                        	**range:** 1..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.RemoteLfa, self).__init__()

                                            self.yang_name = "remote-lfa"
                                            self.yang_parent_name = "per-prefix"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('tunnel', YLeaf(YType.enumeration, 'tunnel')),
                                                ('maximum_cost', YLeaf(YType.uint32, 'maximum-cost')),
                                            ])
                                            self.tunnel = None
                                            self.maximum_cost = None
                                            self._segment_path = lambda: "remote-lfa"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.RemoteLfa, ['tunnel', 'maximum_cost'], name, value)


                                    class Tiebreakers(Entity):
                                        """
                                        Fast\-reroute tiebreakers configurations
                                        
                                        .. attribute:: tiebreaker
                                        
                                        	Fast\-reroute tiebreakers configuration
                                        	**type**\: list of  		 :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers, self).__init__()

                                            self.yang_name = "tiebreakers"
                                            self.yang_parent_name = "per-prefix"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("tiebreaker", ("tiebreaker", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker))])
                                            self._leafs = OrderedDict()

                                            self.tiebreaker = YList(self)
                                            self._segment_path = lambda: "tiebreakers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers, [], name, value)


                                        class Tiebreaker(Entity):
                                            """
                                            Fast\-reroute tiebreakers configuration
                                            
                                            .. attribute:: tiebreaker_type  (key)
                                            
                                            	Tiebreaker type
                                            	**type**\:  :py:class:`OspfFastRerouteTiebreakersIntf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakersIntf>`
                                            
                                            .. attribute:: tiebreaker_index
                                            
                                            	Index value for a tiebreaker, 0 to disable
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            	**mandatory**\: True
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, self).__init__()

                                                self.yang_name = "tiebreaker"
                                                self.yang_parent_name = "tiebreakers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['tiebreaker_type']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('tiebreaker_type', YLeaf(YType.enumeration, 'tiebreaker-type')),
                                                    ('tiebreaker_index', YLeaf(YType.uint32, 'tiebreaker-index')),
                                                ])
                                                self.tiebreaker_type = None
                                                self.tiebreaker_index = None
                                                self._segment_path = lambda: "tiebreaker" + "[tiebreaker-type='" + str(self.tiebreaker_type) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, ['tiebreaker_type', 'tiebreaker_index'], name, value)


                                    class CandidateInterfaces(Entity):
                                        """
                                        Fast\-reroute per\-link/per\-prefix candidate
                                        interface configuration
                                        
                                        .. attribute:: candidate_interface
                                        
                                        	Candidate backup interface
                                        	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                            self.yang_name = "candidate-interfaces"
                                            self.yang_parent_name = "per-prefix"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface))])
                                            self._leafs = OrderedDict()

                                            self.candidate_interface = YList(self)
                                            self._segment_path = lambda: "candidate-interfaces"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                        class CandidateInterface(Entity):
                                            """
                                            Candidate backup interface
                                            
                                            .. attribute:: interface_name  (key)
                                            
                                            	Interface
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                self.yang_name = "candidate-interface"
                                                self.yang_parent_name = "candidate-interfaces"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['interface_name']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                ])
                                                self.interface_name = None
                                                self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                    class ExcludeInterfaces(Entity):
                                        """
                                        Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                        interface configuration
                                        
                                        .. attribute:: exclude_interface
                                        
                                        	Exclude an interface from becoming a backup or UCMP
                                        	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                            self.yang_name = "exclude-interfaces"
                                            self.yang_parent_name = "per-prefix"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface))])
                                            self._leafs = OrderedDict()

                                            self.exclude_interface = YList(self)
                                            self._segment_path = lambda: "exclude-interfaces"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                        class ExcludeInterface(Entity):
                                            """
                                            Exclude an interface from becoming a backup or
                                            UCMP
                                            
                                            .. attribute:: interface_name  (key)
                                            
                                            	Interface
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                self.yang_name = "exclude-interface"
                                                self.yang_parent_name = "exclude-interfaces"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['interface_name']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                ])
                                                self.interface_name = None
                                                self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                            class CostFallback(Entity):
                                """
                                Interface fallback cost
                                
                                .. attribute:: cost
                                
                                	Fallback cost of link
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: threshold
                                
                                	Bandwidth threshold
                                	**type**\: int
                                
                                	**range:** 1..4294967
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.CostFallback, self).__init__()

                                    self.yang_name = "cost-fallback"
                                    self.yang_parent_name = "area-scope"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('cost', YLeaf(YType.uint32, 'cost')),
                                        ('threshold', YLeaf(YType.uint32, 'threshold')),
                                    ])
                                    self.cost = None
                                    self.threshold = None
                                    self._segment_path = lambda: "cost-fallback"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.CostFallback, ['cost', 'threshold'], name, value)


                        class NameScopes(Entity):
                            """
                            Name scope configurations
                            
                            .. attribute:: name_scope
                            
                            	Name scope configuration
                            	**type**\: list of  		 :py:class:`NameScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes, self).__init__()

                                self.yang_name = "name-scopes"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("name-scope", ("name_scope", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope))])
                                self._leafs = OrderedDict()

                                self.name_scope = YList(self)
                                self._segment_path = lambda: "name-scopes"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes, [], name, value)


                            class NameScope(Entity):
                                """
                                Name scope configuration
                                
                                .. attribute:: interface_name  (key)
                                
                                	Name of Interface to configure
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: prefix_sid
                                
                                	Prefix SID
                                	**type**\:  :py:class:`PrefixSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.PrefixSid>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: prefix_sid_strict
                                
                                	Strict Prefix SID
                                	**type**\:  :py:class:`PrefixSidStrict <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.PrefixSidStrict>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: distribute_list
                                
                                	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                                	**type**\:  :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DistributeList>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: cost
                                
                                	Interface cost
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: bfd
                                
                                	BFD configuration
                                	**type**\:  :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Bfd>`
                                
                                .. attribute:: prefix_suppression_primary
                                
                                	Enable/Disable prefix suppression for primary addresses
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: mtu_ignore
                                
                                	Enable/Disable ignoring of MTU in DBD packets
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: authentication
                                
                                	Authentication
                                	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication>`
                                
                                .. attribute:: ldp_sync_igp_shortcuts
                                
                                	Enable/Disable MPLS LDP sync for igp\-shortcuts
                                	**type**\: bool
                                
                                .. attribute:: ldp_auto_config
                                
                                	Enable MPLS LDP Auto Config
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: security
                                
                                	Container class for security related configuration parameters
                                	**type**\:  :py:class:`Security <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security>`
                                
                                .. attribute:: neighbors
                                
                                	Neighbor router configuration information
                                	**type**\:  :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors>`
                                
                                .. attribute:: network_type
                                
                                	Type of attached network
                                	**type**\:  :py:class:`OspfNetwork <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfNetwork>`
                                
                                .. attribute:: hello_interval
                                
                                	Interval between HELLO packets in seconds
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: loopback_stub_network
                                
                                	Enable/Disable advertising loopback as a stub network
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: prefix_suppression_secondary
                                
                                	Enable/Disable prefix suppression for secondary addresses
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: demand_circuit
                                
                                	Enable/Disable OSPF demand circuit
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: passive
                                
                                	When enabled, prevent sending HELLO packets over link
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: transmit_delay
                                
                                	Number of seconds to delay transmission of LSAs
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 1
                                
                                .. attribute:: packet_size
                                
                                	Customize size of OSPF packets upto MTU
                                	**type**\: int
                                
                                	**range:** 576..10000
                                
                                .. attribute:: ldp_sync
                                
                                	Enable/Disable MPLS LDP sync
                                	**type**\: bool
                                
                                .. attribute:: database_filter
                                
                                	Filter OSPF LSA during synchronization and flooding
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: dead_interval_minimal
                                
                                	Interval after which a neighbor is declared dead
                                	**type**\:  :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DeadIntervalMinimal>`
                                
                                .. attribute:: fast_reroute
                                
                                	Fast\-reroute configuration
                                	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute>`
                                
                                .. attribute:: link_down_fast_detect
                                
                                	Enable/Disable registration for early interface down notifications
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: segment_routing_forwarding
                                
                                	segment\-routing forwarding configuration Applicableonly in Default VRF
                                	**type**\:  :py:class:`OspfSegmentRoutingForwarding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRoutingForwarding>`
                                
                                .. attribute:: retransmit_interval
                                
                                	Time in seconds between retransmitting lost link state advertisements
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 5
                                
                                .. attribute:: priority
                                
                                	Router priority for DR and BDR election
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                	**default value**\: 1
                                
                                .. attribute:: flood_reduction
                                
                                	Enable/Disable OSPF flood reduction
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: cost_fallback
                                
                                	Interface fallback cost
                                	**type**\:  :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.CostFallback>`
                                
                                .. attribute:: running
                                
                                	Enable routing on an IP network
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope, self).__init__()

                                    self.yang_name = "name-scope"
                                    self.yang_parent_name = "name-scopes"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['interface_name']
                                    self._child_container_classes = OrderedDict([("prefix-sid", ("prefix_sid", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.PrefixSid)), ("prefix-sid-strict", ("prefix_sid_strict", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.PrefixSidStrict)), ("distribute-list", ("distribute_list", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DistributeList)), ("bfd", ("bfd", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Bfd)), ("authentication", ("authentication", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication)), ("security", ("security", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security)), ("neighbors", ("neighbors", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors)), ("dead-interval-minimal", ("dead_interval_minimal", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DeadIntervalMinimal)), ("fast-reroute", ("fast_reroute", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute)), ("cost-fallback", ("cost_fallback", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.CostFallback))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                        ('cost', YLeaf(YType.uint32, 'cost')),
                                        ('prefix_suppression_primary', YLeaf(YType.boolean, 'prefix-suppression-primary')),
                                        ('mtu_ignore', YLeaf(YType.boolean, 'mtu-ignore')),
                                        ('ldp_sync_igp_shortcuts', YLeaf(YType.boolean, 'ldp-sync-igp-shortcuts')),
                                        ('ldp_auto_config', YLeaf(YType.empty, 'ldp-auto-config')),
                                        ('network_type', YLeaf(YType.enumeration, 'network-type')),
                                        ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                                        ('loopback_stub_network', YLeaf(YType.boolean, 'loopback-stub-network')),
                                        ('prefix_suppression_secondary', YLeaf(YType.boolean, 'prefix-suppression-secondary')),
                                        ('demand_circuit', YLeaf(YType.boolean, 'demand-circuit')),
                                        ('passive', YLeaf(YType.boolean, 'passive')),
                                        ('transmit_delay', YLeaf(YType.uint32, 'transmit-delay')),
                                        ('packet_size', YLeaf(YType.uint32, 'packet-size')),
                                        ('ldp_sync', YLeaf(YType.boolean, 'ldp-sync')),
                                        ('database_filter', YLeaf(YType.boolean, 'database-filter')),
                                        ('link_down_fast_detect', YLeaf(YType.boolean, 'link-down-fast-detect')),
                                        ('segment_routing_forwarding', YLeaf(YType.enumeration, 'segment-routing-forwarding')),
                                        ('retransmit_interval', YLeaf(YType.uint32, 'retransmit-interval')),
                                        ('priority', YLeaf(YType.uint32, 'priority')),
                                        ('flood_reduction', YLeaf(YType.boolean, 'flood-reduction')),
                                        ('running', YLeaf(YType.empty, 'running')),
                                    ])
                                    self.interface_name = None
                                    self.cost = None
                                    self.prefix_suppression_primary = None
                                    self.mtu_ignore = None
                                    self.ldp_sync_igp_shortcuts = None
                                    self.ldp_auto_config = None
                                    self.network_type = None
                                    self.hello_interval = None
                                    self.loopback_stub_network = None
                                    self.prefix_suppression_secondary = None
                                    self.demand_circuit = None
                                    self.passive = None
                                    self.transmit_delay = None
                                    self.packet_size = None
                                    self.ldp_sync = None
                                    self.database_filter = None
                                    self.link_down_fast_detect = None
                                    self.segment_routing_forwarding = None
                                    self.retransmit_interval = None
                                    self.priority = None
                                    self.flood_reduction = None
                                    self.running = None

                                    self.prefix_sid = None
                                    self._children_name_map["prefix_sid"] = "prefix-sid"
                                    self._children_yang_names.add("prefix-sid")

                                    self.prefix_sid_strict = None
                                    self._children_name_map["prefix_sid_strict"] = "prefix-sid-strict"
                                    self._children_yang_names.add("prefix-sid-strict")

                                    self.distribute_list = None
                                    self._children_name_map["distribute_list"] = "distribute-list"
                                    self._children_yang_names.add("distribute-list")

                                    self.bfd = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Bfd()
                                    self.bfd.parent = self
                                    self._children_name_map["bfd"] = "bfd"
                                    self._children_yang_names.add("bfd")

                                    self.authentication = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication()
                                    self.authentication.parent = self
                                    self._children_name_map["authentication"] = "authentication"
                                    self._children_yang_names.add("authentication")

                                    self.security = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security()
                                    self.security.parent = self
                                    self._children_name_map["security"] = "security"
                                    self._children_yang_names.add("security")

                                    self.neighbors = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors()
                                    self.neighbors.parent = self
                                    self._children_name_map["neighbors"] = "neighbors"
                                    self._children_yang_names.add("neighbors")

                                    self.dead_interval_minimal = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DeadIntervalMinimal()
                                    self.dead_interval_minimal.parent = self
                                    self._children_name_map["dead_interval_minimal"] = "dead-interval-minimal"
                                    self._children_yang_names.add("dead-interval-minimal")

                                    self.fast_reroute = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute()
                                    self.fast_reroute.parent = self
                                    self._children_name_map["fast_reroute"] = "fast-reroute"
                                    self._children_yang_names.add("fast-reroute")

                                    self.cost_fallback = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.CostFallback()
                                    self.cost_fallback.parent = self
                                    self._children_name_map["cost_fallback"] = "cost-fallback"
                                    self._children_yang_names.add("cost-fallback")
                                    self._segment_path = lambda: "name-scope" + "[interface-name='" + str(self.interface_name) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope, ['interface_name', 'cost', 'prefix_suppression_primary', 'mtu_ignore', 'ldp_sync_igp_shortcuts', 'ldp_auto_config', 'network_type', 'hello_interval', 'loopback_stub_network', 'prefix_suppression_secondary', 'demand_circuit', 'passive', 'transmit_delay', 'packet_size', 'ldp_sync', 'database_filter', 'link_down_fast_detect', 'segment_routing_forwarding', 'retransmit_interval', 'priority', 'flood_reduction', 'running'], name, value)


                                class PrefixSid(Entity):
                                    """
                                    Prefix SID
                                    
                                    .. attribute:: sid_value
                                    
                                    	SID value
                                    	**type**\: int
                                    
                                    	**range:** 0..1048575
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: explicit_null
                                    
                                    	Force Penultimate Hop To Send Explicit\-Null Label
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: type
                                    
                                    	OSPF SID Type
                                    	**type**\:  :py:class:`OspfSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSid>`
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: n_flag_clear
                                    
                                    	Not a node SID
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.PrefixSid, self).__init__()

                                        self.yang_name = "prefix-sid"
                                        self.yang_parent_name = "name-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                            ('explicit_null', YLeaf(YType.boolean, 'explicit-null')),
                                            ('type', YLeaf(YType.enumeration, 'type')),
                                            ('n_flag_clear', YLeaf(YType.boolean, 'n-flag-clear')),
                                        ])
                                        self.sid_value = None
                                        self.explicit_null = None
                                        self.type = None
                                        self.n_flag_clear = None
                                        self._segment_path = lambda: "prefix-sid"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.PrefixSid, ['sid_value', 'explicit_null', 'type', 'n_flag_clear'], name, value)


                                class PrefixSidStrict(Entity):
                                    """
                                    Strict Prefix SID
                                    
                                    .. attribute:: sid_value
                                    
                                    	SID value
                                    	**type**\: int
                                    
                                    	**range:** 0..1048575
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: explicit_null
                                    
                                    	Force Penultimate Hop To Send Explicit\-Null Label
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: type
                                    
                                    	OSPF SID Type
                                    	**type**\:  :py:class:`OspfSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSid>`
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: n_flag_clear
                                    
                                    	Not a node SID
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.PrefixSidStrict, self).__init__()

                                        self.yang_name = "prefix-sid-strict"
                                        self.yang_parent_name = "name-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                            ('explicit_null', YLeaf(YType.boolean, 'explicit-null')),
                                            ('type', YLeaf(YType.enumeration, 'type')),
                                            ('n_flag_clear', YLeaf(YType.boolean, 'n-flag-clear')),
                                        ])
                                        self.sid_value = None
                                        self.explicit_null = None
                                        self.type = None
                                        self.n_flag_clear = None
                                        self._segment_path = lambda: "prefix-sid-strict"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.PrefixSidStrict, ['sid_value', 'explicit_null', 'type', 'n_flag_clear'], name, value)


                                class DistributeList(Entity):
                                    """
                                    Filter networks intalled to RIB (disable as ACL
                                    name means filtering is disabled)
                                    
                                    .. attribute:: access_list_name
                                    
                                    	Access Control List name
                                    	**type**\: str
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route Policy name
                                    	**type**\: str
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DistributeList, self).__init__()

                                        self.yang_name = "distribute-list"
                                        self.yang_parent_name = "name-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('access_list_name', YLeaf(YType.str, 'access-list-name')),
                                            ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
                                        ])
                                        self.access_list_name = None
                                        self.route_policy_name = None
                                        self._segment_path = lambda: "distribute-list"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DistributeList, ['access_list_name', 'route_policy_name'], name, value)


                                class Bfd(Entity):
                                    """
                                    BFD configuration
                                    
                                    .. attribute:: interval
                                    
                                    	Hello interval for BFD sessions created by OSPF
                                    	**type**\: int
                                    
                                    	**range:** 3..30000
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: detection_multiplier
                                    
                                    	Detection multiplier for BFD sessions created by OSPF
                                    	**type**\: int
                                    
                                    	**range:** 2..50
                                    
                                    .. attribute:: fast_detect_mode
                                    
                                    	 use of Bidirectional Forwarding Detection
                                    	**type**\:  :py:class:`BfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.BfdEnableMode>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Bfd, self).__init__()

                                        self.yang_name = "bfd"
                                        self.yang_parent_name = "name-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interval', YLeaf(YType.uint32, 'interval')),
                                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                                            ('fast_detect_mode', YLeaf(YType.enumeration, 'fast-detect-mode')),
                                        ])
                                        self.interval = None
                                        self.detection_multiplier = None
                                        self.fast_detect_mode = None
                                        self._segment_path = lambda: "bfd"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Bfd, ['interval', 'detection_multiplier', 'fast_detect_mode'], name, value)


                                class Authentication(Entity):
                                    """
                                    Authentication
                                    
                                    .. attribute:: type
                                    
                                    	Authentication type
                                    	**type**\:  :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.Type>`
                                    
                                    .. attribute:: message_digest_keies
                                    
                                    	Message digest authentication password (key) configurations, first 16 chars used
                                    	**type**\:  :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies>`
                                    
                                    .. attribute:: key
                                    
                                    	Authentication key configuration
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication, self).__init__()

                                        self.yang_name = "authentication"
                                        self.yang_parent_name = "name-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("type", ("type", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.Type)), ("message-digest-keies", ("message_digest_keies", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('key', YLeaf(YType.str, 'key')),
                                        ])
                                        self.key = None

                                        self.type = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.Type()
                                        self.type.parent = self
                                        self._children_name_map["type"] = "type"
                                        self._children_yang_names.add("type")

                                        self.message_digest_keies = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies()
                                        self.message_digest_keies.parent = self
                                        self._children_name_map["message_digest_keies"] = "message-digest-keies"
                                        self._children_yang_names.add("message-digest-keies")
                                        self._segment_path = lambda: "authentication"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication, ['key'], name, value)


                                    class Type(Entity):
                                        """
                                        Authentication type
                                        
                                        .. attribute:: authen_type
                                        
                                        	Authentication type code 
                                        	**type**\:  :py:class:`OspfAuthentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthentication>`
                                        
                                        .. attribute:: keychain_authen_type
                                        
                                        	Keychain authentication type
                                        	**type**\:  :py:class:`OspfKeychainAuth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuth>`
                                        
                                        .. attribute:: keychain_name
                                        
                                        	Keychain name
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.Type, self).__init__()

                                            self.yang_name = "type"
                                            self.yang_parent_name = "authentication"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('authen_type', YLeaf(YType.enumeration, 'authen-type')),
                                                ('keychain_authen_type', YLeaf(YType.enumeration, 'keychain-authen-type')),
                                                ('keychain_name', YLeaf(YType.str, 'keychain-name')),
                                            ])
                                            self.authen_type = None
                                            self.keychain_authen_type = None
                                            self.keychain_name = None
                                            self._segment_path = lambda: "type"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.Type, ['authen_type', 'keychain_authen_type', 'keychain_name'], name, value)


                                    class MessageDigestKeies(Entity):
                                        """
                                        Message digest authentication password (key)
                                        configurations, first 16 chars used
                                        
                                        .. attribute:: message_digest_key
                                        
                                        	Message digest authentication password (key) configuration
                                        	**type**\: list of  		 :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies, self).__init__()

                                            self.yang_name = "message-digest-keies"
                                            self.yang_parent_name = "authentication"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("message-digest-key", ("message_digest_key", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies.MessageDigestKey))])
                                            self._leafs = OrderedDict()

                                            self.message_digest_key = YList(self)
                                            self._segment_path = lambda: "message-digest-keies"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies, [], name, value)


                                        class MessageDigestKey(Entity):
                                            """
                                            Message digest authentication password (key)
                                            configuration
                                            
                                            .. attribute:: key_id  (key)
                                            
                                            	Key ID
                                            	**type**\: int
                                            
                                            	**range:** 1..255
                                            
                                            .. attribute:: password
                                            
                                            	Password
                                            	**type**\: str
                                            
                                            	**pattern:** (!.+)\|([^!].+)
                                            
                                            	**mandatory**\: True
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies.MessageDigestKey, self).__init__()

                                                self.yang_name = "message-digest-key"
                                                self.yang_parent_name = "message-digest-keies"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['key_id']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('key_id', YLeaf(YType.uint32, 'key-id')),
                                                    ('password', YLeaf(YType.str, 'password')),
                                                ])
                                                self.key_id = None
                                                self.password = None
                                                self._segment_path = lambda: "message-digest-key" + "[key-id='" + str(self.key_id) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies.MessageDigestKey, ['key_id', 'password'], name, value)


                                class Security(Entity):
                                    """
                                    Container class for security related
                                    configuration parameters
                                    
                                    .. attribute:: ttl
                                    
                                    	Enabling turns on TTL security
                                    	**type**\:  :py:class:`Ttl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security.Ttl>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security, self).__init__()

                                        self.yang_name = "security"
                                        self.yang_parent_name = "name-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("ttl", ("ttl", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security.Ttl))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.ttl = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security.Ttl()
                                        self.ttl.parent = self
                                        self._children_name_map["ttl"] = "ttl"
                                        self._children_yang_names.add("ttl")
                                        self._segment_path = lambda: "security"


                                    class Ttl(Entity):
                                        """
                                        Enabling turns on TTL security
                                        
                                        .. attribute:: enable
                                        
                                        	Enable TTL security
                                        	**type**\: bool
                                        
                                        .. attribute:: hop_count
                                        
                                        	Hop count
                                        	**type**\: int
                                        
                                        	**range:** 1..254
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security.Ttl, self).__init__()

                                            self.yang_name = "ttl"
                                            self.yang_parent_name = "security"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('enable', YLeaf(YType.boolean, 'enable')),
                                                ('hop_count', YLeaf(YType.uint32, 'hop-count')),
                                            ])
                                            self.enable = None
                                            self.hop_count = None
                                            self._segment_path = lambda: "ttl"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security.Ttl, ['enable', 'hop_count'], name, value)


                                class Neighbors(Entity):
                                    """
                                    Neighbor router configuration information
                                    
                                    .. attribute:: neighbor
                                    
                                    	Router configuration information for a particular neighbor
                                    	**type**\: list of  		 :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors.Neighbor>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors, self).__init__()

                                        self.yang_name = "neighbors"
                                        self.yang_parent_name = "name-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("neighbor", ("neighbor", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors.Neighbor))])
                                        self._leafs = OrderedDict()

                                        self.neighbor = YList(self)
                                        self._segment_path = lambda: "neighbors"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors, [], name, value)


                                    class Neighbor(Entity):
                                        """
                                        Router configuration information for a
                                        particular neighbor
                                        
                                        .. attribute:: neighbor_address  (key)
                                        
                                        	Neighbor IP address
                                        	**type**\: str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: priority
                                        
                                        	OSPF priority of non\-broadcast neighbor
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        	**default value**\: 0
                                        
                                        .. attribute:: poll_interval
                                        
                                        	OSPF dead router poll\-interval in seconds
                                        	**type**\: int
                                        
                                        	**range:** 0..65535
                                        
                                        	**units**\: second
                                        
                                        	**default value**\: 40
                                        
                                        .. attribute:: cost
                                        
                                        	OSPF cost for point\-to\-multipoint neighbor
                                        	**type**\: int
                                        
                                        	**range:** 1..65535
                                        
                                        	**default value**\: 1
                                        
                                        .. attribute:: database_filter
                                        
                                        	Database filter\: Filter OSPF LSA during synchronization and flooding for point\-to\-multipoint
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors.Neighbor, self).__init__()

                                            self.yang_name = "neighbor"
                                            self.yang_parent_name = "neighbors"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['neighbor_address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                ('priority', YLeaf(YType.uint32, 'priority')),
                                                ('poll_interval', YLeaf(YType.uint32, 'poll-interval')),
                                                ('cost', YLeaf(YType.uint32, 'cost')),
                                                ('database_filter', YLeaf(YType.boolean, 'database-filter')),
                                            ])
                                            self.neighbor_address = None
                                            self.priority = None
                                            self.poll_interval = None
                                            self.cost = None
                                            self.database_filter = None
                                            self._segment_path = lambda: "neighbor" + "[neighbor-address='" + str(self.neighbor_address) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors.Neighbor, ['neighbor_address', 'priority', 'poll_interval', 'cost', 'database_filter'], name, value)


                                class DeadIntervalMinimal(Entity):
                                    """
                                    Interval after which a neighbor is declared dead
                                    
                                    .. attribute:: interval
                                    
                                    	Interval size in seconds after which a neighbor is declared dead
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: multiplier
                                    
                                    	Number of Hellos in one second
                                    	**type**\: int
                                    
                                    	**range:** 3..20
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DeadIntervalMinimal, self).__init__()

                                        self.yang_name = "dead-interval-minimal"
                                        self.yang_parent_name = "name-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interval', YLeaf(YType.uint32, 'interval')),
                                            ('multiplier', YLeaf(YType.uint32, 'multiplier')),
                                        ])
                                        self.interval = None
                                        self.multiplier = None
                                        self._segment_path = lambda: "dead-interval-minimal"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DeadIntervalMinimal, ['interval', 'multiplier'], name, value)


                                class FastReroute(Entity):
                                    """
                                    Fast\-reroute configuration
                                    
                                    .. attribute:: per_link
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink>`
                                    
                                    .. attribute:: per_prefix
                                    
                                    	Fast\-reroute per\-prefix global configuration
                                    	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix>`
                                    
                                    .. attribute:: fast_reroute_enable
                                    
                                    	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                    	**type**\:  :py:class:`OspfFastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastReroute>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute, self).__init__()

                                        self.yang_name = "fast-reroute"
                                        self.yang_parent_name = "name-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("per-link", ("per_link", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('fast_reroute_enable', YLeaf(YType.enumeration, 'fast-reroute-enable')),
                                        ])
                                        self.fast_reroute_enable = None

                                        self.per_link = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink()
                                        self.per_link.parent = self
                                        self._children_name_map["per_link"] = "per-link"
                                        self._children_yang_names.add("per-link")

                                        self.per_prefix = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix()
                                        self.per_prefix.parent = self
                                        self._children_name_map["per_prefix"] = "per-prefix"
                                        self._children_yang_names.add("per-prefix")
                                        self._segment_path = lambda: "fast-reroute"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute, ['fast_reroute_enable'], name, value)


                                    class PerLink(Entity):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                        	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink, self).__init__()

                                            self.yang_name = "per-link"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                            ])
                                            self.fast_reroute_use_candidate_only = None

                                            self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                            self._children_yang_names.add("candidate-interfaces")

                                            self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._children_yang_names.add("exclude-interfaces")
                                            self._segment_path = lambda: "per-link"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                        class CandidateInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface))])
                                                self._leafs = OrderedDict()

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(Entity):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                        class ExcludeInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup or UCMP
                                            	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface))])
                                                self._leafs = OrderedDict()

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(Entity):
                                                """
                                                Exclude an interface from becoming a backup or
                                                UCMP
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                    class PerPrefix(Entity):
                                        """
                                        Fast\-reroute per\-prefix global configuration
                                        
                                        .. attribute:: remote_lfa
                                        
                                        	Remote LFA configuration
                                        	**type**\:  :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa>`
                                        
                                        .. attribute:: tiebreakers
                                        
                                        	Fast\-reroute tiebreakers configurations
                                        	**type**\:  :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers>`
                                        
                                        .. attribute:: topology_independent_lfa
                                        
                                        	Topology Independet LFA configuration
                                        	**type**\: bool
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                        	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix, self).__init__()

                                            self.yang_name = "per-prefix"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("remote-lfa", ("remote_lfa", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa)), ("tiebreakers", ("tiebreakers", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers)), ("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('topology_independent_lfa', YLeaf(YType.boolean, 'topology-independent-lfa')),
                                                ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                            ])
                                            self.topology_independent_lfa = None
                                            self.fast_reroute_use_candidate_only = None

                                            self.remote_lfa = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa()
                                            self.remote_lfa.parent = self
                                            self._children_name_map["remote_lfa"] = "remote-lfa"
                                            self._children_yang_names.add("remote-lfa")

                                            self.tiebreakers = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers()
                                            self.tiebreakers.parent = self
                                            self._children_name_map["tiebreakers"] = "tiebreakers"
                                            self._children_yang_names.add("tiebreakers")

                                            self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                            self._children_yang_names.add("candidate-interfaces")

                                            self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._children_yang_names.add("exclude-interfaces")
                                            self._segment_path = lambda: "per-prefix"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix, ['topology_independent_lfa', 'fast_reroute_use_candidate_only'], name, value)


                                        class RemoteLfa(Entity):
                                            """
                                            Remote LFA configuration
                                            
                                            .. attribute:: tunnel
                                            
                                            	Enable/Disable remote LFA computation
                                            	**type**\:  :py:class:`OspfFrrRlfaTunnel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFrrRlfaTunnel>`
                                            
                                            .. attribute:: maximum_cost
                                            
                                            	Maximum path cost to remote LFA
                                            	**type**\: int
                                            
                                            	**range:** 1..4294967295
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa, self).__init__()

                                                self.yang_name = "remote-lfa"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('tunnel', YLeaf(YType.enumeration, 'tunnel')),
                                                    ('maximum_cost', YLeaf(YType.uint32, 'maximum-cost')),
                                                ])
                                                self.tunnel = None
                                                self.maximum_cost = None
                                                self._segment_path = lambda: "remote-lfa"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa, ['tunnel', 'maximum_cost'], name, value)


                                        class Tiebreakers(Entity):
                                            """
                                            Fast\-reroute tiebreakers configurations
                                            
                                            .. attribute:: tiebreaker
                                            
                                            	Fast\-reroute tiebreakers configuration
                                            	**type**\: list of  		 :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers, self).__init__()

                                                self.yang_name = "tiebreakers"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("tiebreaker", ("tiebreaker", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker))])
                                                self._leafs = OrderedDict()

                                                self.tiebreaker = YList(self)
                                                self._segment_path = lambda: "tiebreakers"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers, [], name, value)


                                            class Tiebreaker(Entity):
                                                """
                                                Fast\-reroute tiebreakers configuration
                                                
                                                .. attribute:: tiebreaker_type  (key)
                                                
                                                	Tiebreaker type
                                                	**type**\:  :py:class:`OspfFastRerouteTiebreakersIntf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakersIntf>`
                                                
                                                .. attribute:: tiebreaker_index
                                                
                                                	Index value for a tiebreaker, 0 to disable
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, self).__init__()

                                                    self.yang_name = "tiebreaker"
                                                    self.yang_parent_name = "tiebreakers"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['tiebreaker_type']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('tiebreaker_type', YLeaf(YType.enumeration, 'tiebreaker-type')),
                                                        ('tiebreaker_index', YLeaf(YType.uint32, 'tiebreaker-index')),
                                                    ])
                                                    self.tiebreaker_type = None
                                                    self.tiebreaker_index = None
                                                    self._segment_path = lambda: "tiebreaker" + "[tiebreaker-type='" + str(self.tiebreaker_type) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, ['tiebreaker_type', 'tiebreaker_index'], name, value)


                                        class CandidateInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface))])
                                                self._leafs = OrderedDict()

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(Entity):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                        class ExcludeInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup or UCMP
                                            	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface))])
                                                self._leafs = OrderedDict()

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(Entity):
                                                """
                                                Exclude an interface from becoming a backup or
                                                UCMP
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                class CostFallback(Entity):
                                    """
                                    Interface fallback cost
                                    
                                    .. attribute:: cost
                                    
                                    	Fallback cost of link
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: threshold
                                    
                                    	Bandwidth threshold
                                    	**type**\: int
                                    
                                    	**range:** 1..4294967
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.CostFallback, self).__init__()

                                        self.yang_name = "cost-fallback"
                                        self.yang_parent_name = "name-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('cost', YLeaf(YType.uint32, 'cost')),
                                            ('threshold', YLeaf(YType.uint32, 'threshold')),
                                        ])
                                        self.cost = None
                                        self.threshold = None
                                        self._segment_path = lambda: "cost-fallback"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.CostFallback, ['cost', 'threshold'], name, value)


                        class MultiAreaInterfaceScopes(Entity):
                            """
                            Multi Area Interface scope configurations
                            
                            .. attribute:: multi_area_interface_scope
                            
                            	Multi Area Interface configuration
                            	**type**\: list of  		 :py:class:`MultiAreaInterfaceScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes, self).__init__()

                                self.yang_name = "multi-area-interface-scopes"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("multi-area-interface-scope", ("multi_area_interface_scope", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope))])
                                self._leafs = OrderedDict()

                                self.multi_area_interface_scope = YList(self)
                                self._segment_path = lambda: "multi-area-interface-scopes"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes, [], name, value)


                            class MultiAreaInterfaceScope(Entity):
                                """
                                Multi Area Interface configuration
                                
                                .. attribute:: interface_name  (key)
                                
                                	Name of Multi Area Interface to configure
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: distribute_list
                                
                                	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                                	**type**\:  :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DistributeList>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: cost
                                
                                	Interface cost
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: mtu_ignore
                                
                                	Enable/Disable ignoring of MTU in DBD packets
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: authentication
                                
                                	Authentication
                                	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication>`
                                
                                .. attribute:: neighbors
                                
                                	Neighbor router configuration information
                                	**type**\:  :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors>`
                                
                                .. attribute:: hello_interval
                                
                                	Interval between HELLO packets in seconds
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: passive
                                
                                	When enabled, prevent sending HELLO packets over link
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: transmit_delay
                                
                                	Number of seconds to delay transmission of LSAs
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 1
                                
                                .. attribute:: packet_size
                                
                                	Customize size of OSPF packets upto MTU
                                	**type**\: int
                                
                                	**range:** 576..10000
                                
                                .. attribute:: database_filter
                                
                                	Filter OSPF LSA during synchronization and flooding
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: dead_interval_minimal
                                
                                	Interval after which a neighbor is declared dead
                                	**type**\:  :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal>`
                                
                                .. attribute:: fast_reroute
                                
                                	Fast\-reroute configuration
                                	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute>`
                                
                                .. attribute:: retransmit_interval
                                
                                	Time in seconds between retransmitting lost link state advertisements
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 5
                                
                                .. attribute:: cost_fallback
                                
                                	Interface fallback cost
                                	**type**\:  :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback>`
                                
                                .. attribute:: running
                                
                                	Enable routing on an IP network
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope, self).__init__()

                                    self.yang_name = "multi-area-interface-scope"
                                    self.yang_parent_name = "multi-area-interface-scopes"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['interface_name']
                                    self._child_container_classes = OrderedDict([("distribute-list", ("distribute_list", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DistributeList)), ("authentication", ("authentication", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication)), ("neighbors", ("neighbors", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors)), ("dead-interval-minimal", ("dead_interval_minimal", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal)), ("fast-reroute", ("fast_reroute", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute)), ("cost-fallback", ("cost_fallback", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                        ('cost', YLeaf(YType.uint32, 'cost')),
                                        ('mtu_ignore', YLeaf(YType.boolean, 'mtu-ignore')),
                                        ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                                        ('passive', YLeaf(YType.boolean, 'passive')),
                                        ('transmit_delay', YLeaf(YType.uint32, 'transmit-delay')),
                                        ('packet_size', YLeaf(YType.uint32, 'packet-size')),
                                        ('database_filter', YLeaf(YType.boolean, 'database-filter')),
                                        ('retransmit_interval', YLeaf(YType.uint32, 'retransmit-interval')),
                                        ('running', YLeaf(YType.empty, 'running')),
                                    ])
                                    self.interface_name = None
                                    self.cost = None
                                    self.mtu_ignore = None
                                    self.hello_interval = None
                                    self.passive = None
                                    self.transmit_delay = None
                                    self.packet_size = None
                                    self.database_filter = None
                                    self.retransmit_interval = None
                                    self.running = None

                                    self.distribute_list = None
                                    self._children_name_map["distribute_list"] = "distribute-list"
                                    self._children_yang_names.add("distribute-list")

                                    self.authentication = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication()
                                    self.authentication.parent = self
                                    self._children_name_map["authentication"] = "authentication"
                                    self._children_yang_names.add("authentication")

                                    self.neighbors = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors()
                                    self.neighbors.parent = self
                                    self._children_name_map["neighbors"] = "neighbors"
                                    self._children_yang_names.add("neighbors")

                                    self.dead_interval_minimal = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal()
                                    self.dead_interval_minimal.parent = self
                                    self._children_name_map["dead_interval_minimal"] = "dead-interval-minimal"
                                    self._children_yang_names.add("dead-interval-minimal")

                                    self.fast_reroute = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute()
                                    self.fast_reroute.parent = self
                                    self._children_name_map["fast_reroute"] = "fast-reroute"
                                    self._children_yang_names.add("fast-reroute")

                                    self.cost_fallback = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback()
                                    self.cost_fallback.parent = self
                                    self._children_name_map["cost_fallback"] = "cost-fallback"
                                    self._children_yang_names.add("cost-fallback")
                                    self._segment_path = lambda: "multi-area-interface-scope" + "[interface-name='" + str(self.interface_name) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope, ['interface_name', 'cost', 'mtu_ignore', 'hello_interval', 'passive', 'transmit_delay', 'packet_size', 'database_filter', 'retransmit_interval', 'running'], name, value)


                                class DistributeList(Entity):
                                    """
                                    Filter networks intalled to RIB (disable as ACL
                                    name means filtering is disabled)
                                    
                                    .. attribute:: access_list_name
                                    
                                    	Access Control List name
                                    	**type**\: str
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route Policy name
                                    	**type**\: str
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DistributeList, self).__init__()

                                        self.yang_name = "distribute-list"
                                        self.yang_parent_name = "multi-area-interface-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('access_list_name', YLeaf(YType.str, 'access-list-name')),
                                            ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
                                        ])
                                        self.access_list_name = None
                                        self.route_policy_name = None
                                        self._segment_path = lambda: "distribute-list"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DistributeList, ['access_list_name', 'route_policy_name'], name, value)


                                class Authentication(Entity):
                                    """
                                    Authentication
                                    
                                    .. attribute:: type
                                    
                                    	Authentication type
                                    	**type**\:  :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type>`
                                    
                                    .. attribute:: message_digest_keies
                                    
                                    	Message digest authentication password (key) configurations, first 16 chars used
                                    	**type**\:  :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies>`
                                    
                                    .. attribute:: key
                                    
                                    	Authentication key configuration
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication, self).__init__()

                                        self.yang_name = "authentication"
                                        self.yang_parent_name = "multi-area-interface-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("type", ("type", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type)), ("message-digest-keies", ("message_digest_keies", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('key', YLeaf(YType.str, 'key')),
                                        ])
                                        self.key = None

                                        self.type = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type()
                                        self.type.parent = self
                                        self._children_name_map["type"] = "type"
                                        self._children_yang_names.add("type")

                                        self.message_digest_keies = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies()
                                        self.message_digest_keies.parent = self
                                        self._children_name_map["message_digest_keies"] = "message-digest-keies"
                                        self._children_yang_names.add("message-digest-keies")
                                        self._segment_path = lambda: "authentication"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication, ['key'], name, value)


                                    class Type(Entity):
                                        """
                                        Authentication type
                                        
                                        .. attribute:: authen_type
                                        
                                        	Authentication type code 
                                        	**type**\:  :py:class:`OspfAuthentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthentication>`
                                        
                                        .. attribute:: keychain_authen_type
                                        
                                        	Keychain authentication type
                                        	**type**\:  :py:class:`OspfKeychainAuth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuth>`
                                        
                                        .. attribute:: keychain_name
                                        
                                        	Keychain name
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type, self).__init__()

                                            self.yang_name = "type"
                                            self.yang_parent_name = "authentication"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('authen_type', YLeaf(YType.enumeration, 'authen-type')),
                                                ('keychain_authen_type', YLeaf(YType.enumeration, 'keychain-authen-type')),
                                                ('keychain_name', YLeaf(YType.str, 'keychain-name')),
                                            ])
                                            self.authen_type = None
                                            self.keychain_authen_type = None
                                            self.keychain_name = None
                                            self._segment_path = lambda: "type"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type, ['authen_type', 'keychain_authen_type', 'keychain_name'], name, value)


                                    class MessageDigestKeies(Entity):
                                        """
                                        Message digest authentication password (key)
                                        configurations, first 16 chars used
                                        
                                        .. attribute:: message_digest_key
                                        
                                        	Message digest authentication password (key) configuration
                                        	**type**\: list of  		 :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies, self).__init__()

                                            self.yang_name = "message-digest-keies"
                                            self.yang_parent_name = "authentication"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("message-digest-key", ("message_digest_key", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies.MessageDigestKey))])
                                            self._leafs = OrderedDict()

                                            self.message_digest_key = YList(self)
                                            self._segment_path = lambda: "message-digest-keies"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies, [], name, value)


                                        class MessageDigestKey(Entity):
                                            """
                                            Message digest authentication password (key)
                                            configuration
                                            
                                            .. attribute:: key_id  (key)
                                            
                                            	Key ID
                                            	**type**\: int
                                            
                                            	**range:** 1..255
                                            
                                            .. attribute:: password
                                            
                                            	Password
                                            	**type**\: str
                                            
                                            	**pattern:** (!.+)\|([^!].+)
                                            
                                            	**mandatory**\: True
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies.MessageDigestKey, self).__init__()

                                                self.yang_name = "message-digest-key"
                                                self.yang_parent_name = "message-digest-keies"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['key_id']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('key_id', YLeaf(YType.uint32, 'key-id')),
                                                    ('password', YLeaf(YType.str, 'password')),
                                                ])
                                                self.key_id = None
                                                self.password = None
                                                self._segment_path = lambda: "message-digest-key" + "[key-id='" + str(self.key_id) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies.MessageDigestKey, ['key_id', 'password'], name, value)


                                class Neighbors(Entity):
                                    """
                                    Neighbor router configuration information
                                    
                                    .. attribute:: neighbor
                                    
                                    	Router configuration information for a particular neighbor
                                    	**type**\: list of  		 :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors.Neighbor>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors, self).__init__()

                                        self.yang_name = "neighbors"
                                        self.yang_parent_name = "multi-area-interface-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("neighbor", ("neighbor", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors.Neighbor))])
                                        self._leafs = OrderedDict()

                                        self.neighbor = YList(self)
                                        self._segment_path = lambda: "neighbors"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors, [], name, value)


                                    class Neighbor(Entity):
                                        """
                                        Router configuration information for a
                                        particular neighbor
                                        
                                        .. attribute:: neighbor_address  (key)
                                        
                                        	Neighbor IP address
                                        	**type**\: str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: priority
                                        
                                        	OSPF priority of non\-broadcast neighbor
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        	**default value**\: 0
                                        
                                        .. attribute:: poll_interval
                                        
                                        	OSPF dead router poll\-interval in seconds
                                        	**type**\: int
                                        
                                        	**range:** 0..65535
                                        
                                        	**units**\: second
                                        
                                        	**default value**\: 40
                                        
                                        .. attribute:: cost
                                        
                                        	OSPF cost for point\-to\-multipoint neighbor
                                        	**type**\: int
                                        
                                        	**range:** 1..65535
                                        
                                        	**default value**\: 1
                                        
                                        .. attribute:: database_filter
                                        
                                        	Database filter\: Filter OSPF LSA during synchronization and flooding for point\-to\-multipoint
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors.Neighbor, self).__init__()

                                            self.yang_name = "neighbor"
                                            self.yang_parent_name = "neighbors"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['neighbor_address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                ('priority', YLeaf(YType.uint32, 'priority')),
                                                ('poll_interval', YLeaf(YType.uint32, 'poll-interval')),
                                                ('cost', YLeaf(YType.uint32, 'cost')),
                                                ('database_filter', YLeaf(YType.boolean, 'database-filter')),
                                            ])
                                            self.neighbor_address = None
                                            self.priority = None
                                            self.poll_interval = None
                                            self.cost = None
                                            self.database_filter = None
                                            self._segment_path = lambda: "neighbor" + "[neighbor-address='" + str(self.neighbor_address) + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors.Neighbor, ['neighbor_address', 'priority', 'poll_interval', 'cost', 'database_filter'], name, value)


                                class DeadIntervalMinimal(Entity):
                                    """
                                    Interval after which a neighbor is declared dead
                                    
                                    .. attribute:: interval
                                    
                                    	Interval size in seconds after which a neighbor is declared dead
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: multiplier
                                    
                                    	Number of Hellos in one second
                                    	**type**\: int
                                    
                                    	**range:** 3..20
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal, self).__init__()

                                        self.yang_name = "dead-interval-minimal"
                                        self.yang_parent_name = "multi-area-interface-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interval', YLeaf(YType.uint32, 'interval')),
                                            ('multiplier', YLeaf(YType.uint32, 'multiplier')),
                                        ])
                                        self.interval = None
                                        self.multiplier = None
                                        self._segment_path = lambda: "dead-interval-minimal"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal, ['interval', 'multiplier'], name, value)


                                class FastReroute(Entity):
                                    """
                                    Fast\-reroute configuration
                                    
                                    .. attribute:: per_link
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink>`
                                    
                                    .. attribute:: per_prefix
                                    
                                    	Fast\-reroute per\-prefix global configuration
                                    	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix>`
                                    
                                    .. attribute:: fast_reroute_enable
                                    
                                    	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                    	**type**\:  :py:class:`OspfFastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastReroute>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute, self).__init__()

                                        self.yang_name = "fast-reroute"
                                        self.yang_parent_name = "multi-area-interface-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("per-link", ("per_link", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('fast_reroute_enable', YLeaf(YType.enumeration, 'fast-reroute-enable')),
                                        ])
                                        self.fast_reroute_enable = None

                                        self.per_link = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink()
                                        self.per_link.parent = self
                                        self._children_name_map["per_link"] = "per-link"
                                        self._children_yang_names.add("per-link")

                                        self.per_prefix = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix()
                                        self.per_prefix.parent = self
                                        self._children_name_map["per_prefix"] = "per-prefix"
                                        self._children_yang_names.add("per-prefix")
                                        self._segment_path = lambda: "fast-reroute"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute, ['fast_reroute_enable'], name, value)


                                    class PerLink(Entity):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                        	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink, self).__init__()

                                            self.yang_name = "per-link"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                            ])
                                            self.fast_reroute_use_candidate_only = None

                                            self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                            self._children_yang_names.add("candidate-interfaces")

                                            self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._children_yang_names.add("exclude-interfaces")
                                            self._segment_path = lambda: "per-link"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                        class CandidateInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface))])
                                                self._leafs = OrderedDict()

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(Entity):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                        class ExcludeInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup or UCMP
                                            	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface))])
                                                self._leafs = OrderedDict()

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(Entity):
                                                """
                                                Exclude an interface from becoming a backup or
                                                UCMP
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                    class PerPrefix(Entity):
                                        """
                                        Fast\-reroute per\-prefix global configuration
                                        
                                        .. attribute:: remote_lfa
                                        
                                        	Remote LFA configuration
                                        	**type**\:  :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa>`
                                        
                                        .. attribute:: tiebreakers
                                        
                                        	Fast\-reroute tiebreakers configurations
                                        	**type**\:  :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers>`
                                        
                                        .. attribute:: topology_independent_lfa
                                        
                                        	Topology Independet LFA configuration
                                        	**type**\: bool
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                        	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix, self).__init__()

                                            self.yang_name = "per-prefix"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("remote-lfa", ("remote_lfa", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa)), ("tiebreakers", ("tiebreakers", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers)), ("candidate-interfaces", ("candidate_interfaces", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('topology_independent_lfa', YLeaf(YType.boolean, 'topology-independent-lfa')),
                                                ('fast_reroute_use_candidate_only', YLeaf(YType.boolean, 'fast-reroute-use-candidate-only')),
                                            ])
                                            self.topology_independent_lfa = None
                                            self.fast_reroute_use_candidate_only = None

                                            self.remote_lfa = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa()
                                            self.remote_lfa.parent = self
                                            self._children_name_map["remote_lfa"] = "remote-lfa"
                                            self._children_yang_names.add("remote-lfa")

                                            self.tiebreakers = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers()
                                            self.tiebreakers.parent = self
                                            self._children_name_map["tiebreakers"] = "tiebreakers"
                                            self._children_yang_names.add("tiebreakers")

                                            self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                            self._children_yang_names.add("candidate-interfaces")

                                            self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._children_yang_names.add("exclude-interfaces")
                                            self._segment_path = lambda: "per-prefix"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix, ['topology_independent_lfa', 'fast_reroute_use_candidate_only'], name, value)


                                        class RemoteLfa(Entity):
                                            """
                                            Remote LFA configuration
                                            
                                            .. attribute:: tunnel
                                            
                                            	Enable/Disable remote LFA computation
                                            	**type**\:  :py:class:`OspfFrrRlfaTunnel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFrrRlfaTunnel>`
                                            
                                            .. attribute:: maximum_cost
                                            
                                            	Maximum path cost to remote LFA
                                            	**type**\: int
                                            
                                            	**range:** 1..4294967295
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa, self).__init__()

                                                self.yang_name = "remote-lfa"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('tunnel', YLeaf(YType.enumeration, 'tunnel')),
                                                    ('maximum_cost', YLeaf(YType.uint32, 'maximum-cost')),
                                                ])
                                                self.tunnel = None
                                                self.maximum_cost = None
                                                self._segment_path = lambda: "remote-lfa"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa, ['tunnel', 'maximum_cost'], name, value)


                                        class Tiebreakers(Entity):
                                            """
                                            Fast\-reroute tiebreakers configurations
                                            
                                            .. attribute:: tiebreaker
                                            
                                            	Fast\-reroute tiebreakers configuration
                                            	**type**\: list of  		 :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers, self).__init__()

                                                self.yang_name = "tiebreakers"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("tiebreaker", ("tiebreaker", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker))])
                                                self._leafs = OrderedDict()

                                                self.tiebreaker = YList(self)
                                                self._segment_path = lambda: "tiebreakers"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers, [], name, value)


                                            class Tiebreaker(Entity):
                                                """
                                                Fast\-reroute tiebreakers configuration
                                                
                                                .. attribute:: tiebreaker_type  (key)
                                                
                                                	Tiebreaker type
                                                	**type**\:  :py:class:`OspfFastRerouteTiebreakersIntf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakersIntf>`
                                                
                                                .. attribute:: tiebreaker_index
                                                
                                                	Index value for a tiebreaker, 0 to disable
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, self).__init__()

                                                    self.yang_name = "tiebreaker"
                                                    self.yang_parent_name = "tiebreakers"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['tiebreaker_type']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('tiebreaker_type', YLeaf(YType.enumeration, 'tiebreaker-type')),
                                                        ('tiebreaker_index', YLeaf(YType.uint32, 'tiebreaker-index')),
                                                    ])
                                                    self.tiebreaker_type = None
                                                    self.tiebreaker_index = None
                                                    self._segment_path = lambda: "tiebreaker" + "[tiebreaker-type='" + str(self.tiebreaker_type) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, ['tiebreaker_type', 'tiebreaker_index'], name, value)


                                        class CandidateInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface))])
                                                self._leafs = OrderedDict()

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(Entity):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                        class ExcludeInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup or UCMP
                                            	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface))])
                                                self._leafs = OrderedDict()

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(Entity):
                                                """
                                                Exclude an interface from becoming a backup or
                                                UCMP
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                class CostFallback(Entity):
                                    """
                                    Interface fallback cost
                                    
                                    .. attribute:: cost
                                    
                                    	Fallback cost of link
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: threshold
                                    
                                    	Bandwidth threshold
                                    	**type**\: int
                                    
                                    	**range:** 1..4294967
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback, self).__init__()

                                        self.yang_name = "cost-fallback"
                                        self.yang_parent_name = "multi-area-interface-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('cost', YLeaf(YType.uint32, 'cost')),
                                            ('threshold', YLeaf(YType.uint32, 'threshold')),
                                        ])
                                        self.cost = None
                                        self.threshold = None
                                        self._segment_path = lambda: "cost-fallback"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback, ['cost', 'threshold'], name, value)


                        class AreaRanges(Entity):
                            """
                            Summarize routes matching address/mask (border
                            routers only)
                            
                            .. attribute:: area_range
                            
                            	Ordering index
                            	**type**\: list of  		 :py:class:`AreaRange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaRanges.AreaRange>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaRanges, self).__init__()

                                self.yang_name = "area-ranges"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("area-range", ("area_range", Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaRanges.AreaRange))])
                                self._leafs = OrderedDict()

                                self.area_range = YList(self)
                                self._segment_path = lambda: "area-ranges"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaRanges, [], name, value)


                            class AreaRange(Entity):
                                """
                                Ordering index
                                
                                .. attribute:: address  (key)
                                
                                	IP address to match
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: netmask  (key)
                                
                                	IP netmask for address
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: not_advertise
                                
                                	Do not advertise this range
                                	**type**\: bool
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaRanges.AreaRange, self).__init__()

                                    self.yang_name = "area-range"
                                    self.yang_parent_name = "area-ranges"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['address','netmask']
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('address', YLeaf(YType.str, 'address')),
                                        ('netmask', YLeaf(YType.str, 'netmask')),
                                        ('not_advertise', YLeaf(YType.boolean, 'not-advertise')),
                                    ])
                                    self.address = None
                                    self.netmask = None
                                    self.not_advertise = None
                                    self._segment_path = lambda: "area-range" + "[address='" + str(self.address) + "']" + "[netmask='" + str(self.netmask) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaRanges.AreaRange, ['address', 'netmask', 'not_advertise'], name, value)


                        class Nssa(Entity):
                            """
                            Specify area as a NSSA area
                            
                            .. attribute:: no_redistribution
                            
                            	No redistribution into this NSSA area
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: default_info_originate
                            
                            	Originate Type 7 default into NSSA area
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: no_summary
                            
                            	Do not send summary LSA into NSSA
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: nssa_def_metric
                            
                            	OSPF default metric
                            	**type**\: int
                            
                            	**range:** 1..16777214
                            
                            .. attribute:: metric_type
                            
                            	OSPF External metric type
                            	**type**\:  :py:class:`OspfLinkStateMetric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetric>`
                            
                            	**default value**\: type2
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Nssa, self).__init__()

                                self.yang_name = "nssa"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('no_redistribution', YLeaf(YType.boolean, 'no-redistribution')),
                                    ('default_info_originate', YLeaf(YType.boolean, 'default-info-originate')),
                                    ('no_summary', YLeaf(YType.boolean, 'no-summary')),
                                    ('nssa_def_metric', YLeaf(YType.uint32, 'nssa-def-metric')),
                                    ('metric_type', YLeaf(YType.enumeration, 'metric-type')),
                                ])
                                self.no_redistribution = None
                                self.default_info_originate = None
                                self.no_summary = None
                                self.nssa_def_metric = None
                                self.metric_type = None
                                self._segment_path = lambda: "nssa"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Nssa, ['no_redistribution', 'default_info_originate', 'no_summary', 'nssa_def_metric', 'metric_type'], name, value)


                class Timers(Entity):
                    """
                    Adjust routing timers
                    
                    .. attribute:: spf_timer
                    
                    	OSPF SPF timers (in milliseconds)
                    	**type**\:  :py:class:`SpfTimer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Timers.SpfTimer>`
                    
                    .. attribute:: lsa_generation_timer
                    
                    	OSPF LSA timers (in milliseconds)
                    	**type**\:  :py:class:`LsaGenerationTimer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Timers.LsaGenerationTimer>`
                    
                    .. attribute:: lsa_pacing_flood
                    
                    	Seconds between group of LSAs being refreshed or maxaged
                    	**type**\: int
                    
                    	**range:** 5..100
                    
                    	**units**\: second
                    
                    .. attribute:: fast_reroute_timer
                    
                    	Number of ms between end of SPF and start of IPFRR computation
                    	**type**\: int
                    
                    	**range:** 50..600000
                    
                    	**units**\: millisecond
                    
                    	**default value**\: 500
                    
                    .. attribute:: lsa_refresh
                    
                    	How often self\-originated LSAs should be refreshed
                    	**type**\: int
                    
                    	**range:** 1800..2700
                    
                    	**units**\: second
                    
                    	**default value**\: 1800
                    
                    .. attribute:: lsa_group_pacing
                    
                    	LSA group pacing timer (Seconds between group of LSAs being refreshed or maxaged)
                    	**type**\: int
                    
                    	**range:** 10..1800
                    
                    	**units**\: second
                    
                    	**default value**\: 240
                    
                    .. attribute:: lsa_min_arrival
                    
                    	MinLSArrival timer (minimum interval in milliseconds between accepting the same LSA)
                    	**type**\: int
                    
                    	**range:** 0..600000
                    
                    	**units**\: millisecond
                    
                    	**default value**\: 100
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospf.Processes.Process.DefaultVrf.Timers, self).__init__()

                        self.yang_name = "timers"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("spf-timer", ("spf_timer", Ospf.Processes.Process.DefaultVrf.Timers.SpfTimer)), ("lsa-generation-timer", ("lsa_generation_timer", Ospf.Processes.Process.DefaultVrf.Timers.LsaGenerationTimer))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('lsa_pacing_flood', YLeaf(YType.uint32, 'lsa-pacing-flood')),
                            ('fast_reroute_timer', YLeaf(YType.uint32, 'fast-reroute-timer')),
                            ('lsa_refresh', YLeaf(YType.uint32, 'lsa-refresh')),
                            ('lsa_group_pacing', YLeaf(YType.uint32, 'lsa-group-pacing')),
                            ('lsa_min_arrival', YLeaf(YType.uint32, 'lsa-min-arrival')),
                        ])
                        self.lsa_pacing_flood = None
                        self.fast_reroute_timer = None
                        self.lsa_refresh = None
                        self.lsa_group_pacing = None
                        self.lsa_min_arrival = None

                        self.spf_timer = Ospf.Processes.Process.DefaultVrf.Timers.SpfTimer()
                        self.spf_timer.parent = self
                        self._children_name_map["spf_timer"] = "spf-timer"
                        self._children_yang_names.add("spf-timer")

                        self.lsa_generation_timer = Ospf.Processes.Process.DefaultVrf.Timers.LsaGenerationTimer()
                        self.lsa_generation_timer.parent = self
                        self._children_name_map["lsa_generation_timer"] = "lsa-generation-timer"
                        self._children_yang_names.add("lsa-generation-timer")
                        self._segment_path = lambda: "timers"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospf.Processes.Process.DefaultVrf.Timers, ['lsa_pacing_flood', 'fast_reroute_timer', 'lsa_refresh', 'lsa_group_pacing', 'lsa_min_arrival'], name, value)


                    class SpfTimer(Entity):
                        """
                        OSPF SPF timers (in milliseconds)
                        
                        .. attribute:: initial_delay
                        
                        	Number of milliseconds before first SPF run
                        	**type**\: int
                        
                        	**range:** 1..600000
                        
                        	**units**\: millisecond
                        
                        	**default value**\: 5000
                        
                        .. attribute:: backoff_increment
                        
                        	Number of milliseconds delay between successive SPF runs
                        	**type**\: int
                        
                        	**range:** 1..600000
                        
                        	**units**\: millisecond
                        
                        	**default value**\: 10000
                        
                        .. attribute:: max_delay
                        
                        	Max number of milliseconds between consecutive SPF calculations
                        	**type**\: int
                        
                        	**range:** 1..600000
                        
                        	**units**\: millisecond
                        
                        	**default value**\: 10000
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.Timers.SpfTimer, self).__init__()

                            self.yang_name = "spf-timer"
                            self.yang_parent_name = "timers"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('initial_delay', YLeaf(YType.uint32, 'initial-delay')),
                                ('backoff_increment', YLeaf(YType.uint32, 'backoff-increment')),
                                ('max_delay', YLeaf(YType.uint32, 'max-delay')),
                            ])
                            self.initial_delay = None
                            self.backoff_increment = None
                            self.max_delay = None
                            self._segment_path = lambda: "spf-timer"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.Timers.SpfTimer, ['initial_delay', 'backoff_increment', 'max_delay'], name, value)


                    class LsaGenerationTimer(Entity):
                        """
                        OSPF LSA timers (in milliseconds)
                        
                        .. attribute:: initial_delay
                        
                        	Number of milliseconds before generating first LSA
                        	**type**\: int
                        
                        	**range:** 0..600000
                        
                        	**units**\: millisecond
                        
                        	**default value**\: 50
                        
                        .. attribute:: backoff_increment
                        
                        	Number of milliseconds delay between successive LSA builds
                        	**type**\: int
                        
                        	**range:** 1..600000
                        
                        	**units**\: millisecond
                        
                        	**default value**\: 200
                        
                        .. attribute:: max_delay
                        
                        	Max number of milliseconds between consecutive LSA builds 
                        	**type**\: int
                        
                        	**range:** 1..600000
                        
                        	**units**\: millisecond
                        
                        	**default value**\: 200
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospf.Processes.Process.DefaultVrf.Timers.LsaGenerationTimer, self).__init__()

                            self.yang_name = "lsa-generation-timer"
                            self.yang_parent_name = "timers"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('initial_delay', YLeaf(YType.uint32, 'initial-delay')),
                                ('backoff_increment', YLeaf(YType.uint32, 'backoff-increment')),
                                ('max_delay', YLeaf(YType.uint32, 'max-delay')),
                            ])
                            self.initial_delay = None
                            self.backoff_increment = None
                            self.max_delay = None
                            self._segment_path = lambda: "lsa-generation-timer"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospf.Processes.Process.DefaultVrf.Timers.LsaGenerationTimer, ['initial_delay', 'backoff_increment', 'max_delay'], name, value)


    class Global(Entity):
        """
        OSPF global configuration data
        
        .. attribute:: dns_name_lookup
        
        	Display OSPF router ids as DNS names
        	**type**\: :py:class:`Empty<ydk.types.Empty>`
        
        

        """

        _prefix = 'ipv4-ospf-cfg'
        _revision = '2017-07-14'

        def __init__(self):
            super(Ospf.Global, self).__init__()

            self.yang_name = "global"
            self.yang_parent_name = "ospf"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('dns_name_lookup', YLeaf(YType.empty, 'dns-name-lookup')),
            ])
            self.dns_name_lookup = None
            self._segment_path = lambda: "global"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-ospf-cfg:ospf/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Ospf.Global, ['dns_name_lookup'], name, value)

    def clone_ptr(self):
        self._top_entity = Ospf()
        return self._top_entity

