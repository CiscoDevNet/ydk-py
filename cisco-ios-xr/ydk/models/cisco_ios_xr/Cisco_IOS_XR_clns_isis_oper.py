""" Cisco_IOS_XR_clns_isis_oper 

This module contains a collection of YANG definitions
for Cisco IOS\-XR clns\-isis package operational data.

This module contains definitions
for the following management objects\:
  isis\: IS\-IS operational data

Copyright (c) 2013\-2015 by Cisco Systems, Inc.
All rights reserved.

"""


import re
import collections

from enum import Enum

from ydk.types import Empty, YList, YLeafList, DELETE, Decimal64, FixedBitsDict

from ydk.errors import YPYError, YPYModelError


from ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_datatypes import IsisAddressFamilyEnum
from ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_datatypes import IsisInternalLevelEnum
from ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_datatypes import IsisSubAddressFamilyEnum

class IsisAdjBfdStateEnum(Enum):
    """
    IsisAdjBfdStateEnum

    Current BFD state of an adjacency

    .. data:: ISIS_ADJ_BFD_NO_STATE = 0

    	No BFD session created

    .. data:: ISIS_ADJ_BFD_DOWN_STATE = 1

    	BFD session is DOWN

    .. data:: ISIS_ADJ_BFD_INIT_STATE = 2

    	Waiting for BFD session to come UP

    .. data:: ISIS_ADJ_BFD_UP_STATE = 3

    	BFD session is UP

    """

    ISIS_ADJ_BFD_NO_STATE = 0

    ISIS_ADJ_BFD_DOWN_STATE = 1

    ISIS_ADJ_BFD_INIT_STATE = 2

    ISIS_ADJ_BFD_UP_STATE = 3


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisAdjBfdStateEnum']


class IsisAdjStateEnum(Enum):
    """
    IsisAdjStateEnum

    Isis adj state

    .. data:: ISIS_ADJ_UP_STATE = 0

    	Adjacency up

    .. data:: ISIS_ADJ_INIT_STATE = 1

    	Adjacency initializing

    .. data:: ISIS_ADJ_FAILED_STATE = 2

    	Adjacency down/failed

    """

    ISIS_ADJ_UP_STATE = 0

    ISIS_ADJ_INIT_STATE = 1

    ISIS_ADJ_FAILED_STATE = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisAdjStateEnum']


class IsisAdjStateReasonEnum(Enum):
    """
    IsisAdjStateReasonEnum

    Isis adj state reason

    .. data:: ISIS_ADJ_UP_NSF_RESTART = 0

    	NSF Restart

    .. data:: ISIS_ADJ_UP_NEW_ADJ = 1

    	New adjacency

    .. data:: ISIS_ADJ_UP_RESTARTED = 2

    	Restarted

    .. data:: ISIS_ADJ_UP_NSF_RESTORED = 3

    	Restored during NSF

    .. data:: ISIS_ADJ_UP_CHKPT_RESTORED = 4

    	Restored from checkpoint

    .. data:: ISIS_ADJ_INIT_REASON = 5

    	Into INIT

    .. data:: ISIS_ADJ_INIT_NEIGHBOR_FORGOT = 6

    	Neighbor forgot us

    .. data:: ISIS_ADJ_DOWN_HOLD_TIME = 7

    	Holdtime expired

    .. data:: ISIS_ADJ_DOWN_IF_DOWN = 8

    	Interface state going down

    .. data:: ISIS_ADJ_DOWN_CFG_MISMATCH = 9

    	Area address/level mismatch

    .. data:: ISIS_ADJ_DOWN_CIRC_ID = 10

    	Circuit ID changed

    .. data:: ISIS_ADJ_DOWN_NSF_ACK_FAIL = 11

    	NSF could not CSNP Ack P2P adjacency

    .. data:: ISIS_ADJ_DOWN_DB_CLEAR = 12

    	Clear of the Adjacency DB

    .. data:: ISIS_ADJ_DOWN_NO_COMMON_TOPOLOGY = 13

    	Neighbors have no common link topology

    .. data:: ISIS_ADJ_DOWN_RESTART_TLV_MISSING = 14

    	Restart TLV missing during IETF NSF restart

    .. data:: ISIS_ADJ_DOWN_BFD_DOWN = 15

    	BFD session has gone DOWN

    .. data:: ISIS_ADJ_DOWN_3WAY_DOWN = 16

    	3-way state down

    """

    ISIS_ADJ_UP_NSF_RESTART = 0

    ISIS_ADJ_UP_NEW_ADJ = 1

    ISIS_ADJ_UP_RESTARTED = 2

    ISIS_ADJ_UP_NSF_RESTORED = 3

    ISIS_ADJ_UP_CHKPT_RESTORED = 4

    ISIS_ADJ_INIT_REASON = 5

    ISIS_ADJ_INIT_NEIGHBOR_FORGOT = 6

    ISIS_ADJ_DOWN_HOLD_TIME = 7

    ISIS_ADJ_DOWN_IF_DOWN = 8

    ISIS_ADJ_DOWN_CFG_MISMATCH = 9

    ISIS_ADJ_DOWN_CIRC_ID = 10

    ISIS_ADJ_DOWN_NSF_ACK_FAIL = 11

    ISIS_ADJ_DOWN_DB_CLEAR = 12

    ISIS_ADJ_DOWN_NO_COMMON_TOPOLOGY = 13

    ISIS_ADJ_DOWN_RESTART_TLV_MISSING = 14

    ISIS_ADJ_DOWN_BFD_DOWN = 15

    ISIS_ADJ_DOWN_3WAY_DOWN = 16


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisAdjStateReasonEnum']


class IsisAdjTopoChangeEnum(Enum):
    """
    IsisAdjTopoChangeEnum

    Per\-topology change type for an adjacency

    .. data:: ISIS_ADJ_TOPO_UP_CHANGE = 0

    	Topology up

    .. data:: ISIS_ADJ_TOPO_NEXT_HOP_CHANGE = 1

    	Topology next-hop changed

    .. data:: ISIS_ADJ_TOPO_DOWN_CHANGE = 2

    	Topology down

    """

    ISIS_ADJ_TOPO_UP_CHANGE = 0

    ISIS_ADJ_TOPO_NEXT_HOP_CHANGE = 1

    ISIS_ADJ_TOPO_DOWN_CHANGE = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisAdjTopoChangeEnum']


class IsisAdjTopoStatusEnum(Enum):
    """
    IsisAdjTopoStatusEnum

    Status of a topology in an adjacency

    .. data:: ISIS_ADJ_TOPO_STATUS_OK = 0

    	Topology is included in adjacency

    .. data:: ISIS_ADJ_TOPO_STATUS_INTF_NOT_CONFIGURED = 1

    	Topology is not configured on the interface

    .. data:: ISIS_ADJ_TOPO_STATUS_INTF_NOT_RUNNING = 2

    	Topology is not running on the interface

    .. data:: ISIS_ADJ_TOPO_STATUS_INIT_STATE = 3

    	Adjacency is in INIT state

    .. data:: ISIS_ADJ_TOPO_STATUS_NEIGHBOR_DOESNT_PARTICIPATE = 4

    	Neighbor doesn't participate in topology

    .. data:: ISIS_ADJ_TOPO_STATUS_IPV4_ADDRESS_TLV_MISSING = 5

    	Neighbor IIH doesn't contain IPv4 address TLV

    .. data:: ISIS_ADJ_TOPO_STATUS_IPV4_ADDRESS_TLV_EMPTY = 6

    	Neighbor's IPv4 address TLV is empty

    .. data:: ISIS_ADJ_TOPO_STATUS_IPV6_ADDRESS_TLV_MISSING = 7

    	Neighbor IIH doesn't contain IPv6 address TLV

    .. data:: ISIS_ADJ_TOPO_STATUS_IPV6_ADDRESS_TLV_EMPTY = 8

    	Neighbor's IPv6 address TLV is empty

    .. data:: ISIS_ADJ_TOPO_STATUS_IPV4_ADDRESS_MATCHES_OURS = 9

    	Neighbor's IPv4 address matches ours

    .. data:: ISIS_ADJ_TOPO_STATUS_IPV6_ADDRESS_MATCHES_OURS = 10

    	Neighbor's IPv6 address matches ours

    .. data:: ISIS_ADJ_TOPO_STATUS_IPV4_ADDRESS_SUBNET_MISMATCH = 11

    	Neighbor's IPv4 address is in a different

    	subnet to ours

    .. data:: ISIS_ADJ_TOPO_STATUS_IPV6_ADDRESS_NOT_LINK_LOCAL = 12

    	Neighbor's IPv6 address is not link local

    """

    ISIS_ADJ_TOPO_STATUS_OK = 0

    ISIS_ADJ_TOPO_STATUS_INTF_NOT_CONFIGURED = 1

    ISIS_ADJ_TOPO_STATUS_INTF_NOT_RUNNING = 2

    ISIS_ADJ_TOPO_STATUS_INIT_STATE = 3

    ISIS_ADJ_TOPO_STATUS_NEIGHBOR_DOESNT_PARTICIPATE = 4

    ISIS_ADJ_TOPO_STATUS_IPV4_ADDRESS_TLV_MISSING = 5

    ISIS_ADJ_TOPO_STATUS_IPV4_ADDRESS_TLV_EMPTY = 6

    ISIS_ADJ_TOPO_STATUS_IPV6_ADDRESS_TLV_MISSING = 7

    ISIS_ADJ_TOPO_STATUS_IPV6_ADDRESS_TLV_EMPTY = 8

    ISIS_ADJ_TOPO_STATUS_IPV4_ADDRESS_MATCHES_OURS = 9

    ISIS_ADJ_TOPO_STATUS_IPV6_ADDRESS_MATCHES_OURS = 10

    ISIS_ADJ_TOPO_STATUS_IPV4_ADDRESS_SUBNET_MISMATCH = 11

    ISIS_ADJ_TOPO_STATUS_IPV6_ADDRESS_NOT_LINK_LOCAL = 12


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisAdjTopoStatusEnum']


class IsisAfIdEnum(Enum):
    """
    IsisAfIdEnum

    Isis af id

    .. data:: IPV4 = 0

    	IPv4

    .. data:: IPV6 = 1

    	IPv6

    """

    IPV4 = 0

    IPV6 = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisAfIdEnum']


class IsisEnabledEnum(Enum):
    """
    IsisEnabledEnum

    Isis enabled

    .. data:: ISIS_DISABLED = 0

    	Disabled

    .. data:: ISIS_ENABLED = 1

    	Enabled

    """

    ISIS_DISABLED = 0

    ISIS_ENABLED = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisEnabledEnum']


class IsisErrLogLevelEnum(Enum):
    """
    IsisErrLogLevelEnum

    Isis err log level

    .. data:: ISIS_ERR_LOG_LEVEL_INFO = 0

    	isis err log level info

    .. data:: ISIS_ERR_LOG_LEVEL_WARN = 1

    	isis err log level warn

    .. data:: ISIS_ERR_LOG_LEVEL_CRITICAL = 2

    	isis err log level critical

    """

    ISIS_ERR_LOG_LEVEL_INFO = 0

    ISIS_ERR_LOG_LEVEL_WARN = 1

    ISIS_ERR_LOG_LEVEL_CRITICAL = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisErrLogLevelEnum']


class IsisIfAdjFormDisabledReasonEnum(Enum):
    """
    IsisIfAdjFormDisabledReasonEnum

    Isis if adj form disabled reason

    .. data:: ISIS_INTF_ADJ_FORM_DISABLED_CFG_PASSIVE = 0

    	isis intf adj form disabled cfg passive

    .. data:: ISIS_INTF_ADJ_FORM_DISABLED_NO_TOPO_PARTICIPATE = 1

    	isis intf adj form disabled no topo participate

    .. data:: ISIS_INTF_ADJ_FORM_DISABLED_ADD_TO_INTF_STACK_FAIL = 2

    	isis intf adj form disabled add to intf stack

    	fail

    .. data:: ISIS_INTF_ADJ_FORM_DISABLED_CLNS_IO = 3

    	isis intf adj form disabled clns io

    .. data:: ISIS_INTF_ADJ_FORM_DISABLED_INTERNAL_ERROR = 4

    	isis intf adj form disabled internal error

    """

    ISIS_INTF_ADJ_FORM_DISABLED_CFG_PASSIVE = 0

    ISIS_INTF_ADJ_FORM_DISABLED_NO_TOPO_PARTICIPATE = 1

    ISIS_INTF_ADJ_FORM_DISABLED_ADD_TO_INTF_STACK_FAIL = 2

    ISIS_INTF_ADJ_FORM_DISABLED_CLNS_IO = 3

    ISIS_INTF_ADJ_FORM_DISABLED_INTERNAL_ERROR = 4


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisIfAdjFormDisabledReasonEnum']


class IsisIfAdvPrefixDisabledReasonEnum(Enum):
    """
    IsisIfAdvPrefixDisabledReasonEnum

    Isis if adv prefix disabled reason

    .. data:: ISIS_INTF_ADV_PREFIX_DISABLED_IF_CFG_SUPPRESSED = 0

    	isis intf adv prefix disabled if cfg suppressed

    .. data:: ISIS_INTF_ADV_PREFIX_DISABLED_NO_TOPO_PARTICIPATE = 1

    	isis intf adv prefix disabled no topo

    	participate

    .. data:: ISIS_INTF_ADV_PREFIX_DISABLED_INTERNAL_ERROR = 2

    	isis intf adv prefix disabled internal error

    """

    ISIS_INTF_ADV_PREFIX_DISABLED_IF_CFG_SUPPRESSED = 0

    ISIS_INTF_ADV_PREFIX_DISABLED_NO_TOPO_PARTICIPATE = 1

    ISIS_INTF_ADV_PREFIX_DISABLED_INTERNAL_ERROR = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisIfAdvPrefixDisabledReasonEnum']


class IsisIfAfDisabledReasonEnum(Enum):
    """
    IsisIfAfDisabledReasonEnum

    Isis if af disabled reason

    .. data:: ISIS_INTF_AF_DISABLED_NO_TOPO_ENABLED = 0

    	isis intf af disabled no topo enabled

    .. data:: ISIS_INTF_AF_DISABLED_INTERNAL_ERROR = 1

    	isis intf af disabled internal error

    """

    ISIS_INTF_AF_DISABLED_NO_TOPO_ENABLED = 0

    ISIS_INTF_AF_DISABLED_INTERNAL_ERROR = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisIfAfDisabledReasonEnum']


class IsisIfAfFwdAddrUnknownReasonEnum(Enum):
    """
    IsisIfAfFwdAddrUnknownReasonEnum

    Isis if af fwd addr unknown reason

    .. data:: ISIS_INTF_AF_FWD_ADDR_UNKNOWN_CFG_PASSIVE = 0

    	isis intf af fwd addr unknown cfg passive

    .. data:: ISIS_INTF_AF_FWD_ADDR_UNKNOWN_PROTO_DOESNT_EXIST = 1

    	isis intf af fwd addr unknown proto doesnt

    	exist

    .. data:: ISIS_INTF_AF_FWD_ADDR_UNKNOWN_NEXT_HOP_REG_ERROR = 2

    	isis intf af fwd addr unknown next hop reg

    	error

    .. data:: ISIS_INTF_AF_FWD_ADDR_UNKNOWN_NO_LINK_LOCAL_ADD = 3

    	isis intf af fwd addr unknown no link local add

    .. data:: ISIS_INTF_AF_FWD_ADDR_UNKNOWN_AF_NOT_UP = 4

    	isis intf af fwd addr unknown af not up

    .. data:: ISIS_INTF_AF_FWD_ADDR_UNKNOWN_VRF_ENABLED = 5

    	isis intf af fwd addr unknown vrf enabled

    .. data:: ISIS_INTF_AF_FWD_ADDR_UNKNOWN_INTERNAL_ERROR = 6

    	isis intf af fwd addr unknown internal error

    """

    ISIS_INTF_AF_FWD_ADDR_UNKNOWN_CFG_PASSIVE = 0

    ISIS_INTF_AF_FWD_ADDR_UNKNOWN_PROTO_DOESNT_EXIST = 1

    ISIS_INTF_AF_FWD_ADDR_UNKNOWN_NEXT_HOP_REG_ERROR = 2

    ISIS_INTF_AF_FWD_ADDR_UNKNOWN_NO_LINK_LOCAL_ADD = 3

    ISIS_INTF_AF_FWD_ADDR_UNKNOWN_AF_NOT_UP = 4

    ISIS_INTF_AF_FWD_ADDR_UNKNOWN_VRF_ENABLED = 5

    ISIS_INTF_AF_FWD_ADDR_UNKNOWN_INTERNAL_ERROR = 6


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisIfAfFwdAddrUnknownReasonEnum']


class IsisIfAfPrefixUnknownReasonEnum(Enum):
    """
    IsisIfAfPrefixUnknownReasonEnum

    Isis if af prefix unknown reason

    .. data:: ISIS_INTF_AF_PREFIX_UNKNOWN_ADV_SUPPRESSED = 0

    	isis intf af prefix unknown adv suppressed

    .. data:: ISIS_INTF_AF_PREFIX_UNKNOWN_GLOBAL_ADDR_REG_ERROR = 1

    	isis intf af prefix unknown global addr reg

    	error

    .. data:: ISIS_INTF_AF_PREFIX_UNKNOWN_INTERNAL_ERROR = 2

    	isis intf af prefix unknown internal error

    """

    ISIS_INTF_AF_PREFIX_UNKNOWN_ADV_SUPPRESSED = 0

    ISIS_INTF_AF_PREFIX_UNKNOWN_GLOBAL_ADDR_REG_ERROR = 1

    ISIS_INTF_AF_PREFIX_UNKNOWN_INTERNAL_ERROR = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisIfAfPrefixUnknownReasonEnum']


class IsisIfAfProtoDownReasonEnum(Enum):
    """
    IsisIfAfProtoDownReasonEnum

    Isis if af proto down reason

    .. data:: ISIS_INTF_AF_PROTO_DOWN_IMD_CONN_FAIL = 0

    	isis intf af proto down imd conn fail

    .. data:: ISIS_INTF_AF_PROTO_DOWN_IMD_NODE_DOESNT_EXIST = 1

    	isis intf af proto down imd node doesnt exist

    .. data:: ISIS_INTF_AF_PROTO_DOWN_IMD_EXIST_REG_ERROR = 2

    	isis intf af proto down imd exist reg error

    .. data:: ISIS_INTF_AF_PROTO_DOWN_IMD_STATE_REG_ERROR = 3

    	isis intf af proto down imd state reg error

    .. data:: ISIS_INTF_AF_PROTO_DOWN_AF_NOT_UP = 4

    	isis intf af proto down af not up

    .. data:: ISIS_INTF_AF_PROTO_DOWN_INTERNAL_ERROR = 5

    	isis intf af proto down internal error

    """

    ISIS_INTF_AF_PROTO_DOWN_IMD_CONN_FAIL = 0

    ISIS_INTF_AF_PROTO_DOWN_IMD_NODE_DOESNT_EXIST = 1

    ISIS_INTF_AF_PROTO_DOWN_IMD_EXIST_REG_ERROR = 2

    ISIS_INTF_AF_PROTO_DOWN_IMD_STATE_REG_ERROR = 3

    ISIS_INTF_AF_PROTO_DOWN_AF_NOT_UP = 4

    ISIS_INTF_AF_PROTO_DOWN_INTERNAL_ERROR = 5


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisIfAfProtoDownReasonEnum']


class IsisIfClnsMtuInvalidReasonEnum(Enum):
    """
    IsisIfClnsMtuInvalidReasonEnum

    Isis if clns mtu invalid reason

    .. data:: ISIS_INTF_CLNS_MTU_INVALID_TOO_SM_ALL = 0

    	isis intf clns mtu invalid too sm all

    .. data:: ISIS_INTF_CLNS_MTU_INVALID_INTERNAL_ERROR = 1

    	isis intf clns mtu invalid internal error

    """

    ISIS_INTF_CLNS_MTU_INVALID_TOO_SM_ALL = 0

    ISIS_INTF_CLNS_MTU_INVALID_INTERNAL_ERROR = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisIfClnsMtuInvalidReasonEnum']


class IsisIfClnsProtoDownReasonEnum(Enum):
    """
    IsisIfClnsProtoDownReasonEnum

    Isis if clns proto down reason

    .. data:: ISIS_INTF_CLNS_PROTO_DOWN_ADD_TO_INTF_STACK_FAIL = 0

    	isis intf clns proto down add to intf stack

    	fail

    .. data:: ISIS_INTF_CLNS_PROTO_DOWN_NO_IMD_CONN = 1

    	isis intf clns proto down no imd conn

    .. data:: ISIS_INTF_CLNS_PROTO_DOWN_IMD_NODE_DOESNT_EXIST = 2

    	isis intf clns proto down imd node doesnt exist

    .. data:: ISIS_INTF_CLNS_PROTO_DOWN_IMD_EXIST_REG_ERROR = 3

    	isis intf clns proto down imd exist reg error

    .. data:: ISIS_INTF_CLNS_PROTO_DOWN_IMD_STATE_REG_ERROR = 4

    	isis intf clns proto down imd state reg error

    .. data:: ISIS_INTF_CLNS_PROTO_DOWN_CLNS_NOT_UP = 5

    	isis intf clns proto down clns not up

    """

    ISIS_INTF_CLNS_PROTO_DOWN_ADD_TO_INTF_STACK_FAIL = 0

    ISIS_INTF_CLNS_PROTO_DOWN_NO_IMD_CONN = 1

    ISIS_INTF_CLNS_PROTO_DOWN_IMD_NODE_DOESNT_EXIST = 2

    ISIS_INTF_CLNS_PROTO_DOWN_IMD_EXIST_REG_ERROR = 3

    ISIS_INTF_CLNS_PROTO_DOWN_IMD_STATE_REG_ERROR = 4

    ISIS_INTF_CLNS_PROTO_DOWN_CLNS_NOT_UP = 5


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisIfClnsProtoDownReasonEnum']


class IsisIfClnsSnpaUnknownReasonEnum(Enum):
    """
    IsisIfClnsSnpaUnknownReasonEnum

    Isis if clns snpa unknown reason

    .. data:: ISIS_INTF_CLNS_SNPA_UNKNOWN_ACCESS_ERROR = 0

    	isis intf clns snpa unknown access error

    .. data:: ISIS_INTF_CLNS_SNPA_UNKNOWN_NOT_LAN = 1

    	isis intf clns snpa unknown not lan

    .. data:: ISIS_INTF_CLNS_SNPA_UNKNOWN_INTERNAL_ERROR = 2

    	isis intf clns snpa unknown internal error

    """

    ISIS_INTF_CLNS_SNPA_UNKNOWN_ACCESS_ERROR = 0

    ISIS_INTF_CLNS_SNPA_UNKNOWN_NOT_LAN = 1

    ISIS_INTF_CLNS_SNPA_UNKNOWN_INTERNAL_ERROR = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisIfClnsSnpaUnknownReasonEnum']


class IsisIfDisabledReasonEnum(Enum):
    """
    IsisIfDisabledReasonEnum

    Isis if disabled reason

    .. data:: ISIS_INTF_DISABLED_NO_NET_CFG = 0

    	isis intf disabled no net cfg

    .. data:: ISIS_INTF_DISABLED_AREA_MISSING = 1

    	isis intf disabled area missing

    .. data:: ISIS_INTF_DISABLED_NO_AREA_RUNNING = 2

    	isis intf disabled no area running

    .. data:: ISIS_INTF_DISABLED_NO_TOPOS_CFG = 3

    	isis intf disabled no topos cfg

    .. data:: ISIS_INTF_DISABLED_NO_IMD_CONN = 4

    	isis intf disabled no imd conn

    .. data:: ISIS_INTF_DISABLED_IMD_REG_ERROR = 5

    	isis intf disabled imd reg error

    .. data:: ISIS_INTF_DISABLED_LEVEL_MISMATCH = 6

    	isis intf disabled level mismatch

    .. data:: ISIS_INTF_DISABLED_BASE_CAPS_ERROR = 7

    	isis intf disabled base caps error

    .. data:: ISIS_INTF_DISABLED_INTF_DOESNT_EXIST = 8

    	isis intf disabled intf doesnt exist

    .. data:: ISIS_INTF_DISABLED_INTF_SHUTDOWN = 9

    	isis intf disabled intf shutdown

    .. data:: ISIS_INTF_DISABLED_INTERNAL_ERROR = 10

    	isis intf disabled internal error

    """

    ISIS_INTF_DISABLED_NO_NET_CFG = 0

    ISIS_INTF_DISABLED_AREA_MISSING = 1

    ISIS_INTF_DISABLED_NO_AREA_RUNNING = 2

    ISIS_INTF_DISABLED_NO_TOPOS_CFG = 3

    ISIS_INTF_DISABLED_NO_IMD_CONN = 4

    ISIS_INTF_DISABLED_IMD_REG_ERROR = 5

    ISIS_INTF_DISABLED_LEVEL_MISMATCH = 6

    ISIS_INTF_DISABLED_BASE_CAPS_ERROR = 7

    ISIS_INTF_DISABLED_INTF_DOESNT_EXIST = 8

    ISIS_INTF_DISABLED_INTF_SHUTDOWN = 9

    ISIS_INTF_DISABLED_INTERNAL_ERROR = 10


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisIfDisabledReasonEnum']


class IsisIfMcastInvalidReasonEnum(Enum):
    """
    IsisIfMcastInvalidReasonEnum

    Isis if mcast invalid reason

    .. data:: ISIS_INTF_MCAST_INVALID_JOIN_ERROR = 0

    	Error when attempting to join this multicast

    	group

    .. data:: ISIS_INTF_MCAST_INVALID_INTERNAL_ERROR = 1

    	Internal error

    .. data:: ISIS_INTF_MCAST_INVALID_NOT_YET_NEEDED = 2

    	Multicast group membership not yet requested

    """

    ISIS_INTF_MCAST_INVALID_JOIN_ERROR = 0

    ISIS_INTF_MCAST_INVALID_INTERNAL_ERROR = 1

    ISIS_INTF_MCAST_INVALID_NOT_YET_NEEDED = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisIfMcastInvalidReasonEnum']


class IsisIfTopoAdjFormDisabledReasonEnum(Enum):
    """
    IsisIfTopoAdjFormDisabledReasonEnum

    Isis if topo adj form disabled reason

    .. data:: ISIS_INTF_TOPO_ADJ_FORM_DISABLED_INTF_PASSIVE = 0

    	isis intf topo adj form disabled intf passive

    .. data:: ISIS_INTF_TOPO_ADJ_FORM_DISABLED_AF_NOT_UP = 1

    	isis intf topo adj form disabled af not up

    .. data:: ISIS_INTF_TOPO_ADJ_FORM_DISABLED_AF_FWD_ADDR_UNKNOWN = 2

    	isis intf topo adj form disabled af fwd addr

    	unknown

    .. data:: ISIS_INTF_TOPO_ADJ_FORM_DISABLED_TOPO_NOT_CFG = 3

    	isis intf topo adj form disabled topo not cfg

    .. data:: ISIS_INTF_TOPO_ADJ_FORM_DISABLED_TOPO_CAN_NOT_PARTICIPATE = 4

    	isis intf topo adj form disabled topo can not

    	participate

    .. data:: ISIS_INTF_TOPO_ADJ_FORM_DISABLED_IDLE = 5

    	isis intf topo adj form disabled idle

    .. data:: ISIS_INTF_TOPO_ADJ_FORM_DISABLED_INTERNAL_ERROR = 6

    	isis intf topo adj form disabled internal error

    .. data:: ISIS_INTF_TOPO_ADJ_FORM_DISABLED_MTU = 7

    	isis intf topo adj form disabled mtu

    .. data:: ISIS_INTF_TOPO_ADJ_FORM_DISABLED_SNPA = 8

    	isis intf topo adj form disabled snpa

    .. data:: ISIS_INTF_TOPO_ADJ_FORM_DISABLED_MCAST = 9

    	isis intf topo adj form disabled mcast

    """

    ISIS_INTF_TOPO_ADJ_FORM_DISABLED_INTF_PASSIVE = 0

    ISIS_INTF_TOPO_ADJ_FORM_DISABLED_AF_NOT_UP = 1

    ISIS_INTF_TOPO_ADJ_FORM_DISABLED_AF_FWD_ADDR_UNKNOWN = 2

    ISIS_INTF_TOPO_ADJ_FORM_DISABLED_TOPO_NOT_CFG = 3

    ISIS_INTF_TOPO_ADJ_FORM_DISABLED_TOPO_CAN_NOT_PARTICIPATE = 4

    ISIS_INTF_TOPO_ADJ_FORM_DISABLED_IDLE = 5

    ISIS_INTF_TOPO_ADJ_FORM_DISABLED_INTERNAL_ERROR = 6

    ISIS_INTF_TOPO_ADJ_FORM_DISABLED_MTU = 7

    ISIS_INTF_TOPO_ADJ_FORM_DISABLED_SNPA = 8

    ISIS_INTF_TOPO_ADJ_FORM_DISABLED_MCAST = 9


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisIfTopoAdjFormDisabledReasonEnum']


class IsisIfTopoAdvPrefixDisabledReasonEnum(Enum):
    """
    IsisIfTopoAdvPrefixDisabledReasonEnum

    Isis if topo adv prefix disabled reason

    .. data:: ISIS_INTF_TOPO_ADV_PREFIX_DISABLED_INTF_SUPPRESSED = 0

    	isis intf topo adv prefix disabled intf

    	suppressed

    .. data:: ISIS_INTF_TOPO_ADV_PREFIX_DISABLED_AF_NOT_UP = 1

    	isis intf topo adv prefix disabled af not up

    .. data:: ISIS_INTF_TOPO_ADV_PREFIX_DISABLED_AF_PREFIXES_UNKNOWN = 2

    	isis intf topo adv prefix disabled af prefixes

    	unknown

    .. data:: ISIS_INTF_TOPO_ADV_PREFIX_DISABLED_INTERNAL_ERROR = 3

    	isis intf topo adv prefix disabled internal

    	error

    """

    ISIS_INTF_TOPO_ADV_PREFIX_DISABLED_INTF_SUPPRESSED = 0

    ISIS_INTF_TOPO_ADV_PREFIX_DISABLED_AF_NOT_UP = 1

    ISIS_INTF_TOPO_ADV_PREFIX_DISABLED_AF_PREFIXES_UNKNOWN = 2

    ISIS_INTF_TOPO_ADV_PREFIX_DISABLED_INTERNAL_ERROR = 3


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisIfTopoAdvPrefixDisabledReasonEnum']


class IsisIfTopoDisabledReasonEnum(Enum):
    """
    IsisIfTopoDisabledReasonEnum

    Isis if topo disabled reason

    .. data:: ISIS_INTF_TOPO_DISABLED_NOT_CFG = 0

    	isis intf topo disabled not cfg

    .. data:: ISIS_INTF_TOPO_DISABLED_INTERNAL_ERROR = 1

    	isis intf topo disabled internal error

    """

    ISIS_INTF_TOPO_DISABLED_NOT_CFG = 0

    ISIS_INTF_TOPO_DISABLED_INTERNAL_ERROR = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisIfTopoDisabledReasonEnum']


class IsisKnownEnum(Enum):
    """
    IsisKnownEnum

    Isis known

    .. data:: ISIS_UNKNOWN = 0

    	Unknown

    .. data:: ISIS_KNOWN = 1

    	Known

    """

    ISIS_UNKNOWN = 0

    ISIS_KNOWN = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisKnownEnum']


class IsisLevelEnum(Enum):
    """
    IsisLevelEnum

    Isis level

    .. data:: ISIS_LEVEL0 = 0

    	isis level0

    .. data:: ISIS_LEVEL1 = 1

    	isis level1

    .. data:: ISIS_LEVEL2 = 2

    	isis level2

    """

    ISIS_LEVEL0 = 0

    ISIS_LEVEL1 = 1

    ISIS_LEVEL2 = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisLevelEnum']


class IsisLevelsEnum(Enum):
    """
    IsisLevelsEnum

    Isis levels

    .. data:: ISIS_LEVELS_NONE = 0

    	isis levels none

    .. data:: ISIS_LEVELS_1 = 1

    	isis levels 1

    .. data:: ISIS_LEVELS_2 = 2

    	isis levels 2

    .. data:: ISIS_LEVELS_12 = 3

    	isis levels 12

    .. data:: ISIS_LEVELS_TOTAL = 4

    	isis levels total

    """

    ISIS_LEVELS_NONE = 0

    ISIS_LEVELS_1 = 1

    ISIS_LEVELS_2 = 2

    ISIS_LEVELS_12 = 3

    ISIS_LEVELS_TOTAL = 4


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisLevelsEnum']


class IsisLspDbOpEnum(Enum):
    """
    IsisLspDbOpEnum

    Isis lsp db op

    .. data:: ISIS_LSP_DB_CLEAR = 0

    	Clear the LSP database

    .. data:: ISIS_LSP_DB_INSERT_NEW_LSP = 1

    	Insertion of new LSP

    .. data:: ISIS_LSP_DB_REPLACE_LSP_WITH_LSP = 2

    	LSP replacing LSP

    .. data:: ISIS_LSP_DB_PURGE_LSP = 3

    	LSP purged by the local system

    .. data:: ISIS_LSP_DB_DELETE_LSP = 4

    	Removal of the LSP from the database

    """

    ISIS_LSP_DB_CLEAR = 0

    ISIS_LSP_DB_INSERT_NEW_LSP = 1

    ISIS_LSP_DB_REPLACE_LSP_WITH_LSP = 2

    ISIS_LSP_DB_PURGE_LSP = 3

    ISIS_LSP_DB_DELETE_LSP = 4


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisLspDbOpEnum']


class IsisLspTriggerEnum(Enum):
    """
    IsisLspTriggerEnum

    Isis lsp trigger

    .. data:: ISIS_LSP_TRIG_CONFIG = 0

    	Any configuration change

    .. data:: ISIS_LSP_TRIG_NEWADJ = 1

    	New adjacency came up

    .. data:: ISIS_LSP_TRIG_DELADJ = 2

    	Adjacency went down

    .. data:: ISIS_LSP_TRIG_DR_CHANGE = 3

    	DIS changed, or pseudonode changed

    .. data:: ISIS_LSP_TRIG_AREA_SET = 4

    	Active area set changed

    .. data:: ISIS_LSP_TRIG_ATTACH = 5

    	Attached bit changed state

    .. data:: ISIS_LSP_TRIG_HIPPITY = 6

    	LSPDB overload bit changed state

    .. data:: ISIS_LSP_TRIG_REGEN = 7

    	LSP regeneration

    .. data:: ISIS_LSP_TRIG_IP_IF_UP = 8

    	Directly connected IP prefix up

    .. data:: ISIS_LSP_TRIG_IP_IF_DOWN = 9

    	Directly connected IP prefix down

    .. data:: ISIS_LSP_TRIG_IP_INTER_AREA = 10

    	Interarea IP route appeared or gone

    .. data:: ISIS_LSP_TRIG_IP_EXTERNAL = 11

    	Redistributed IP route appeared or gone

    .. data:: ISIS_LSP_TRIG_IP_DEF_ORIG = 12

    	Default information originate changed

    .. data:: ISIS_LSP_TRIG_IP_ADDR_CHG = 13

    	IP interface address changed

    .. data:: ISIS_LSP_TRIG_TE_INFO = 14

    	TE bandwidth resource information

    .. data:: ISIS_LSP_TRIG_TE_PCE_INFO = 15

    	TE PCE information

    .. data:: ISIS_LSP_TRIG_TE_FA_INFO = 16

    	TE forwarding adjacency information

    .. data:: ISIS_LSP_TRIG_NSR_FO = 17

    	NSR FO is done

    .. data:: ISIS_LSP_TRIG_PN_CANCEL = 18

    	Pseudo-node generation canceled

    .. data:: ISIS_LSP_TRIG_LKGP = 19

    	Link-group offset metric change

    .. data:: ISIS_LSP_TRIG_PP = 20

    	Proactive Protection metric change

    """

    ISIS_LSP_TRIG_CONFIG = 0

    ISIS_LSP_TRIG_NEWADJ = 1

    ISIS_LSP_TRIG_DELADJ = 2

    ISIS_LSP_TRIG_DR_CHANGE = 3

    ISIS_LSP_TRIG_AREA_SET = 4

    ISIS_LSP_TRIG_ATTACH = 5

    ISIS_LSP_TRIG_HIPPITY = 6

    ISIS_LSP_TRIG_REGEN = 7

    ISIS_LSP_TRIG_IP_IF_UP = 8

    ISIS_LSP_TRIG_IP_IF_DOWN = 9

    ISIS_LSP_TRIG_IP_INTER_AREA = 10

    ISIS_LSP_TRIG_IP_EXTERNAL = 11

    ISIS_LSP_TRIG_IP_DEF_ORIG = 12

    ISIS_LSP_TRIG_IP_ADDR_CHG = 13

    ISIS_LSP_TRIG_TE_INFO = 14

    ISIS_LSP_TRIG_TE_PCE_INFO = 15

    ISIS_LSP_TRIG_TE_FA_INFO = 16

    ISIS_LSP_TRIG_NSR_FO = 17

    ISIS_LSP_TRIG_PN_CANCEL = 18

    ISIS_LSP_TRIG_LKGP = 19

    ISIS_LSP_TRIG_PP = 20


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisLspTriggerEnum']


class IsisMediaClassEnum(Enum):
    """
    IsisMediaClassEnum

    Isis media class

    .. data:: ISIS_MEDIA_CLASS_LAN = 0

    	LAN

    .. data:: ISIS_MEDIA_CLASS_P2P = 1

    	P2P

    .. data:: ISIS_MEDIA_CLASS_LOOP_BACK = 2

    	Loopback

    """

    ISIS_MEDIA_CLASS_LAN = 0

    ISIS_MEDIA_CLASS_P2P = 1

    ISIS_MEDIA_CLASS_LOOP_BACK = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisMediaClassEnum']


class IsisMetricModeEnum(Enum):
    """
    IsisMetricModeEnum

    Isis metric mode

    .. data:: ISIS_METRIC_MODE_FIXED = 0

    	Fixed

    .. data:: ISIS_METRIC_MODE_RELATIVE = 1

    	Relative

    .. data:: ISIS_METRIC_MODE_ABSOLUTE = 2

    	Absolute

    """

    ISIS_METRIC_MODE_FIXED = 0

    ISIS_METRIC_MODE_RELATIVE = 1

    ISIS_METRIC_MODE_ABSOLUTE = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisMetricModeEnum']


class IsisMetricStyleEnum(Enum):
    """
    IsisMetricStyleEnum

    Isis metric style

    .. data:: ISIS_METRIC_STYLE_NARROW = 0

    	old-style (ISO 10589) metrics

    .. data:: ISIS_METRIC_STYLE_WIDE = 1

    	new-style 32-bit metrics

    .. data:: ISIS_METRIC_STYLE_TRANSITION = 2

    	send/accept both forms of metric

    """

    ISIS_METRIC_STYLE_NARROW = 0

    ISIS_METRIC_STYLE_WIDE = 1

    ISIS_METRIC_STYLE_TRANSITION = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisMetricStyleEnum']


class IsisNsfFlavorEnum(Enum):
    """
    IsisNsfFlavorEnum

    Isis nsf flavor

    .. data:: ISIS_NSF_FLAV_OR_NONE = 0

    	NSF not configured

    .. data:: ISIS_NSF_FLAV_OR_CISCO = 1

    	Cisco-proprietary NSF

    .. data:: ISIS_NSF_FLAV_OR_IETF = 2

    	IETF-standard NSF

    .. data:: ISIS_NSF_FLAV_OR_NSR = 3

    	Cisco-proprietary NSR

    """

    ISIS_NSF_FLAV_OR_NONE = 0

    ISIS_NSF_FLAV_OR_CISCO = 1

    ISIS_NSF_FLAV_OR_IETF = 2

    ISIS_NSF_FLAV_OR_NSR = 3


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisNsfFlavorEnum']


class IsisPrefixOriginEnum(Enum):
    """
    IsisPrefixOriginEnum

    Isis prefix origin

    .. data:: ISIS_PREFIX_ORIGIN_L1_SUMMARY_NULL = 0

    	Level 1 Summary Null Route

    .. data:: ISIS_PREFIX_ORIGIN_L1 = 1

    	Level 1 Route

    .. data:: ISIS_PREFIX_ORIGIN_L2_SUMMARY_NULL = 2

    	Level 2 Summary Null Route

    .. data:: ISIS_PREFIX_ORIGIN_L2 = 3

    	Level 2 Route

    .. data:: ISIS_PREFIX_ORIGIN_INTER_AREA_SUMMARY_NULL = 4

    	Level 1 Interarea Summary Null Route

    .. data:: ISIS_PREFIX_ORIGIN_INTER_AREA = 5

    	Level 1 Interarea Route

    .. data:: ISIS_PREFIX_ORIGIN_DEFAULT_NEAREST_ATTACHED = 6

    	Nearest Attached Default Route

    """

    ISIS_PREFIX_ORIGIN_L1_SUMMARY_NULL = 0

    ISIS_PREFIX_ORIGIN_L1 = 1

    ISIS_PREFIX_ORIGIN_L2_SUMMARY_NULL = 2

    ISIS_PREFIX_ORIGIN_L2 = 3

    ISIS_PREFIX_ORIGIN_INTER_AREA_SUMMARY_NULL = 4

    ISIS_PREFIX_ORIGIN_INTER_AREA = 5

    ISIS_PREFIX_ORIGIN_DEFAULT_NEAREST_ATTACHED = 6


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisPrefixOriginEnum']


class IsisPrefixPriorityEnum(Enum):
    """
    IsisPrefixPriorityEnum

    Isis prefix priority

    .. data:: ISIS_PREFIX_PRIORITY_CRITICAL = 0

    	Critical priority prefixes

    .. data:: ISIS_PREFIX_PRIORITY_HIGH = 1

    	High priority prefixes

    .. data:: ISIS_PREFIX_PRIORITY_MED = 2

    	Medium priority prefixes

    .. data:: ISIS_PREFIX_PRIORITY_LOW = 3

    	Low priority prefixes

    """

    ISIS_PREFIX_PRIORITY_CRITICAL = 0

    ISIS_PREFIX_PRIORITY_HIGH = 1

    ISIS_PREFIX_PRIORITY_MED = 2

    ISIS_PREFIX_PRIORITY_LOW = 3


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisPrefixPriorityEnum']


class IsisReachableEnum(Enum):
    """
    IsisReachableEnum

    Isis reachable

    .. data:: ISIS_UNREACHABLE = 0

    	Unreachable

    .. data:: ISIS_REACHABLE = 1

    	Reachable

    """

    ISIS_UNREACHABLE = 0

    ISIS_REACHABLE = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisReachableEnum']


class IsisRedistProtoEnum(Enum):
    """
    IsisRedistProtoEnum

    Isis redist proto

    .. data:: ISIS_REDIST_CONNECTED = 0

    	Redistributed protocol is Connected

    .. data:: ISIS_REDIST_STATIC = 1

    	Redistributed protocol is Static

    .. data:: ISIS_REDIST_OSPF = 2

    	Redistributed protocol is OSPF

    .. data:: ISIS_REDIST_BGP = 3

    	Redistributed protocol is BGP

    .. data:: ISIS_REDIST_ISIS = 4

    	Redistributed protocol is IS-IS

    .. data:: ISIS_REDIST_OSPFV3 = 5

    	Redistributed protocol is OSPFv3

    .. data:: ISIS_REDIST_RIP = 6

    	Redistributed protocol is RIP

    .. data:: ISIS_REDIST_EIGRP = 7

    	Redistributed protocol is EIGRP

    .. data:: ISIS_REDIST_SUBSCRIBER = 8

    	Redistributed protocol is Subscriber

    .. data:: ISIS_REDIST_APPLICATION = 9

    	Redistributed protocol is Application

    .. data:: ISIS_REDIST_MOBILE = 10

    	Redistributed protocol is Mobile

    """

    ISIS_REDIST_CONNECTED = 0

    ISIS_REDIST_STATIC = 1

    ISIS_REDIST_OSPF = 2

    ISIS_REDIST_BGP = 3

    ISIS_REDIST_ISIS = 4

    ISIS_REDIST_OSPFV3 = 5

    ISIS_REDIST_RIP = 6

    ISIS_REDIST_EIGRP = 7

    ISIS_REDIST_SUBSCRIBER = 8

    ISIS_REDIST_APPLICATION = 9

    ISIS_REDIST_MOBILE = 10


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisRedistProtoEnum']


class IsisShRouteAdvOriginEnum(Enum):
    """
    IsisShRouteAdvOriginEnum

    Origin of a prefix advertisement

    .. data:: ISIS_SH_ROUTE_ADV_ORIGIN_INTERFACE = 0

    	IS-IS interface prefix

    .. data:: ISIS_SH_ROUTE_ADV_ORIGIN_REDISTRIBUTED = 1

    	Redistributed prefix

    .. data:: ISIS_SH_ROUTE_ADV_ORIGIN_NATIVE = 2

    	Native prefix

    .. data:: ISIS_SH_ROUTE_ADV_ORIGIN_SUMMARY = 3

    	Summary prefix

    .. data:: ISIS_SH_ROUTE_ADV_ORIGIN_DEFAULT = 4

    	Explicit origination of default prefix

    """

    ISIS_SH_ROUTE_ADV_ORIGIN_INTERFACE = 0

    ISIS_SH_ROUTE_ADV_ORIGIN_REDISTRIBUTED = 1

    ISIS_SH_ROUTE_ADV_ORIGIN_NATIVE = 2

    ISIS_SH_ROUTE_ADV_ORIGIN_SUMMARY = 3

    ISIS_SH_ROUTE_ADV_ORIGIN_DEFAULT = 4


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisShRouteAdvOriginEnum']


class IsisShTeLinkEnum(Enum):
    """
    IsisShTeLinkEnum

    Isis sh te link

    .. data:: ISIS_SH_TE_LINK_P2P = 0

    	Tunnel is absolute

    .. data:: ISIS_SH_TE_LINK_BROADCAST = 1

    	Broadcast link

    """

    ISIS_SH_TE_LINK_P2P = 0

    ISIS_SH_TE_LINK_BROADCAST = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisShTeLinkEnum']


class IsisShTePceFloodingScopeEnum(Enum):
    """
    IsisShTePceFloodingScopeEnum

    Isis sh te pce flooding scope

    .. data:: NONE = 0

    	Flooding is disabled

    .. data:: AREA = 1

    	Area wide flooding

    .. data:: DOMAIN = 2

    	Domain wide flooding

    """

    NONE = 0

    AREA = 1

    DOMAIN = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisShTePceFloodingScopeEnum']


class IsisSpfClassEnum(Enum):
    """
    IsisSpfClassEnum

    Types of route calculation

    .. data:: ISIS_SPF_FRR_PER_LINK = 0

    	FRR per-link SPF

    .. data:: ISIS_SPF_PARTIAL = 1

    	PRC

    .. data:: ISIS_SPF_FRR_PER_PREFIX = 2

    	FRR per-prefix SPF

    .. data:: ISIS_SPF_UCMP_CALC = 3

    	UCMP SPF

    .. data:: ISIS_SPF_NEXT_HOP = 4

    	Next Hop

    .. data:: ISIS_SPF_INCREMENTAL = 5

    	Incremental SPF

    .. data:: ISIS_SPF_FULL = 6

    	Full SPF

    """

    ISIS_SPF_FRR_PER_LINK = 0

    ISIS_SPF_PARTIAL = 1

    ISIS_SPF_FRR_PER_PREFIX = 2

    ISIS_SPF_UCMP_CALC = 3

    ISIS_SPF_NEXT_HOP = 4

    ISIS_SPF_INCREMENTAL = 5

    ISIS_SPF_FULL = 6


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisSpfClassEnum']


class IsisSpfTriggerEnum(Enum):
    """
    IsisSpfTriggerEnum

    Isis spf trigger

    .. data:: ISIS_SPF_TRIG_CONFIG = 0

    	Configuration change

    .. data:: ISIS_SPF_TRIG_NSR_FO = 1

    	NSR FO is done

    .. data:: ISIS_SPF_TRIG_PERIODIC = 2

    	Periodic SPF

    .. data:: ISIS_SPF_TRIG_CLEAR = 3

    	Cleared route table

    .. data:: ISIS_SPF_TRIG_NEWADJ = 4

    	New adjacency

    .. data:: ISIS_SPF_TRIG_DELADJ = 5

    	Deleted adjacency

    .. data:: ISIS_SPF_TRIG_NEXT_HOP = 6

    	IP nexthop address change

    .. data:: ISIS_SPF_TRIG_METRIC = 7

    	Changed interface metric

    .. data:: ISIS_SPF_TRIG_DIS = 8

    	Change to elected DIS

    .. data:: ISIS_SPF_TRIG_FRR_PER_LINK = 9

    	Change to per-link FRR config

    .. data:: ISIS_SPF_TRIG_FRR_PER_PREFIX = 10

    	Change to per-prefix FRR config

    .. data:: ISIS_SPF_TRIG_UCMP = 11

    	Change to UCMP config/calculation

    .. data:: ISIS_SPF_TRIG_NEW_TUNNEL = 12

    	New TE Autoroute Tunnel

    .. data:: ISIS_SPF_TRIG_DEL_TUNNEL = 13

    	Deleted TE Autoroute Tunnel

    .. data:: ISIS_SPF_TRIG_CHG_TUNNEL = 14

    	Changed TE Autoroute Tunnel

    .. data:: ISIS_SPF_TRIG_NEW_NODE = 15

    	New LSP zero which participates in topology

    .. data:: ISIS_SPF_TRIG_DEL_NODE = 16

    	New LSP zero which no longer participates in

    	topology

    .. data:: ISIS_SPF_TRIG_NEWLSP = 17

    	Previously unseen LSP fragment

    .. data:: ISIS_SPF_TRIG_LSP_EXPIRY = 18

    	LSP expired

    .. data:: ISIS_SPF_TRIG_ATTACH_SET = 19

    	Attached bit set

    .. data:: ISIS_SPF_TRIG_ATTACH_CLR = 20

    	Attached bit cleared

    .. data:: ISIS_SPF_TRIG_OVERLOAD_SET = 21

    	Overload bit set

    .. data:: ISIS_SPF_TRIG_OVERLOAD_CLR = 22

    	Overload bit cleared

    .. data:: ISIS_SPF_TRIG_LINK_GOOD = 23

    	Good news link TLV content change

    .. data:: ISIS_SPF_TRIG_LINK_BAD = 24

    	Bad news link TLV content change

    .. data:: ISIS_SPF_TRIG_PREFIX_GOOD = 25

    	Good news prefix TLV content change

    .. data:: ISIS_SPF_TRIG_PREFIX_BAD = 26

    	Bad news prefix TLV content change

    .. data:: ISIS_SPF_TRIG_PREFIX = 27

    	Neutral (neither good nor bad news) prefix TLV

    	content change

    .. data:: ISIS_SPF_TRIG_AREA_ADDR = 28

    	Area address TLV content change

    .. data:: ISIS_SPF_TRIG_IP_ADDR = 29

    	IP address TLV content change

    .. data:: ISIS_SPF_TRIG_RTRID = 30

    	Router id TLV content change

    .. data:: ISIS_SPF_TRIG_PREFIX_POLICY = 31

    	Prefix policy change

    """

    ISIS_SPF_TRIG_CONFIG = 0

    ISIS_SPF_TRIG_NSR_FO = 1

    ISIS_SPF_TRIG_PERIODIC = 2

    ISIS_SPF_TRIG_CLEAR = 3

    ISIS_SPF_TRIG_NEWADJ = 4

    ISIS_SPF_TRIG_DELADJ = 5

    ISIS_SPF_TRIG_NEXT_HOP = 6

    ISIS_SPF_TRIG_METRIC = 7

    ISIS_SPF_TRIG_DIS = 8

    ISIS_SPF_TRIG_FRR_PER_LINK = 9

    ISIS_SPF_TRIG_FRR_PER_PREFIX = 10

    ISIS_SPF_TRIG_UCMP = 11

    ISIS_SPF_TRIG_NEW_TUNNEL = 12

    ISIS_SPF_TRIG_DEL_TUNNEL = 13

    ISIS_SPF_TRIG_CHG_TUNNEL = 14

    ISIS_SPF_TRIG_NEW_NODE = 15

    ISIS_SPF_TRIG_DEL_NODE = 16

    ISIS_SPF_TRIG_NEWLSP = 17

    ISIS_SPF_TRIG_LSP_EXPIRY = 18

    ISIS_SPF_TRIG_ATTACH_SET = 19

    ISIS_SPF_TRIG_ATTACH_CLR = 20

    ISIS_SPF_TRIG_OVERLOAD_SET = 21

    ISIS_SPF_TRIG_OVERLOAD_CLR = 22

    ISIS_SPF_TRIG_LINK_GOOD = 23

    ISIS_SPF_TRIG_LINK_BAD = 24

    ISIS_SPF_TRIG_PREFIX_GOOD = 25

    ISIS_SPF_TRIG_PREFIX_BAD = 26

    ISIS_SPF_TRIG_PREFIX = 27

    ISIS_SPF_TRIG_AREA_ADDR = 28

    ISIS_SPF_TRIG_IP_ADDR = 29

    ISIS_SPF_TRIG_RTRID = 30

    ISIS_SPF_TRIG_PREFIX_POLICY = 31


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisSpfTriggerEnum']


class IsisStartupStatusEnum(Enum):
    """
    IsisStartupStatusEnum

    Isis startup status

    .. data:: ISIS_STARTUP_SSM_ACTIVE = 0

    	Startup-state-machine controlled restart in

    	progress

    .. data:: ISIS_STARTUP_SSM_COMPLETE = 1

    	Startup-state-machine controlled restart

    	complete

    .. data:: ISIS_STARTUP_SSM_ABORTED = 2

    	Startup-state-machine controlled restart

    	aborted

    .. data:: ISIS_STARTUP_SSM_NOT_RUN = 3

    	Startup-state-machine controlled not attempted

    """

    ISIS_STARTUP_SSM_ACTIVE = 0

    ISIS_STARTUP_SSM_COMPLETE = 1

    ISIS_STARTUP_SSM_ABORTED = 2

    ISIS_STARTUP_SSM_NOT_RUN = 3


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisStartupStatusEnum']


class IsisSubAfIdEnum(Enum):
    """
    IsisSubAfIdEnum

    Isis sub af id

    .. data:: UNICAST = 0

    	Unicast

    .. data:: MULTICAST = 1

    	Multicast

    """

    UNICAST = 0

    MULTICAST = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisSubAfIdEnum']


class IsisUpEnum(Enum):
    """
    IsisUpEnum

    Isis up

    .. data:: ISIS_DOWN = 0

    	Down

    .. data:: ISIS_UP = 1

    	Up

    """

    ISIS_DOWN = 0

    ISIS_UP = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisUpEnum']


class IsisValidEnum(Enum):
    """
    IsisValidEnum

    Isis valid

    .. data:: ISIS_INVALID = 0

    	Invalid

    .. data:: ISIS_VALID = 1

    	Valid

    """

    ISIS_INVALID = 0

    ISIS_VALID = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['IsisValidEnum']



class Isis(object):
    """
    IS\-IS operational data
    
    .. attribute:: instances
    
    	Per\-instance operational data
    	**type**\:  :py:class:`Instances <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances>`
    
    

    """

    _prefix = 'clns-isis-oper'
    _revision = '2015-11-09'

    def __init__(self):
        self.instances = Isis.Instances()
        self.instances.parent = self


    class Instances(object):
        """
        Per\-instance operational data
        
        .. attribute:: instance
        
        	IS\-IS instance
        	**type**\: list of  :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance>`
        
        

        """

        _prefix = 'clns-isis-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.instance = YList()
            self.instance.parent = self
            self.instance.name = 'instance'


        class Instance(object):
            """
            IS\-IS instance
            
            .. attribute:: instance_name  <key>
            
            	Instance identifier
            	**type**\:  str
            
            	**range:** 0..40
            
            .. attribute:: checkpoint_adjacencies
            
            	Checkpointed adjacency table
            	**type**\:  :py:class:`CheckpointAdjacencies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.CheckpointAdjacencies>`
            
            .. attribute:: checkpoint_interfaces
            
            	Checkpointed interface table
            	**type**\:  :py:class:`CheckpointInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.CheckpointInterfaces>`
            
            .. attribute:: checkpoint_lsps
            
            	Checkpointed LSP table
            	**type**\:  :py:class:`CheckpointLsps <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.CheckpointLsps>`
            
            .. attribute:: checkpoint_te_tunnels
            
            	Checkpointed TE tunnel table
            	**type**\:  :py:class:`CheckpointTeTunnels <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.CheckpointTeTunnels>`
            
            .. attribute:: error_log
            
            	Log of errors and warnings
            	**type**\:  :py:class:`ErrorLog <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.ErrorLog>`
            
            .. attribute:: host_names
            
            	Hostname table
            	**type**\:  :py:class:`HostNames <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.HostNames>`
            
            .. attribute:: interface_statistics
            
            	Interface statistics table
            	**type**\:  :py:class:`InterfaceStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.InterfaceStatistics>`
            
            .. attribute:: interfaces
            
            	Interface table
            	**type**\:  :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces>`
            
            .. attribute:: levels
            
            	Level table
            	**type**\:  :py:class:`Levels <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels>`
            
            .. attribute:: mesh_groups
            
            	Mesh\-group information
            	**type**\:  :py:class:`MeshGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.MeshGroups>`
            
            .. attribute:: neighbor_summaries
            
            	Neighbor\-summary table
            	**type**\:  :py:class:`NeighborSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NeighborSummaries>`
            
            .. attribute:: neighbors
            
            	Neighbor table
            	**type**\:  :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors>`
            
            .. attribute:: nsr_statistics
            
            	NSR Statistics information
            	**type**\:  :py:class:`NsrStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatistics>`
            
            .. attribute:: nsr_status
            
            	NSR Status information
            	**type**\:  :py:class:`NsrStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus>`
            
            .. attribute:: protocol
            
            	Basic protocol information about an IS\-IS instance
            	**type**\:  :py:class:`Protocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Protocol>`
            
            .. attribute:: statistics_global
            
            	Per\-instance statistics
            	**type**\:  :py:class:`StatisticsGlobal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal>`
            
            .. attribute:: topologies
            
            	Topology table
            	**type**\:  :py:class:`Topologies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies>`
            
            

            """

            _prefix = 'clns-isis-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.instance_name = None
                self.checkpoint_adjacencies = Isis.Instances.Instance.CheckpointAdjacencies()
                self.checkpoint_adjacencies.parent = self
                self.checkpoint_interfaces = Isis.Instances.Instance.CheckpointInterfaces()
                self.checkpoint_interfaces.parent = self
                self.checkpoint_lsps = Isis.Instances.Instance.CheckpointLsps()
                self.checkpoint_lsps.parent = self
                self.checkpoint_te_tunnels = Isis.Instances.Instance.CheckpointTeTunnels()
                self.checkpoint_te_tunnels.parent = self
                self.error_log = Isis.Instances.Instance.ErrorLog()
                self.error_log.parent = self
                self.host_names = Isis.Instances.Instance.HostNames()
                self.host_names.parent = self
                self.interface_statistics = Isis.Instances.Instance.InterfaceStatistics()
                self.interface_statistics.parent = self
                self.interfaces = Isis.Instances.Instance.Interfaces()
                self.interfaces.parent = self
                self.levels = Isis.Instances.Instance.Levels()
                self.levels.parent = self
                self.mesh_groups = Isis.Instances.Instance.MeshGroups()
                self.mesh_groups.parent = self
                self.neighbor_summaries = Isis.Instances.Instance.NeighborSummaries()
                self.neighbor_summaries.parent = self
                self.neighbors = Isis.Instances.Instance.Neighbors()
                self.neighbors.parent = self
                self.nsr_statistics = Isis.Instances.Instance.NsrStatistics()
                self.nsr_statistics.parent = self
                self.nsr_status = Isis.Instances.Instance.NsrStatus()
                self.nsr_status.parent = self
                self.protocol = Isis.Instances.Instance.Protocol()
                self.protocol.parent = self
                self.statistics_global = Isis.Instances.Instance.StatisticsGlobal()
                self.statistics_global.parent = self
                self.topologies = Isis.Instances.Instance.Topologies()
                self.topologies.parent = self


            class Neighbors(object):
                """
                Neighbor table
                
                .. attribute:: neighbor
                
                	A single neighbor router
                	**type**\: list of  :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.neighbor = YList()
                    self.neighbor.parent = self
                    self.neighbor.name = 'neighbor'


                class Neighbor(object):
                    """
                    A single neighbor router
                    
                    .. attribute:: interface_name
                    
                    	Interface name
                    	**type**\:  str
                    
                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                    
                    .. attribute:: local_interface
                    
                    	Local interface
                    	**type**\:  str
                    
                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                    
                    .. attribute:: neighbor_active_area_address
                    
                    	Active area addresses
                    	**type**\:  list of str
                    
                    	**pattern:** [a\-fA\-F0\-9]{2}(\\.[a\-fA\-F0\-9]{4}){0,6}
                    
                    .. attribute:: neighbor_circuit_type
                    
                    	Circuit type
                    	**type**\:  :py:class:`IsisLevelsEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelsEnum>`
                    
                    .. attribute:: neighbor_holdtime
                    
                    	Time (s) until neighbor declared down if no IIH received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: neighbor_ietf_nsf_capable_flag
                    
                    	TRUE if neighbor is IETF\-NSF capable
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: neighbor_media_type
                    
                    	Link media type
                    	**type**\:  :py:class:`IsisMediaClassEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisMediaClassEnum>`
                    
                    .. attribute:: neighbor_per_address_family_data
                    
                    	Per address\-family data
                    	**type**\: list of  :py:class:`NeighborPerAddressFamilyData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData>`
                    
                    .. attribute:: neighbor_snpa
                    
                    	Neighbor SNPA
                    	**type**\:  str
                    
                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                    
                    .. attribute:: neighbor_state
                    
                    	Neighbor (adjacency) state
                    	**type**\:  :py:class:`IsisAdjStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAdjStateEnum>`
                    
                    .. attribute:: neighbor_system_id
                    
                    	Neighbor system ID
                    	**type**\:  str
                    
                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                    
                    .. attribute:: neighbor_uptime
                    
                    	How long the neighbor has been up (s)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: neighbor_uptime_valid_flag
                    
                    	TRUE if NeighborUptime is set
                    	**type**\:  bool
                    
                    .. attribute:: nsr_standby
                    
                    	ISIS NSR STANDBY
                    	**type**\:  bool
                    
                    .. attribute:: system_id
                    
                    	System ID
                    	**type**\:  str
                    
                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                    
                    .. attribute:: topologies_supported
                    
                    	Topologies supported by both neighbor and local system
                    	**type**\: list of  :py:class:`TopologiesSupported <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.TopologiesSupported>`
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.interface_name = None
                        self.local_interface = None
                        self.neighbor_active_area_address = YLeafList()
                        self.neighbor_active_area_address.parent = self
                        self.neighbor_active_area_address.name = 'neighbor_active_area_address'
                        self.neighbor_circuit_type = None
                        self.neighbor_holdtime = None
                        self.neighbor_ietf_nsf_capable_flag = None
                        self.neighbor_media_type = None
                        self.neighbor_per_address_family_data = YList()
                        self.neighbor_per_address_family_data.parent = self
                        self.neighbor_per_address_family_data.name = 'neighbor_per_address_family_data'
                        self.neighbor_snpa = None
                        self.neighbor_state = None
                        self.neighbor_system_id = None
                        self.neighbor_uptime = None
                        self.neighbor_uptime_valid_flag = None
                        self.nsr_standby = None
                        self.system_id = None
                        self.topologies_supported = YList()
                        self.topologies_supported.parent = self
                        self.topologies_supported.name = 'topologies_supported'


                    class TopologiesSupported(object):
                        """
                        Topologies supported by both neighbor and local
                        system
                        
                        .. attribute:: af_name
                        
                        	AF name
                        	**type**\:  :py:class:`IsisAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfIdEnum>`
                        
                        .. attribute:: saf_name
                        
                        	Sub\-AF name
                        	**type**\:  :py:class:`IsisSubAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisSubAfIdEnum>`
                        
                        .. attribute:: topology_name
                        
                        	Topology Name
                        	**type**\:  str
                        
                        .. attribute:: vrf_name
                        
                        	VRF Name
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.af_name = None
                            self.saf_name = None
                            self.topology_name = None
                            self.vrf_name = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:topologies-supported'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.af_name is not None:
                                return True

                            if self.saf_name is not None:
                                return True

                            if self.topology_name is not None:
                                return True

                            if self.vrf_name is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.Neighbors.Neighbor.TopologiesSupported']['meta_info']


                    class NeighborPerAddressFamilyData(object):
                        """
                        Per address\-family data
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IsisAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfIdEnum>`
                        
                        .. attribute:: ipv4
                        
                        	IPV4 neighbor info
                        	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4>`
                        
                        .. attribute:: ipv6
                        
                        	IPV6 neighbor info
                        	**type**\:  :py:class:`Ipv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.af_name = None
                            self.ipv4 = Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4()
                            self.ipv4.parent = self
                            self.ipv6 = Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6()
                            self.ipv6.parent = self


                        class Ipv4(object):
                            """
                            IPV4 neighbor info
                            
                            .. attribute:: adjacency_sid
                            
                            	Adjacency SID
                            	**type**\:  :py:class:`AdjacencySid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid>`
                            
                            .. attribute:: interface_address
                            
                            	Adjacency interface addresses
                            	**type**\:  list of str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: next_hop
                            
                            	Adjacency next hop
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: non_frr_adjacency_sid
                            
                            	Adjacency SID not eligible for FRR protection
                            	**type**\:  :py:class:`NonFrrAdjacencySid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.adjacency_sid = Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid()
                                self.adjacency_sid.parent = self
                                self.interface_address = YLeafList()
                                self.interface_address.parent = self
                                self.interface_address.name = 'interface_address'
                                self.next_hop = None
                                self.non_frr_adjacency_sid = Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid()
                                self.non_frr_adjacency_sid.parent = self


                            class AdjacencySid(object):
                                """
                                Adjacency SID
                                
                                .. attribute:: adjacency_sid_backup
                                
                                	Adjacency SID Backup Info
                                	**type**\:  :py:class:`AdjacencySidBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackup>`
                                
                                .. attribute:: adjacency_sid_value
                                
                                	Adjacency SID value
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.adjacency_sid_backup = Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackup()
                                    self.adjacency_sid_backup.parent = self
                                    self.adjacency_sid_value = None


                                class AdjacencySidBackup(object):
                                    """
                                    Adjacency SID Backup Info
                                    
                                    .. attribute:: backup_interface
                                    
                                    	Backup path interface
                                    	**type**\:  str
                                    
                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                    
                                    .. attribute:: backup_label_stack
                                    
                                    	Backup path label stack
                                    	**type**\:  list of int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: backup_label_stack_size
                                    
                                    	Number of labels in the backup path label stack
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_nexthop
                                    
                                    	Backup path nexthop address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: backup_node_address
                                    
                                    	Neighbor address used as adjacency backup target
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.backup_interface = None
                                        self.backup_label_stack = YLeafList()
                                        self.backup_label_stack.parent = self
                                        self.backup_label_stack.name = 'backup_label_stack'
                                        self.backup_label_stack_size = None
                                        self.backup_nexthop = None
                                        self.backup_node_address = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:adjacency-sid-backup'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.backup_interface is not None:
                                            return True

                                        if self.backup_label_stack is not None:
                                            for child in self.backup_label_stack:
                                                if child is not None:
                                                    return True

                                        if self.backup_label_stack_size is not None:
                                            return True

                                        if self.backup_nexthop is not None:
                                            return True

                                        if self.backup_node_address is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackup']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:adjacency-sid'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.adjacency_sid_backup is not None and self.adjacency_sid_backup._has_data():
                                        return True

                                    if self.adjacency_sid_value is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid']['meta_info']


                            class NonFrrAdjacencySid(object):
                                """
                                Adjacency SID not eligible for FRR protection
                                
                                .. attribute:: adjacency_sid_backup
                                
                                	Adjacency SID Backup Info
                                	**type**\:  :py:class:`AdjacencySidBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackup>`
                                
                                .. attribute:: adjacency_sid_value
                                
                                	Adjacency SID value
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.adjacency_sid_backup = Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackup()
                                    self.adjacency_sid_backup.parent = self
                                    self.adjacency_sid_value = None


                                class AdjacencySidBackup(object):
                                    """
                                    Adjacency SID Backup Info
                                    
                                    .. attribute:: backup_interface
                                    
                                    	Backup path interface
                                    	**type**\:  str
                                    
                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                    
                                    .. attribute:: backup_label_stack
                                    
                                    	Backup path label stack
                                    	**type**\:  list of int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: backup_label_stack_size
                                    
                                    	Number of labels in the backup path label stack
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_nexthop
                                    
                                    	Backup path nexthop address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: backup_node_address
                                    
                                    	Neighbor address used as adjacency backup target
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.backup_interface = None
                                        self.backup_label_stack = YLeafList()
                                        self.backup_label_stack.parent = self
                                        self.backup_label_stack.name = 'backup_label_stack'
                                        self.backup_label_stack_size = None
                                        self.backup_nexthop = None
                                        self.backup_node_address = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:adjacency-sid-backup'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.backup_interface is not None:
                                            return True

                                        if self.backup_label_stack is not None:
                                            for child in self.backup_label_stack:
                                                if child is not None:
                                                    return True

                                        if self.backup_label_stack_size is not None:
                                            return True

                                        if self.backup_nexthop is not None:
                                            return True

                                        if self.backup_node_address is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackup']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:non-frr-adjacency-sid'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.adjacency_sid_backup is not None and self.adjacency_sid_backup._has_data():
                                        return True

                                    if self.adjacency_sid_value is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ipv4'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.adjacency_sid is not None and self.adjacency_sid._has_data():
                                    return True

                                if self.interface_address is not None:
                                    for child in self.interface_address:
                                        if child is not None:
                                            return True

                                if self.next_hop is not None:
                                    return True

                                if self.non_frr_adjacency_sid is not None and self.non_frr_adjacency_sid._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4']['meta_info']


                        class Ipv6(object):
                            """
                            IPV6 neighbor info
                            
                            .. attribute:: adjacency_sid
                            
                            	Adjacency SID
                            	**type**\:  :py:class:`AdjacencySid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid>`
                            
                            .. attribute:: interface_address
                            
                            	Adjacency interface addresses
                            	**type**\:  list of str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: next_hop
                            
                            	Adjacency next hop
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: non_frr_adjacency_sid
                            
                            	Adjacency SID not eligible for FRR protection
                            	**type**\:  :py:class:`NonFrrAdjacencySid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.adjacency_sid = Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid()
                                self.adjacency_sid.parent = self
                                self.interface_address = YLeafList()
                                self.interface_address.parent = self
                                self.interface_address.name = 'interface_address'
                                self.next_hop = None
                                self.non_frr_adjacency_sid = Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid()
                                self.non_frr_adjacency_sid.parent = self


                            class AdjacencySid(object):
                                """
                                Adjacency SID
                                
                                .. attribute:: adjacency_sid_backup
                                
                                	Adjacency SID Backup Info
                                	**type**\:  :py:class:`AdjacencySidBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackup>`
                                
                                .. attribute:: adjacency_sid_value
                                
                                	Adjacency SID value
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.adjacency_sid_backup = Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackup()
                                    self.adjacency_sid_backup.parent = self
                                    self.adjacency_sid_value = None


                                class AdjacencySidBackup(object):
                                    """
                                    Adjacency SID Backup Info
                                    
                                    .. attribute:: backup_interface
                                    
                                    	Backup path interface
                                    	**type**\:  str
                                    
                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                    
                                    .. attribute:: backup_label_stack
                                    
                                    	Backup path label stack
                                    	**type**\:  list of int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: backup_label_stack_size
                                    
                                    	Number of labels in the backup path label stack
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_nexthop
                                    
                                    	Backup path nexthop address
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: backup_node_address
                                    
                                    	Neighbor address used as adjacency backup target
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.backup_interface = None
                                        self.backup_label_stack = YLeafList()
                                        self.backup_label_stack.parent = self
                                        self.backup_label_stack.name = 'backup_label_stack'
                                        self.backup_label_stack_size = None
                                        self.backup_nexthop = None
                                        self.backup_node_address = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:adjacency-sid-backup'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.backup_interface is not None:
                                            return True

                                        if self.backup_label_stack is not None:
                                            for child in self.backup_label_stack:
                                                if child is not None:
                                                    return True

                                        if self.backup_label_stack_size is not None:
                                            return True

                                        if self.backup_nexthop is not None:
                                            return True

                                        if self.backup_node_address is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackup']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:adjacency-sid'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.adjacency_sid_backup is not None and self.adjacency_sid_backup._has_data():
                                        return True

                                    if self.adjacency_sid_value is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid']['meta_info']


                            class NonFrrAdjacencySid(object):
                                """
                                Adjacency SID not eligible for FRR protection
                                
                                .. attribute:: adjacency_sid_backup
                                
                                	Adjacency SID Backup Info
                                	**type**\:  :py:class:`AdjacencySidBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackup>`
                                
                                .. attribute:: adjacency_sid_value
                                
                                	Adjacency SID value
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.adjacency_sid_backup = Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackup()
                                    self.adjacency_sid_backup.parent = self
                                    self.adjacency_sid_value = None


                                class AdjacencySidBackup(object):
                                    """
                                    Adjacency SID Backup Info
                                    
                                    .. attribute:: backup_interface
                                    
                                    	Backup path interface
                                    	**type**\:  str
                                    
                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                    
                                    .. attribute:: backup_label_stack
                                    
                                    	Backup path label stack
                                    	**type**\:  list of int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: backup_label_stack_size
                                    
                                    	Number of labels in the backup path label stack
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_nexthop
                                    
                                    	Backup path nexthop address
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: backup_node_address
                                    
                                    	Neighbor address used as adjacency backup target
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.backup_interface = None
                                        self.backup_label_stack = YLeafList()
                                        self.backup_label_stack.parent = self
                                        self.backup_label_stack.name = 'backup_label_stack'
                                        self.backup_label_stack_size = None
                                        self.backup_nexthop = None
                                        self.backup_node_address = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:adjacency-sid-backup'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.backup_interface is not None:
                                            return True

                                        if self.backup_label_stack is not None:
                                            for child in self.backup_label_stack:
                                                if child is not None:
                                                    return True

                                        if self.backup_label_stack_size is not None:
                                            return True

                                        if self.backup_nexthop is not None:
                                            return True

                                        if self.backup_node_address is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackup']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:non-frr-adjacency-sid'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.adjacency_sid_backup is not None and self.adjacency_sid_backup._has_data():
                                        return True

                                    if self.adjacency_sid_value is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ipv6'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.adjacency_sid is not None and self.adjacency_sid._has_data():
                                    return True

                                if self.interface_address is not None:
                                    for child in self.interface_address:
                                        if child is not None:
                                            return True

                                if self.next_hop is not None:
                                    return True

                                if self.non_frr_adjacency_sid is not None and self.non_frr_adjacency_sid._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:neighbor-per-address-family-data'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.af_name is not None:
                                return True

                            if self.ipv4 is not None and self.ipv4._has_data():
                                return True

                            if self.ipv6 is not None and self.ipv6._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:neighbor'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.interface_name is not None:
                            return True

                        if self.local_interface is not None:
                            return True

                        if self.neighbor_active_area_address is not None:
                            for child in self.neighbor_active_area_address:
                                if child is not None:
                                    return True

                        if self.neighbor_circuit_type is not None:
                            return True

                        if self.neighbor_holdtime is not None:
                            return True

                        if self.neighbor_ietf_nsf_capable_flag is not None:
                            return True

                        if self.neighbor_media_type is not None:
                            return True

                        if self.neighbor_per_address_family_data is not None:
                            for child_ref in self.neighbor_per_address_family_data:
                                if child_ref._has_data():
                                    return True

                        if self.neighbor_snpa is not None:
                            return True

                        if self.neighbor_state is not None:
                            return True

                        if self.neighbor_system_id is not None:
                            return True

                        if self.neighbor_uptime is not None:
                            return True

                        if self.neighbor_uptime_valid_flag is not None:
                            return True

                        if self.nsr_standby is not None:
                            return True

                        if self.system_id is not None:
                            return True

                        if self.topologies_supported is not None:
                            for child_ref in self.topologies_supported:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                        return meta._meta_table['Isis.Instances.Instance.Neighbors.Neighbor']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:neighbors'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.neighbor is not None:
                        for child_ref in self.neighbor:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                    return meta._meta_table['Isis.Instances.Instance.Neighbors']['meta_info']


            class HostNames(object):
                """
                Hostname table
                
                .. attribute:: host_name
                
                	Hostname table entry
                	**type**\: list of  :py:class:`HostName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.HostNames.HostName>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.host_name = YList()
                    self.host_name.parent = self
                    self.host_name.name = 'host_name'


                class HostName(object):
                    """
                    Hostname table entry
                    
                    .. attribute:: system_id  <key>
                    
                    	System ID
                    	**type**\:  str
                    
                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                    
                    .. attribute:: host_levels
                    
                    	Host levels
                    	**type**\:  :py:class:`IsisLevelsEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelsEnum>`
                    
                    .. attribute:: host_name
                    
                    	Host name
                    	**type**\:  str
                    
                    .. attribute:: local_is_flag
                    
                    	TRUE if this is the local IS
                    	**type**\:  bool
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.system_id = None
                        self.host_levels = None
                        self.host_name = None
                        self.local_is_flag = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.system_id is None:
                            raise YPYModelError('Key property system_id is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:host-name[Cisco-IOS-XR-clns-isis-oper:system-id = ' + str(self.system_id) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.system_id is not None:
                            return True

                        if self.host_levels is not None:
                            return True

                        if self.host_name is not None:
                            return True

                        if self.local_is_flag is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                        return meta._meta_table['Isis.Instances.Instance.HostNames.HostName']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:host-names'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.host_name is not None:
                        for child_ref in self.host_name:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                    return meta._meta_table['Isis.Instances.Instance.HostNames']['meta_info']


            class StatisticsGlobal(object):
                """
                Per\-instance statistics
                
                .. attribute:: per_area_data
                
                	Per\-area data
                	**type**\: list of  :py:class:`PerAreaData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.PerAreaData>`
                
                .. attribute:: statistics
                
                	Statistics
                	**type**\:  :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.Statistics>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.per_area_data = YList()
                    self.per_area_data.parent = self
                    self.per_area_data.name = 'per_area_data'
                    self.statistics = Isis.Instances.Instance.StatisticsGlobal.Statistics()
                    self.statistics.parent = self


                class Statistics(object):
                    """
                    Statistics
                    
                    .. attribute:: avg_csnp_process_time
                    
                    	Average CSNP process time
                    	**type**\:  :py:class:`AvgCsnpProcessTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgCsnpProcessTime>`
                    
                    .. attribute:: avg_csnp_recv_rate
                    
                    	Average csnp receive rate in packets per second
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: avg_csnp_send_rate
                    
                    	Average csnp send rate in packets per second
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: avg_csnp_transmit_time
                    
                    	Average CSNP transmit time
                    	**type**\:  :py:class:`AvgCsnpTransmitTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgCsnpTransmitTime>`
                    
                    .. attribute:: avg_hello_process_time
                    
                    	Average hello process time
                    	**type**\:  :py:class:`AvgHelloProcessTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgHelloProcessTime>`
                    
                    .. attribute:: avg_hello_recv_rate
                    
                    	Average hello receive rate in packets per second
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: avg_hello_send_rate
                    
                    	Average hello send rate in packets per second
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: avg_hello_transmit_time
                    
                    	Average hello transmit time
                    	**type**\:  :py:class:`AvgHelloTransmitTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgHelloTransmitTime>`
                    
                    .. attribute:: avg_lsp_process_time
                    
                    	Average LSP process time
                    	**type**\:  :py:class:`AvgLspProcessTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgLspProcessTime>`
                    
                    .. attribute:: avg_lsp_recv_rate
                    
                    	Average LSP receive rate in packets per second
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: avg_lsp_send_rate
                    
                    	Average LSP send rate in packets per second
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: avg_lsp_transmit_time
                    
                    	Average LSP transmit time
                    	**type**\:  :py:class:`AvgLspTransmitTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgLspTransmitTime>`
                    
                    .. attribute:: avg_psnp_process_time
                    
                    	Average PSNP process time
                    	**type**\:  :py:class:`AvgPsnpProcessTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgPsnpProcessTime>`
                    
                    .. attribute:: avg_psnp_recv_rate
                    
                    	Average psnp receive rate in packets per second
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: avg_psnp_send_rate
                    
                    	Average psnp send rate in packets per second
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: avg_psnp_transmit_time
                    
                    	Average PSNP transmit time
                    	**type**\:  :py:class:`AvgPsnpTransmitTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgPsnpTransmitTime>`
                    
                    .. attribute:: fast_csnp_cache_update_count
                    
                    	Fast\-CSNP cache updates
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: fast_csnp_lookup_count
                    
                    	Fast\-CSNP cache lookups
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: fast_csnp_lookup_hit_count
                    
                    	Fast\-CSNP cache hits
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: fast_psnp_lookup_count
                    
                    	Fast\-PSNP cache lookups
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: fast_psnp_lookup_hit_count
                    
                    	Fast\-PSNP cache hits
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: iih_dropped_count
                    
                    	IIHs dropped \- Not Used
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: invalid_checksum_lsp_count
                    
                    	LSPs received with invalid checksum
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: lsp_dropped_count
                    
                    	LSPs dropped
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: maximum_iih_queue_length
                    
                    	Maximum IIH queue length \- Not Used
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: maximum_pdu_queue_length
                    
                    	Maximum update PDU queue length
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: snp_dropped_count
                    
                    	SNPs dropped
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: zero_holdtime_lsp_count
                    
                    	LSPs received with holdtime 0
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.avg_csnp_process_time = Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgCsnpProcessTime()
                        self.avg_csnp_process_time.parent = self
                        self.avg_csnp_recv_rate = None
                        self.avg_csnp_send_rate = None
                        self.avg_csnp_transmit_time = Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgCsnpTransmitTime()
                        self.avg_csnp_transmit_time.parent = self
                        self.avg_hello_process_time = Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgHelloProcessTime()
                        self.avg_hello_process_time.parent = self
                        self.avg_hello_recv_rate = None
                        self.avg_hello_send_rate = None
                        self.avg_hello_transmit_time = Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgHelloTransmitTime()
                        self.avg_hello_transmit_time.parent = self
                        self.avg_lsp_process_time = Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgLspProcessTime()
                        self.avg_lsp_process_time.parent = self
                        self.avg_lsp_recv_rate = None
                        self.avg_lsp_send_rate = None
                        self.avg_lsp_transmit_time = Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgLspTransmitTime()
                        self.avg_lsp_transmit_time.parent = self
                        self.avg_psnp_process_time = Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgPsnpProcessTime()
                        self.avg_psnp_process_time.parent = self
                        self.avg_psnp_recv_rate = None
                        self.avg_psnp_send_rate = None
                        self.avg_psnp_transmit_time = Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgPsnpTransmitTime()
                        self.avg_psnp_transmit_time.parent = self
                        self.fast_csnp_cache_update_count = None
                        self.fast_csnp_lookup_count = None
                        self.fast_csnp_lookup_hit_count = None
                        self.fast_psnp_lookup_count = None
                        self.fast_psnp_lookup_hit_count = None
                        self.iih_dropped_count = None
                        self.invalid_checksum_lsp_count = None
                        self.lsp_dropped_count = None
                        self.maximum_iih_queue_length = None
                        self.maximum_pdu_queue_length = None
                        self.snp_dropped_count = None
                        self.zero_holdtime_lsp_count = None


                    class AvgHelloProcessTime(object):
                        """
                        Average hello process time
                        
                        .. attribute:: nano_seconds
                        
                        	Timestamp value (nanoseconds)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: seconds
                        
                        	Timestamp value (seconds)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.nano_seconds = None
                            self.seconds = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:avg-hello-process-time'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nano_seconds is not None:
                                return True

                            if self.seconds is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgHelloProcessTime']['meta_info']


                    class AvgCsnpProcessTime(object):
                        """
                        Average CSNP process time
                        
                        .. attribute:: nano_seconds
                        
                        	Timestamp value (nanoseconds)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: seconds
                        
                        	Timestamp value (seconds)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.nano_seconds = None
                            self.seconds = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:avg-csnp-process-time'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nano_seconds is not None:
                                return True

                            if self.seconds is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgCsnpProcessTime']['meta_info']


                    class AvgPsnpProcessTime(object):
                        """
                        Average PSNP process time
                        
                        .. attribute:: nano_seconds
                        
                        	Timestamp value (nanoseconds)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: seconds
                        
                        	Timestamp value (seconds)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.nano_seconds = None
                            self.seconds = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:avg-psnp-process-time'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nano_seconds is not None:
                                return True

                            if self.seconds is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgPsnpProcessTime']['meta_info']


                    class AvgLspProcessTime(object):
                        """
                        Average LSP process time
                        
                        .. attribute:: nano_seconds
                        
                        	Timestamp value (nanoseconds)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: seconds
                        
                        	Timestamp value (seconds)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.nano_seconds = None
                            self.seconds = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:avg-lsp-process-time'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nano_seconds is not None:
                                return True

                            if self.seconds is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgLspProcessTime']['meta_info']


                    class AvgHelloTransmitTime(object):
                        """
                        Average hello transmit time
                        
                        .. attribute:: nano_seconds
                        
                        	Timestamp value (nanoseconds)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: seconds
                        
                        	Timestamp value (seconds)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.nano_seconds = None
                            self.seconds = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:avg-hello-transmit-time'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nano_seconds is not None:
                                return True

                            if self.seconds is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgHelloTransmitTime']['meta_info']


                    class AvgCsnpTransmitTime(object):
                        """
                        Average CSNP transmit time
                        
                        .. attribute:: nano_seconds
                        
                        	Timestamp value (nanoseconds)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: seconds
                        
                        	Timestamp value (seconds)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.nano_seconds = None
                            self.seconds = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:avg-csnp-transmit-time'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nano_seconds is not None:
                                return True

                            if self.seconds is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgCsnpTransmitTime']['meta_info']


                    class AvgPsnpTransmitTime(object):
                        """
                        Average PSNP transmit time
                        
                        .. attribute:: nano_seconds
                        
                        	Timestamp value (nanoseconds)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: seconds
                        
                        	Timestamp value (seconds)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.nano_seconds = None
                            self.seconds = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:avg-psnp-transmit-time'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nano_seconds is not None:
                                return True

                            if self.seconds is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgPsnpTransmitTime']['meta_info']


                    class AvgLspTransmitTime(object):
                        """
                        Average LSP transmit time
                        
                        .. attribute:: nano_seconds
                        
                        	Timestamp value (nanoseconds)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: seconds
                        
                        	Timestamp value (seconds)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.nano_seconds = None
                            self.seconds = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:avg-lsp-transmit-time'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nano_seconds is not None:
                                return True

                            if self.seconds is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgLspTransmitTime']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.avg_csnp_process_time is not None and self.avg_csnp_process_time._has_data():
                            return True

                        if self.avg_csnp_recv_rate is not None:
                            return True

                        if self.avg_csnp_send_rate is not None:
                            return True

                        if self.avg_csnp_transmit_time is not None and self.avg_csnp_transmit_time._has_data():
                            return True

                        if self.avg_hello_process_time is not None and self.avg_hello_process_time._has_data():
                            return True

                        if self.avg_hello_recv_rate is not None:
                            return True

                        if self.avg_hello_send_rate is not None:
                            return True

                        if self.avg_hello_transmit_time is not None and self.avg_hello_transmit_time._has_data():
                            return True

                        if self.avg_lsp_process_time is not None and self.avg_lsp_process_time._has_data():
                            return True

                        if self.avg_lsp_recv_rate is not None:
                            return True

                        if self.avg_lsp_send_rate is not None:
                            return True

                        if self.avg_lsp_transmit_time is not None and self.avg_lsp_transmit_time._has_data():
                            return True

                        if self.avg_psnp_process_time is not None and self.avg_psnp_process_time._has_data():
                            return True

                        if self.avg_psnp_recv_rate is not None:
                            return True

                        if self.avg_psnp_send_rate is not None:
                            return True

                        if self.avg_psnp_transmit_time is not None and self.avg_psnp_transmit_time._has_data():
                            return True

                        if self.fast_csnp_cache_update_count is not None:
                            return True

                        if self.fast_csnp_lookup_count is not None:
                            return True

                        if self.fast_csnp_lookup_hit_count is not None:
                            return True

                        if self.fast_psnp_lookup_count is not None:
                            return True

                        if self.fast_psnp_lookup_hit_count is not None:
                            return True

                        if self.iih_dropped_count is not None:
                            return True

                        if self.invalid_checksum_lsp_count is not None:
                            return True

                        if self.lsp_dropped_count is not None:
                            return True

                        if self.maximum_iih_queue_length is not None:
                            return True

                        if self.maximum_pdu_queue_length is not None:
                            return True

                        if self.snp_dropped_count is not None:
                            return True

                        if self.zero_holdtime_lsp_count is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                        return meta._meta_table['Isis.Instances.Instance.StatisticsGlobal.Statistics']['meta_info']


                class PerAreaData(object):
                    """
                    Per\-area data
                    
                    .. attribute:: level
                    
                    	Level this data applies to
                    	**type**\:  :py:class:`IsisLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelEnum>`
                    
                    .. attribute:: per_topology_data
                    
                    	Per\-topoogy statistics
                    	**type**\: list of  :py:class:`PerTopologyData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.PerAreaData.PerTopologyData>`
                    
                    .. attribute:: statistics
                    
                    	Statistics
                    	**type**\:  :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.PerAreaData.Statistics>`
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.level = None
                        self.per_topology_data = YList()
                        self.per_topology_data.parent = self
                        self.per_topology_data.name = 'per_topology_data'
                        self.statistics = Isis.Instances.Instance.StatisticsGlobal.PerAreaData.Statistics()
                        self.statistics.parent = self


                    class Statistics(object):
                        """
                        Statistics
                        
                        .. attribute:: system_lsp_build_count
                        
                        	Number of times system LSP rebuilt
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: system_lsp_refresh_count
                        
                        	Number of times system LSP refreshed
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.system_lsp_build_count = None
                            self.system_lsp_refresh_count = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:statistics'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.system_lsp_build_count is not None:
                                return True

                            if self.system_lsp_refresh_count is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.StatisticsGlobal.PerAreaData.Statistics']['meta_info']


                    class PerTopologyData(object):
                        """
                        Per\-topoogy statistics
                        
                        .. attribute:: id
                        
                        	Topology ID
                        	**type**\:  :py:class:`Id <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.PerAreaData.PerTopologyData.Id>`
                        
                        .. attribute:: statistics
                        
                        	Statistics
                        	**type**\:  :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.PerAreaData.PerTopologyData.Statistics>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.id = Isis.Instances.Instance.StatisticsGlobal.PerAreaData.PerTopologyData.Id()
                            self.id.parent = self
                            self.statistics = Isis.Instances.Instance.StatisticsGlobal.PerAreaData.PerTopologyData.Statistics()
                            self.statistics.parent = self


                        class Id(object):
                            """
                            Topology ID
                            
                            .. attribute:: af_name
                            
                            	AF name
                            	**type**\:  :py:class:`IsisAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfIdEnum>`
                            
                            .. attribute:: saf_name
                            
                            	Sub\-AF name
                            	**type**\:  :py:class:`IsisSubAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisSubAfIdEnum>`
                            
                            .. attribute:: topology_name
                            
                            	Topology Name
                            	**type**\:  str
                            
                            .. attribute:: vrf_name
                            
                            	VRF Name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.af_name = None
                                self.saf_name = None
                                self.topology_name = None
                                self.vrf_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:id'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.af_name is not None:
                                    return True

                                if self.saf_name is not None:
                                    return True

                                if self.topology_name is not None:
                                    return True

                                if self.vrf_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.StatisticsGlobal.PerAreaData.PerTopologyData.Id']['meta_info']


                        class Statistics(object):
                            """
                            Statistics
                            
                            .. attribute:: ispf_run_count
                            
                            	Number of ISPF calculations run
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: nhc_run_count
                            
                            	Number of Next Hop Calculations run
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: periodic_run_count
                            
                            	Number of periodic SPF calculations run
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prc_run_count
                            
                            	Number of PRCs run
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: spf_run_count
                            
                            	Number of full SPF calculations run
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.ispf_run_count = None
                                self.nhc_run_count = None
                                self.periodic_run_count = None
                                self.prc_run_count = None
                                self.spf_run_count = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:statistics'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ispf_run_count is not None:
                                    return True

                                if self.nhc_run_count is not None:
                                    return True

                                if self.periodic_run_count is not None:
                                    return True

                                if self.prc_run_count is not None:
                                    return True

                                if self.spf_run_count is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.StatisticsGlobal.PerAreaData.PerTopologyData.Statistics']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:per-topology-data'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.id is not None and self.id._has_data():
                                return True

                            if self.statistics is not None and self.statistics._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.StatisticsGlobal.PerAreaData.PerTopologyData']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:per-area-data'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.level is not None:
                            return True

                        if self.per_topology_data is not None:
                            for child_ref in self.per_topology_data:
                                if child_ref._has_data():
                                    return True

                        if self.statistics is not None and self.statistics._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                        return meta._meta_table['Isis.Instances.Instance.StatisticsGlobal.PerAreaData']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:statistics-global'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.per_area_data is not None:
                        for child_ref in self.per_area_data:
                            if child_ref._has_data():
                                return True

                    if self.statistics is not None and self.statistics._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                    return meta._meta_table['Isis.Instances.Instance.StatisticsGlobal']['meta_info']


            class Levels(object):
                """
                Level table
                
                .. attribute:: level
                
                	Per\-level operational data
                	**type**\: list of  :py:class:`Level <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.level = YList()
                    self.level.parent = self
                    self.level.name = 'level'


                class Level(object):
                    """
                    Per\-level operational data
                    
                    .. attribute:: level  <key>
                    
                    	Level
                    	**type**\:  :py:class:`IsisInternalLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_datatypes.IsisInternalLevelEnum>`
                    
                    .. attribute:: adjacencies
                    
                    	Adjacency table
                    	**type**\:  :py:class:`Adjacencies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies>`
                    
                    .. attribute:: adjacency_log
                    
                    	Log of adjacency changes within a single level
                    	**type**\:  :py:class:`AdjacencyLog <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.AdjacencyLog>`
                    
                    .. attribute:: database_log
                    
                    	Database\-log for a single level
                    	**type**\:  :py:class:`DatabaseLog <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.DatabaseLog>`
                    
                    .. attribute:: detailed_lsps
                    
                    	Detailed LSP table. Use to retrieve LSPs with TLV content
                    	**type**\:  :py:class:`DetailedLsps <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.DetailedLsps>`
                    
                    .. attribute:: lsp_log
                    
                    	LSP\-log for a single level
                    	**type**\:  :py:class:`LspLog <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspLog>`
                    
                    .. attribute:: lsp_table_summary
                    
                    	Summary information for one level's LSP database
                    	**type**\:  :py:class:`LspTableSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspTableSummary>`
                    
                    .. attribute:: lsps
                    
                    	LSP table
                    	**type**\:  :py:class:`Lsps <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Lsps>`
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.level = None
                        self.adjacencies = Isis.Instances.Instance.Levels.Level.Adjacencies()
                        self.adjacencies.parent = self
                        self.adjacency_log = Isis.Instances.Instance.Levels.Level.AdjacencyLog()
                        self.adjacency_log.parent = self
                        self.database_log = Isis.Instances.Instance.Levels.Level.DatabaseLog()
                        self.database_log.parent = self
                        self.detailed_lsps = Isis.Instances.Instance.Levels.Level.DetailedLsps()
                        self.detailed_lsps.parent = self
                        self.lsp_log = Isis.Instances.Instance.Levels.Level.LspLog()
                        self.lsp_log.parent = self
                        self.lsp_table_summary = Isis.Instances.Instance.Levels.Level.LspTableSummary()
                        self.lsp_table_summary.parent = self
                        self.lsps = Isis.Instances.Instance.Levels.Level.Lsps()
                        self.lsps.parent = self


                    class AdjacencyLog(object):
                        """
                        Log of adjacency changes within a single
                        level
                        
                        .. attribute:: log_entry
                        
                        	Adjacency Log entries
                        	**type**\: list of  :py:class:`LogEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.log_entry = YList()
                            self.log_entry.parent = self
                            self.log_entry.name = 'log_entry'


                        class LogEntry(object):
                            """
                            Adjacency Log entries
                            
                            .. attribute:: adj_log_neighbor_system_id
                            
                            	Neighbor system ID
                            	**type**\:  str
                            
                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                            
                            .. attribute:: adjacency_per_topology_change
                            
                            	Per\-topology changes
                            	**type**\: list of  :py:class:`AdjacencyPerTopologyChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.AdjacencyPerTopologyChange>`
                            
                            .. attribute:: cur_adj_state
                            
                            	Current adjacency state
                            	**type**\:  :py:class:`IsisAdjStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAdjStateEnum>`
                            
                            .. attribute:: generic_data
                            
                            	Generic entry data
                            	**type**\:  :py:class:`GenericData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.GenericData>`
                            
                            .. attribute:: interface_name
                            
                            	Interface name
                            	**type**\:  str
                            
                            .. attribute:: prev_adj_state
                            
                            	Previous adjacency state
                            	**type**\:  :py:class:`IsisAdjStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAdjStateEnum>`
                            
                            .. attribute:: state_reason
                            
                            	Reason adjacency changed state
                            	**type**\:  :py:class:`IsisAdjStateReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAdjStateReasonEnum>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.adj_log_neighbor_system_id = None
                                self.adjacency_per_topology_change = YList()
                                self.adjacency_per_topology_change.parent = self
                                self.adjacency_per_topology_change.name = 'adjacency_per_topology_change'
                                self.cur_adj_state = None
                                self.generic_data = Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.GenericData()
                                self.generic_data.parent = self
                                self.interface_name = None
                                self.prev_adj_state = None
                                self.state_reason = None


                            class GenericData(object):
                                """
                                Generic entry data
                                
                                .. attribute:: timestamp
                                
                                	Time in UTC relative to Jan 1st, 1970
                                	**type**\:  :py:class:`Timestamp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.GenericData.Timestamp>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.timestamp = Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.GenericData.Timestamp()
                                    self.timestamp.parent = self


                                class Timestamp(object):
                                    """
                                    Time in UTC relative to Jan 1st, 1970
                                    
                                    .. attribute:: nano_seconds
                                    
                                    	Timestamp value (nanoseconds)
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: seconds
                                    
                                    	Timestamp value (seconds)
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.nano_seconds = None
                                        self.seconds = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:timestamp'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.nano_seconds is not None:
                                            return True

                                        if self.seconds is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.GenericData.Timestamp']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:generic-data'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.timestamp is not None and self.timestamp._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.GenericData']['meta_info']


                            class AdjacencyPerTopologyChange(object):
                                """
                                Per\-topology changes
                                
                                .. attribute:: change
                                
                                	Change
                                	**type**\:  :py:class:`IsisAdjTopoChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAdjTopoChangeEnum>`
                                
                                .. attribute:: id
                                
                                	Topology ID
                                	**type**\:  :py:class:`Id <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.AdjacencyPerTopologyChange.Id>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.change = None
                                    self.id = Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.AdjacencyPerTopologyChange.Id()
                                    self.id.parent = self


                                class Id(object):
                                    """
                                    Topology ID
                                    
                                    .. attribute:: af_name
                                    
                                    	AF name
                                    	**type**\:  :py:class:`IsisAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfIdEnum>`
                                    
                                    .. attribute:: saf_name
                                    
                                    	Sub\-AF name
                                    	**type**\:  :py:class:`IsisSubAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisSubAfIdEnum>`
                                    
                                    .. attribute:: topology_name
                                    
                                    	Topology Name
                                    	**type**\:  str
                                    
                                    .. attribute:: vrf_name
                                    
                                    	VRF Name
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.af_name = None
                                        self.saf_name = None
                                        self.topology_name = None
                                        self.vrf_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:id'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.af_name is not None:
                                            return True

                                        if self.saf_name is not None:
                                            return True

                                        if self.topology_name is not None:
                                            return True

                                        if self.vrf_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.AdjacencyPerTopologyChange.Id']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:adjacency-per-topology-change'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.change is not None:
                                        return True

                                    if self.id is not None and self.id._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.AdjacencyPerTopologyChange']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:log-entry'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.adj_log_neighbor_system_id is not None:
                                    return True

                                if self.adjacency_per_topology_change is not None:
                                    for child_ref in self.adjacency_per_topology_change:
                                        if child_ref._has_data():
                                            return True

                                if self.cur_adj_state is not None:
                                    return True

                                if self.generic_data is not None and self.generic_data._has_data():
                                    return True

                                if self.interface_name is not None:
                                    return True

                                if self.prev_adj_state is not None:
                                    return True

                                if self.state_reason is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:adjacency-log'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.log_entry is not None:
                                for child_ref in self.log_entry:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.Levels.Level.AdjacencyLog']['meta_info']


                    class LspTableSummary(object):
                        """
                        Summary information for one level's LSP
                        database
                        
                        .. attribute:: all_fragment_lsp_stats
                        
                        	Statistics for all LSP fragments
                        	**type**\:  :py:class:`AllFragmentLspStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats>`
                        
                        .. attribute:: fragment0lsp_stats
                        
                        	Statistics for fragment 0 LSPs
                        	**type**\:  :py:class:`Fragment0LspStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.all_fragment_lsp_stats = Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats()
                            self.all_fragment_lsp_stats.parent = self
                            self.fragment0lsp_stats = Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats()
                            self.fragment0lsp_stats.parent = self


                        class Fragment0LspStats(object):
                            """
                            Statistics for fragment 0 LSPs
                            
                            .. attribute:: node_counters
                            
                            	Summary by class of node
                            	**type**\:  :py:class:`NodeCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.NodeCounters>`
                            
                            .. attribute:: per_topology_counter
                            
                            	Per topology counters
                            	**type**\: list of  :py:class:`PerTopologyCounter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.node_counters = Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.NodeCounters()
                                self.node_counters.parent = self
                                self.per_topology_counter = YList()
                                self.per_topology_counter.parent = self
                                self.per_topology_counter.name = 'per_topology_counter'


                            class NodeCounters(object):
                                """
                                Summary by class of node
                                
                                .. attribute:: pseudo_node_lsp_count
                                
                                	Pseudonode LSPs
                                	**type**\:  :py:class:`PseudoNodeLspCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.NodeCounters.PseudoNodeLspCount>`
                                
                                .. attribute:: route_lsp_count
                                
                                	Router LSPs
                                	**type**\:  :py:class:`RouteLspCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.NodeCounters.RouteLspCount>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.pseudo_node_lsp_count = Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.NodeCounters.PseudoNodeLspCount()
                                    self.pseudo_node_lsp_count.parent = self
                                    self.route_lsp_count = Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.NodeCounters.RouteLspCount()
                                    self.route_lsp_count.parent = self


                                class RouteLspCount(object):
                                    """
                                    Router LSPs
                                    
                                    .. attribute:: active_lsp_count
                                    
                                    	Number of active LSPs
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: purged_lsp_count
                                    
                                    	Number of purged LSPs
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.active_lsp_count = None
                                        self.purged_lsp_count = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:route-lsp-count'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.active_lsp_count is not None:
                                            return True

                                        if self.purged_lsp_count is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.NodeCounters.RouteLspCount']['meta_info']


                                class PseudoNodeLspCount(object):
                                    """
                                    Pseudonode LSPs
                                    
                                    .. attribute:: active_lsp_count
                                    
                                    	Number of active LSPs
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: purged_lsp_count
                                    
                                    	Number of purged LSPs
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.active_lsp_count = None
                                        self.purged_lsp_count = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:pseudo-node-lsp-count'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.active_lsp_count is not None:
                                            return True

                                        if self.purged_lsp_count is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.NodeCounters.PseudoNodeLspCount']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:node-counters'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.pseudo_node_lsp_count is not None and self.pseudo_node_lsp_count._has_data():
                                        return True

                                    if self.route_lsp_count is not None and self.route_lsp_count._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.NodeCounters']['meta_info']


                            class PerTopologyCounter(object):
                                """
                                Per topology counters
                                
                                .. attribute:: attached_lsp_count
                                
                                	Number of LSPs with their per\-topology attached bit set
                                	**type**\:  :py:class:`AttachedLspCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter.AttachedLspCount>`
                                
                                .. attribute:: id
                                
                                	Topology ID
                                	**type**\:  :py:class:`Id <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter.Id>`
                                
                                .. attribute:: overloaded_lsp_count
                                
                                	Number of LSPs with their per\-topology overload bit set
                                	**type**\:  :py:class:`OverloadedLspCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter.OverloadedLspCount>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.attached_lsp_count = Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter.AttachedLspCount()
                                    self.attached_lsp_count.parent = self
                                    self.id = Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter.Id()
                                    self.id.parent = self
                                    self.overloaded_lsp_count = Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter.OverloadedLspCount()
                                    self.overloaded_lsp_count.parent = self


                                class Id(object):
                                    """
                                    Topology ID
                                    
                                    .. attribute:: af_name
                                    
                                    	AF name
                                    	**type**\:  :py:class:`IsisAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfIdEnum>`
                                    
                                    .. attribute:: saf_name
                                    
                                    	Sub\-AF name
                                    	**type**\:  :py:class:`IsisSubAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisSubAfIdEnum>`
                                    
                                    .. attribute:: topology_name
                                    
                                    	Topology Name
                                    	**type**\:  str
                                    
                                    .. attribute:: vrf_name
                                    
                                    	VRF Name
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.af_name = None
                                        self.saf_name = None
                                        self.topology_name = None
                                        self.vrf_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:id'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.af_name is not None:
                                            return True

                                        if self.saf_name is not None:
                                            return True

                                        if self.topology_name is not None:
                                            return True

                                        if self.vrf_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter.Id']['meta_info']


                                class OverloadedLspCount(object):
                                    """
                                    Number of LSPs with their per\-topology overload
                                    bit set
                                    
                                    .. attribute:: active_lsp_count
                                    
                                    	Number of active LSPs
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: purged_lsp_count
                                    
                                    	Number of purged LSPs
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.active_lsp_count = None
                                        self.purged_lsp_count = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:overloaded-lsp-count'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.active_lsp_count is not None:
                                            return True

                                        if self.purged_lsp_count is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter.OverloadedLspCount']['meta_info']


                                class AttachedLspCount(object):
                                    """
                                    Number of LSPs with their per\-topology attached
                                    bit set
                                    
                                    .. attribute:: active_lsp_count
                                    
                                    	Number of active LSPs
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: purged_lsp_count
                                    
                                    	Number of purged LSPs
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.active_lsp_count = None
                                        self.purged_lsp_count = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:attached-lsp-count'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.active_lsp_count is not None:
                                            return True

                                        if self.purged_lsp_count is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter.AttachedLspCount']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:per-topology-counter'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.attached_lsp_count is not None and self.attached_lsp_count._has_data():
                                        return True

                                    if self.id is not None and self.id._has_data():
                                        return True

                                    if self.overloaded_lsp_count is not None and self.overloaded_lsp_count._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:fragment0lsp-stats'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.node_counters is not None and self.node_counters._has_data():
                                    return True

                                if self.per_topology_counter is not None:
                                    for child_ref in self.per_topology_counter:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats']['meta_info']


                        class AllFragmentLspStats(object):
                            """
                            Statistics for all LSP fragments
                            
                            .. attribute:: node_counters
                            
                            	Summary by class of node
                            	**type**\:  :py:class:`NodeCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats.NodeCounters>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.node_counters = Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats.NodeCounters()
                                self.node_counters.parent = self


                            class NodeCounters(object):
                                """
                                Summary by class of node
                                
                                .. attribute:: pseudo_node_lsp_count
                                
                                	Pseudonode LSPs
                                	**type**\:  :py:class:`PseudoNodeLspCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats.NodeCounters.PseudoNodeLspCount>`
                                
                                .. attribute:: route_lsp_count
                                
                                	Router LSPs
                                	**type**\:  :py:class:`RouteLspCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats.NodeCounters.RouteLspCount>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.pseudo_node_lsp_count = Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats.NodeCounters.PseudoNodeLspCount()
                                    self.pseudo_node_lsp_count.parent = self
                                    self.route_lsp_count = Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats.NodeCounters.RouteLspCount()
                                    self.route_lsp_count.parent = self


                                class RouteLspCount(object):
                                    """
                                    Router LSPs
                                    
                                    .. attribute:: active_lsp_count
                                    
                                    	Number of active LSPs
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: purged_lsp_count
                                    
                                    	Number of purged LSPs
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.active_lsp_count = None
                                        self.purged_lsp_count = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:route-lsp-count'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.active_lsp_count is not None:
                                            return True

                                        if self.purged_lsp_count is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats.NodeCounters.RouteLspCount']['meta_info']


                                class PseudoNodeLspCount(object):
                                    """
                                    Pseudonode LSPs
                                    
                                    .. attribute:: active_lsp_count
                                    
                                    	Number of active LSPs
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: purged_lsp_count
                                    
                                    	Number of purged LSPs
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.active_lsp_count = None
                                        self.purged_lsp_count = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:pseudo-node-lsp-count'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.active_lsp_count is not None:
                                            return True

                                        if self.purged_lsp_count is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats.NodeCounters.PseudoNodeLspCount']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:node-counters'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.pseudo_node_lsp_count is not None and self.pseudo_node_lsp_count._has_data():
                                        return True

                                    if self.route_lsp_count is not None and self.route_lsp_count._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats.NodeCounters']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:all-fragment-lsp-stats'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.node_counters is not None and self.node_counters._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:lsp-table-summary'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.all_fragment_lsp_stats is not None and self.all_fragment_lsp_stats._has_data():
                                return True

                            if self.fragment0lsp_stats is not None and self.fragment0lsp_stats._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.Levels.Level.LspTableSummary']['meta_info']


                    class Adjacencies(object):
                        """
                        Adjacency table
                        
                        .. attribute:: adjacency
                        
                        	A single IS\-IS adjacency
                        	**type**\: list of  :py:class:`Adjacency <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.adjacency = YList()
                            self.adjacency.parent = self
                            self.adjacency.name = 'adjacency'


                        class Adjacency(object):
                            """
                            A single IS\-IS adjacency
                            
                            .. attribute:: adjacency_area_address
                            
                            	Area addresses active over this adjacency
                            	**type**\:  list of str
                            
                            	**pattern:** [a\-fA\-F0\-9]{2}(\\.[a\-fA\-F0\-9]{4}){0,6}
                            
                            .. attribute:: adjacency_bfd_state
                            
                            	Adjacency IPv4 BFD state
                            	**type**\:  :py:class:`IsisAdjBfdStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAdjBfdStateEnum>`
                            
                            .. attribute:: adjacency_checkpoint_object_id
                            
                            	Adjacency checkpoint object ID
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: adjacency_dispriority
                            
                            	Priority of DIS on this LAN. Valid only if aj\_media\_class is ISIS\_MEDIA\_CLASS\_LAN
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: adjacency_holdtime
                            
                            	Time (s) until adjacency declared down if no IIH received
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: adjacency_ietf_nsf_capable_flag
                            
                            	TRUE if neighbor is IETF\-NSF capable
                            	**type**\:  bool
                            
                            .. attribute:: adjacency_interface
                            
                            	Local interface
                            	**type**\:  str
                            
                            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                            
                            .. attribute:: adjacency_ipv6bfd_state
                            
                            	Adjacency IPv6 BFD state
                            	**type**\:  :py:class:`IsisAdjBfdStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAdjBfdStateEnum>`
                            
                            .. attribute:: adjacency_local_priority
                            
                            	Local IS priority. Valid only if aj\_media\_class is ISIS\_MEDIA\_CLASS\_LAN
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: adjacency_media_type
                            
                            	Link media type
                            	**type**\:  :py:class:`IsisMediaClassEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisMediaClassEnum>`
                            
                            .. attribute:: adjacency_neighbor_priority
                            
                            	Neighbor IS priority. Valid only if aj\_media\_class is ISIS\_MEDIA\_CLASS\_LAN
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: adjacency_per_address_family_data
                            
                            	Per\-address\-family data
                            	**type**\: list of  :py:class:`AdjacencyPerAddressFamilyData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData>`
                            
                            .. attribute:: adjacency_snpa
                            
                            	Neighbor SNPA
                            	**type**\:  str
                            
                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                            
                            .. attribute:: adjacency_state
                            
                            	Adjacency state
                            	**type**\:  :py:class:`IsisAdjStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAdjStateEnum>`
                            
                            .. attribute:: adjacency_system_id
                            
                            	Neighbor system ID
                            	**type**\:  str
                            
                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                            
                            .. attribute:: adjacency_topology
                            
                            	Per\-topology data
                            	**type**\: list of  :py:class:`AdjacencyTopology <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyTopology>`
                            
                            .. attribute:: adjacency_uptime
                            
                            	How long the adjacency has been up (s)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: adjacency_uptime_valid_flag
                            
                            	TRUE if AdjacencyUptime is set
                            	**type**\:  bool
                            
                            .. attribute:: interface_name
                            
                            	Interface name
                            	**type**\:  str
                            
                            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                            
                            .. attribute:: local_dis_flag
                            
                            	TRUE if local system is DIS. Valid only if AdjacencyMediaType is ISIS\_MEDIA\_CLASS\_LAN
                            	**type**\:  bool
                            
                            .. attribute:: neighbor_dis_flag
                            
                            	TRUE if neighbor is DIS. Valid only if AdjacencyMediaType is ISIS\_MEDIA\_CLASS\_LAN
                            	**type**\:  bool
                            
                            .. attribute:: nsr_standby
                            
                            	ISIS NSR STANDBY
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: system_id
                            
                            	System ID
                            	**type**\:  str
                            
                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.adjacency_area_address = YLeafList()
                                self.adjacency_area_address.parent = self
                                self.adjacency_area_address.name = 'adjacency_area_address'
                                self.adjacency_bfd_state = None
                                self.adjacency_checkpoint_object_id = None
                                self.adjacency_dispriority = None
                                self.adjacency_holdtime = None
                                self.adjacency_ietf_nsf_capable_flag = None
                                self.adjacency_interface = None
                                self.adjacency_ipv6bfd_state = None
                                self.adjacency_local_priority = None
                                self.adjacency_media_type = None
                                self.adjacency_neighbor_priority = None
                                self.adjacency_per_address_family_data = YList()
                                self.adjacency_per_address_family_data.parent = self
                                self.adjacency_per_address_family_data.name = 'adjacency_per_address_family_data'
                                self.adjacency_snpa = None
                                self.adjacency_state = None
                                self.adjacency_system_id = None
                                self.adjacency_topology = YList()
                                self.adjacency_topology.parent = self
                                self.adjacency_topology.name = 'adjacency_topology'
                                self.adjacency_uptime = None
                                self.adjacency_uptime_valid_flag = None
                                self.interface_name = None
                                self.local_dis_flag = None
                                self.neighbor_dis_flag = None
                                self.nsr_standby = None
                                self.system_id = None


                            class AdjacencyTopology(object):
                                """
                                Per\-topology data
                                
                                .. attribute:: id
                                
                                	Topology ID
                                	**type**\:  :py:class:`Id <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyTopology.Id>`
                                
                                .. attribute:: parallel_p2p_link_suppressed_flag
                                
                                	TRUE if suppressed parallel point\-to\-point link
                                	**type**\:  bool
                                
                                .. attribute:: topology_status
                                
                                	Status of topology in adjacency
                                	**type**\:  :py:class:`IsisAdjTopoStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAdjTopoStatusEnum>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.id = Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyTopology.Id()
                                    self.id.parent = self
                                    self.parallel_p2p_link_suppressed_flag = None
                                    self.topology_status = None


                                class Id(object):
                                    """
                                    Topology ID
                                    
                                    .. attribute:: af_name
                                    
                                    	AF name
                                    	**type**\:  :py:class:`IsisAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfIdEnum>`
                                    
                                    .. attribute:: saf_name
                                    
                                    	Sub\-AF name
                                    	**type**\:  :py:class:`IsisSubAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisSubAfIdEnum>`
                                    
                                    .. attribute:: topology_name
                                    
                                    	Topology Name
                                    	**type**\:  str
                                    
                                    .. attribute:: vrf_name
                                    
                                    	VRF Name
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.af_name = None
                                        self.saf_name = None
                                        self.topology_name = None
                                        self.vrf_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:id'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.af_name is not None:
                                            return True

                                        if self.saf_name is not None:
                                            return True

                                        if self.topology_name is not None:
                                            return True

                                        if self.vrf_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyTopology.Id']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:adjacency-topology'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.id is not None and self.id._has_data():
                                        return True

                                    if self.parallel_p2p_link_suppressed_flag is not None:
                                        return True

                                    if self.topology_status is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyTopology']['meta_info']


                            class AdjacencyPerAddressFamilyData(object):
                                """
                                Per\-address\-family data
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IsisAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfIdEnum>`
                                
                                .. attribute:: ipv4
                                
                                	IPV4 neighbor info
                                	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4>`
                                
                                .. attribute:: ipv6
                                
                                	IPV6 neighbor info
                                	**type**\:  :py:class:`Ipv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.af_name = None
                                    self.ipv4 = Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4()
                                    self.ipv4.parent = self
                                    self.ipv6 = Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6()
                                    self.ipv6.parent = self


                                class Ipv4(object):
                                    """
                                    IPV4 neighbor info
                                    
                                    .. attribute:: adjacency_sid
                                    
                                    	Adjacency SID
                                    	**type**\:  :py:class:`AdjacencySid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid>`
                                    
                                    .. attribute:: interface_address
                                    
                                    	Adjacency interface addresses
                                    	**type**\:  list of str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: next_hop
                                    
                                    	Adjacency next hop
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: non_frr_adjacency_sid
                                    
                                    	Adjacency SID not eligible for FRR protection
                                    	**type**\:  :py:class:`NonFrrAdjacencySid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.adjacency_sid = Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid()
                                        self.adjacency_sid.parent = self
                                        self.interface_address = YLeafList()
                                        self.interface_address.parent = self
                                        self.interface_address.name = 'interface_address'
                                        self.next_hop = None
                                        self.non_frr_adjacency_sid = Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid()
                                        self.non_frr_adjacency_sid.parent = self


                                    class AdjacencySid(object):
                                        """
                                        Adjacency SID
                                        
                                        .. attribute:: adjacency_sid_backup
                                        
                                        	Adjacency SID Backup Info
                                        	**type**\:  :py:class:`AdjacencySidBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackup>`
                                        
                                        .. attribute:: adjacency_sid_value
                                        
                                        	Adjacency SID value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.adjacency_sid_backup = Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackup()
                                            self.adjacency_sid_backup.parent = self
                                            self.adjacency_sid_value = None


                                        class AdjacencySidBackup(object):
                                            """
                                            Adjacency SID Backup Info
                                            
                                            .. attribute:: backup_interface
                                            
                                            	Backup path interface
                                            	**type**\:  str
                                            
                                            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                            
                                            .. attribute:: backup_label_stack
                                            
                                            	Backup path label stack
                                            	**type**\:  list of int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: backup_label_stack_size
                                            
                                            	Number of labels in the backup path label stack
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: backup_nexthop
                                            
                                            	Backup path nexthop address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: backup_node_address
                                            
                                            	Neighbor address used as adjacency backup target
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.backup_interface = None
                                                self.backup_label_stack = YLeafList()
                                                self.backup_label_stack.parent = self
                                                self.backup_label_stack.name = 'backup_label_stack'
                                                self.backup_label_stack_size = None
                                                self.backup_nexthop = None
                                                self.backup_node_address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:adjacency-sid-backup'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.backup_interface is not None:
                                                    return True

                                                if self.backup_label_stack is not None:
                                                    for child in self.backup_label_stack:
                                                        if child is not None:
                                                            return True

                                                if self.backup_label_stack_size is not None:
                                                    return True

                                                if self.backup_nexthop is not None:
                                                    return True

                                                if self.backup_node_address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackup']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:adjacency-sid'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.adjacency_sid_backup is not None and self.adjacency_sid_backup._has_data():
                                                return True

                                            if self.adjacency_sid_value is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid']['meta_info']


                                    class NonFrrAdjacencySid(object):
                                        """
                                        Adjacency SID not eligible for FRR protection
                                        
                                        .. attribute:: adjacency_sid_backup
                                        
                                        	Adjacency SID Backup Info
                                        	**type**\:  :py:class:`AdjacencySidBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackup>`
                                        
                                        .. attribute:: adjacency_sid_value
                                        
                                        	Adjacency SID value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.adjacency_sid_backup = Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackup()
                                            self.adjacency_sid_backup.parent = self
                                            self.adjacency_sid_value = None


                                        class AdjacencySidBackup(object):
                                            """
                                            Adjacency SID Backup Info
                                            
                                            .. attribute:: backup_interface
                                            
                                            	Backup path interface
                                            	**type**\:  str
                                            
                                            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                            
                                            .. attribute:: backup_label_stack
                                            
                                            	Backup path label stack
                                            	**type**\:  list of int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: backup_label_stack_size
                                            
                                            	Number of labels in the backup path label stack
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: backup_nexthop
                                            
                                            	Backup path nexthop address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: backup_node_address
                                            
                                            	Neighbor address used as adjacency backup target
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.backup_interface = None
                                                self.backup_label_stack = YLeafList()
                                                self.backup_label_stack.parent = self
                                                self.backup_label_stack.name = 'backup_label_stack'
                                                self.backup_label_stack_size = None
                                                self.backup_nexthop = None
                                                self.backup_node_address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:adjacency-sid-backup'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.backup_interface is not None:
                                                    return True

                                                if self.backup_label_stack is not None:
                                                    for child in self.backup_label_stack:
                                                        if child is not None:
                                                            return True

                                                if self.backup_label_stack_size is not None:
                                                    return True

                                                if self.backup_nexthop is not None:
                                                    return True

                                                if self.backup_node_address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackup']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:non-frr-adjacency-sid'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.adjacency_sid_backup is not None and self.adjacency_sid_backup._has_data():
                                                return True

                                            if self.adjacency_sid_value is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ipv4'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.adjacency_sid is not None and self.adjacency_sid._has_data():
                                            return True

                                        if self.interface_address is not None:
                                            for child in self.interface_address:
                                                if child is not None:
                                                    return True

                                        if self.next_hop is not None:
                                            return True

                                        if self.non_frr_adjacency_sid is not None and self.non_frr_adjacency_sid._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4']['meta_info']


                                class Ipv6(object):
                                    """
                                    IPV6 neighbor info
                                    
                                    .. attribute:: adjacency_sid
                                    
                                    	Adjacency SID
                                    	**type**\:  :py:class:`AdjacencySid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid>`
                                    
                                    .. attribute:: interface_address
                                    
                                    	Adjacency interface addresses
                                    	**type**\:  list of str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: next_hop
                                    
                                    	Adjacency next hop
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: non_frr_adjacency_sid
                                    
                                    	Adjacency SID not eligible for FRR protection
                                    	**type**\:  :py:class:`NonFrrAdjacencySid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.adjacency_sid = Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid()
                                        self.adjacency_sid.parent = self
                                        self.interface_address = YLeafList()
                                        self.interface_address.parent = self
                                        self.interface_address.name = 'interface_address'
                                        self.next_hop = None
                                        self.non_frr_adjacency_sid = Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid()
                                        self.non_frr_adjacency_sid.parent = self


                                    class AdjacencySid(object):
                                        """
                                        Adjacency SID
                                        
                                        .. attribute:: adjacency_sid_backup
                                        
                                        	Adjacency SID Backup Info
                                        	**type**\:  :py:class:`AdjacencySidBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackup>`
                                        
                                        .. attribute:: adjacency_sid_value
                                        
                                        	Adjacency SID value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.adjacency_sid_backup = Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackup()
                                            self.adjacency_sid_backup.parent = self
                                            self.adjacency_sid_value = None


                                        class AdjacencySidBackup(object):
                                            """
                                            Adjacency SID Backup Info
                                            
                                            .. attribute:: backup_interface
                                            
                                            	Backup path interface
                                            	**type**\:  str
                                            
                                            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                            
                                            .. attribute:: backup_label_stack
                                            
                                            	Backup path label stack
                                            	**type**\:  list of int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: backup_label_stack_size
                                            
                                            	Number of labels in the backup path label stack
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: backup_nexthop
                                            
                                            	Backup path nexthop address
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: backup_node_address
                                            
                                            	Neighbor address used as adjacency backup target
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.backup_interface = None
                                                self.backup_label_stack = YLeafList()
                                                self.backup_label_stack.parent = self
                                                self.backup_label_stack.name = 'backup_label_stack'
                                                self.backup_label_stack_size = None
                                                self.backup_nexthop = None
                                                self.backup_node_address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:adjacency-sid-backup'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.backup_interface is not None:
                                                    return True

                                                if self.backup_label_stack is not None:
                                                    for child in self.backup_label_stack:
                                                        if child is not None:
                                                            return True

                                                if self.backup_label_stack_size is not None:
                                                    return True

                                                if self.backup_nexthop is not None:
                                                    return True

                                                if self.backup_node_address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackup']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:adjacency-sid'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.adjacency_sid_backup is not None and self.adjacency_sid_backup._has_data():
                                                return True

                                            if self.adjacency_sid_value is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid']['meta_info']


                                    class NonFrrAdjacencySid(object):
                                        """
                                        Adjacency SID not eligible for FRR protection
                                        
                                        .. attribute:: adjacency_sid_backup
                                        
                                        	Adjacency SID Backup Info
                                        	**type**\:  :py:class:`AdjacencySidBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackup>`
                                        
                                        .. attribute:: adjacency_sid_value
                                        
                                        	Adjacency SID value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.adjacency_sid_backup = Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackup()
                                            self.adjacency_sid_backup.parent = self
                                            self.adjacency_sid_value = None


                                        class AdjacencySidBackup(object):
                                            """
                                            Adjacency SID Backup Info
                                            
                                            .. attribute:: backup_interface
                                            
                                            	Backup path interface
                                            	**type**\:  str
                                            
                                            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                            
                                            .. attribute:: backup_label_stack
                                            
                                            	Backup path label stack
                                            	**type**\:  list of int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: backup_label_stack_size
                                            
                                            	Number of labels in the backup path label stack
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: backup_nexthop
                                            
                                            	Backup path nexthop address
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: backup_node_address
                                            
                                            	Neighbor address used as adjacency backup target
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.backup_interface = None
                                                self.backup_label_stack = YLeafList()
                                                self.backup_label_stack.parent = self
                                                self.backup_label_stack.name = 'backup_label_stack'
                                                self.backup_label_stack_size = None
                                                self.backup_nexthop = None
                                                self.backup_node_address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:adjacency-sid-backup'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.backup_interface is not None:
                                                    return True

                                                if self.backup_label_stack is not None:
                                                    for child in self.backup_label_stack:
                                                        if child is not None:
                                                            return True

                                                if self.backup_label_stack_size is not None:
                                                    return True

                                                if self.backup_nexthop is not None:
                                                    return True

                                                if self.backup_node_address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackup']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:non-frr-adjacency-sid'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.adjacency_sid_backup is not None and self.adjacency_sid_backup._has_data():
                                                return True

                                            if self.adjacency_sid_value is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ipv6'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.adjacency_sid is not None and self.adjacency_sid._has_data():
                                            return True

                                        if self.interface_address is not None:
                                            for child in self.interface_address:
                                                if child is not None:
                                                    return True

                                        if self.next_hop is not None:
                                            return True

                                        if self.non_frr_adjacency_sid is not None and self.non_frr_adjacency_sid._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:adjacency-per-address-family-data'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.af_name is not None:
                                        return True

                                    if self.ipv4 is not None and self.ipv4._has_data():
                                        return True

                                    if self.ipv6 is not None and self.ipv6._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:adjacency'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.adjacency_area_address is not None:
                                    for child in self.adjacency_area_address:
                                        if child is not None:
                                            return True

                                if self.adjacency_bfd_state is not None:
                                    return True

                                if self.adjacency_checkpoint_object_id is not None:
                                    return True

                                if self.adjacency_dispriority is not None:
                                    return True

                                if self.adjacency_holdtime is not None:
                                    return True

                                if self.adjacency_ietf_nsf_capable_flag is not None:
                                    return True

                                if self.adjacency_interface is not None:
                                    return True

                                if self.adjacency_ipv6bfd_state is not None:
                                    return True

                                if self.adjacency_local_priority is not None:
                                    return True

                                if self.adjacency_media_type is not None:
                                    return True

                                if self.adjacency_neighbor_priority is not None:
                                    return True

                                if self.adjacency_per_address_family_data is not None:
                                    for child_ref in self.adjacency_per_address_family_data:
                                        if child_ref._has_data():
                                            return True

                                if self.adjacency_snpa is not None:
                                    return True

                                if self.adjacency_state is not None:
                                    return True

                                if self.adjacency_system_id is not None:
                                    return True

                                if self.adjacency_topology is not None:
                                    for child_ref in self.adjacency_topology:
                                        if child_ref._has_data():
                                            return True

                                if self.adjacency_uptime is not None:
                                    return True

                                if self.adjacency_uptime_valid_flag is not None:
                                    return True

                                if self.interface_name is not None:
                                    return True

                                if self.local_dis_flag is not None:
                                    return True

                                if self.neighbor_dis_flag is not None:
                                    return True

                                if self.nsr_standby is not None:
                                    return True

                                if self.system_id is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:adjacencies'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.adjacency is not None:
                                for child_ref in self.adjacency:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.Levels.Level.Adjacencies']['meta_info']


                    class DetailedLsps(object):
                        """
                        Detailed LSP table. Use to retrieve LSPs
                        with TLV content.
                        
                        .. attribute:: detailed_lsp
                        
                        	An IS\-IS LSP with detailed TLV data included
                        	**type**\: list of  :py:class:`DetailedLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.DetailedLsps.DetailedLsp>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.detailed_lsp = YList()
                            self.detailed_lsp.parent = self
                            self.detailed_lsp.name = 'detailed_lsp'


                        class DetailedLsp(object):
                            """
                            An IS\-IS LSP with detailed TLV data
                            included
                            
                            .. attribute:: lsp_id  <key>
                            
                            	LSP ID
                            	**type**\:  str
                            
                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                            
                            .. attribute:: lsp_body
                            
                            	LSP as received/sent over the wire, starting from the LSP ID field
                            	**type**\:  str
                            
                            	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                            
                            .. attribute:: lsp_header_data
                            
                            	Information from the LSP header
                            	**type**\:  :py:class:`LspHeaderData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.DetailedLsps.DetailedLsp.LspHeaderData>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.lsp_id = None
                                self.lsp_body = None
                                self.lsp_header_data = Isis.Instances.Instance.Levels.Level.DetailedLsps.DetailedLsp.LspHeaderData()
                                self.lsp_header_data.parent = self


                            class LspHeaderData(object):
                                """
                                Information from the LSP header
                                
                                .. attribute:: local_lsp_flag
                                
                                	TRUE if this is a locally generated LSP
                                	**type**\:  bool
                                
                                .. attribute:: lsp_active_flag
                                
                                	TRUE if this LSP has not expired
                                	**type**\:  bool
                                
                                .. attribute:: lsp_attached_flag
                                
                                	TRUE if attached bit is set
                                	**type**\:  bool
                                
                                .. attribute:: lsp_checksum
                                
                                	The LSP checksum
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_holdtime
                                
                                	Time, in seconds, until LSP expiry (if active) or deletion (if expired) 
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_id
                                
                                	The LSP ID
                                	**type**\:  str
                                
                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                
                                .. attribute:: lsp_length
                                
                                	The total length of the LSP
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_level
                                
                                	The type of the IS sourcing the LSP
                                	**type**\:  :py:class:`IsisLevelsEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelsEnum>`
                                
                                .. attribute:: lsp_nonv1a_flag
                                
                                	TRUE if the LSP is non\-v1a, XXX for testing
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_overloaded_flag
                                
                                	TRUE if the overload bit is set
                                	**type**\:  bool
                                
                                .. attribute:: lsp_parition_repair_supported_flag
                                
                                	TRUE if partition repair is supported
                                	**type**\:  bool
                                
                                .. attribute:: lsp_sequence_number
                                
                                	The LSP sequence number
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.local_lsp_flag = None
                                    self.lsp_active_flag = None
                                    self.lsp_attached_flag = None
                                    self.lsp_checksum = None
                                    self.lsp_holdtime = None
                                    self.lsp_id = None
                                    self.lsp_length = None
                                    self.lsp_level = None
                                    self.lsp_nonv1a_flag = None
                                    self.lsp_overloaded_flag = None
                                    self.lsp_parition_repair_supported_flag = None
                                    self.lsp_sequence_number = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:lsp-header-data'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.local_lsp_flag is not None:
                                        return True

                                    if self.lsp_active_flag is not None:
                                        return True

                                    if self.lsp_attached_flag is not None:
                                        return True

                                    if self.lsp_checksum is not None:
                                        return True

                                    if self.lsp_holdtime is not None:
                                        return True

                                    if self.lsp_id is not None:
                                        return True

                                    if self.lsp_length is not None:
                                        return True

                                    if self.lsp_level is not None:
                                        return True

                                    if self.lsp_nonv1a_flag is not None:
                                        return True

                                    if self.lsp_overloaded_flag is not None:
                                        return True

                                    if self.lsp_parition_repair_supported_flag is not None:
                                        return True

                                    if self.lsp_sequence_number is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Levels.Level.DetailedLsps.DetailedLsp.LspHeaderData']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.lsp_id is None:
                                    raise YPYModelError('Key property lsp_id is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:detailed-lsp[Cisco-IOS-XR-clns-isis-oper:lsp-id = ' + str(self.lsp_id) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.lsp_id is not None:
                                    return True

                                if self.lsp_body is not None:
                                    return True

                                if self.lsp_header_data is not None and self.lsp_header_data._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.Levels.Level.DetailedLsps.DetailedLsp']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:detailed-lsps'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.detailed_lsp is not None:
                                for child_ref in self.detailed_lsp:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.Levels.Level.DetailedLsps']['meta_info']


                    class Lsps(object):
                        """
                        LSP table
                        
                        .. attribute:: lsp
                        
                        	An IS\-IS LSP (header information only)
                        	**type**\: list of  :py:class:`Lsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Lsps.Lsp>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.lsp = YList()
                            self.lsp.parent = self
                            self.lsp.name = 'lsp'


                        class Lsp(object):
                            """
                            An IS\-IS LSP (header information only)
                            
                            .. attribute:: lsp_id  <key>
                            
                            	LSP ID
                            	**type**\:  str
                            
                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                            
                            .. attribute:: lsp_body
                            
                            	LSP as received/sent over the wire, starting from the LSP ID field
                            	**type**\:  str
                            
                            	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                            
                            .. attribute:: lsp_header_data
                            
                            	Information from the LSP header
                            	**type**\:  :py:class:`LspHeaderData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Lsps.Lsp.LspHeaderData>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.lsp_id = None
                                self.lsp_body = None
                                self.lsp_header_data = Isis.Instances.Instance.Levels.Level.Lsps.Lsp.LspHeaderData()
                                self.lsp_header_data.parent = self


                            class LspHeaderData(object):
                                """
                                Information from the LSP header
                                
                                .. attribute:: local_lsp_flag
                                
                                	TRUE if this is a locally generated LSP
                                	**type**\:  bool
                                
                                .. attribute:: lsp_active_flag
                                
                                	TRUE if this LSP has not expired
                                	**type**\:  bool
                                
                                .. attribute:: lsp_attached_flag
                                
                                	TRUE if attached bit is set
                                	**type**\:  bool
                                
                                .. attribute:: lsp_checksum
                                
                                	The LSP checksum
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_holdtime
                                
                                	Time, in seconds, until LSP expiry (if active) or deletion (if expired) 
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_id
                                
                                	The LSP ID
                                	**type**\:  str
                                
                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                
                                .. attribute:: lsp_length
                                
                                	The total length of the LSP
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_level
                                
                                	The type of the IS sourcing the LSP
                                	**type**\:  :py:class:`IsisLevelsEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelsEnum>`
                                
                                .. attribute:: lsp_nonv1a_flag
                                
                                	TRUE if the LSP is non\-v1a, XXX for testing
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_overloaded_flag
                                
                                	TRUE if the overload bit is set
                                	**type**\:  bool
                                
                                .. attribute:: lsp_parition_repair_supported_flag
                                
                                	TRUE if partition repair is supported
                                	**type**\:  bool
                                
                                .. attribute:: lsp_sequence_number
                                
                                	The LSP sequence number
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.local_lsp_flag = None
                                    self.lsp_active_flag = None
                                    self.lsp_attached_flag = None
                                    self.lsp_checksum = None
                                    self.lsp_holdtime = None
                                    self.lsp_id = None
                                    self.lsp_length = None
                                    self.lsp_level = None
                                    self.lsp_nonv1a_flag = None
                                    self.lsp_overloaded_flag = None
                                    self.lsp_parition_repair_supported_flag = None
                                    self.lsp_sequence_number = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:lsp-header-data'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.local_lsp_flag is not None:
                                        return True

                                    if self.lsp_active_flag is not None:
                                        return True

                                    if self.lsp_attached_flag is not None:
                                        return True

                                    if self.lsp_checksum is not None:
                                        return True

                                    if self.lsp_holdtime is not None:
                                        return True

                                    if self.lsp_id is not None:
                                        return True

                                    if self.lsp_length is not None:
                                        return True

                                    if self.lsp_level is not None:
                                        return True

                                    if self.lsp_nonv1a_flag is not None:
                                        return True

                                    if self.lsp_overloaded_flag is not None:
                                        return True

                                    if self.lsp_parition_repair_supported_flag is not None:
                                        return True

                                    if self.lsp_sequence_number is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Levels.Level.Lsps.Lsp.LspHeaderData']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.lsp_id is None:
                                    raise YPYModelError('Key property lsp_id is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:lsp[Cisco-IOS-XR-clns-isis-oper:lsp-id = ' + str(self.lsp_id) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.lsp_id is not None:
                                    return True

                                if self.lsp_body is not None:
                                    return True

                                if self.lsp_header_data is not None and self.lsp_header_data._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.Levels.Level.Lsps.Lsp']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:lsps'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.lsp is not None:
                                for child_ref in self.lsp:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.Levels.Level.Lsps']['meta_info']


                    class LspLog(object):
                        """
                        LSP\-log for a single level
                        
                        .. attribute:: log_entry
                        
                        	Log entries
                        	**type**\: list of  :py:class:`LogEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspLog.LogEntry>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.log_entry = YList()
                            self.log_entry.parent = self
                            self.log_entry.name = 'log_entry'


                        class LogEntry(object):
                            """
                            Log entries
                            
                            .. attribute:: delayed_trigger_count
                            
                            	Number of delayed triggers
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: generic_data
                            
                            	Generic entry data
                            	**type**\:  :py:class:`GenericData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspLog.LogEntry.GenericData>`
                            
                            .. attribute:: log_interface
                            
                            	Appropriate interface, if any
                            	**type**\:  str
                            
                            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                            
                            .. attribute:: pseudo_node_number
                            
                            	Pseudo\-node number
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: trigger
                            
                            	Triggers applying to this log entry
                            	**type**\:  list of :py:class:`IsisLspTriggerEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLspTriggerEnum>`
                            
                            .. attribute:: trigger_count
                            
                            	Number of triggers on this run. May not be equal to the number of trigger event types if one or more trigger events has occurred more than once
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.delayed_trigger_count = None
                                self.generic_data = Isis.Instances.Instance.Levels.Level.LspLog.LogEntry.GenericData()
                                self.generic_data.parent = self
                                self.log_interface = None
                                self.pseudo_node_number = None
                                self.trigger = YLeafList()
                                self.trigger.parent = self
                                self.trigger.name = 'trigger'
                                self.trigger_count = None


                            class GenericData(object):
                                """
                                Generic entry data
                                
                                .. attribute:: timestamp
                                
                                	Time in UTC relative to Jan 1st, 1970
                                	**type**\:  :py:class:`Timestamp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspLog.LogEntry.GenericData.Timestamp>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.timestamp = Isis.Instances.Instance.Levels.Level.LspLog.LogEntry.GenericData.Timestamp()
                                    self.timestamp.parent = self


                                class Timestamp(object):
                                    """
                                    Time in UTC relative to Jan 1st, 1970
                                    
                                    .. attribute:: nano_seconds
                                    
                                    	Timestamp value (nanoseconds)
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: seconds
                                    
                                    	Timestamp value (seconds)
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.nano_seconds = None
                                        self.seconds = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:timestamp'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.nano_seconds is not None:
                                            return True

                                        if self.seconds is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Levels.Level.LspLog.LogEntry.GenericData.Timestamp']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:generic-data'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.timestamp is not None and self.timestamp._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Levels.Level.LspLog.LogEntry.GenericData']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:log-entry'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.delayed_trigger_count is not None:
                                    return True

                                if self.generic_data is not None and self.generic_data._has_data():
                                    return True

                                if self.log_interface is not None:
                                    return True

                                if self.pseudo_node_number is not None:
                                    return True

                                if self.trigger is not None:
                                    for child in self.trigger:
                                        if child is not None:
                                            return True

                                if self.trigger_count is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.Levels.Level.LspLog.LogEntry']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:lsp-log'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.log_entry is not None:
                                for child_ref in self.log_entry:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.Levels.Level.LspLog']['meta_info']


                    class DatabaseLog(object):
                        """
                        Database\-log for a single level
                        
                        .. attribute:: log_entry
                        
                        	Entries
                        	**type**\: list of  :py:class:`LogEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.log_entry = YList()
                            self.log_entry.parent = self
                            self.log_entry.name = 'log_entry'


                        class LogEntry(object):
                            """
                            Entries
                            
                            .. attribute:: generic_data
                            
                            	Generic entry data
                            	**type**\:  :py:class:`GenericData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.GenericData>`
                            
                            .. attribute:: lspdb_operation
                            
                            	Operation applying to this entry
                            	**type**\:  :py:class:`IsisLspDbOpEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLspDbOpEnum>`
                            
                            .. attribute:: new_lsp_entry
                            
                            	Entry being inserted or the updated version of an old entry
                            	**type**\:  :py:class:`NewLspEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.NewLspEntry>`
                            
                            .. attribute:: old_lsp_entry
                            
                            	Entry being replaced
                            	**type**\:  :py:class:`OldLspEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.OldLspEntry>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.generic_data = Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.GenericData()
                                self.generic_data.parent = self
                                self.lspdb_operation = None
                                self.new_lsp_entry = Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.NewLspEntry()
                                self.new_lsp_entry.parent = self
                                self.old_lsp_entry = Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.OldLspEntry()
                                self.old_lsp_entry.parent = self


                            class GenericData(object):
                                """
                                Generic entry data
                                
                                .. attribute:: timestamp
                                
                                	Time in UTC relative to Jan 1st, 1970
                                	**type**\:  :py:class:`Timestamp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.GenericData.Timestamp>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.timestamp = Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.GenericData.Timestamp()
                                    self.timestamp.parent = self


                                class Timestamp(object):
                                    """
                                    Time in UTC relative to Jan 1st, 1970
                                    
                                    .. attribute:: nano_seconds
                                    
                                    	Timestamp value (nanoseconds)
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: seconds
                                    
                                    	Timestamp value (seconds)
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.nano_seconds = None
                                        self.seconds = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:timestamp'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.nano_seconds is not None:
                                            return True

                                        if self.seconds is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.GenericData.Timestamp']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:generic-data'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.timestamp is not None and self.timestamp._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.GenericData']['meta_info']


                            class NewLspEntry(object):
                                """
                                Entry being inserted or the updated version of
                                an old entry.
                                
                                .. attribute:: local_lsp_flag
                                
                                	TRUE if this is a locally generated LSP
                                	**type**\:  bool
                                
                                .. attribute:: lsp_active_flag
                                
                                	TRUE if this LSP has not expired
                                	**type**\:  bool
                                
                                .. attribute:: lsp_attached_flag
                                
                                	TRUE if attached bit is set
                                	**type**\:  bool
                                
                                .. attribute:: lsp_checksum
                                
                                	The LSP checksum
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_holdtime
                                
                                	Time, in seconds, until LSP expiry (if active) or deletion (if expired) 
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_id
                                
                                	The LSP ID
                                	**type**\:  str
                                
                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                
                                .. attribute:: lsp_length
                                
                                	The total length of the LSP
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_level
                                
                                	The type of the IS sourcing the LSP
                                	**type**\:  :py:class:`IsisLevelsEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelsEnum>`
                                
                                .. attribute:: lsp_nonv1a_flag
                                
                                	TRUE if the LSP is non\-v1a, XXX for testing
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_overloaded_flag
                                
                                	TRUE if the overload bit is set
                                	**type**\:  bool
                                
                                .. attribute:: lsp_parition_repair_supported_flag
                                
                                	TRUE if partition repair is supported
                                	**type**\:  bool
                                
                                .. attribute:: lsp_sequence_number
                                
                                	The LSP sequence number
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.local_lsp_flag = None
                                    self.lsp_active_flag = None
                                    self.lsp_attached_flag = None
                                    self.lsp_checksum = None
                                    self.lsp_holdtime = None
                                    self.lsp_id = None
                                    self.lsp_length = None
                                    self.lsp_level = None
                                    self.lsp_nonv1a_flag = None
                                    self.lsp_overloaded_flag = None
                                    self.lsp_parition_repair_supported_flag = None
                                    self.lsp_sequence_number = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:new-lsp-entry'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.local_lsp_flag is not None:
                                        return True

                                    if self.lsp_active_flag is not None:
                                        return True

                                    if self.lsp_attached_flag is not None:
                                        return True

                                    if self.lsp_checksum is not None:
                                        return True

                                    if self.lsp_holdtime is not None:
                                        return True

                                    if self.lsp_id is not None:
                                        return True

                                    if self.lsp_length is not None:
                                        return True

                                    if self.lsp_level is not None:
                                        return True

                                    if self.lsp_nonv1a_flag is not None:
                                        return True

                                    if self.lsp_overloaded_flag is not None:
                                        return True

                                    if self.lsp_parition_repair_supported_flag is not None:
                                        return True

                                    if self.lsp_sequence_number is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.NewLspEntry']['meta_info']


                            class OldLspEntry(object):
                                """
                                Entry being replaced.
                                
                                .. attribute:: local_lsp_flag
                                
                                	TRUE if this is a locally generated LSP
                                	**type**\:  bool
                                
                                .. attribute:: lsp_active_flag
                                
                                	TRUE if this LSP has not expired
                                	**type**\:  bool
                                
                                .. attribute:: lsp_attached_flag
                                
                                	TRUE if attached bit is set
                                	**type**\:  bool
                                
                                .. attribute:: lsp_checksum
                                
                                	The LSP checksum
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_holdtime
                                
                                	Time, in seconds, until LSP expiry (if active) or deletion (if expired) 
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_id
                                
                                	The LSP ID
                                	**type**\:  str
                                
                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                
                                .. attribute:: lsp_length
                                
                                	The total length of the LSP
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_level
                                
                                	The type of the IS sourcing the LSP
                                	**type**\:  :py:class:`IsisLevelsEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelsEnum>`
                                
                                .. attribute:: lsp_nonv1a_flag
                                
                                	TRUE if the LSP is non\-v1a, XXX for testing
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_overloaded_flag
                                
                                	TRUE if the overload bit is set
                                	**type**\:  bool
                                
                                .. attribute:: lsp_parition_repair_supported_flag
                                
                                	TRUE if partition repair is supported
                                	**type**\:  bool
                                
                                .. attribute:: lsp_sequence_number
                                
                                	The LSP sequence number
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.local_lsp_flag = None
                                    self.lsp_active_flag = None
                                    self.lsp_attached_flag = None
                                    self.lsp_checksum = None
                                    self.lsp_holdtime = None
                                    self.lsp_id = None
                                    self.lsp_length = None
                                    self.lsp_level = None
                                    self.lsp_nonv1a_flag = None
                                    self.lsp_overloaded_flag = None
                                    self.lsp_parition_repair_supported_flag = None
                                    self.lsp_sequence_number = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:old-lsp-entry'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.local_lsp_flag is not None:
                                        return True

                                    if self.lsp_active_flag is not None:
                                        return True

                                    if self.lsp_attached_flag is not None:
                                        return True

                                    if self.lsp_checksum is not None:
                                        return True

                                    if self.lsp_holdtime is not None:
                                        return True

                                    if self.lsp_id is not None:
                                        return True

                                    if self.lsp_length is not None:
                                        return True

                                    if self.lsp_level is not None:
                                        return True

                                    if self.lsp_nonv1a_flag is not None:
                                        return True

                                    if self.lsp_overloaded_flag is not None:
                                        return True

                                    if self.lsp_parition_repair_supported_flag is not None:
                                        return True

                                    if self.lsp_sequence_number is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.OldLspEntry']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:log-entry'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.generic_data is not None and self.generic_data._has_data():
                                    return True

                                if self.lspdb_operation is not None:
                                    return True

                                if self.new_lsp_entry is not None and self.new_lsp_entry._has_data():
                                    return True

                                if self.old_lsp_entry is not None and self.old_lsp_entry._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:database-log'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.log_entry is not None:
                                for child_ref in self.log_entry:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.Levels.Level.DatabaseLog']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.level is None:
                            raise YPYModelError('Key property level is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:level[Cisco-IOS-XR-clns-isis-oper:level = ' + str(self.level) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.level is not None:
                            return True

                        if self.adjacencies is not None and self.adjacencies._has_data():
                            return True

                        if self.adjacency_log is not None and self.adjacency_log._has_data():
                            return True

                        if self.database_log is not None and self.database_log._has_data():
                            return True

                        if self.detailed_lsps is not None and self.detailed_lsps._has_data():
                            return True

                        if self.lsp_log is not None and self.lsp_log._has_data():
                            return True

                        if self.lsp_table_summary is not None and self.lsp_table_summary._has_data():
                            return True

                        if self.lsps is not None and self.lsps._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                        return meta._meta_table['Isis.Instances.Instance.Levels.Level']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:levels'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.level is not None:
                        for child_ref in self.level:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                    return meta._meta_table['Isis.Instances.Instance.Levels']['meta_info']


            class Topologies(object):
                """
                Topology table
                
                .. attribute:: topology
                
                	Per\-topology data
                	**type**\: list of  :py:class:`Topology <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.topology = YList()
                    self.topology.parent = self
                    self.topology.name = 'topology'


                class Topology(object):
                    """
                    Per\-topology data
                    
                    .. attribute:: af_name
                    
                    	Address family
                    	**type**\:  :py:class:`IsisAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_datatypes.IsisAddressFamilyEnum>`
                    
                    .. attribute:: frr_summary
                    
                    	FRR summary information for a particular IS\-IS topology
                    	**type**\:  :py:class:`FrrSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.FrrSummary>`
                    
                    .. attribute:: ipv4_routes
                    
                    	IPv4 local route table
                    	**type**\:  :py:class:`Ipv4Routes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes>`
                    
                    .. attribute:: ipv4frr_backups
                    
                    	IPv4 FRR table
                    	**type**\:  :py:class:`Ipv4FrrBackups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups>`
                    
                    .. attribute:: ipv6_routes
                    
                    	IPv6 local route
                    	**type**\:  :py:class:`Ipv6Routes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes>`
                    
                    .. attribute:: ipv6frr_backups
                    
                    	IPv6 FRR table
                    	**type**\:  :py:class:`Ipv6FrrBackups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups>`
                    
                    .. attribute:: saf_name
                    
                    	Sub address family
                    	**type**\:  :py:class:`IsisSubAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_datatypes.IsisSubAddressFamilyEnum>`
                    
                    .. attribute:: topology_levels
                    
                    	Per\-topology level table
                    	**type**\:  :py:class:`TopologyLevels <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels>`
                    
                    .. attribute:: topology_name
                    
                    	Topology Name
                    	**type**\:  str
                    
                    	**range:** 0..32
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.af_name = None
                        self.frr_summary = Isis.Instances.Instance.Topologies.Topology.FrrSummary()
                        self.frr_summary.parent = self
                        self.ipv4_routes = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes()
                        self.ipv4_routes.parent = self
                        self.ipv4frr_backups = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups()
                        self.ipv4frr_backups.parent = self
                        self.ipv6_routes = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes()
                        self.ipv6_routes.parent = self
                        self.ipv6frr_backups = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups()
                        self.ipv6frr_backups.parent = self
                        self.saf_name = None
                        self.topology_levels = Isis.Instances.Instance.Topologies.Topology.TopologyLevels()
                        self.topology_levels.parent = self
                        self.topology_name = None


                    class FrrSummary(object):
                        """
                        FRR summary information for a particular
                        IS\-IS topology
                        
                        .. attribute:: level1_prefixes
                        
                        	FRR summary for prefixes reachable in L1
                        	**type**\:  :py:class:`Level1Prefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes>`
                        
                        .. attribute:: level2_prefixes
                        
                        	FRR summary for prefixes reachable in L2
                        	**type**\:  :py:class:`Level2Prefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes>`
                        
                        .. attribute:: unreachable_prefixes
                        
                        	Unreachable prefixes
                        	**type**\:  :py:class:`UnreachablePrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.FrrSummary.UnreachablePrefixes>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.level1_prefixes = Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes()
                            self.level1_prefixes.parent = self
                            self.level2_prefixes = Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes()
                            self.level2_prefixes.parent = self
                            self.unreachable_prefixes = Isis.Instances.Instance.Topologies.Topology.FrrSummary.UnreachablePrefixes()
                            self.unreachable_prefixes.parent = self


                        class Level1Prefixes(object):
                            """
                            FRR summary for prefixes reachable in L1
                            
                            .. attribute:: all_paths_protected
                            
                            	Number of prefixes with all paths having FRR backup
                            	**type**\:  :py:class:`AllPathsProtected <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes.AllPathsProtected>`
                            
                            .. attribute:: some_paths_protected
                            
                            	Number of prefixes with some paths having FRR backup
                            	**type**\:  :py:class:`SomePathsProtected <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes.SomePathsProtected>`
                            
                            .. attribute:: unprotected
                            
                            	Number of reachable prefixes without FRR backup
                            	**type**\:  :py:class:`Unprotected <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes.Unprotected>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.all_paths_protected = Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes.AllPathsProtected()
                                self.all_paths_protected.parent = self
                                self.some_paths_protected = Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes.SomePathsProtected()
                                self.some_paths_protected.parent = self
                                self.unprotected = Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes.Unprotected()
                                self.unprotected.parent = self


                            class AllPathsProtected(object):
                                """
                                Number of prefixes with all paths having FRR
                                backup
                                
                                .. attribute:: critical
                                
                                	Critical priority
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: high
                                
                                	High priority
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: low
                                
                                	Low priority
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: medium
                                
                                	Medium priority
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.critical = None
                                    self.high = None
                                    self.low = None
                                    self.medium = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:all-paths-protected'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.critical is not None:
                                        return True

                                    if self.high is not None:
                                        return True

                                    if self.low is not None:
                                        return True

                                    if self.medium is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes.AllPathsProtected']['meta_info']


                            class SomePathsProtected(object):
                                """
                                Number of prefixes with some paths having FRR
                                backup
                                
                                .. attribute:: critical
                                
                                	Critical priority
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: high
                                
                                	High priority
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: low
                                
                                	Low priority
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: medium
                                
                                	Medium priority
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.critical = None
                                    self.high = None
                                    self.low = None
                                    self.medium = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:some-paths-protected'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.critical is not None:
                                        return True

                                    if self.high is not None:
                                        return True

                                    if self.low is not None:
                                        return True

                                    if self.medium is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes.SomePathsProtected']['meta_info']


                            class Unprotected(object):
                                """
                                Number of reachable prefixes without FRR backup
                                
                                .. attribute:: critical
                                
                                	Critical priority
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: high
                                
                                	High priority
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: low
                                
                                	Low priority
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: medium
                                
                                	Medium priority
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.critical = None
                                    self.high = None
                                    self.low = None
                                    self.medium = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:unprotected'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.critical is not None:
                                        return True

                                    if self.high is not None:
                                        return True

                                    if self.low is not None:
                                        return True

                                    if self.medium is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes.Unprotected']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:level1-prefixes'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.all_paths_protected is not None and self.all_paths_protected._has_data():
                                    return True

                                if self.some_paths_protected is not None and self.some_paths_protected._has_data():
                                    return True

                                if self.unprotected is not None and self.unprotected._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes']['meta_info']


                        class Level2Prefixes(object):
                            """
                            FRR summary for prefixes reachable in L2
                            
                            .. attribute:: all_paths_protected
                            
                            	Number of prefixes with all paths having FRR backup
                            	**type**\:  :py:class:`AllPathsProtected <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes.AllPathsProtected>`
                            
                            .. attribute:: some_paths_protected
                            
                            	Number of prefixes with some paths having FRR backup
                            	**type**\:  :py:class:`SomePathsProtected <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes.SomePathsProtected>`
                            
                            .. attribute:: unprotected
                            
                            	Number of reachable prefixes without FRR backup
                            	**type**\:  :py:class:`Unprotected <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes.Unprotected>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.all_paths_protected = Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes.AllPathsProtected()
                                self.all_paths_protected.parent = self
                                self.some_paths_protected = Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes.SomePathsProtected()
                                self.some_paths_protected.parent = self
                                self.unprotected = Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes.Unprotected()
                                self.unprotected.parent = self


                            class AllPathsProtected(object):
                                """
                                Number of prefixes with all paths having FRR
                                backup
                                
                                .. attribute:: critical
                                
                                	Critical priority
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: high
                                
                                	High priority
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: low
                                
                                	Low priority
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: medium
                                
                                	Medium priority
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.critical = None
                                    self.high = None
                                    self.low = None
                                    self.medium = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:all-paths-protected'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.critical is not None:
                                        return True

                                    if self.high is not None:
                                        return True

                                    if self.low is not None:
                                        return True

                                    if self.medium is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes.AllPathsProtected']['meta_info']


                            class SomePathsProtected(object):
                                """
                                Number of prefixes with some paths having FRR
                                backup
                                
                                .. attribute:: critical
                                
                                	Critical priority
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: high
                                
                                	High priority
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: low
                                
                                	Low priority
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: medium
                                
                                	Medium priority
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.critical = None
                                    self.high = None
                                    self.low = None
                                    self.medium = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:some-paths-protected'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.critical is not None:
                                        return True

                                    if self.high is not None:
                                        return True

                                    if self.low is not None:
                                        return True

                                    if self.medium is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes.SomePathsProtected']['meta_info']


                            class Unprotected(object):
                                """
                                Number of reachable prefixes without FRR backup
                                
                                .. attribute:: critical
                                
                                	Critical priority
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: high
                                
                                	High priority
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: low
                                
                                	Low priority
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: medium
                                
                                	Medium priority
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.critical = None
                                    self.high = None
                                    self.low = None
                                    self.medium = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:unprotected'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.critical is not None:
                                        return True

                                    if self.high is not None:
                                        return True

                                    if self.low is not None:
                                        return True

                                    if self.medium is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes.Unprotected']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:level2-prefixes'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.all_paths_protected is not None and self.all_paths_protected._has_data():
                                    return True

                                if self.some_paths_protected is not None and self.some_paths_protected._has_data():
                                    return True

                                if self.unprotected is not None and self.unprotected._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes']['meta_info']


                        class UnreachablePrefixes(object):
                            """
                            Unreachable prefixes
                            
                            .. attribute:: critical
                            
                            	Critical priority
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: high
                            
                            	High priority
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: low
                            
                            	Low priority
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: medium
                            
                            	Medium priority
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.critical = None
                                self.high = None
                                self.low = None
                                self.medium = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:unreachable-prefixes'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.critical is not None:
                                    return True

                                if self.high is not None:
                                    return True

                                if self.low is not None:
                                    return True

                                if self.medium is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.FrrSummary.UnreachablePrefixes']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-summary'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.level1_prefixes is not None and self.level1_prefixes._has_data():
                                return True

                            if self.level2_prefixes is not None and self.level2_prefixes._has_data():
                                return True

                            if self.unreachable_prefixes is not None and self.unreachable_prefixes._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.FrrSummary']['meta_info']


                    class TopologyLevels(object):
                        """
                        Per\-topology level table
                        
                        .. attribute:: topology_level
                        
                        	Per\-level topology operational data
                        	**type**\: list of  :py:class:`TopologyLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.topology_level = YList()
                            self.topology_level.parent = self
                            self.topology_level.name = 'topology_level'


                        class TopologyLevel(object):
                            """
                            Per\-level topology operational data
                            
                            .. attribute:: level  <key>
                            
                            	Level
                            	**type**\:  :py:class:`IsisInternalLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_datatypes.IsisInternalLevelEnum>`
                            
                            .. attribute:: ipv4_link_topologies
                            
                            	IPv4 IS Topology table
                            	**type**\:  :py:class:`Ipv4LinkTopologies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies>`
                            
                            .. attribute:: ipv6_link_topologies
                            
                            	IPv6 IS Topology table
                            	**type**\:  :py:class:`Ipv6LinkTopologies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies>`
                            
                            .. attribute:: spf_log
                            
                            	Log of route calculations for a single level and topology
                            	**type**\:  :py:class:`SpfLog <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog>`
                            
                            .. attribute:: te_adjacency_log
                            
                            	TE adjacency\-log for a single level and topology. Only available within the IPv4 Unicast topology
                            	**type**\:  :py:class:`TeAdjacencyLog <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog>`
                            
                            .. attribute:: te_advertisements
                            
                            	TE advertisements for a single level and topology. Only available within the IPv4 Unicast topology
                            	**type**\:  :py:class:`TeAdvertisements <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements>`
                            
                            .. attribute:: te_tunnels
                            
                            	TE tunnels table. Only available within the IPv4 Unicast topology
                            	**type**\:  :py:class:`TeTunnels <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeTunnels>`
                            
                            .. attribute:: topology_summary
                            
                            	Summary information for a particular IS Topology
                            	**type**\:  :py:class:`TopologySummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TopologySummary>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.level = None
                                self.ipv4_link_topologies = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies()
                                self.ipv4_link_topologies.parent = self
                                self.ipv6_link_topologies = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies()
                                self.ipv6_link_topologies.parent = self
                                self.spf_log = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog()
                                self.spf_log.parent = self
                                self.te_adjacency_log = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog()
                                self.te_adjacency_log.parent = self
                                self.te_advertisements = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements()
                                self.te_advertisements.parent = self
                                self.te_tunnels = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeTunnels()
                                self.te_tunnels.parent = self
                                self.topology_summary = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TopologySummary()
                                self.topology_summary.parent = self


                            class TeAdvertisements(object):
                                """
                                TE advertisements for a single level and
                                topology. Only available within the IPv4
                                Unicast topology.
                                
                                .. attribute:: te_adv
                                
                                	List of TE advertisement entries
                                	**type**\: list of  :py:class:`TeAdv <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.TeAdv>`
                                
                                .. attribute:: te_adv_data_present
                                
                                	Indicates whether any TE advertisements are present
                                	**type**\:  bool
                                
                                .. attribute:: te_local_router_id
                                
                                	Local TE router ID
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: te_system_id
                                
                                	Local system ID
                                	**type**\:  str
                                
                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                
                                .. attribute:: tepceadv
                                
                                	TE PCE advertisements
                                	**type**\:  :py:class:`Tepceadv <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.Tepceadv>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.te_adv = YList()
                                    self.te_adv.parent = self
                                    self.te_adv.name = 'te_adv'
                                    self.te_adv_data_present = None
                                    self.te_local_router_id = None
                                    self.te_system_id = None
                                    self.tepceadv = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.Tepceadv()
                                    self.tepceadv.parent = self


                                class Tepceadv(object):
                                    """
                                    TE PCE advertisements
                                    
                                    .. attribute:: pce_address_ipv4
                                    
                                    	IPv4 PCE address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: pce_adv_data_present
                                    
                                    	Indicates whether any PCE advertisements are present
                                    	**type**\:  bool
                                    
                                    .. attribute:: pce_flooding_scope
                                    
                                    	Flooding scope for PCE advertisement
                                    	**type**\:  :py:class:`IsisShTePceFloodingScopeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisShTePceFloodingScopeEnum>`
                                    
                                    .. attribute:: pce_path_scope_bits
                                    
                                    	PCE path scope bits
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: pce_path_scope_prefs
                                    
                                    	PCE path scope preferences
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.pce_address_ipv4 = None
                                        self.pce_adv_data_present = None
                                        self.pce_flooding_scope = None
                                        self.pce_path_scope_bits = None
                                        self.pce_path_scope_prefs = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:tepceadv'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.pce_address_ipv4 is not None:
                                            return True

                                        if self.pce_adv_data_present is not None:
                                            return True

                                        if self.pce_flooding_scope is not None:
                                            return True

                                        if self.pce_path_scope_bits is not None:
                                            return True

                                        if self.pce_path_scope_prefs is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.Tepceadv']['meta_info']


                                class TeAdv(object):
                                    """
                                    List of TE advertisement entries
                                    
                                    .. attribute:: link_type
                                    
                                    	Link type
                                    	**type**\:  :py:class:`IsisShTeLinkEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisShTeLinkEnum>`
                                    
                                    .. attribute:: local_ip_address
                                    
                                    	Local IP address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: te_affinity
                                    
                                    	Affinity bits
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: te_ext_admin_num
                                    
                                    	TE Ext Admin Number
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: te_ext_admin_sub
                                    
                                    	TE Extended Admin Group
                                    	**type**\:  list of int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: te_metric
                                    
                                    	TE metric
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: te_neighbor_ip_address
                                    
                                    	Neighbor IP address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: te_neighbor_system_id
                                    
                                    	Neighbor system ID
                                    	**type**\:  str
                                    
                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                    
                                    .. attribute:: te_physical_link_bandwidth
                                    
                                    	Physical link bandwidth
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: te_reserved_link_bandwidth
                                    
                                    	Reservable link bandwidth in global pool
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: te_sub_tlv
                                    
                                    	List of TE sub TLVs
                                    	**type**\: list of  :py:class:`TeSubTlv <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.TeAdv.TeSubTlv>`
                                    
                                    .. attribute:: te_sub_tlv_data_present
                                    
                                    	Indicates whether any TE sub TLVs are present
                                    	**type**\:  bool
                                    
                                    .. attribute:: te_subpool_reserved_link_bandwidth
                                    
                                    	Reservable link bandwidth in subpool
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: te_subpool_transmitted_bandwidth
                                    
                                    	Bandwidth in use in subpool
                                    	**type**\:  list of int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: te_transmitted_bandwidth
                                    
                                    	Bandwidth in use in global pool
                                    	**type**\:  list of int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.link_type = None
                                        self.local_ip_address = None
                                        self.te_affinity = None
                                        self.te_ext_admin_num = None
                                        self.te_ext_admin_sub = YLeafList()
                                        self.te_ext_admin_sub.parent = self
                                        self.te_ext_admin_sub.name = 'te_ext_admin_sub'
                                        self.te_metric = None
                                        self.te_neighbor_ip_address = None
                                        self.te_neighbor_system_id = None
                                        self.te_physical_link_bandwidth = None
                                        self.te_reserved_link_bandwidth = None
                                        self.te_sub_tlv = YList()
                                        self.te_sub_tlv.parent = self
                                        self.te_sub_tlv.name = 'te_sub_tlv'
                                        self.te_sub_tlv_data_present = None
                                        self.te_subpool_reserved_link_bandwidth = None
                                        self.te_subpool_transmitted_bandwidth = YLeafList()
                                        self.te_subpool_transmitted_bandwidth.parent = self
                                        self.te_subpool_transmitted_bandwidth.name = 'te_subpool_transmitted_bandwidth'
                                        self.te_transmitted_bandwidth = YLeafList()
                                        self.te_transmitted_bandwidth.parent = self
                                        self.te_transmitted_bandwidth.name = 'te_transmitted_bandwidth'


                                    class TeSubTlv(object):
                                        """
                                        List of TE sub TLVs
                                        
                                        .. attribute:: te_sub_tlv_length
                                        
                                        	Length of sub TLV
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: te_sub_tlv_type
                                        
                                        	Type of sub TLV
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: te_sub_tlv_value
                                        
                                        	Value of sub TLV
                                        	**type**\:  str
                                        
                                        	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.te_sub_tlv_length = None
                                            self.te_sub_tlv_type = None
                                            self.te_sub_tlv_value = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:te-sub-tlv'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.te_sub_tlv_length is not None:
                                                return True

                                            if self.te_sub_tlv_type is not None:
                                                return True

                                            if self.te_sub_tlv_value is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.TeAdv.TeSubTlv']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:te-adv'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.link_type is not None:
                                            return True

                                        if self.local_ip_address is not None:
                                            return True

                                        if self.te_affinity is not None:
                                            return True

                                        if self.te_ext_admin_num is not None:
                                            return True

                                        if self.te_ext_admin_sub is not None:
                                            for child in self.te_ext_admin_sub:
                                                if child is not None:
                                                    return True

                                        if self.te_metric is not None:
                                            return True

                                        if self.te_neighbor_ip_address is not None:
                                            return True

                                        if self.te_neighbor_system_id is not None:
                                            return True

                                        if self.te_physical_link_bandwidth is not None:
                                            return True

                                        if self.te_reserved_link_bandwidth is not None:
                                            return True

                                        if self.te_sub_tlv is not None:
                                            for child_ref in self.te_sub_tlv:
                                                if child_ref._has_data():
                                                    return True

                                        if self.te_sub_tlv_data_present is not None:
                                            return True

                                        if self.te_subpool_reserved_link_bandwidth is not None:
                                            return True

                                        if self.te_subpool_transmitted_bandwidth is not None:
                                            for child in self.te_subpool_transmitted_bandwidth:
                                                if child is not None:
                                                    return True

                                        if self.te_transmitted_bandwidth is not None:
                                            for child in self.te_transmitted_bandwidth:
                                                if child is not None:
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.TeAdv']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:te-advertisements'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.te_adv is not None:
                                        for child_ref in self.te_adv:
                                            if child_ref._has_data():
                                                return True

                                    if self.te_adv_data_present is not None:
                                        return True

                                    if self.te_local_router_id is not None:
                                        return True

                                    if self.te_system_id is not None:
                                        return True

                                    if self.tepceadv is not None and self.tepceadv._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements']['meta_info']


                            class TeAdjacencyLog(object):
                                """
                                TE adjacency\-log for a single level and
                                topology. Only available within the IPv4
                                Unicast topology.
                                
                                .. attribute:: log_entry
                                
                                	Log entries
                                	**type**\: list of  :py:class:`LogEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog.LogEntry>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.log_entry = YList()
                                    self.log_entry.parent = self
                                    self.log_entry.name = 'log_entry'


                                class LogEntry(object):
                                    """
                                    Log entries
                                    
                                    .. attribute:: generic_data
                                    
                                    	Generic entry data
                                    	**type**\:  :py:class:`GenericData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog.LogEntry.GenericData>`
                                    
                                    .. attribute:: log_interface
                                    
                                    	Interface
                                    	**type**\:  str
                                    
                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                    
                                    .. attribute:: neighbor_ip_address
                                    
                                    	Neighbor ip address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: status
                                    
                                    	Up (TRUE) or down
                                    	**type**\:  bool
                                    
                                    .. attribute:: te_log_neighbor_system_id
                                    
                                    	Neighbor system ID
                                    	**type**\:  str
                                    
                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.generic_data = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog.LogEntry.GenericData()
                                        self.generic_data.parent = self
                                        self.log_interface = None
                                        self.neighbor_ip_address = None
                                        self.status = None
                                        self.te_log_neighbor_system_id = None


                                    class GenericData(object):
                                        """
                                        Generic entry data
                                        
                                        .. attribute:: timestamp
                                        
                                        	Time in UTC relative to Jan 1st, 1970
                                        	**type**\:  :py:class:`Timestamp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog.LogEntry.GenericData.Timestamp>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.timestamp = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog.LogEntry.GenericData.Timestamp()
                                            self.timestamp.parent = self


                                        class Timestamp(object):
                                            """
                                            Time in UTC relative to Jan 1st, 1970
                                            
                                            .. attribute:: nano_seconds
                                            
                                            	Timestamp value (nanoseconds)
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: seconds
                                            
                                            	Timestamp value (seconds)
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.nano_seconds = None
                                                self.seconds = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:timestamp'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.nano_seconds is not None:
                                                    return True

                                                if self.seconds is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog.LogEntry.GenericData.Timestamp']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:generic-data'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.timestamp is not None and self.timestamp._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog.LogEntry.GenericData']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:log-entry'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.generic_data is not None and self.generic_data._has_data():
                                            return True

                                        if self.log_interface is not None:
                                            return True

                                        if self.neighbor_ip_address is not None:
                                            return True

                                        if self.status is not None:
                                            return True

                                        if self.te_log_neighbor_system_id is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog.LogEntry']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:te-adjacency-log'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.log_entry is not None:
                                        for child_ref in self.log_entry:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog']['meta_info']


                            class SpfLog(object):
                                """
                                Log of route calculations for a single
                                level and topology
                                
                                .. attribute:: log_entry
                                
                                	SPF Log entries
                                	**type**\: list of  :py:class:`LogEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.log_entry = YList()
                                    self.log_entry.parent = self
                                    self.log_entry.name = 'log_entry'


                                class LogEntry(object):
                                    """
                                    SPF Log entries
                                    
                                    .. attribute:: class_
                                    
                                    	Type of calculation
                                    	**type**\:  :py:class:`IsisSpfClassEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisSpfClassEnum>`
                                    
                                    .. attribute:: generic_data
                                    
                                    	Generic entry data
                                    	**type**\:  :py:class:`GenericData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.GenericData>`
                                    
                                    .. attribute:: next_wait_interval
                                    
                                    	Minimum time from end of this route calculation until the start of the next, in milliseconds
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: route_update_statistics
                                    
                                    	Statistics for the route update phase
                                    	**type**\:  :py:class:`RouteUpdateStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics>`
                                    
                                    .. attribute:: spt_calculation_statistics
                                    
                                    	Statistics for the SPT calculation phase
                                    	**type**\:  :py:class:`SptCalculationStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.SptCalculationStatistics>`
                                    
                                    .. attribute:: triggers
                                    
                                    	Trigger information
                                    	**type**\:  :py:class:`Triggers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers>`
                                    
                                    .. attribute:: updated_lsp_count
                                    
                                    	Number of LSPs which arrived during the route calculation
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: wait_enforced
                                    
                                    	Time between the first trigger and the start of the route calculation, in milliseconds
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.class_ = None
                                        self.generic_data = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.GenericData()
                                        self.generic_data.parent = self
                                        self.next_wait_interval = None
                                        self.route_update_statistics = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics()
                                        self.route_update_statistics.parent = self
                                        self.spt_calculation_statistics = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.SptCalculationStatistics()
                                        self.spt_calculation_statistics.parent = self
                                        self.triggers = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers()
                                        self.triggers.parent = self
                                        self.updated_lsp_count = None
                                        self.wait_enforced = None


                                    class GenericData(object):
                                        """
                                        Generic entry data.
                                        
                                        .. attribute:: timestamp
                                        
                                        	Time in UTC relative to Jan 1st, 1970
                                        	**type**\:  :py:class:`Timestamp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.GenericData.Timestamp>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.timestamp = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.GenericData.Timestamp()
                                            self.timestamp.parent = self


                                        class Timestamp(object):
                                            """
                                            Time in UTC relative to Jan 1st, 1970
                                            
                                            .. attribute:: nano_seconds
                                            
                                            	Timestamp value (nanoseconds)
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: seconds
                                            
                                            	Timestamp value (seconds)
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.nano_seconds = None
                                                self.seconds = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:timestamp'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.nano_seconds is not None:
                                                    return True

                                                if self.seconds is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.GenericData.Timestamp']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:generic-data'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.timestamp is not None and self.timestamp._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.GenericData']['meta_info']


                                    class Triggers(object):
                                        """
                                        Trigger information
                                        
                                        .. attribute:: first_trigger_lsp_id
                                        
                                        	ID of the first LSP to trigger the calculation, if any
                                        	**type**\:  str
                                        
                                        	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                        
                                        .. attribute:: trigger
                                        
                                        	Triggers applying to this log entry
                                        	**type**\:  list of :py:class:`IsisSpfTriggerEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisSpfTriggerEnum>`
                                        
                                        .. attribute:: trigger_link
                                        
                                        	ID of a changed link in the first trigger LSP, if any
                                        	**type**\:  str
                                        
                                        	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}
                                        
                                        .. attribute:: trigger_next_hop_id
                                        
                                        	ID of a changed next hop, if any
                                        	**type**\:  str
                                        
                                        	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                        
                                        .. attribute:: trigger_prefix
                                        
                                        	ID of a changed prefix in the first trigger LSP, if any
                                        	**type**\:  :py:class:`TriggerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.TriggerPrefix>`
                                        
                                        .. attribute:: unique_trigger_count
                                        
                                        	Number of unique triggers on this run
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.first_trigger_lsp_id = None
                                            self.trigger = YLeafList()
                                            self.trigger.parent = self
                                            self.trigger.name = 'trigger'
                                            self.trigger_link = None
                                            self.trigger_next_hop_id = None
                                            self.trigger_prefix = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.TriggerPrefix()
                                            self.trigger_prefix.parent = self
                                            self.unique_trigger_count = None


                                        class TriggerPrefix(object):
                                            """
                                            ID of a changed prefix in the first trigger LSP,
                                            if any
                                            
                                            .. attribute:: af_name
                                            
                                            	AFName
                                            	**type**\:  :py:class:`IsisAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfIdEnum>`
                                            
                                            .. attribute:: ipv4
                                            
                                            	ipv4
                                            	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.TriggerPrefix.Ipv4>`
                                            
                                            .. attribute:: ipv6
                                            
                                            	ipv6
                                            	**type**\:  :py:class:`Ipv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.TriggerPrefix.Ipv6>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.ipv4 = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.TriggerPrefix.Ipv4()
                                                self.ipv4.parent = self
                                                self.ipv6 = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.TriggerPrefix.Ipv6()
                                                self.ipv6.parent = self


                                            class Ipv4(object):
                                                """
                                                ipv4
                                                
                                                .. attribute:: prefix
                                                
                                                	prefix
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: prefix_length
                                                
                                                	prefix length
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.prefix = None
                                                    self.prefix_length = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ipv4'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.prefix is not None:
                                                        return True

                                                    if self.prefix_length is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.TriggerPrefix.Ipv4']['meta_info']


                                            class Ipv6(object):
                                                """
                                                ipv6
                                                
                                                .. attribute:: prefix
                                                
                                                	prefix
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: prefix_length
                                                
                                                	prefix length
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.prefix = None
                                                    self.prefix_length = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ipv6'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.prefix is not None:
                                                        return True

                                                    if self.prefix_length is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.TriggerPrefix.Ipv6']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:trigger-prefix'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.ipv4 is not None and self.ipv4._has_data():
                                                    return True

                                                if self.ipv6 is not None and self.ipv6._has_data():
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.TriggerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:triggers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.first_trigger_lsp_id is not None:
                                                return True

                                            if self.trigger is not None:
                                                for child in self.trigger:
                                                    if child is not None:
                                                        return True

                                            if self.trigger_link is not None:
                                                return True

                                            if self.trigger_next_hop_id is not None:
                                                return True

                                            if self.trigger_prefix is not None and self.trigger_prefix._has_data():
                                                return True

                                            if self.unique_trigger_count is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers']['meta_info']


                                    class SptCalculationStatistics(object):
                                        """
                                        Statistics for the SPT calculation phase
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of the SPT calculation
                                        	**type**\:  :py:class:`Duration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.SptCalculationStatistics.Duration>`
                                        
                                        .. attribute:: node_counts
                                        
                                        	Node counts
                                        	**type**\:  :py:class:`NodeCounts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.SptCalculationStatistics.NodeCounts>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.SptCalculationStatistics.Duration()
                                            self.duration.parent = self
                                            self.node_counts = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.SptCalculationStatistics.NodeCounts()
                                            self.node_counts.parent = self


                                        class Duration(object):
                                            """
                                            Duration of the SPT calculation
                                            
                                            .. attribute:: cpu_duration
                                            
                                            	CPU time duration in milliseconds
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: real_duration
                                            
                                            	Real time duration in milliseconds
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.cpu_duration = None
                                                self.real_duration = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:duration'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.cpu_duration is not None:
                                                    return True

                                                if self.real_duration is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.SptCalculationStatistics.Duration']['meta_info']


                                        class NodeCounts(object):
                                            """
                                            Node counts
                                            
                                            .. attribute:: added
                                            
                                            	Number of nodes added to the SPT
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: deleted
                                            
                                            	Number of nodes deleted from the SPT
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: modified
                                            
                                            	Number of modified nodes (first hop and/or metric change)
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: reachable
                                            
                                            	Number of reachable nodes in the database
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: touched
                                            
                                            	Number of nodes touched whilst calculating the SPT
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: unreachable
                                            
                                            	Number of unreachable nodes in the database
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.added = None
                                                self.deleted = None
                                                self.modified = None
                                                self.reachable = None
                                                self.touched = None
                                                self.unreachable = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:node-counts'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.added is not None:
                                                    return True

                                                if self.deleted is not None:
                                                    return True

                                                if self.modified is not None:
                                                    return True

                                                if self.reachable is not None:
                                                    return True

                                                if self.touched is not None:
                                                    return True

                                                if self.unreachable is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.SptCalculationStatistics.NodeCounts']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:spt-calculation-statistics'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None and self.duration._has_data():
                                                return True

                                            if self.node_counts is not None and self.node_counts._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.SptCalculationStatistics']['meta_info']


                                    class RouteUpdateStatistics(object):
                                        """
                                        Statistics for the route update phase
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of the routing table update
                                        	**type**\:  :py:class:`Duration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.Duration>`
                                        
                                        .. attribute:: duration_breakdown
                                        
                                        	Breakdown of the time taken by the routing table update
                                        	**type**\:  :py:class:`DurationBreakdown <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown>`
                                        
                                        .. attribute:: item_counts
                                        
                                        	Prefix item counts
                                        	**type**\:  :py:class:`ItemCounts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts>`
                                        
                                        .. attribute:: node_counts
                                        
                                        	Node counts
                                        	**type**\:  :py:class:`NodeCounts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.NodeCounts>`
                                        
                                        .. attribute:: rib_batch_counts
                                        
                                        	Number of RIB batches sent
                                        	**type**\:  :py:class:`RibBatchCounts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RibBatchCounts>`
                                        
                                        .. attribute:: route_counts
                                        
                                        	Distinct prefix counts
                                        	**type**\:  :py:class:`RouteCounts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.Duration()
                                            self.duration.parent = self
                                            self.duration_breakdown = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown()
                                            self.duration_breakdown.parent = self
                                            self.item_counts = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts()
                                            self.item_counts.parent = self
                                            self.node_counts = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.NodeCounts()
                                            self.node_counts.parent = self
                                            self.rib_batch_counts = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RibBatchCounts()
                                            self.rib_batch_counts.parent = self
                                            self.route_counts = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts()
                                            self.route_counts.parent = self


                                        class Duration(object):
                                            """
                                            Duration of the routing table update
                                            
                                            .. attribute:: cpu_duration
                                            
                                            	CPU time duration in milliseconds
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: real_duration
                                            
                                            	Real time duration in milliseconds
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.cpu_duration = None
                                                self.real_duration = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:duration'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.cpu_duration is not None:
                                                    return True

                                                if self.real_duration is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.Duration']['meta_info']


                                        class DurationBreakdown(object):
                                            """
                                            Breakdown of the time taken by the routing table
                                            update
                                            
                                            .. attribute:: global_rib_build
                                            
                                            	Time to build the update to send to the global RIB
                                            	**type**\:  :py:class:`GlobalRibBuild <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild>`
                                            
                                            .. attribute:: global_rib_send
                                            
                                            	Time to send the update to the global RIB
                                            	**type**\:  :py:class:`GlobalRibSend <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend>`
                                            
                                            .. attribute:: local_rib_update
                                            
                                            	Time to update IS\-IS's local RIB
                                            	**type**\:  :py:class:`LocalRibUpdate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.global_rib_build = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild()
                                                self.global_rib_build.parent = self
                                                self.global_rib_send = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend()
                                                self.global_rib_send.parent = self
                                                self.local_rib_update = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate()
                                                self.local_rib_update.parent = self


                                            class LocalRibUpdate(object):
                                                """
                                                Time to update IS\-IS's local RIB
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\:  :py:class:`Critical <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.Critical>`
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\:  :py:class:`High <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.High>`
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\:  :py:class:`Low <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.Low>`
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\:  :py:class:`Medium <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.Medium>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.critical = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.Critical()
                                                    self.critical.parent = self
                                                    self.high = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.High()
                                                    self.high.parent = self
                                                    self.low = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.Low()
                                                    self.low.parent = self
                                                    self.medium = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.Medium()
                                                    self.medium.parent = self


                                                class Critical(object):
                                                    """
                                                    Critical priority
                                                    
                                                    .. attribute:: cpu_duration
                                                    
                                                    	CPU time duration in milliseconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: real_duration
                                                    
                                                    	Real time duration in milliseconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2015-11-09'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.cpu_duration = None
                                                        self.real_duration = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:critical'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return False

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.cpu_duration is not None:
                                                            return True

                                                        if self.real_duration is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.Critical']['meta_info']


                                                class High(object):
                                                    """
                                                    High priority
                                                    
                                                    .. attribute:: cpu_duration
                                                    
                                                    	CPU time duration in milliseconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: real_duration
                                                    
                                                    	Real time duration in milliseconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2015-11-09'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.cpu_duration = None
                                                        self.real_duration = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:high'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return False

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.cpu_duration is not None:
                                                            return True

                                                        if self.real_duration is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.High']['meta_info']


                                                class Medium(object):
                                                    """
                                                    Medium priority
                                                    
                                                    .. attribute:: cpu_duration
                                                    
                                                    	CPU time duration in milliseconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: real_duration
                                                    
                                                    	Real time duration in milliseconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2015-11-09'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.cpu_duration = None
                                                        self.real_duration = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:medium'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return False

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.cpu_duration is not None:
                                                            return True

                                                        if self.real_duration is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.Medium']['meta_info']


                                                class Low(object):
                                                    """
                                                    Low priority
                                                    
                                                    .. attribute:: cpu_duration
                                                    
                                                    	CPU time duration in milliseconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: real_duration
                                                    
                                                    	Real time duration in milliseconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2015-11-09'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.cpu_duration = None
                                                        self.real_duration = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:low'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return False

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.cpu_duration is not None:
                                                            return True

                                                        if self.real_duration is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.Low']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:local-rib-update'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.critical is not None and self.critical._has_data():
                                                        return True

                                                    if self.high is not None and self.high._has_data():
                                                        return True

                                                    if self.low is not None and self.low._has_data():
                                                        return True

                                                    if self.medium is not None and self.medium._has_data():
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate']['meta_info']


                                            class GlobalRibBuild(object):
                                                """
                                                Time to build the update to send to the global
                                                RIB
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\:  :py:class:`Critical <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.Critical>`
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\:  :py:class:`High <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.High>`
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\:  :py:class:`Low <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.Low>`
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\:  :py:class:`Medium <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.Medium>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.critical = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.Critical()
                                                    self.critical.parent = self
                                                    self.high = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.High()
                                                    self.high.parent = self
                                                    self.low = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.Low()
                                                    self.low.parent = self
                                                    self.medium = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.Medium()
                                                    self.medium.parent = self


                                                class Critical(object):
                                                    """
                                                    Critical priority
                                                    
                                                    .. attribute:: cpu_duration
                                                    
                                                    	CPU time duration in milliseconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: real_duration
                                                    
                                                    	Real time duration in milliseconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2015-11-09'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.cpu_duration = None
                                                        self.real_duration = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:critical'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return False

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.cpu_duration is not None:
                                                            return True

                                                        if self.real_duration is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.Critical']['meta_info']


                                                class High(object):
                                                    """
                                                    High priority
                                                    
                                                    .. attribute:: cpu_duration
                                                    
                                                    	CPU time duration in milliseconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: real_duration
                                                    
                                                    	Real time duration in milliseconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2015-11-09'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.cpu_duration = None
                                                        self.real_duration = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:high'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return False

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.cpu_duration is not None:
                                                            return True

                                                        if self.real_duration is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.High']['meta_info']


                                                class Medium(object):
                                                    """
                                                    Medium priority
                                                    
                                                    .. attribute:: cpu_duration
                                                    
                                                    	CPU time duration in milliseconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: real_duration
                                                    
                                                    	Real time duration in milliseconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2015-11-09'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.cpu_duration = None
                                                        self.real_duration = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:medium'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return False

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.cpu_duration is not None:
                                                            return True

                                                        if self.real_duration is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.Medium']['meta_info']


                                                class Low(object):
                                                    """
                                                    Low priority
                                                    
                                                    .. attribute:: cpu_duration
                                                    
                                                    	CPU time duration in milliseconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: real_duration
                                                    
                                                    	Real time duration in milliseconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2015-11-09'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.cpu_duration = None
                                                        self.real_duration = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:low'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return False

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.cpu_duration is not None:
                                                            return True

                                                        if self.real_duration is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.Low']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:global-rib-build'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.critical is not None and self.critical._has_data():
                                                        return True

                                                    if self.high is not None and self.high._has_data():
                                                        return True

                                                    if self.low is not None and self.low._has_data():
                                                        return True

                                                    if self.medium is not None and self.medium._has_data():
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild']['meta_info']


                                            class GlobalRibSend(object):
                                                """
                                                Time to send the update to the global RIB
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\:  :py:class:`Critical <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.Critical>`
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\:  :py:class:`High <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.High>`
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\:  :py:class:`Low <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.Low>`
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\:  :py:class:`Medium <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.Medium>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.critical = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.Critical()
                                                    self.critical.parent = self
                                                    self.high = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.High()
                                                    self.high.parent = self
                                                    self.low = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.Low()
                                                    self.low.parent = self
                                                    self.medium = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.Medium()
                                                    self.medium.parent = self


                                                class Critical(object):
                                                    """
                                                    Critical priority
                                                    
                                                    .. attribute:: cpu_duration
                                                    
                                                    	CPU time duration in milliseconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: real_duration
                                                    
                                                    	Real time duration in milliseconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2015-11-09'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.cpu_duration = None
                                                        self.real_duration = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:critical'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return False

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.cpu_duration is not None:
                                                            return True

                                                        if self.real_duration is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.Critical']['meta_info']


                                                class High(object):
                                                    """
                                                    High priority
                                                    
                                                    .. attribute:: cpu_duration
                                                    
                                                    	CPU time duration in milliseconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: real_duration
                                                    
                                                    	Real time duration in milliseconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2015-11-09'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.cpu_duration = None
                                                        self.real_duration = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:high'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return False

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.cpu_duration is not None:
                                                            return True

                                                        if self.real_duration is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.High']['meta_info']


                                                class Medium(object):
                                                    """
                                                    Medium priority
                                                    
                                                    .. attribute:: cpu_duration
                                                    
                                                    	CPU time duration in milliseconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: real_duration
                                                    
                                                    	Real time duration in milliseconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2015-11-09'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.cpu_duration = None
                                                        self.real_duration = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:medium'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return False

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.cpu_duration is not None:
                                                            return True

                                                        if self.real_duration is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.Medium']['meta_info']


                                                class Low(object):
                                                    """
                                                    Low priority
                                                    
                                                    .. attribute:: cpu_duration
                                                    
                                                    	CPU time duration in milliseconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: real_duration
                                                    
                                                    	Real time duration in milliseconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2015-11-09'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.cpu_duration = None
                                                        self.real_duration = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:low'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return False

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.cpu_duration is not None:
                                                            return True

                                                        if self.real_duration is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.Low']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:global-rib-send'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.critical is not None and self.critical._has_data():
                                                        return True

                                                    if self.high is not None and self.high._has_data():
                                                        return True

                                                    if self.low is not None and self.low._has_data():
                                                        return True

                                                    if self.medium is not None and self.medium._has_data():
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:duration-breakdown'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.global_rib_build is not None and self.global_rib_build._has_data():
                                                    return True

                                                if self.global_rib_send is not None and self.global_rib_send._has_data():
                                                    return True

                                                if self.local_rib_update is not None and self.local_rib_update._has_data():
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown']['meta_info']


                                        class NodeCounts(object):
                                            """
                                            Node counts
                                            
                                            .. attribute:: per_priority_touched
                                            
                                            	Per\-priority count of nodes considered during route update
                                            	**type**\:  :py:class:`PerPriorityTouched <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.NodeCounts.PerPriorityTouched>`
                                            
                                            .. attribute:: total_touched
                                            
                                            	Total number of nodes considered during route update
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.per_priority_touched = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.NodeCounts.PerPriorityTouched()
                                                self.per_priority_touched.parent = self
                                                self.total_touched = None


                                            class PerPriorityTouched(object):
                                                """
                                                Per\-priority count of nodes considered during
                                                route update
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.critical = None
                                                    self.high = None
                                                    self.low = None
                                                    self.medium = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:per-priority-touched'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.critical is not None:
                                                        return True

                                                    if self.high is not None:
                                                        return True

                                                    if self.low is not None:
                                                        return True

                                                    if self.medium is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.NodeCounts.PerPriorityTouched']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:node-counts'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.per_priority_touched is not None and self.per_priority_touched._has_data():
                                                    return True

                                                if self.total_touched is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.NodeCounts']['meta_info']


                                        class ItemCounts(object):
                                            """
                                            Prefix item counts
                                            
                                            .. attribute:: added
                                            
                                            	Number of prefixes added during calculation
                                            	**type**\:  :py:class:`Added <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Added>`
                                            
                                            .. attribute:: deleted
                                            
                                            	Number of prefixes deleted during calculation
                                            	**type**\:  :py:class:`Deleted <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Deleted>`
                                            
                                            .. attribute:: modified
                                            
                                            	Number of prefixes modified, i.e. a first hop and/or metric change
                                            	**type**\:  :py:class:`Modified <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Modified>`
                                            
                                            .. attribute:: reachable
                                            
                                            	Number of reachable prefixes in the database
                                            	**type**\:  :py:class:`Reachable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Reachable>`
                                            
                                            .. attribute:: touched
                                            
                                            	Number of prefixes considered whilst updating the routing table
                                            	**type**\:  :py:class:`Touched <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Touched>`
                                            
                                            .. attribute:: unreachable
                                            
                                            	Number of unreachable prefixes in the database
                                            	**type**\:  :py:class:`Unreachable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Unreachable>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.added = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Added()
                                                self.added.parent = self
                                                self.deleted = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Deleted()
                                                self.deleted.parent = self
                                                self.modified = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Modified()
                                                self.modified.parent = self
                                                self.reachable = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Reachable()
                                                self.reachable.parent = self
                                                self.touched = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Touched()
                                                self.touched.parent = self
                                                self.unreachable = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Unreachable()
                                                self.unreachable.parent = self


                                            class Unreachable(object):
                                                """
                                                Number of unreachable prefixes in the database
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.critical = None
                                                    self.high = None
                                                    self.low = None
                                                    self.medium = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:unreachable'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.critical is not None:
                                                        return True

                                                    if self.high is not None:
                                                        return True

                                                    if self.low is not None:
                                                        return True

                                                    if self.medium is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Unreachable']['meta_info']


                                            class Reachable(object):
                                                """
                                                Number of reachable prefixes in the database
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.critical = None
                                                    self.high = None
                                                    self.low = None
                                                    self.medium = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:reachable'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.critical is not None:
                                                        return True

                                                    if self.high is not None:
                                                        return True

                                                    if self.low is not None:
                                                        return True

                                                    if self.medium is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Reachable']['meta_info']


                                            class Added(object):
                                                """
                                                Number of prefixes added during calculation
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.critical = None
                                                    self.high = None
                                                    self.low = None
                                                    self.medium = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:added'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.critical is not None:
                                                        return True

                                                    if self.high is not None:
                                                        return True

                                                    if self.low is not None:
                                                        return True

                                                    if self.medium is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Added']['meta_info']


                                            class Deleted(object):
                                                """
                                                Number of prefixes deleted during calculation
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.critical = None
                                                    self.high = None
                                                    self.low = None
                                                    self.medium = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:deleted'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.critical is not None:
                                                        return True

                                                    if self.high is not None:
                                                        return True

                                                    if self.low is not None:
                                                        return True

                                                    if self.medium is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Deleted']['meta_info']


                                            class Modified(object):
                                                """
                                                Number of prefixes modified, i.e. a first hop
                                                and/or metric change
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.critical = None
                                                    self.high = None
                                                    self.low = None
                                                    self.medium = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:modified'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.critical is not None:
                                                        return True

                                                    if self.high is not None:
                                                        return True

                                                    if self.low is not None:
                                                        return True

                                                    if self.medium is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Modified']['meta_info']


                                            class Touched(object):
                                                """
                                                Number of prefixes considered whilst updating
                                                the routing table
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.critical = None
                                                    self.high = None
                                                    self.low = None
                                                    self.medium = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:touched'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.critical is not None:
                                                        return True

                                                    if self.high is not None:
                                                        return True

                                                    if self.low is not None:
                                                        return True

                                                    if self.medium is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Touched']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:item-counts'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.added is not None and self.added._has_data():
                                                    return True

                                                if self.deleted is not None and self.deleted._has_data():
                                                    return True

                                                if self.modified is not None and self.modified._has_data():
                                                    return True

                                                if self.reachable is not None and self.reachable._has_data():
                                                    return True

                                                if self.touched is not None and self.touched._has_data():
                                                    return True

                                                if self.unreachable is not None and self.unreachable._has_data():
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts']['meta_info']


                                        class RouteCounts(object):
                                            """
                                            Distinct prefix counts
                                            
                                            .. attribute:: added
                                            
                                            	Number of prefixes added during calculation
                                            	**type**\:  :py:class:`Added <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Added>`
                                            
                                            .. attribute:: deleted
                                            
                                            	Number of prefixes deleted during calculation
                                            	**type**\:  :py:class:`Deleted <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Deleted>`
                                            
                                            .. attribute:: modified
                                            
                                            	Number of prefixes modified, i.e. a first hop and/or metric change
                                            	**type**\:  :py:class:`Modified <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Modified>`
                                            
                                            .. attribute:: reachable
                                            
                                            	Number of reachable prefixes in the database
                                            	**type**\:  :py:class:`Reachable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Reachable>`
                                            
                                            .. attribute:: touched
                                            
                                            	Number of prefixes considered whilst updating the routing table
                                            	**type**\:  :py:class:`Touched <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Touched>`
                                            
                                            .. attribute:: unreachable
                                            
                                            	Number of unreachable prefixes in the database
                                            	**type**\:  :py:class:`Unreachable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Unreachable>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.added = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Added()
                                                self.added.parent = self
                                                self.deleted = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Deleted()
                                                self.deleted.parent = self
                                                self.modified = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Modified()
                                                self.modified.parent = self
                                                self.reachable = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Reachable()
                                                self.reachable.parent = self
                                                self.touched = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Touched()
                                                self.touched.parent = self
                                                self.unreachable = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Unreachable()
                                                self.unreachable.parent = self


                                            class Unreachable(object):
                                                """
                                                Number of unreachable prefixes in the database
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.critical = None
                                                    self.high = None
                                                    self.low = None
                                                    self.medium = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:unreachable'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.critical is not None:
                                                        return True

                                                    if self.high is not None:
                                                        return True

                                                    if self.low is not None:
                                                        return True

                                                    if self.medium is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Unreachable']['meta_info']


                                            class Reachable(object):
                                                """
                                                Number of reachable prefixes in the database
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.critical = None
                                                    self.high = None
                                                    self.low = None
                                                    self.medium = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:reachable'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.critical is not None:
                                                        return True

                                                    if self.high is not None:
                                                        return True

                                                    if self.low is not None:
                                                        return True

                                                    if self.medium is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Reachable']['meta_info']


                                            class Added(object):
                                                """
                                                Number of prefixes added during calculation
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.critical = None
                                                    self.high = None
                                                    self.low = None
                                                    self.medium = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:added'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.critical is not None:
                                                        return True

                                                    if self.high is not None:
                                                        return True

                                                    if self.low is not None:
                                                        return True

                                                    if self.medium is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Added']['meta_info']


                                            class Deleted(object):
                                                """
                                                Number of prefixes deleted during calculation
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.critical = None
                                                    self.high = None
                                                    self.low = None
                                                    self.medium = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:deleted'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.critical is not None:
                                                        return True

                                                    if self.high is not None:
                                                        return True

                                                    if self.low is not None:
                                                        return True

                                                    if self.medium is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Deleted']['meta_info']


                                            class Modified(object):
                                                """
                                                Number of prefixes modified, i.e. a first hop
                                                and/or metric change
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.critical = None
                                                    self.high = None
                                                    self.low = None
                                                    self.medium = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:modified'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.critical is not None:
                                                        return True

                                                    if self.high is not None:
                                                        return True

                                                    if self.low is not None:
                                                        return True

                                                    if self.medium is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Modified']['meta_info']


                                            class Touched(object):
                                                """
                                                Number of prefixes considered whilst updating
                                                the routing table
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.critical = None
                                                    self.high = None
                                                    self.low = None
                                                    self.medium = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:touched'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.critical is not None:
                                                        return True

                                                    if self.high is not None:
                                                        return True

                                                    if self.low is not None:
                                                        return True

                                                    if self.medium is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Touched']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:route-counts'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.added is not None and self.added._has_data():
                                                    return True

                                                if self.deleted is not None and self.deleted._has_data():
                                                    return True

                                                if self.modified is not None and self.modified._has_data():
                                                    return True

                                                if self.reachable is not None and self.reachable._has_data():
                                                    return True

                                                if self.touched is not None and self.touched._has_data():
                                                    return True

                                                if self.unreachable is not None and self.unreachable._has_data():
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts']['meta_info']


                                        class RibBatchCounts(object):
                                            """
                                            Number of RIB batches sent
                                            
                                            .. attribute:: critical
                                            
                                            	Critical priority
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: high
                                            
                                            	High priority
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: low
                                            
                                            	Low priority
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: medium
                                            
                                            	Medium priority
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.critical = None
                                                self.high = None
                                                self.low = None
                                                self.medium = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:rib-batch-counts'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.critical is not None:
                                                    return True

                                                if self.high is not None:
                                                    return True

                                                if self.low is not None:
                                                    return True

                                                if self.medium is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RibBatchCounts']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:route-update-statistics'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None and self.duration._has_data():
                                                return True

                                            if self.duration_breakdown is not None and self.duration_breakdown._has_data():
                                                return True

                                            if self.item_counts is not None and self.item_counts._has_data():
                                                return True

                                            if self.node_counts is not None and self.node_counts._has_data():
                                                return True

                                            if self.rib_batch_counts is not None and self.rib_batch_counts._has_data():
                                                return True

                                            if self.route_counts is not None and self.route_counts._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:log-entry'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.class_ is not None:
                                            return True

                                        if self.generic_data is not None and self.generic_data._has_data():
                                            return True

                                        if self.next_wait_interval is not None:
                                            return True

                                        if self.route_update_statistics is not None and self.route_update_statistics._has_data():
                                            return True

                                        if self.spt_calculation_statistics is not None and self.spt_calculation_statistics._has_data():
                                            return True

                                        if self.triggers is not None and self.triggers._has_data():
                                            return True

                                        if self.updated_lsp_count is not None:
                                            return True

                                        if self.wait_enforced is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:spf-log'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.log_entry is not None:
                                        for child_ref in self.log_entry:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog']['meta_info']


                            class TeTunnels(object):
                                """
                                TE tunnels table. Only available within
                                the IPv4 Unicast topology.
                                
                                .. attribute:: te_tunnel
                                
                                	A single TE tunnel advertized by IS\-IS
                                	**type**\: list of  :py:class:`TeTunnel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeTunnels.TeTunnel>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.te_tunnel = YList()
                                    self.te_tunnel.parent = self
                                    self.te_tunnel.name = 'te_tunnel'


                                class TeTunnel(object):
                                    """
                                    A single TE tunnel advertized by IS\-IS
                                    
                                    .. attribute:: interface_name
                                    
                                    	Interface name
                                    	**type**\:  str
                                    
                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                    
                                    .. attribute:: system_id
                                    
                                    	System ID
                                    	**type**\:  str
                                    
                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                    
                                    .. attribute:: te_bandwidth
                                    
                                    	Tunnel bandwidth
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: te_checkpoint_object_id
                                    
                                    	Tunnel checkpoint object ID
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: te_interface
                                    
                                    	Tunnel interface
                                    	**type**\:  str
                                    
                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                    
                                    .. attribute:: te_mode_type
                                    
                                    	Tunnel metric mode
                                    	**type**\:  :py:class:`IsisMetricModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisMetricModeEnum>`
                                    
                                    .. attribute:: te_next_hop_ip_address
                                    
                                    	Tunnel next\-hop IP address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: te_system_id
                                    
                                    	Destination system ID
                                    	**type**\:  str
                                    
                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                    
                                    .. attribute:: teigp_metric
                                    
                                    	Tunnel metric
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: teipv4aa_enabled
                                    
                                    	Indicates whether MPLS TE IPv4 autoroute announce is enabled
                                    	**type**\:  bool
                                    
                                    .. attribute:: teipv4fa_enabled
                                    
                                    	Indicates whether MPLS TE IPv4 forwarding adjacency is enabled
                                    	**type**\:  bool
                                    
                                    .. attribute:: teipv6aa_enabled
                                    
                                    	Indicates whether MPLS TE IPv6 autoroute announce is enabled
                                    	**type**\:  bool
                                    
                                    .. attribute:: teipv6fa_enabled
                                    
                                    	Indicates whether MPLS TE IPv6 forwarding adjacency is enabled
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.interface_name = None
                                        self.system_id = None
                                        self.te_bandwidth = None
                                        self.te_checkpoint_object_id = None
                                        self.te_interface = None
                                        self.te_mode_type = None
                                        self.te_next_hop_ip_address = None
                                        self.te_system_id = None
                                        self.teigp_metric = None
                                        self.teipv4aa_enabled = None
                                        self.teipv4fa_enabled = None
                                        self.teipv6aa_enabled = None
                                        self.teipv6fa_enabled = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:te-tunnel'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.interface_name is not None:
                                            return True

                                        if self.system_id is not None:
                                            return True

                                        if self.te_bandwidth is not None:
                                            return True

                                        if self.te_checkpoint_object_id is not None:
                                            return True

                                        if self.te_interface is not None:
                                            return True

                                        if self.te_mode_type is not None:
                                            return True

                                        if self.te_next_hop_ip_address is not None:
                                            return True

                                        if self.te_system_id is not None:
                                            return True

                                        if self.teigp_metric is not None:
                                            return True

                                        if self.teipv4aa_enabled is not None:
                                            return True

                                        if self.teipv4fa_enabled is not None:
                                            return True

                                        if self.teipv6aa_enabled is not None:
                                            return True

                                        if self.teipv6fa_enabled is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeTunnels.TeTunnel']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:te-tunnels'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.te_tunnel is not None:
                                        for child_ref in self.te_tunnel:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeTunnels']['meta_info']


                            class Ipv4LinkTopologies(object):
                                """
                                IPv4 IS Topology table
                                
                                .. attribute:: ipv4_link_topology
                                
                                	An IS in an IPv4 Link Topology
                                	**type**\: list of  :py:class:`Ipv4LinkTopology <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.ipv4_link_topology = YList()
                                    self.ipv4_link_topology.parent = self
                                    self.ipv4_link_topology.name = 'ipv4_link_topology'


                                class Ipv4LinkTopology(object):
                                    """
                                    An IS in an IPv4 Link Topology
                                    
                                    .. attribute:: system_id  <key>
                                    
                                    	System ID
                                    	**type**\:  str
                                    
                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                    
                                    .. attribute:: advertised_prefix_item_counts
                                    
                                    	Per\-priority counts of prefix items advertised by the IS
                                    	**type**\:  :py:class:`AdvertisedPrefixItemCounts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.AdvertisedPrefixItemCounts>`
                                    
                                    .. attribute:: is_attached
                                    
                                    	Is the IS attached?
                                    	**type**\:  bool
                                    
                                    .. attribute:: is_overloaded
                                    
                                    	Is the IS overloaded?
                                    	**type**\:  bool
                                    
                                    .. attribute:: is_participant
                                    
                                    	Does the IS participate in the topology?
                                    	**type**\:  bool
                                    
                                    .. attribute:: reachability_status
                                    
                                    	Is the IS reachable, and, if so, its status within the SPT
                                    	**type**\:  :py:class:`ReachabilityStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus>`
                                    
                                    .. attribute:: source_address
                                    
                                    	Source Address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.system_id = None
                                        self.advertised_prefix_item_counts = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.AdvertisedPrefixItemCounts()
                                        self.advertised_prefix_item_counts.parent = self
                                        self.is_attached = None
                                        self.is_overloaded = None
                                        self.is_participant = None
                                        self.reachability_status = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus()
                                        self.reachability_status.parent = self
                                        self.source_address = None


                                    class ReachabilityStatus(object):
                                        """
                                        Is the IS reachable, and, if so, its status
                                        within the SPT
                                        
                                        .. attribute:: reachable_details
                                        
                                        	Status of the IS within the SPT
                                        	**type**\:  :py:class:`ReachableDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails>`
                                        
                                        .. attribute:: reachable_status
                                        
                                        	ReachableStatus
                                        	**type**\:  :py:class:`IsisReachableEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisReachableEnum>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.reachable_details = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails()
                                            self.reachable_details.parent = self
                                            self.reachable_status = None


                                        class ReachableDetails(object):
                                            """
                                            Status of the IS within the SPT
                                            
                                            .. attribute:: children
                                            
                                            	Children of the IS within the SPT
                                            	**type**\: list of  :py:class:`Children <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Children>`
                                            
                                            .. attribute:: multicast_path
                                            
                                            	Multicast intact first hops towards the IS
                                            	**type**\: list of  :py:class:`MulticastPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath>`
                                            
                                            .. attribute:: multicast_root_distance
                                            
                                            	Distance to the IS
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: parent_
                                            
                                            	Parents of the IS within the SPT
                                            	**type**\: list of  :py:class:`Parent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Parent>`
                                            
                                            .. attribute:: paths
                                            
                                            	First hops towards the IS
                                            	**type**\: list of  :py:class:`Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Paths>`
                                            
                                            .. attribute:: root_distance
                                            
                                            	Distance to the IS
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.children = YList()
                                                self.children.parent = self
                                                self.children.name = 'children'
                                                self.multicast_path = YList()
                                                self.multicast_path.parent = self
                                                self.multicast_path.name = 'multicast_path'
                                                self.multicast_root_distance = None
                                                self.parent_ = YList()
                                                self.parent_.parent = self
                                                self.parent_.name = 'parent_'
                                                self.paths = YList()
                                                self.paths.parent = self
                                                self.paths.name = 'paths'
                                                self.root_distance = None


                                            class Paths(object):
                                                """
                                                First hops towards the IS
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: frr_backup
                                                
                                                	FRR backup for this path
                                                	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup>`
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tag
                                                
                                                	Tag associated with the path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.frr_backup = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup()
                                                    self.frr_backup.parent = self
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.segment_routing_sid_value = None
                                                    self.tag = None
                                                    self.weight = None


                                                class FrrBackup(object):
                                                    """
                                                    FRR backup for this path
                                                    
                                                    .. attribute:: egress_interface
                                                    
                                                    	Interface to send the packet out of
                                                    	**type**\:  str
                                                    
                                                    .. attribute:: is_downstream
                                                    
                                                    	Is the backup path via downstream node?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: is_epcfrr_lfa
                                                    
                                                    	Is the backup path via a TI\-LFA?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: is_lc_disjoint
                                                    
                                                    	Is the backup path line card disjoint with primary?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: is_node_protecting
                                                    
                                                    	Is the backup path node protecting?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: is_primary_path
                                                    
                                                    	Is the backup path an ECMP to the network?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: is_remote_lfa
                                                    
                                                    	Is the backup path via a Remote LFA?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: is_srlg_disjoint
                                                    
                                                    	Is the backup path SRLG disjoint with primary?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: neighbor_address
                                                    
                                                    	Next hop neighbor's forwarding address
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: neighbor_id
                                                    
                                                    	Next hop neighbor ID
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: neighbor_snpa
                                                    
                                                    	Next hop neighbor's SNPA
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: num_sid
                                                    
                                                    	Number of SIDs in TI\-LFA/rLFA
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: remote_lfa_router_id
                                                    
                                                    	Remote LFA Router ID
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: remote_lfa_router_pid
                                                    
                                                    	Remote LFA Router ID
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: remote_lfa_system_id
                                                    
                                                    	Remote LFA PQ Node's ID
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: remote_lfa_system_pid
                                                    
                                                    	Remote LFA PQ Node's ID
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: segment_routing_sid_value
                                                    
                                                    	Segment routing sid value received from first hop
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: segment_routing_sid_value_entry
                                                    
                                                    	Segment routing sid values for TI\-LFA/rLFA
                                                    	**type**\:  list of int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: total_backup_distance
                                                    
                                                    	Distance to the network via this backup path
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: weight
                                                    
                                                    	Weight configured on the interface
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2015-11-09'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.egress_interface = None
                                                        self.is_downstream = None
                                                        self.is_epcfrr_lfa = None
                                                        self.is_lc_disjoint = None
                                                        self.is_node_protecting = None
                                                        self.is_primary_path = None
                                                        self.is_remote_lfa = None
                                                        self.is_srlg_disjoint = None
                                                        self.neighbor_address = None
                                                        self.neighbor_id = None
                                                        self.neighbor_snpa = None
                                                        self.num_sid = None
                                                        self.remote_lfa_router_id = None
                                                        self.remote_lfa_router_pid = None
                                                        self.remote_lfa_system_id = None
                                                        self.remote_lfa_system_pid = None
                                                        self.segment_routing_sid_value = None
                                                        self.segment_routing_sid_value_entry = YLeafList()
                                                        self.segment_routing_sid_value_entry.parent = self
                                                        self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                        self.total_backup_distance = None
                                                        self.weight = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return False

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.egress_interface is not None:
                                                            return True

                                                        if self.is_downstream is not None:
                                                            return True

                                                        if self.is_epcfrr_lfa is not None:
                                                            return True

                                                        if self.is_lc_disjoint is not None:
                                                            return True

                                                        if self.is_node_protecting is not None:
                                                            return True

                                                        if self.is_primary_path is not None:
                                                            return True

                                                        if self.is_remote_lfa is not None:
                                                            return True

                                                        if self.is_srlg_disjoint is not None:
                                                            return True

                                                        if self.neighbor_address is not None:
                                                            return True

                                                        if self.neighbor_id is not None:
                                                            return True

                                                        if self.neighbor_snpa is not None:
                                                            return True

                                                        if self.num_sid is not None:
                                                            return True

                                                        if self.remote_lfa_router_id is not None:
                                                            return True

                                                        if self.remote_lfa_router_pid is not None:
                                                            return True

                                                        if self.remote_lfa_system_id is not None:
                                                            return True

                                                        if self.remote_lfa_system_pid is not None:
                                                            return True

                                                        if self.segment_routing_sid_value is not None:
                                                            return True

                                                        if self.segment_routing_sid_value_entry is not None:
                                                            for child in self.segment_routing_sid_value_entry:
                                                                if child is not None:
                                                                    return True

                                                        if self.total_backup_distance is not None:
                                                            return True

                                                        if self.weight is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:paths'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.frr_backup is not None and self.frr_backup._has_data():
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.tag is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Paths']['meta_info']


                                            class MulticastPath(object):
                                                """
                                                Multicast intact first hops towards the IS
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: frr_backup
                                                
                                                	FRR backup for this path
                                                	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup>`
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tag
                                                
                                                	Tag associated with the path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.frr_backup = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup()
                                                    self.frr_backup.parent = self
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.segment_routing_sid_value = None
                                                    self.tag = None
                                                    self.weight = None


                                                class FrrBackup(object):
                                                    """
                                                    FRR backup for this path
                                                    
                                                    .. attribute:: egress_interface
                                                    
                                                    	Interface to send the packet out of
                                                    	**type**\:  str
                                                    
                                                    .. attribute:: is_downstream
                                                    
                                                    	Is the backup path via downstream node?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: is_epcfrr_lfa
                                                    
                                                    	Is the backup path via a TI\-LFA?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: is_lc_disjoint
                                                    
                                                    	Is the backup path line card disjoint with primary?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: is_node_protecting
                                                    
                                                    	Is the backup path node protecting?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: is_primary_path
                                                    
                                                    	Is the backup path an ECMP to the network?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: is_remote_lfa
                                                    
                                                    	Is the backup path via a Remote LFA?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: is_srlg_disjoint
                                                    
                                                    	Is the backup path SRLG disjoint with primary?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: neighbor_address
                                                    
                                                    	Next hop neighbor's forwarding address
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: neighbor_id
                                                    
                                                    	Next hop neighbor ID
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: neighbor_snpa
                                                    
                                                    	Next hop neighbor's SNPA
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: num_sid
                                                    
                                                    	Number of SIDs in TI\-LFA/rLFA
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: remote_lfa_router_id
                                                    
                                                    	Remote LFA Router ID
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: remote_lfa_router_pid
                                                    
                                                    	Remote LFA Router ID
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: remote_lfa_system_id
                                                    
                                                    	Remote LFA PQ Node's ID
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: remote_lfa_system_pid
                                                    
                                                    	Remote LFA PQ Node's ID
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: segment_routing_sid_value
                                                    
                                                    	Segment routing sid value received from first hop
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: segment_routing_sid_value_entry
                                                    
                                                    	Segment routing sid values for TI\-LFA/rLFA
                                                    	**type**\:  list of int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: total_backup_distance
                                                    
                                                    	Distance to the network via this backup path
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: weight
                                                    
                                                    	Weight configured on the interface
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2015-11-09'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.egress_interface = None
                                                        self.is_downstream = None
                                                        self.is_epcfrr_lfa = None
                                                        self.is_lc_disjoint = None
                                                        self.is_node_protecting = None
                                                        self.is_primary_path = None
                                                        self.is_remote_lfa = None
                                                        self.is_srlg_disjoint = None
                                                        self.neighbor_address = None
                                                        self.neighbor_id = None
                                                        self.neighbor_snpa = None
                                                        self.num_sid = None
                                                        self.remote_lfa_router_id = None
                                                        self.remote_lfa_router_pid = None
                                                        self.remote_lfa_system_id = None
                                                        self.remote_lfa_system_pid = None
                                                        self.segment_routing_sid_value = None
                                                        self.segment_routing_sid_value_entry = YLeafList()
                                                        self.segment_routing_sid_value_entry.parent = self
                                                        self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                        self.total_backup_distance = None
                                                        self.weight = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return False

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.egress_interface is not None:
                                                            return True

                                                        if self.is_downstream is not None:
                                                            return True

                                                        if self.is_epcfrr_lfa is not None:
                                                            return True

                                                        if self.is_lc_disjoint is not None:
                                                            return True

                                                        if self.is_node_protecting is not None:
                                                            return True

                                                        if self.is_primary_path is not None:
                                                            return True

                                                        if self.is_remote_lfa is not None:
                                                            return True

                                                        if self.is_srlg_disjoint is not None:
                                                            return True

                                                        if self.neighbor_address is not None:
                                                            return True

                                                        if self.neighbor_id is not None:
                                                            return True

                                                        if self.neighbor_snpa is not None:
                                                            return True

                                                        if self.num_sid is not None:
                                                            return True

                                                        if self.remote_lfa_router_id is not None:
                                                            return True

                                                        if self.remote_lfa_router_pid is not None:
                                                            return True

                                                        if self.remote_lfa_system_id is not None:
                                                            return True

                                                        if self.remote_lfa_system_pid is not None:
                                                            return True

                                                        if self.segment_routing_sid_value is not None:
                                                            return True

                                                        if self.segment_routing_sid_value_entry is not None:
                                                            for child in self.segment_routing_sid_value_entry:
                                                                if child is not None:
                                                                    return True

                                                        if self.total_backup_distance is not None:
                                                            return True

                                                        if self.weight is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:multicast-path'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.frr_backup is not None and self.frr_backup._has_data():
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.tag is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath']['meta_info']


                                            class Parent(object):
                                                """
                                                Parents of the IS within the SPT
                                                
                                                .. attribute:: intermediate_pseudonode
                                                
                                                	Pseudonode between system and its neighbor
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.intermediate_pseudonode = None
                                                    self.neighbor_id = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:parent'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.intermediate_pseudonode is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Parent']['meta_info']


                                            class Children(object):
                                                """
                                                Children of the IS within the SPT
                                                
                                                .. attribute:: intermediate_pseudonode
                                                
                                                	Pseudonode between system and its neighbor
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.intermediate_pseudonode = None
                                                    self.neighbor_id = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:children'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.intermediate_pseudonode is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Children']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:reachable-details'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.children is not None:
                                                    for child_ref in self.children:
                                                        if child_ref._has_data():
                                                            return True

                                                if self.multicast_path is not None:
                                                    for child_ref in self.multicast_path:
                                                        if child_ref._has_data():
                                                            return True

                                                if self.multicast_root_distance is not None:
                                                    return True

                                                if self.parent_ is not None:
                                                    for child_ref in self.parent_:
                                                        if child_ref._has_data():
                                                            return True

                                                if self.paths is not None:
                                                    for child_ref in self.paths:
                                                        if child_ref._has_data():
                                                            return True

                                                if self.root_distance is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:reachability-status'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.reachable_details is not None and self.reachable_details._has_data():
                                                return True

                                            if self.reachable_status is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus']['meta_info']


                                    class AdvertisedPrefixItemCounts(object):
                                        """
                                        Per\-priority counts of prefix items advertised
                                        by the IS
                                        
                                        .. attribute:: critical
                                        
                                        	Critical priority
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: high
                                        
                                        	High priority
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: low
                                        
                                        	Low priority
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: medium
                                        
                                        	Medium priority
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.critical = None
                                            self.high = None
                                            self.low = None
                                            self.medium = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:advertised-prefix-item-counts'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.critical is not None:
                                                return True

                                            if self.high is not None:
                                                return True

                                            if self.low is not None:
                                                return True

                                            if self.medium is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.AdvertisedPrefixItemCounts']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.system_id is None:
                                            raise YPYModelError('Key property system_id is None')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ipv4-link-topology[Cisco-IOS-XR-clns-isis-oper:system-id = ' + str(self.system_id) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.system_id is not None:
                                            return True

                                        if self.advertised_prefix_item_counts is not None and self.advertised_prefix_item_counts._has_data():
                                            return True

                                        if self.is_attached is not None:
                                            return True

                                        if self.is_overloaded is not None:
                                            return True

                                        if self.is_participant is not None:
                                            return True

                                        if self.reachability_status is not None and self.reachability_status._has_data():
                                            return True

                                        if self.source_address is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ipv4-link-topologies'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.ipv4_link_topology is not None:
                                        for child_ref in self.ipv4_link_topology:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies']['meta_info']


                            class TopologySummary(object):
                                """
                                Summary information for a particular IS
                                Topology
                                
                                .. attribute:: pseudonode_node_count
                                
                                	Node Counts for Pseudonode nodes
                                	**type**\:  :py:class:`PseudonodeNodeCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TopologySummary.PseudonodeNodeCount>`
                                
                                .. attribute:: router_node_count
                                
                                	Node Counts for System nodes
                                	**type**\:  :py:class:`RouterNodeCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TopologySummary.RouterNodeCount>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.pseudonode_node_count = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TopologySummary.PseudonodeNodeCount()
                                    self.pseudonode_node_count.parent = self
                                    self.router_node_count = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TopologySummary.RouterNodeCount()
                                    self.router_node_count.parent = self


                                class RouterNodeCount(object):
                                    """
                                    Node Counts for System nodes
                                    
                                    .. attribute:: reachable_node_count
                                    
                                    	Number of nodes reachable in SPT
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: unreachable_node_count
                                    
                                    	Number of nodes unreachable in SPT
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: unreachable_participant_node_count
                                    
                                    	Number of participating nodes unreachable in SPT
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.reachable_node_count = None
                                        self.unreachable_node_count = None
                                        self.unreachable_participant_node_count = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:router-node-count'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.reachable_node_count is not None:
                                            return True

                                        if self.unreachable_node_count is not None:
                                            return True

                                        if self.unreachable_participant_node_count is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TopologySummary.RouterNodeCount']['meta_info']


                                class PseudonodeNodeCount(object):
                                    """
                                    Node Counts for Pseudonode nodes
                                    
                                    .. attribute:: reachable_node_count
                                    
                                    	Number of nodes reachable in SPT
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: unreachable_node_count
                                    
                                    	Number of nodes unreachable in SPT
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: unreachable_participant_node_count
                                    
                                    	Number of participating nodes unreachable in SPT
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.reachable_node_count = None
                                        self.unreachable_node_count = None
                                        self.unreachable_participant_node_count = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:pseudonode-node-count'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.reachable_node_count is not None:
                                            return True

                                        if self.unreachable_node_count is not None:
                                            return True

                                        if self.unreachable_participant_node_count is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TopologySummary.PseudonodeNodeCount']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:topology-summary'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.pseudonode_node_count is not None and self.pseudonode_node_count._has_data():
                                        return True

                                    if self.router_node_count is not None and self.router_node_count._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TopologySummary']['meta_info']


                            class Ipv6LinkTopologies(object):
                                """
                                IPv6 IS Topology table
                                
                                .. attribute:: ipv6_link_topology
                                
                                	An IS in an IPv6 Link Topology
                                	**type**\: list of  :py:class:`Ipv6LinkTopology <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.ipv6_link_topology = YList()
                                    self.ipv6_link_topology.parent = self
                                    self.ipv6_link_topology.name = 'ipv6_link_topology'


                                class Ipv6LinkTopology(object):
                                    """
                                    An IS in an IPv6 Link Topology
                                    
                                    .. attribute:: system_id  <key>
                                    
                                    	System ID
                                    	**type**\:  str
                                    
                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                    
                                    .. attribute:: advertised_prefix_item_counts
                                    
                                    	Per\-priority counts of prefix items advertised by the IS
                                    	**type**\:  :py:class:`AdvertisedPrefixItemCounts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.AdvertisedPrefixItemCounts>`
                                    
                                    .. attribute:: is_attached
                                    
                                    	Is the IS attached?
                                    	**type**\:  bool
                                    
                                    .. attribute:: is_overloaded
                                    
                                    	Is the IS overloaded?
                                    	**type**\:  bool
                                    
                                    .. attribute:: is_participant
                                    
                                    	Does the IS participate in the topology?
                                    	**type**\:  bool
                                    
                                    .. attribute:: reachability_status
                                    
                                    	Is the IS reachable, and, if so, its status within the SPT
                                    	**type**\:  :py:class:`ReachabilityStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus>`
                                    
                                    .. attribute:: source_address
                                    
                                    	Source Address
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.system_id = None
                                        self.advertised_prefix_item_counts = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.AdvertisedPrefixItemCounts()
                                        self.advertised_prefix_item_counts.parent = self
                                        self.is_attached = None
                                        self.is_overloaded = None
                                        self.is_participant = None
                                        self.reachability_status = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus()
                                        self.reachability_status.parent = self
                                        self.source_address = None


                                    class ReachabilityStatus(object):
                                        """
                                        Is the IS reachable, and, if so, its status
                                        within the SPT
                                        
                                        .. attribute:: reachable_details
                                        
                                        	Status of the IS within the SPT
                                        	**type**\:  :py:class:`ReachableDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails>`
                                        
                                        .. attribute:: reachable_status
                                        
                                        	ReachableStatus
                                        	**type**\:  :py:class:`IsisReachableEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisReachableEnum>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.reachable_details = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails()
                                            self.reachable_details.parent = self
                                            self.reachable_status = None


                                        class ReachableDetails(object):
                                            """
                                            Status of the IS within the SPT
                                            
                                            .. attribute:: children
                                            
                                            	Children of the IS within the SPT
                                            	**type**\: list of  :py:class:`Children <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Children>`
                                            
                                            .. attribute:: multicast_path
                                            
                                            	Multicast intact first hops towards the IS
                                            	**type**\: list of  :py:class:`MulticastPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath>`
                                            
                                            .. attribute:: multicast_root_distance
                                            
                                            	Distance to the IS
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: parent_
                                            
                                            	Parents of the IS within the SPT
                                            	**type**\: list of  :py:class:`Parent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Parent>`
                                            
                                            .. attribute:: paths
                                            
                                            	First hops towards the IS
                                            	**type**\: list of  :py:class:`Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Paths>`
                                            
                                            .. attribute:: root_distance
                                            
                                            	Distance to the IS
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.children = YList()
                                                self.children.parent = self
                                                self.children.name = 'children'
                                                self.multicast_path = YList()
                                                self.multicast_path.parent = self
                                                self.multicast_path.name = 'multicast_path'
                                                self.multicast_root_distance = None
                                                self.parent_ = YList()
                                                self.parent_.parent = self
                                                self.parent_.name = 'parent_'
                                                self.paths = YList()
                                                self.paths.parent = self
                                                self.paths.name = 'paths'
                                                self.root_distance = None


                                            class Paths(object):
                                                """
                                                First hops towards the IS
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: frr_backup
                                                
                                                	FRR backup for this path
                                                	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup>`
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tag
                                                
                                                	Tag associated with the path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.frr_backup = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup()
                                                    self.frr_backup.parent = self
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.segment_routing_sid_value = None
                                                    self.tag = None
                                                    self.weight = None


                                                class FrrBackup(object):
                                                    """
                                                    FRR backup for this path
                                                    
                                                    .. attribute:: egress_interface
                                                    
                                                    	Interface to send the packet out of
                                                    	**type**\:  str
                                                    
                                                    .. attribute:: is_downstream
                                                    
                                                    	Is the backup path via downstream node?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: is_epcfrr_lfa
                                                    
                                                    	Is the backup path via a TI\-LFA?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: is_lc_disjoint
                                                    
                                                    	Is the backup path line card disjoint with primary?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: is_node_protecting
                                                    
                                                    	Is the backup path node protecting?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: is_primary_path
                                                    
                                                    	Is the backup path an ECMP to the network?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: is_remote_lfa
                                                    
                                                    	Is the backup path via a Remote LFA?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: is_srlg_disjoint
                                                    
                                                    	Is the backup path SRLG disjoint with primary?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: neighbor_address
                                                    
                                                    	Next hop neighbor's forwarding address
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: neighbor_id
                                                    
                                                    	Next hop neighbor ID
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: neighbor_snpa
                                                    
                                                    	Next hop neighbor's SNPA
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: num_sid
                                                    
                                                    	Number of SIDs in TI\-LFA/rLFA
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: remote_lfa_router_id
                                                    
                                                    	Remote LFA Router ID
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: remote_lfa_router_pid
                                                    
                                                    	Remote LFA Router ID
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: remote_lfa_system_id
                                                    
                                                    	Remote LFA PQ Node's ID
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: remote_lfa_system_pid
                                                    
                                                    	Remote LFA PQ Node's ID
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: segment_routing_sid_value
                                                    
                                                    	Segment routing sid value received from first hop
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: segment_routing_sid_value_entry
                                                    
                                                    	Segment routing sid values for TI\-LFA/rLFA
                                                    	**type**\:  list of int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: total_backup_distance
                                                    
                                                    	Distance to the network via this backup path
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: weight
                                                    
                                                    	Weight configured on the interface
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2015-11-09'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.egress_interface = None
                                                        self.is_downstream = None
                                                        self.is_epcfrr_lfa = None
                                                        self.is_lc_disjoint = None
                                                        self.is_node_protecting = None
                                                        self.is_primary_path = None
                                                        self.is_remote_lfa = None
                                                        self.is_srlg_disjoint = None
                                                        self.neighbor_address = None
                                                        self.neighbor_id = None
                                                        self.neighbor_snpa = None
                                                        self.num_sid = None
                                                        self.remote_lfa_router_id = None
                                                        self.remote_lfa_router_pid = None
                                                        self.remote_lfa_system_id = None
                                                        self.remote_lfa_system_pid = None
                                                        self.segment_routing_sid_value = None
                                                        self.segment_routing_sid_value_entry = YLeafList()
                                                        self.segment_routing_sid_value_entry.parent = self
                                                        self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                        self.total_backup_distance = None
                                                        self.weight = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return False

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.egress_interface is not None:
                                                            return True

                                                        if self.is_downstream is not None:
                                                            return True

                                                        if self.is_epcfrr_lfa is not None:
                                                            return True

                                                        if self.is_lc_disjoint is not None:
                                                            return True

                                                        if self.is_node_protecting is not None:
                                                            return True

                                                        if self.is_primary_path is not None:
                                                            return True

                                                        if self.is_remote_lfa is not None:
                                                            return True

                                                        if self.is_srlg_disjoint is not None:
                                                            return True

                                                        if self.neighbor_address is not None:
                                                            return True

                                                        if self.neighbor_id is not None:
                                                            return True

                                                        if self.neighbor_snpa is not None:
                                                            return True

                                                        if self.num_sid is not None:
                                                            return True

                                                        if self.remote_lfa_router_id is not None:
                                                            return True

                                                        if self.remote_lfa_router_pid is not None:
                                                            return True

                                                        if self.remote_lfa_system_id is not None:
                                                            return True

                                                        if self.remote_lfa_system_pid is not None:
                                                            return True

                                                        if self.segment_routing_sid_value is not None:
                                                            return True

                                                        if self.segment_routing_sid_value_entry is not None:
                                                            for child in self.segment_routing_sid_value_entry:
                                                                if child is not None:
                                                                    return True

                                                        if self.total_backup_distance is not None:
                                                            return True

                                                        if self.weight is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:paths'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.frr_backup is not None and self.frr_backup._has_data():
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.tag is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Paths']['meta_info']


                                            class MulticastPath(object):
                                                """
                                                Multicast intact first hops towards the IS
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: frr_backup
                                                
                                                	FRR backup for this path
                                                	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup>`
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tag
                                                
                                                	Tag associated with the path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.frr_backup = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup()
                                                    self.frr_backup.parent = self
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.segment_routing_sid_value = None
                                                    self.tag = None
                                                    self.weight = None


                                                class FrrBackup(object):
                                                    """
                                                    FRR backup for this path
                                                    
                                                    .. attribute:: egress_interface
                                                    
                                                    	Interface to send the packet out of
                                                    	**type**\:  str
                                                    
                                                    .. attribute:: is_downstream
                                                    
                                                    	Is the backup path via downstream node?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: is_epcfrr_lfa
                                                    
                                                    	Is the backup path via a TI\-LFA?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: is_lc_disjoint
                                                    
                                                    	Is the backup path line card disjoint with primary?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: is_node_protecting
                                                    
                                                    	Is the backup path node protecting?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: is_primary_path
                                                    
                                                    	Is the backup path an ECMP to the network?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: is_remote_lfa
                                                    
                                                    	Is the backup path via a Remote LFA?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: is_srlg_disjoint
                                                    
                                                    	Is the backup path SRLG disjoint with primary?
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: neighbor_address
                                                    
                                                    	Next hop neighbor's forwarding address
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: neighbor_id
                                                    
                                                    	Next hop neighbor ID
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: neighbor_snpa
                                                    
                                                    	Next hop neighbor's SNPA
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: num_sid
                                                    
                                                    	Number of SIDs in TI\-LFA/rLFA
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: remote_lfa_router_id
                                                    
                                                    	Remote LFA Router ID
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: remote_lfa_router_pid
                                                    
                                                    	Remote LFA Router ID
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: remote_lfa_system_id
                                                    
                                                    	Remote LFA PQ Node's ID
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: remote_lfa_system_pid
                                                    
                                                    	Remote LFA PQ Node's ID
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: segment_routing_sid_value
                                                    
                                                    	Segment routing sid value received from first hop
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: segment_routing_sid_value_entry
                                                    
                                                    	Segment routing sid values for TI\-LFA/rLFA
                                                    	**type**\:  list of int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: total_backup_distance
                                                    
                                                    	Distance to the network via this backup path
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: weight
                                                    
                                                    	Weight configured on the interface
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2015-11-09'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.egress_interface = None
                                                        self.is_downstream = None
                                                        self.is_epcfrr_lfa = None
                                                        self.is_lc_disjoint = None
                                                        self.is_node_protecting = None
                                                        self.is_primary_path = None
                                                        self.is_remote_lfa = None
                                                        self.is_srlg_disjoint = None
                                                        self.neighbor_address = None
                                                        self.neighbor_id = None
                                                        self.neighbor_snpa = None
                                                        self.num_sid = None
                                                        self.remote_lfa_router_id = None
                                                        self.remote_lfa_router_pid = None
                                                        self.remote_lfa_system_id = None
                                                        self.remote_lfa_system_pid = None
                                                        self.segment_routing_sid_value = None
                                                        self.segment_routing_sid_value_entry = YLeafList()
                                                        self.segment_routing_sid_value_entry.parent = self
                                                        self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                        self.total_backup_distance = None
                                                        self.weight = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return False

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.egress_interface is not None:
                                                            return True

                                                        if self.is_downstream is not None:
                                                            return True

                                                        if self.is_epcfrr_lfa is not None:
                                                            return True

                                                        if self.is_lc_disjoint is not None:
                                                            return True

                                                        if self.is_node_protecting is not None:
                                                            return True

                                                        if self.is_primary_path is not None:
                                                            return True

                                                        if self.is_remote_lfa is not None:
                                                            return True

                                                        if self.is_srlg_disjoint is not None:
                                                            return True

                                                        if self.neighbor_address is not None:
                                                            return True

                                                        if self.neighbor_id is not None:
                                                            return True

                                                        if self.neighbor_snpa is not None:
                                                            return True

                                                        if self.num_sid is not None:
                                                            return True

                                                        if self.remote_lfa_router_id is not None:
                                                            return True

                                                        if self.remote_lfa_router_pid is not None:
                                                            return True

                                                        if self.remote_lfa_system_id is not None:
                                                            return True

                                                        if self.remote_lfa_system_pid is not None:
                                                            return True

                                                        if self.segment_routing_sid_value is not None:
                                                            return True

                                                        if self.segment_routing_sid_value_entry is not None:
                                                            for child in self.segment_routing_sid_value_entry:
                                                                if child is not None:
                                                                    return True

                                                        if self.total_backup_distance is not None:
                                                            return True

                                                        if self.weight is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:multicast-path'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.frr_backup is not None and self.frr_backup._has_data():
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.tag is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath']['meta_info']


                                            class Parent(object):
                                                """
                                                Parents of the IS within the SPT
                                                
                                                .. attribute:: intermediate_pseudonode
                                                
                                                	Pseudonode between system and its neighbor
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.intermediate_pseudonode = None
                                                    self.neighbor_id = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:parent'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.intermediate_pseudonode is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Parent']['meta_info']


                                            class Children(object):
                                                """
                                                Children of the IS within the SPT
                                                
                                                .. attribute:: intermediate_pseudonode
                                                
                                                	Pseudonode between system and its neighbor
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.intermediate_pseudonode = None
                                                    self.neighbor_id = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:children'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.intermediate_pseudonode is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Children']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:reachable-details'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.children is not None:
                                                    for child_ref in self.children:
                                                        if child_ref._has_data():
                                                            return True

                                                if self.multicast_path is not None:
                                                    for child_ref in self.multicast_path:
                                                        if child_ref._has_data():
                                                            return True

                                                if self.multicast_root_distance is not None:
                                                    return True

                                                if self.parent_ is not None:
                                                    for child_ref in self.parent_:
                                                        if child_ref._has_data():
                                                            return True

                                                if self.paths is not None:
                                                    for child_ref in self.paths:
                                                        if child_ref._has_data():
                                                            return True

                                                if self.root_distance is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:reachability-status'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.reachable_details is not None and self.reachable_details._has_data():
                                                return True

                                            if self.reachable_status is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus']['meta_info']


                                    class AdvertisedPrefixItemCounts(object):
                                        """
                                        Per\-priority counts of prefix items advertised
                                        by the IS
                                        
                                        .. attribute:: critical
                                        
                                        	Critical priority
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: high
                                        
                                        	High priority
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: low
                                        
                                        	Low priority
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: medium
                                        
                                        	Medium priority
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.critical = None
                                            self.high = None
                                            self.low = None
                                            self.medium = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:advertised-prefix-item-counts'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.critical is not None:
                                                return True

                                            if self.high is not None:
                                                return True

                                            if self.low is not None:
                                                return True

                                            if self.medium is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.AdvertisedPrefixItemCounts']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.system_id is None:
                                            raise YPYModelError('Key property system_id is None')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ipv6-link-topology[Cisco-IOS-XR-clns-isis-oper:system-id = ' + str(self.system_id) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.system_id is not None:
                                            return True

                                        if self.advertised_prefix_item_counts is not None and self.advertised_prefix_item_counts._has_data():
                                            return True

                                        if self.is_attached is not None:
                                            return True

                                        if self.is_overloaded is not None:
                                            return True

                                        if self.is_participant is not None:
                                            return True

                                        if self.reachability_status is not None and self.reachability_status._has_data():
                                            return True

                                        if self.source_address is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ipv6-link-topologies'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.ipv6_link_topology is not None:
                                        for child_ref in self.ipv6_link_topology:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.level is None:
                                    raise YPYModelError('Key property level is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:topology-level[Cisco-IOS-XR-clns-isis-oper:level = ' + str(self.level) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.level is not None:
                                    return True

                                if self.ipv4_link_topologies is not None and self.ipv4_link_topologies._has_data():
                                    return True

                                if self.ipv6_link_topologies is not None and self.ipv6_link_topologies._has_data():
                                    return True

                                if self.spf_log is not None and self.spf_log._has_data():
                                    return True

                                if self.te_adjacency_log is not None and self.te_adjacency_log._has_data():
                                    return True

                                if self.te_advertisements is not None and self.te_advertisements._has_data():
                                    return True

                                if self.te_tunnels is not None and self.te_tunnels._has_data():
                                    return True

                                if self.topology_summary is not None and self.topology_summary._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:topology-levels'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.topology_level is not None:
                                for child_ref in self.topology_level:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.TopologyLevels']['meta_info']


                    class Ipv6Routes(object):
                        """
                        IPv6 local route
                        
                        .. attribute:: ipv6_route
                        
                        	An IPv6 route known to IS\-IS
                        	**type**\: list of  :py:class:`Ipv6Route <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.ipv6_route = YList()
                            self.ipv6_route.parent = self
                            self.ipv6_route.name = 'ipv6_route'


                        class Ipv6Route(object):
                            """
                            An IPv6 route known to IS\-IS
                            
                            .. attribute:: connected_status
                            
                            	Status of IS\-IS directly connected routes to the prefix
                            	**type**\:  :py:class:`ConnectedStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.ConnectedStatus>`
                            
                            .. attribute:: native_status
                            
                            	Status of native IS\-IS routes to the prefix
                            	**type**\:  :py:class:`NativeStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus>`
                            
                            .. attribute:: per_level_advertising_detail
                            
                            	Per level details of how the local system advertises the prefix
                            	**type**\: list of  :py:class:`PerLevelAdvertisingDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail>`
                            
                            .. attribute:: prefix
                            
                            	Prefix
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: prefix_length
                            
                            	Prefix Length
                            	**type**\:  int
                            
                            	**range:** 0..128
                            
                            .. attribute:: redistributed_status
                            
                            	Status of other protocols' routes redistributed into IS\-IS
                            	**type**\:  :py:class:`RedistributedStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.connected_status = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.ConnectedStatus()
                                self.connected_status.parent = self
                                self.native_status = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus()
                                self.native_status.parent = self
                                self.per_level_advertising_detail = YList()
                                self.per_level_advertising_detail.parent = self
                                self.per_level_advertising_detail.name = 'per_level_advertising_detail'
                                self.prefix = None
                                self.prefix_length = None
                                self.redistributed_status = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus()
                                self.redistributed_status.parent = self


                            class ConnectedStatus(object):
                                """
                                Status of IS\-IS directly connected routes to the
                                prefix
                                
                                .. attribute:: connected_details
                                
                                	Details of the directly connected prefix
                                	**type**\:  :py:class:`ConnectedDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.ConnectedStatus.ConnectedDetails>`
                                
                                .. attribute:: is_valid
                                
                                	IsValid
                                	**type**\:  :py:class:`IsisValidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValidEnum>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.connected_details = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.ConnectedStatus.ConnectedDetails()
                                    self.connected_details.parent = self
                                    self.is_valid = None


                                class ConnectedDetails(object):
                                    """
                                    Details of the directly connected prefix
                                    
                                    .. attribute:: interface
                                    
                                    	Interfaces
                                    	**type**\:  list of str
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.interface = YLeafList()
                                        self.interface.parent = self
                                        self.interface.name = 'interface'

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:connected-details'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.interface is not None:
                                            for child in self.interface:
                                                if child is not None:
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.ConnectedStatus.ConnectedDetails']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:connected-status'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.connected_details is not None and self.connected_details._has_data():
                                        return True

                                    if self.is_valid is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.ConnectedStatus']['meta_info']


                            class RedistributedStatus(object):
                                """
                                Status of other protocols' routes redistributed
                                into IS\-IS
                                
                                .. attribute:: is_valid
                                
                                	IsValid
                                	**type**\:  :py:class:`IsisValidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValidEnum>`
                                
                                .. attribute:: redistribution_details
                                
                                	Per level details of the redistributed route
                                	**type**\:  :py:class:`RedistributionDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus.RedistributionDetails>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.is_valid = None
                                    self.redistribution_details = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus.RedistributionDetails()
                                    self.redistribution_details.parent = self


                                class RedistributionDetails(object):
                                    """
                                    Per level details of the redistributed route
                                    
                                    .. attribute:: isis_sh_route_redist_detail
                                    
                                    	isis sh route redist detail
                                    	**type**\: list of  :py:class:`IsisShRouteRedistDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.isis_sh_route_redist_detail = YList()
                                        self.isis_sh_route_redist_detail.parent = self
                                        self.isis_sh_route_redist_detail.name = 'isis_sh_route_redist_detail'


                                    class IsisShRouteRedistDetail(object):
                                        """
                                        isis sh route redist detail
                                        
                                        .. attribute:: level
                                        
                                        	Level into which the route is redistributed
                                        	**type**\:  :py:class:`IsisLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelEnum>`
                                        
                                        .. attribute:: owner
                                        
                                        	Protocol redistributing the route
                                        	**type**\:  :py:class:`Owner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.level = None
                                            self.owner = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner()
                                            self.owner.parent = self


                                        class Owner(object):
                                            """
                                            Protocol redistributing the route
                                            
                                            .. attribute:: application_name
                                            
                                            	Application Name
                                            	**type**\:  str
                                            
                                            .. attribute:: bgp_as_number
                                            
                                            	BGP Autonomous System number
                                            	**type**\:  str
                                            
                                            .. attribute:: eigrp_as_number
                                            
                                            	EIGRP Autonomous System number
                                            	**type**\:  str
                                            
                                            .. attribute:: isis_instance_id
                                            
                                            	IS\-IS instance identifier
                                            	**type**\:  str
                                            
                                            .. attribute:: ospf_process_id
                                            
                                            	OSPF process identifier
                                            	**type**\:  str
                                            
                                            .. attribute:: ospfv3_process_id
                                            
                                            	OSPFv3 process identifier
                                            	**type**\:  str
                                            
                                            .. attribute:: protocol
                                            
                                            	Protocol
                                            	**type**\:  :py:class:`IsisRedistProtoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisRedistProtoEnum>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.application_name = None
                                                self.bgp_as_number = None
                                                self.eigrp_as_number = None
                                                self.isis_instance_id = None
                                                self.ospf_process_id = None
                                                self.ospfv3_process_id = None
                                                self.protocol = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:owner'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.application_name is not None:
                                                    return True

                                                if self.bgp_as_number is not None:
                                                    return True

                                                if self.eigrp_as_number is not None:
                                                    return True

                                                if self.isis_instance_id is not None:
                                                    return True

                                                if self.ospf_process_id is not None:
                                                    return True

                                                if self.ospfv3_process_id is not None:
                                                    return True

                                                if self.protocol is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:isis-sh-route-redist-detail'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.level is not None:
                                                return True

                                            if self.owner is not None and self.owner._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:redistribution-details'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.isis_sh_route_redist_detail is not None:
                                            for child_ref in self.isis_sh_route_redist_detail:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus.RedistributionDetails']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:redistributed-status'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.is_valid is not None:
                                        return True

                                    if self.redistribution_details is not None and self.redistribution_details._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus']['meta_info']


                            class NativeStatus(object):
                                """
                                Status of native IS\-IS routes to the prefix
                                
                                .. attribute:: is_valid
                                
                                	IsValid
                                	**type**\:  :py:class:`IsisValidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValidEnum>`
                                
                                .. attribute:: native_details
                                
                                	Details of the native route
                                	**type**\:  :py:class:`NativeDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.is_valid = None
                                    self.native_details = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails()
                                    self.native_details.parent = self


                                class NativeDetails(object):
                                    """
                                    Details of the native route
                                    
                                    .. attribute:: backup
                                    
                                    	Backup paths to prefix
                                    	**type**\: list of  :py:class:`Backup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup>`
                                    
                                    .. attribute:: primary
                                    
                                    	Primary paths to prefix
                                    	**type**\:  :py:class:`Primary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary>`
                                    
                                    .. attribute:: priority
                                    
                                    	Relative importance of the prefix
                                    	**type**\:  :py:class:`IsisPrefixPriorityEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisPrefixPriorityEnum>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.backup = YList()
                                        self.backup.parent = self
                                        self.backup.name = 'backup'
                                        self.primary = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary()
                                        self.primary.parent = self
                                        self.priority = None


                                    class Primary(object):
                                        """
                                        Primary paths to prefix
                                        
                                        .. attribute:: administrative_distance
                                        
                                        	Administrative Distance
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: is_external_metric
                                        
                                        	Is the metric an external metric?
                                        	**type**\:  bool
                                        
                                        .. attribute:: metric
                                        
                                        	Distance to network
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: multicast_metric
                                        
                                        	Multicast\-intact distance to network
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: multicast_path
                                        
                                        	Multicast intact first hops toward the prefix
                                        	**type**\: list of  :py:class:`MulticastPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastPath>`
                                        
                                        .. attribute:: multicast_source
                                        
                                        	Multicast\-intact sources advertising the prefix
                                        	**type**\: list of  :py:class:`MulticastSource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastSource>`
                                        
                                        .. attribute:: origin
                                        
                                        	Origin of route
                                        	**type**\:  :py:class:`IsisPrefixOriginEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisPrefixOriginEnum>`
                                        
                                        .. attribute:: paths
                                        
                                        	First hops toward the prefix
                                        	**type**\: list of  :py:class:`Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Paths>`
                                        
                                        .. attribute:: source
                                        
                                        	Sources advertising the prefix
                                        	**type**\: list of  :py:class:`Source <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Source>`
                                        
                                        .. attribute:: srte_path
                                        
                                        	SR\-TE native first hops toward the prefix
                                        	**type**\: list of  :py:class:`SrtePath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.SrtePath>`
                                        
                                        .. attribute:: ucmp_next_hop
                                        
                                        	UCMP first hops toward the prefix
                                        	**type**\: list of  :py:class:`UcmpNextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.UcmpNextHop>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.administrative_distance = None
                                            self.is_external_metric = None
                                            self.metric = None
                                            self.multicast_metric = None
                                            self.multicast_path = YList()
                                            self.multicast_path.parent = self
                                            self.multicast_path.name = 'multicast_path'
                                            self.multicast_source = YList()
                                            self.multicast_source.parent = self
                                            self.multicast_source.name = 'multicast_source'
                                            self.origin = None
                                            self.paths = YList()
                                            self.paths.parent = self
                                            self.paths.name = 'paths'
                                            self.source = YList()
                                            self.source.parent = self
                                            self.source.name = 'source'
                                            self.srte_path = YList()
                                            self.srte_path.parent = self
                                            self.srte_path.name = 'srte_path'
                                            self.ucmp_next_hop = YList()
                                            self.ucmp_next_hop.parent = self
                                            self.ucmp_next_hop.name = 'ucmp_next_hop'


                                        class Paths(object):
                                            """
                                            First hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:paths'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Paths']['meta_info']


                                        class UcmpNextHop(object):
                                            """
                                            UCMP first hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: total_ucmp_distance
                                            
                                            	Distance to the network via this UCMP next hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.total_ucmp_distance = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ucmp-next-hop'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.total_ucmp_distance is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.UcmpNextHop']['meta_info']


                                        class MulticastPath(object):
                                            """
                                            Multicast intact first hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:multicast-path'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastPath']['meta_info']


                                        class SrtePath(object):
                                            """
                                            SR\-TE native first hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:srte-path'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.SrtePath']['meta_info']


                                        class Source(object):
                                            """
                                            Sources advertising the prefix
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Source.NodalSid>`
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\:  list of int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.nodal_sid = YList()
                                                self.nodal_sid.parent = self
                                                self.nodal_sid.name = 'nodal_sid'
                                                self.source_address = None
                                                self.source_lsp_id = None
                                                self.tags = YLeafList()
                                                self.tags.parent = self
                                                self.tags.name = 'tags'


                                            class NodalSid(object):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.eflag = None
                                                    self.lflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.rflag = None
                                                    self.sid_value = None
                                                    self.vflag = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:nodal-sid'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.eflag is not None:
                                                        return True

                                                    if self.lflag is not None:
                                                        return True

                                                    if self.nflag is not None:
                                                        return True

                                                    if self.pflag is not None:
                                                        return True

                                                    if self.rflag is not None:
                                                        return True

                                                    if self.sid_value is not None:
                                                        return True

                                                    if self.vflag is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Source.NodalSid']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:source'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.nodal_sid is not None:
                                                    for child_ref in self.nodal_sid:
                                                        if child_ref._has_data():
                                                            return True

                                                if self.source_address is not None:
                                                    return True

                                                if self.source_lsp_id is not None:
                                                    return True

                                                if self.tags is not None:
                                                    for child in self.tags:
                                                        if child is not None:
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Source']['meta_info']


                                        class MulticastSource(object):
                                            """
                                            Multicast\-intact sources advertising the prefix
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastSource.NodalSid>`
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\:  list of int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.nodal_sid = YList()
                                                self.nodal_sid.parent = self
                                                self.nodal_sid.name = 'nodal_sid'
                                                self.source_address = None
                                                self.source_lsp_id = None
                                                self.tags = YLeafList()
                                                self.tags.parent = self
                                                self.tags.name = 'tags'


                                            class NodalSid(object):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.eflag = None
                                                    self.lflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.rflag = None
                                                    self.sid_value = None
                                                    self.vflag = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:nodal-sid'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.eflag is not None:
                                                        return True

                                                    if self.lflag is not None:
                                                        return True

                                                    if self.nflag is not None:
                                                        return True

                                                    if self.pflag is not None:
                                                        return True

                                                    if self.rflag is not None:
                                                        return True

                                                    if self.sid_value is not None:
                                                        return True

                                                    if self.vflag is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastSource.NodalSid']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:multicast-source'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.nodal_sid is not None:
                                                    for child_ref in self.nodal_sid:
                                                        if child_ref._has_data():
                                                            return True

                                                if self.source_address is not None:
                                                    return True

                                                if self.source_lsp_id is not None:
                                                    return True

                                                if self.tags is not None:
                                                    for child in self.tags:
                                                        if child is not None:
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastSource']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:primary'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.administrative_distance is not None:
                                                return True

                                            if self.is_external_metric is not None:
                                                return True

                                            if self.metric is not None:
                                                return True

                                            if self.multicast_metric is not None:
                                                return True

                                            if self.multicast_path is not None:
                                                for child_ref in self.multicast_path:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.multicast_source is not None:
                                                for child_ref in self.multicast_source:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.origin is not None:
                                                return True

                                            if self.paths is not None:
                                                for child_ref in self.paths:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.source is not None:
                                                for child_ref in self.source:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.srte_path is not None:
                                                for child_ref in self.srte_path:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.ucmp_next_hop is not None:
                                                for child_ref in self.ucmp_next_hop:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary']['meta_info']


                                    class Backup(object):
                                        """
                                        Backup paths to prefix
                                        
                                        .. attribute:: administrative_distance
                                        
                                        	Administrative Distance
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: is_external_metric
                                        
                                        	Is the metric an external metric?
                                        	**type**\:  bool
                                        
                                        .. attribute:: metric
                                        
                                        	Distance to network
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: multicast_metric
                                        
                                        	Multicast\-intact distance to network
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: multicast_path
                                        
                                        	Multicast intact first hops toward the prefix
                                        	**type**\: list of  :py:class:`MulticastPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastPath>`
                                        
                                        .. attribute:: multicast_source
                                        
                                        	Multicast\-intact sources advertising the prefix
                                        	**type**\: list of  :py:class:`MulticastSource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastSource>`
                                        
                                        .. attribute:: origin
                                        
                                        	Origin of route
                                        	**type**\:  :py:class:`IsisPrefixOriginEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisPrefixOriginEnum>`
                                        
                                        .. attribute:: paths
                                        
                                        	First hops toward the prefix
                                        	**type**\: list of  :py:class:`Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Paths>`
                                        
                                        .. attribute:: source
                                        
                                        	Sources advertising the prefix
                                        	**type**\: list of  :py:class:`Source <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Source>`
                                        
                                        .. attribute:: srte_path
                                        
                                        	SR\-TE native first hops toward the prefix
                                        	**type**\: list of  :py:class:`SrtePath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.SrtePath>`
                                        
                                        .. attribute:: ucmp_next_hop
                                        
                                        	UCMP first hops toward the prefix
                                        	**type**\: list of  :py:class:`UcmpNextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.UcmpNextHop>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.administrative_distance = None
                                            self.is_external_metric = None
                                            self.metric = None
                                            self.multicast_metric = None
                                            self.multicast_path = YList()
                                            self.multicast_path.parent = self
                                            self.multicast_path.name = 'multicast_path'
                                            self.multicast_source = YList()
                                            self.multicast_source.parent = self
                                            self.multicast_source.name = 'multicast_source'
                                            self.origin = None
                                            self.paths = YList()
                                            self.paths.parent = self
                                            self.paths.name = 'paths'
                                            self.source = YList()
                                            self.source.parent = self
                                            self.source.name = 'source'
                                            self.srte_path = YList()
                                            self.srte_path.parent = self
                                            self.srte_path.name = 'srte_path'
                                            self.ucmp_next_hop = YList()
                                            self.ucmp_next_hop.parent = self
                                            self.ucmp_next_hop.name = 'ucmp_next_hop'


                                        class Paths(object):
                                            """
                                            First hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:paths'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Paths']['meta_info']


                                        class UcmpNextHop(object):
                                            """
                                            UCMP first hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: total_ucmp_distance
                                            
                                            	Distance to the network via this UCMP next hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.total_ucmp_distance = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ucmp-next-hop'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.total_ucmp_distance is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.UcmpNextHop']['meta_info']


                                        class MulticastPath(object):
                                            """
                                            Multicast intact first hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:multicast-path'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastPath']['meta_info']


                                        class SrtePath(object):
                                            """
                                            SR\-TE native first hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:srte-path'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.SrtePath']['meta_info']


                                        class Source(object):
                                            """
                                            Sources advertising the prefix
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Source.NodalSid>`
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\:  list of int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.nodal_sid = YList()
                                                self.nodal_sid.parent = self
                                                self.nodal_sid.name = 'nodal_sid'
                                                self.source_address = None
                                                self.source_lsp_id = None
                                                self.tags = YLeafList()
                                                self.tags.parent = self
                                                self.tags.name = 'tags'


                                            class NodalSid(object):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.eflag = None
                                                    self.lflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.rflag = None
                                                    self.sid_value = None
                                                    self.vflag = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:nodal-sid'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.eflag is not None:
                                                        return True

                                                    if self.lflag is not None:
                                                        return True

                                                    if self.nflag is not None:
                                                        return True

                                                    if self.pflag is not None:
                                                        return True

                                                    if self.rflag is not None:
                                                        return True

                                                    if self.sid_value is not None:
                                                        return True

                                                    if self.vflag is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Source.NodalSid']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:source'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.nodal_sid is not None:
                                                    for child_ref in self.nodal_sid:
                                                        if child_ref._has_data():
                                                            return True

                                                if self.source_address is not None:
                                                    return True

                                                if self.source_lsp_id is not None:
                                                    return True

                                                if self.tags is not None:
                                                    for child in self.tags:
                                                        if child is not None:
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Source']['meta_info']


                                        class MulticastSource(object):
                                            """
                                            Multicast\-intact sources advertising the prefix
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastSource.NodalSid>`
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\:  list of int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.nodal_sid = YList()
                                                self.nodal_sid.parent = self
                                                self.nodal_sid.name = 'nodal_sid'
                                                self.source_address = None
                                                self.source_lsp_id = None
                                                self.tags = YLeafList()
                                                self.tags.parent = self
                                                self.tags.name = 'tags'


                                            class NodalSid(object):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.eflag = None
                                                    self.lflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.rflag = None
                                                    self.sid_value = None
                                                    self.vflag = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:nodal-sid'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.eflag is not None:
                                                        return True

                                                    if self.lflag is not None:
                                                        return True

                                                    if self.nflag is not None:
                                                        return True

                                                    if self.pflag is not None:
                                                        return True

                                                    if self.rflag is not None:
                                                        return True

                                                    if self.sid_value is not None:
                                                        return True

                                                    if self.vflag is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastSource.NodalSid']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:multicast-source'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.nodal_sid is not None:
                                                    for child_ref in self.nodal_sid:
                                                        if child_ref._has_data():
                                                            return True

                                                if self.source_address is not None:
                                                    return True

                                                if self.source_lsp_id is not None:
                                                    return True

                                                if self.tags is not None:
                                                    for child in self.tags:
                                                        if child is not None:
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastSource']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:backup'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.administrative_distance is not None:
                                                return True

                                            if self.is_external_metric is not None:
                                                return True

                                            if self.metric is not None:
                                                return True

                                            if self.multicast_metric is not None:
                                                return True

                                            if self.multicast_path is not None:
                                                for child_ref in self.multicast_path:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.multicast_source is not None:
                                                for child_ref in self.multicast_source:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.origin is not None:
                                                return True

                                            if self.paths is not None:
                                                for child_ref in self.paths:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.source is not None:
                                                for child_ref in self.source:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.srte_path is not None:
                                                for child_ref in self.srte_path:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.ucmp_next_hop is not None:
                                                for child_ref in self.ucmp_next_hop:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:native-details'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.backup is not None:
                                            for child_ref in self.backup:
                                                if child_ref._has_data():
                                                    return True

                                        if self.primary is not None and self.primary._has_data():
                                            return True

                                        if self.priority is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:native-status'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.is_valid is not None:
                                        return True

                                    if self.native_details is not None and self.native_details._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus']['meta_info']


                            class PerLevelAdvertisingDetail(object):
                                """
                                Per level details of how the local system
                                advertises the prefix
                                
                                .. attribute:: advertising_origin
                                
                                	The origin of the advertisement
                                	**type**\:  :py:class:`IsisShRouteAdvOriginEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisShRouteAdvOriginEnum>`
                                
                                .. attribute:: is_external_metric
                                
                                	Is the metric an external metric?
                                	**type**\:  bool
                                
                                .. attribute:: is_external_reachability
                                
                                	Is the prefix external to the IS\-IS domain?
                                	**type**\:  bool
                                
                                .. attribute:: is_interarea
                                
                                	Is the up/down bit set?
                                	**type**\:  bool
                                
                                .. attribute:: is_propagated
                                
                                	Has the prefix been propagated from another level?
                                	**type**\:  bool
                                
                                .. attribute:: level
                                
                                	Level in which the prefix is advertised
                                	**type**\:  :py:class:`IsisLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelEnum>`
                                
                                .. attribute:: metric
                                
                                	Metric with which the prefix is advertised
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: nodal_sid
                                
                                	Nodal SIDs with the prefix item
                                	**type**\: list of  :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail.NodalSid>`
                                
                                .. attribute:: summarization_status
                                
                                	Status of summarization for the prefix
                                	**type**\:  :py:class:`SummarizationStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail.SummarizationStatus>`
                                
                                .. attribute:: tags
                                
                                	Tags associated with the prefix
                                	**type**\:  list of int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.advertising_origin = None
                                    self.is_external_metric = None
                                    self.is_external_reachability = None
                                    self.is_interarea = None
                                    self.is_propagated = None
                                    self.level = None
                                    self.metric = None
                                    self.nodal_sid = YList()
                                    self.nodal_sid.parent = self
                                    self.nodal_sid.name = 'nodal_sid'
                                    self.summarization_status = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail.SummarizationStatus()
                                    self.summarization_status.parent = self
                                    self.tags = YLeafList()
                                    self.tags.parent = self
                                    self.tags.name = 'tags'


                                class SummarizationStatus(object):
                                    """
                                    Status of summarization for the prefix
                                    
                                    .. attribute:: is_valid
                                    
                                    	IsValid
                                    	**type**\:  :py:class:`IsisValidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValidEnum>`
                                    
                                    .. attribute:: summary_prefix
                                    
                                    	Summarizing Prefix
                                    	**type**\:  :py:class:`SummaryPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.is_valid = None
                                        self.summary_prefix = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix()
                                        self.summary_prefix.parent = self


                                    class SummaryPrefix(object):
                                        """
                                        Summarizing Prefix
                                        
                                        .. attribute:: prefix
                                        
                                        	prefix
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: prefix_length
                                        
                                        	prefix length
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.prefix = None
                                            self.prefix_length = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:summary-prefix'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.prefix is not None:
                                                return True

                                            if self.prefix_length is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:summarization-status'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.is_valid is not None:
                                            return True

                                        if self.summary_prefix is not None and self.summary_prefix._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail.SummarizationStatus']['meta_info']


                                class NodalSid(object):
                                    """
                                    Nodal SIDs with the prefix item
                                    
                                    .. attribute:: eflag
                                    
                                    	eflag
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: lflag
                                    
                                    	lflag
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: nflag
                                    
                                    	nflag
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: pflag
                                    
                                    	pflag
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: rflag
                                    
                                    	rflag
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: sid_value
                                    
                                    	sid value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: vflag
                                    
                                    	vflag
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.eflag = None
                                        self.lflag = None
                                        self.nflag = None
                                        self.pflag = None
                                        self.rflag = None
                                        self.sid_value = None
                                        self.vflag = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:nodal-sid'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.eflag is not None:
                                            return True

                                        if self.lflag is not None:
                                            return True

                                        if self.nflag is not None:
                                            return True

                                        if self.pflag is not None:
                                            return True

                                        if self.rflag is not None:
                                            return True

                                        if self.sid_value is not None:
                                            return True

                                        if self.vflag is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail.NodalSid']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:per-level-advertising-detail'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.advertising_origin is not None:
                                        return True

                                    if self.is_external_metric is not None:
                                        return True

                                    if self.is_external_reachability is not None:
                                        return True

                                    if self.is_interarea is not None:
                                        return True

                                    if self.is_propagated is not None:
                                        return True

                                    if self.level is not None:
                                        return True

                                    if self.metric is not None:
                                        return True

                                    if self.nodal_sid is not None:
                                        for child_ref in self.nodal_sid:
                                            if child_ref._has_data():
                                                return True

                                    if self.summarization_status is not None and self.summarization_status._has_data():
                                        return True

                                    if self.tags is not None:
                                        for child in self.tags:
                                            if child is not None:
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ipv6-route'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.connected_status is not None and self.connected_status._has_data():
                                    return True

                                if self.native_status is not None and self.native_status._has_data():
                                    return True

                                if self.per_level_advertising_detail is not None:
                                    for child_ref in self.per_level_advertising_detail:
                                        if child_ref._has_data():
                                            return True

                                if self.prefix is not None:
                                    return True

                                if self.prefix_length is not None:
                                    return True

                                if self.redistributed_status is not None and self.redistributed_status._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ipv6-routes'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ipv6_route is not None:
                                for child_ref in self.ipv6_route:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6Routes']['meta_info']


                    class Ipv6FrrBackups(object):
                        """
                        IPv6 FRR table
                        
                        .. attribute:: ipv6frr_backup
                        
                        	FRR backup for an IPv6 network
                        	**type**\: list of  :py:class:`Ipv6FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.ipv6frr_backup = YList()
                            self.ipv6frr_backup.parent = self
                            self.ipv6frr_backup.name = 'ipv6frr_backup'


                        class Ipv6FrrBackup(object):
                            """
                            FRR backup for an IPv6 network
                            
                            .. attribute:: connected_status
                            
                            	Status of IS\-IS directly connected routes to the prefix
                            	**type**\:  :py:class:`ConnectedStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.ConnectedStatus>`
                            
                            .. attribute:: native_status
                            
                            	Status of native IS\-IS routes to the prefix
                            	**type**\:  :py:class:`NativeStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus>`
                            
                            .. attribute:: per_level_advertising_detail
                            
                            	Per level details of how the local system advertises the prefix
                            	**type**\: list of  :py:class:`PerLevelAdvertisingDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail>`
                            
                            .. attribute:: prefix
                            
                            	Prefix
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: prefix_length
                            
                            	Prefix Length
                            	**type**\:  int
                            
                            	**range:** 0..128
                            
                            .. attribute:: redistributed_status
                            
                            	Status of other protocols' routes redistributed into IS\-IS
                            	**type**\:  :py:class:`RedistributedStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.connected_status = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.ConnectedStatus()
                                self.connected_status.parent = self
                                self.native_status = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus()
                                self.native_status.parent = self
                                self.per_level_advertising_detail = YList()
                                self.per_level_advertising_detail.parent = self
                                self.per_level_advertising_detail.name = 'per_level_advertising_detail'
                                self.prefix = None
                                self.prefix_length = None
                                self.redistributed_status = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus()
                                self.redistributed_status.parent = self


                            class ConnectedStatus(object):
                                """
                                Status of IS\-IS directly connected routes to the
                                prefix
                                
                                .. attribute:: connected_details
                                
                                	Details of the directly connected prefix
                                	**type**\:  :py:class:`ConnectedDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.ConnectedStatus.ConnectedDetails>`
                                
                                .. attribute:: is_valid
                                
                                	IsValid
                                	**type**\:  :py:class:`IsisValidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValidEnum>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.connected_details = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.ConnectedStatus.ConnectedDetails()
                                    self.connected_details.parent = self
                                    self.is_valid = None


                                class ConnectedDetails(object):
                                    """
                                    Details of the directly connected prefix
                                    
                                    .. attribute:: interface
                                    
                                    	Interfaces
                                    	**type**\:  list of str
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.interface = YLeafList()
                                        self.interface.parent = self
                                        self.interface.name = 'interface'

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:connected-details'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.interface is not None:
                                            for child in self.interface:
                                                if child is not None:
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.ConnectedStatus.ConnectedDetails']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:connected-status'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.connected_details is not None and self.connected_details._has_data():
                                        return True

                                    if self.is_valid is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.ConnectedStatus']['meta_info']


                            class RedistributedStatus(object):
                                """
                                Status of other protocols' routes redistributed
                                into IS\-IS
                                
                                .. attribute:: is_valid
                                
                                	IsValid
                                	**type**\:  :py:class:`IsisValidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValidEnum>`
                                
                                .. attribute:: redistribution_details
                                
                                	Per level details of the redistributed route
                                	**type**\:  :py:class:`RedistributionDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus.RedistributionDetails>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.is_valid = None
                                    self.redistribution_details = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus.RedistributionDetails()
                                    self.redistribution_details.parent = self


                                class RedistributionDetails(object):
                                    """
                                    Per level details of the redistributed route
                                    
                                    .. attribute:: isis_sh_route_redist_detail
                                    
                                    	isis sh route redist detail
                                    	**type**\: list of  :py:class:`IsisShRouteRedistDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.isis_sh_route_redist_detail = YList()
                                        self.isis_sh_route_redist_detail.parent = self
                                        self.isis_sh_route_redist_detail.name = 'isis_sh_route_redist_detail'


                                    class IsisShRouteRedistDetail(object):
                                        """
                                        isis sh route redist detail
                                        
                                        .. attribute:: level
                                        
                                        	Level into which the route is redistributed
                                        	**type**\:  :py:class:`IsisLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelEnum>`
                                        
                                        .. attribute:: owner
                                        
                                        	Protocol redistributing the route
                                        	**type**\:  :py:class:`Owner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.level = None
                                            self.owner = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner()
                                            self.owner.parent = self


                                        class Owner(object):
                                            """
                                            Protocol redistributing the route
                                            
                                            .. attribute:: application_name
                                            
                                            	Application Name
                                            	**type**\:  str
                                            
                                            .. attribute:: bgp_as_number
                                            
                                            	BGP Autonomous System number
                                            	**type**\:  str
                                            
                                            .. attribute:: eigrp_as_number
                                            
                                            	EIGRP Autonomous System number
                                            	**type**\:  str
                                            
                                            .. attribute:: isis_instance_id
                                            
                                            	IS\-IS instance identifier
                                            	**type**\:  str
                                            
                                            .. attribute:: ospf_process_id
                                            
                                            	OSPF process identifier
                                            	**type**\:  str
                                            
                                            .. attribute:: ospfv3_process_id
                                            
                                            	OSPFv3 process identifier
                                            	**type**\:  str
                                            
                                            .. attribute:: protocol
                                            
                                            	Protocol
                                            	**type**\:  :py:class:`IsisRedistProtoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisRedistProtoEnum>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.application_name = None
                                                self.bgp_as_number = None
                                                self.eigrp_as_number = None
                                                self.isis_instance_id = None
                                                self.ospf_process_id = None
                                                self.ospfv3_process_id = None
                                                self.protocol = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:owner'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.application_name is not None:
                                                    return True

                                                if self.bgp_as_number is not None:
                                                    return True

                                                if self.eigrp_as_number is not None:
                                                    return True

                                                if self.isis_instance_id is not None:
                                                    return True

                                                if self.ospf_process_id is not None:
                                                    return True

                                                if self.ospfv3_process_id is not None:
                                                    return True

                                                if self.protocol is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:isis-sh-route-redist-detail'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.level is not None:
                                                return True

                                            if self.owner is not None and self.owner._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:redistribution-details'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.isis_sh_route_redist_detail is not None:
                                            for child_ref in self.isis_sh_route_redist_detail:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus.RedistributionDetails']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:redistributed-status'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.is_valid is not None:
                                        return True

                                    if self.redistribution_details is not None and self.redistribution_details._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus']['meta_info']


                            class NativeStatus(object):
                                """
                                Status of native IS\-IS routes to the prefix
                                
                                .. attribute:: is_valid
                                
                                	IsValid
                                	**type**\:  :py:class:`IsisValidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValidEnum>`
                                
                                .. attribute:: native_details
                                
                                	Details of the native route
                                	**type**\:  :py:class:`NativeDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.is_valid = None
                                    self.native_details = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails()
                                    self.native_details.parent = self


                                class NativeDetails(object):
                                    """
                                    Details of the native route
                                    
                                    .. attribute:: backup
                                    
                                    	Backup paths to prefix
                                    	**type**\: list of  :py:class:`Backup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup>`
                                    
                                    .. attribute:: primary
                                    
                                    	Primary paths to prefix
                                    	**type**\:  :py:class:`Primary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary>`
                                    
                                    .. attribute:: priority
                                    
                                    	Relative importance of the prefix
                                    	**type**\:  :py:class:`IsisPrefixPriorityEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisPrefixPriorityEnum>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.backup = YList()
                                        self.backup.parent = self
                                        self.backup.name = 'backup'
                                        self.primary = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary()
                                        self.primary.parent = self
                                        self.priority = None


                                    class Primary(object):
                                        """
                                        Primary paths to prefix
                                        
                                        .. attribute:: administrative_distance
                                        
                                        	Administrative Distance
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: is_external_metric
                                        
                                        	Is the metric an external metric?
                                        	**type**\:  bool
                                        
                                        .. attribute:: metric
                                        
                                        	Distance to network
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: multicast_metric
                                        
                                        	Multicast\-intact distance to network
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: multicast_path
                                        
                                        	Multicast intact first hops toward the prefix
                                        	**type**\: list of  :py:class:`MulticastPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath>`
                                        
                                        .. attribute:: multicast_source
                                        
                                        	Multicast\-intact sources advertising the prefix
                                        	**type**\: list of  :py:class:`MulticastSource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource>`
                                        
                                        .. attribute:: origin
                                        
                                        	Origin of route
                                        	**type**\:  :py:class:`IsisPrefixOriginEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisPrefixOriginEnum>`
                                        
                                        .. attribute:: paths
                                        
                                        	First hops toward the prefix
                                        	**type**\: list of  :py:class:`Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Paths>`
                                        
                                        .. attribute:: source
                                        
                                        	Sources advertising the prefix
                                        	**type**\: list of  :py:class:`Source <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Source>`
                                        
                                        .. attribute:: srte_path
                                        
                                        	SR\-TE native first hops toward the prefix
                                        	**type**\: list of  :py:class:`SrtePath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath>`
                                        
                                        .. attribute:: ucmp_next_hop
                                        
                                        	UCMP first hops toward the prefix
                                        	**type**\: list of  :py:class:`UcmpNextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.administrative_distance = None
                                            self.is_external_metric = None
                                            self.metric = None
                                            self.multicast_metric = None
                                            self.multicast_path = YList()
                                            self.multicast_path.parent = self
                                            self.multicast_path.name = 'multicast_path'
                                            self.multicast_source = YList()
                                            self.multicast_source.parent = self
                                            self.multicast_source.name = 'multicast_source'
                                            self.origin = None
                                            self.paths = YList()
                                            self.paths.parent = self
                                            self.paths.name = 'paths'
                                            self.source = YList()
                                            self.source.parent = self
                                            self.source.name = 'source'
                                            self.srte_path = YList()
                                            self.srte_path.parent = self
                                            self.srte_path.name = 'srte_path'
                                            self.ucmp_next_hop = YList()
                                            self.ucmp_next_hop.parent = self
                                            self.ucmp_next_hop.name = 'ucmp_next_hop'


                                        class Paths(object):
                                            """
                                            First hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:paths'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Paths']['meta_info']


                                        class UcmpNextHop(object):
                                            """
                                            UCMP first hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: total_ucmp_distance
                                            
                                            	Distance to the network via this UCMP next hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.total_ucmp_distance = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ucmp-next-hop'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.total_ucmp_distance is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop']['meta_info']


                                        class MulticastPath(object):
                                            """
                                            Multicast intact first hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:multicast-path'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath']['meta_info']


                                        class SrtePath(object):
                                            """
                                            SR\-TE native first hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:srte-path'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath']['meta_info']


                                        class Source(object):
                                            """
                                            Sources advertising the prefix
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Source.NodalSid>`
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\:  list of int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.nodal_sid = YList()
                                                self.nodal_sid.parent = self
                                                self.nodal_sid.name = 'nodal_sid'
                                                self.source_address = None
                                                self.source_lsp_id = None
                                                self.tags = YLeafList()
                                                self.tags.parent = self
                                                self.tags.name = 'tags'


                                            class NodalSid(object):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.eflag = None
                                                    self.lflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.rflag = None
                                                    self.sid_value = None
                                                    self.vflag = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:nodal-sid'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.eflag is not None:
                                                        return True

                                                    if self.lflag is not None:
                                                        return True

                                                    if self.nflag is not None:
                                                        return True

                                                    if self.pflag is not None:
                                                        return True

                                                    if self.rflag is not None:
                                                        return True

                                                    if self.sid_value is not None:
                                                        return True

                                                    if self.vflag is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Source.NodalSid']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:source'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.nodal_sid is not None:
                                                    for child_ref in self.nodal_sid:
                                                        if child_ref._has_data():
                                                            return True

                                                if self.source_address is not None:
                                                    return True

                                                if self.source_lsp_id is not None:
                                                    return True

                                                if self.tags is not None:
                                                    for child in self.tags:
                                                        if child is not None:
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Source']['meta_info']


                                        class MulticastSource(object):
                                            """
                                            Multicast\-intact sources advertising the prefix
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource.NodalSid>`
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\:  list of int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.nodal_sid = YList()
                                                self.nodal_sid.parent = self
                                                self.nodal_sid.name = 'nodal_sid'
                                                self.source_address = None
                                                self.source_lsp_id = None
                                                self.tags = YLeafList()
                                                self.tags.parent = self
                                                self.tags.name = 'tags'


                                            class NodalSid(object):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.eflag = None
                                                    self.lflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.rflag = None
                                                    self.sid_value = None
                                                    self.vflag = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:nodal-sid'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.eflag is not None:
                                                        return True

                                                    if self.lflag is not None:
                                                        return True

                                                    if self.nflag is not None:
                                                        return True

                                                    if self.pflag is not None:
                                                        return True

                                                    if self.rflag is not None:
                                                        return True

                                                    if self.sid_value is not None:
                                                        return True

                                                    if self.vflag is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource.NodalSid']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:multicast-source'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.nodal_sid is not None:
                                                    for child_ref in self.nodal_sid:
                                                        if child_ref._has_data():
                                                            return True

                                                if self.source_address is not None:
                                                    return True

                                                if self.source_lsp_id is not None:
                                                    return True

                                                if self.tags is not None:
                                                    for child in self.tags:
                                                        if child is not None:
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:primary'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.administrative_distance is not None:
                                                return True

                                            if self.is_external_metric is not None:
                                                return True

                                            if self.metric is not None:
                                                return True

                                            if self.multicast_metric is not None:
                                                return True

                                            if self.multicast_path is not None:
                                                for child_ref in self.multicast_path:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.multicast_source is not None:
                                                for child_ref in self.multicast_source:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.origin is not None:
                                                return True

                                            if self.paths is not None:
                                                for child_ref in self.paths:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.source is not None:
                                                for child_ref in self.source:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.srte_path is not None:
                                                for child_ref in self.srte_path:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.ucmp_next_hop is not None:
                                                for child_ref in self.ucmp_next_hop:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary']['meta_info']


                                    class Backup(object):
                                        """
                                        Backup paths to prefix
                                        
                                        .. attribute:: administrative_distance
                                        
                                        	Administrative Distance
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: is_external_metric
                                        
                                        	Is the metric an external metric?
                                        	**type**\:  bool
                                        
                                        .. attribute:: metric
                                        
                                        	Distance to network
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: multicast_metric
                                        
                                        	Multicast\-intact distance to network
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: multicast_path
                                        
                                        	Multicast intact first hops toward the prefix
                                        	**type**\: list of  :py:class:`MulticastPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath>`
                                        
                                        .. attribute:: multicast_source
                                        
                                        	Multicast\-intact sources advertising the prefix
                                        	**type**\: list of  :py:class:`MulticastSource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource>`
                                        
                                        .. attribute:: origin
                                        
                                        	Origin of route
                                        	**type**\:  :py:class:`IsisPrefixOriginEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisPrefixOriginEnum>`
                                        
                                        .. attribute:: paths
                                        
                                        	First hops toward the prefix
                                        	**type**\: list of  :py:class:`Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Paths>`
                                        
                                        .. attribute:: source
                                        
                                        	Sources advertising the prefix
                                        	**type**\: list of  :py:class:`Source <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Source>`
                                        
                                        .. attribute:: srte_path
                                        
                                        	SR\-TE native first hops toward the prefix
                                        	**type**\: list of  :py:class:`SrtePath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath>`
                                        
                                        .. attribute:: ucmp_next_hop
                                        
                                        	UCMP first hops toward the prefix
                                        	**type**\: list of  :py:class:`UcmpNextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.administrative_distance = None
                                            self.is_external_metric = None
                                            self.metric = None
                                            self.multicast_metric = None
                                            self.multicast_path = YList()
                                            self.multicast_path.parent = self
                                            self.multicast_path.name = 'multicast_path'
                                            self.multicast_source = YList()
                                            self.multicast_source.parent = self
                                            self.multicast_source.name = 'multicast_source'
                                            self.origin = None
                                            self.paths = YList()
                                            self.paths.parent = self
                                            self.paths.name = 'paths'
                                            self.source = YList()
                                            self.source.parent = self
                                            self.source.name = 'source'
                                            self.srte_path = YList()
                                            self.srte_path.parent = self
                                            self.srte_path.name = 'srte_path'
                                            self.ucmp_next_hop = YList()
                                            self.ucmp_next_hop.parent = self
                                            self.ucmp_next_hop.name = 'ucmp_next_hop'


                                        class Paths(object):
                                            """
                                            First hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:paths'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Paths']['meta_info']


                                        class UcmpNextHop(object):
                                            """
                                            UCMP first hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: total_ucmp_distance
                                            
                                            	Distance to the network via this UCMP next hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.total_ucmp_distance = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ucmp-next-hop'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.total_ucmp_distance is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop']['meta_info']


                                        class MulticastPath(object):
                                            """
                                            Multicast intact first hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:multicast-path'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath']['meta_info']


                                        class SrtePath(object):
                                            """
                                            SR\-TE native first hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:srte-path'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath']['meta_info']


                                        class Source(object):
                                            """
                                            Sources advertising the prefix
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Source.NodalSid>`
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\:  list of int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.nodal_sid = YList()
                                                self.nodal_sid.parent = self
                                                self.nodal_sid.name = 'nodal_sid'
                                                self.source_address = None
                                                self.source_lsp_id = None
                                                self.tags = YLeafList()
                                                self.tags.parent = self
                                                self.tags.name = 'tags'


                                            class NodalSid(object):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.eflag = None
                                                    self.lflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.rflag = None
                                                    self.sid_value = None
                                                    self.vflag = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:nodal-sid'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.eflag is not None:
                                                        return True

                                                    if self.lflag is not None:
                                                        return True

                                                    if self.nflag is not None:
                                                        return True

                                                    if self.pflag is not None:
                                                        return True

                                                    if self.rflag is not None:
                                                        return True

                                                    if self.sid_value is not None:
                                                        return True

                                                    if self.vflag is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Source.NodalSid']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:source'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.nodal_sid is not None:
                                                    for child_ref in self.nodal_sid:
                                                        if child_ref._has_data():
                                                            return True

                                                if self.source_address is not None:
                                                    return True

                                                if self.source_lsp_id is not None:
                                                    return True

                                                if self.tags is not None:
                                                    for child in self.tags:
                                                        if child is not None:
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Source']['meta_info']


                                        class MulticastSource(object):
                                            """
                                            Multicast\-intact sources advertising the prefix
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource.NodalSid>`
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\:  list of int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.nodal_sid = YList()
                                                self.nodal_sid.parent = self
                                                self.nodal_sid.name = 'nodal_sid'
                                                self.source_address = None
                                                self.source_lsp_id = None
                                                self.tags = YLeafList()
                                                self.tags.parent = self
                                                self.tags.name = 'tags'


                                            class NodalSid(object):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.eflag = None
                                                    self.lflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.rflag = None
                                                    self.sid_value = None
                                                    self.vflag = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:nodal-sid'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.eflag is not None:
                                                        return True

                                                    if self.lflag is not None:
                                                        return True

                                                    if self.nflag is not None:
                                                        return True

                                                    if self.pflag is not None:
                                                        return True

                                                    if self.rflag is not None:
                                                        return True

                                                    if self.sid_value is not None:
                                                        return True

                                                    if self.vflag is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource.NodalSid']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:multicast-source'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.nodal_sid is not None:
                                                    for child_ref in self.nodal_sid:
                                                        if child_ref._has_data():
                                                            return True

                                                if self.source_address is not None:
                                                    return True

                                                if self.source_lsp_id is not None:
                                                    return True

                                                if self.tags is not None:
                                                    for child in self.tags:
                                                        if child is not None:
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:backup'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.administrative_distance is not None:
                                                return True

                                            if self.is_external_metric is not None:
                                                return True

                                            if self.metric is not None:
                                                return True

                                            if self.multicast_metric is not None:
                                                return True

                                            if self.multicast_path is not None:
                                                for child_ref in self.multicast_path:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.multicast_source is not None:
                                                for child_ref in self.multicast_source:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.origin is not None:
                                                return True

                                            if self.paths is not None:
                                                for child_ref in self.paths:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.source is not None:
                                                for child_ref in self.source:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.srte_path is not None:
                                                for child_ref in self.srte_path:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.ucmp_next_hop is not None:
                                                for child_ref in self.ucmp_next_hop:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:native-details'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.backup is not None:
                                            for child_ref in self.backup:
                                                if child_ref._has_data():
                                                    return True

                                        if self.primary is not None and self.primary._has_data():
                                            return True

                                        if self.priority is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:native-status'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.is_valid is not None:
                                        return True

                                    if self.native_details is not None and self.native_details._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus']['meta_info']


                            class PerLevelAdvertisingDetail(object):
                                """
                                Per level details of how the local system
                                advertises the prefix
                                
                                .. attribute:: advertising_origin
                                
                                	The origin of the advertisement
                                	**type**\:  :py:class:`IsisShRouteAdvOriginEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisShRouteAdvOriginEnum>`
                                
                                .. attribute:: is_external_metric
                                
                                	Is the metric an external metric?
                                	**type**\:  bool
                                
                                .. attribute:: is_external_reachability
                                
                                	Is the prefix external to the IS\-IS domain?
                                	**type**\:  bool
                                
                                .. attribute:: is_interarea
                                
                                	Is the up/down bit set?
                                	**type**\:  bool
                                
                                .. attribute:: is_propagated
                                
                                	Has the prefix been propagated from another level?
                                	**type**\:  bool
                                
                                .. attribute:: level
                                
                                	Level in which the prefix is advertised
                                	**type**\:  :py:class:`IsisLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelEnum>`
                                
                                .. attribute:: metric
                                
                                	Metric with which the prefix is advertised
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: nodal_sid
                                
                                	Nodal SIDs with the prefix item
                                	**type**\: list of  :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail.NodalSid>`
                                
                                .. attribute:: summarization_status
                                
                                	Status of summarization for the prefix
                                	**type**\:  :py:class:`SummarizationStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus>`
                                
                                .. attribute:: tags
                                
                                	Tags associated with the prefix
                                	**type**\:  list of int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.advertising_origin = None
                                    self.is_external_metric = None
                                    self.is_external_reachability = None
                                    self.is_interarea = None
                                    self.is_propagated = None
                                    self.level = None
                                    self.metric = None
                                    self.nodal_sid = YList()
                                    self.nodal_sid.parent = self
                                    self.nodal_sid.name = 'nodal_sid'
                                    self.summarization_status = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus()
                                    self.summarization_status.parent = self
                                    self.tags = YLeafList()
                                    self.tags.parent = self
                                    self.tags.name = 'tags'


                                class SummarizationStatus(object):
                                    """
                                    Status of summarization for the prefix
                                    
                                    .. attribute:: is_valid
                                    
                                    	IsValid
                                    	**type**\:  :py:class:`IsisValidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValidEnum>`
                                    
                                    .. attribute:: summary_prefix
                                    
                                    	Summarizing Prefix
                                    	**type**\:  :py:class:`SummaryPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.is_valid = None
                                        self.summary_prefix = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix()
                                        self.summary_prefix.parent = self


                                    class SummaryPrefix(object):
                                        """
                                        Summarizing Prefix
                                        
                                        .. attribute:: prefix
                                        
                                        	prefix
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: prefix_length
                                        
                                        	prefix length
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.prefix = None
                                            self.prefix_length = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:summary-prefix'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.prefix is not None:
                                                return True

                                            if self.prefix_length is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:summarization-status'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.is_valid is not None:
                                            return True

                                        if self.summary_prefix is not None and self.summary_prefix._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus']['meta_info']


                                class NodalSid(object):
                                    """
                                    Nodal SIDs with the prefix item
                                    
                                    .. attribute:: eflag
                                    
                                    	eflag
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: lflag
                                    
                                    	lflag
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: nflag
                                    
                                    	nflag
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: pflag
                                    
                                    	pflag
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: rflag
                                    
                                    	rflag
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: sid_value
                                    
                                    	sid value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: vflag
                                    
                                    	vflag
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.eflag = None
                                        self.lflag = None
                                        self.nflag = None
                                        self.pflag = None
                                        self.rflag = None
                                        self.sid_value = None
                                        self.vflag = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:nodal-sid'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.eflag is not None:
                                            return True

                                        if self.lflag is not None:
                                            return True

                                        if self.nflag is not None:
                                            return True

                                        if self.pflag is not None:
                                            return True

                                        if self.rflag is not None:
                                            return True

                                        if self.sid_value is not None:
                                            return True

                                        if self.vflag is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail.NodalSid']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:per-level-advertising-detail'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.advertising_origin is not None:
                                        return True

                                    if self.is_external_metric is not None:
                                        return True

                                    if self.is_external_reachability is not None:
                                        return True

                                    if self.is_interarea is not None:
                                        return True

                                    if self.is_propagated is not None:
                                        return True

                                    if self.level is not None:
                                        return True

                                    if self.metric is not None:
                                        return True

                                    if self.nodal_sid is not None:
                                        for child_ref in self.nodal_sid:
                                            if child_ref._has_data():
                                                return True

                                    if self.summarization_status is not None and self.summarization_status._has_data():
                                        return True

                                    if self.tags is not None:
                                        for child in self.tags:
                                            if child is not None:
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ipv6frr-backup'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.connected_status is not None and self.connected_status._has_data():
                                    return True

                                if self.native_status is not None and self.native_status._has_data():
                                    return True

                                if self.per_level_advertising_detail is not None:
                                    for child_ref in self.per_level_advertising_detail:
                                        if child_ref._has_data():
                                            return True

                                if self.prefix is not None:
                                    return True

                                if self.prefix_length is not None:
                                    return True

                                if self.redistributed_status is not None and self.redistributed_status._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ipv6frr-backups'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ipv6frr_backup is not None:
                                for child_ref in self.ipv6frr_backup:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups']['meta_info']


                    class Ipv4FrrBackups(object):
                        """
                        IPv4 FRR table
                        
                        .. attribute:: ipv4frr_backup
                        
                        	FRR backup for an IPv4 network
                        	**type**\: list of  :py:class:`Ipv4FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.ipv4frr_backup = YList()
                            self.ipv4frr_backup.parent = self
                            self.ipv4frr_backup.name = 'ipv4frr_backup'


                        class Ipv4FrrBackup(object):
                            """
                            FRR backup for an IPv4 network
                            
                            .. attribute:: connected_status
                            
                            	Status of IS\-IS directly connected routes to the prefix
                            	**type**\:  :py:class:`ConnectedStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.ConnectedStatus>`
                            
                            .. attribute:: native_status
                            
                            	Status of native IS\-IS routes to the prefix
                            	**type**\:  :py:class:`NativeStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus>`
                            
                            .. attribute:: per_level_advertising_detail
                            
                            	Per level details of how the local system advertises the prefix
                            	**type**\: list of  :py:class:`PerLevelAdvertisingDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail>`
                            
                            .. attribute:: prefix
                            
                            	Prefix
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: prefix_length
                            
                            	Prefix Length
                            	**type**\:  int
                            
                            	**range:** 0..32
                            
                            .. attribute:: redistributed_status
                            
                            	Status of other protocols' routes redistributed into IS\-IS
                            	**type**\:  :py:class:`RedistributedStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.connected_status = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.ConnectedStatus()
                                self.connected_status.parent = self
                                self.native_status = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus()
                                self.native_status.parent = self
                                self.per_level_advertising_detail = YList()
                                self.per_level_advertising_detail.parent = self
                                self.per_level_advertising_detail.name = 'per_level_advertising_detail'
                                self.prefix = None
                                self.prefix_length = None
                                self.redistributed_status = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus()
                                self.redistributed_status.parent = self


                            class ConnectedStatus(object):
                                """
                                Status of IS\-IS directly connected routes to the
                                prefix
                                
                                .. attribute:: connected_details
                                
                                	Details of the directly connected prefix
                                	**type**\:  :py:class:`ConnectedDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.ConnectedStatus.ConnectedDetails>`
                                
                                .. attribute:: is_valid
                                
                                	IsValid
                                	**type**\:  :py:class:`IsisValidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValidEnum>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.connected_details = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.ConnectedStatus.ConnectedDetails()
                                    self.connected_details.parent = self
                                    self.is_valid = None


                                class ConnectedDetails(object):
                                    """
                                    Details of the directly connected prefix
                                    
                                    .. attribute:: interface
                                    
                                    	Interfaces
                                    	**type**\:  list of str
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.interface = YLeafList()
                                        self.interface.parent = self
                                        self.interface.name = 'interface'

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:connected-details'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.interface is not None:
                                            for child in self.interface:
                                                if child is not None:
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.ConnectedStatus.ConnectedDetails']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:connected-status'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.connected_details is not None and self.connected_details._has_data():
                                        return True

                                    if self.is_valid is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.ConnectedStatus']['meta_info']


                            class RedistributedStatus(object):
                                """
                                Status of other protocols' routes redistributed
                                into IS\-IS
                                
                                .. attribute:: is_valid
                                
                                	IsValid
                                	**type**\:  :py:class:`IsisValidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValidEnum>`
                                
                                .. attribute:: redistribution_details
                                
                                	Per level details of the redistributed route
                                	**type**\:  :py:class:`RedistributionDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus.RedistributionDetails>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.is_valid = None
                                    self.redistribution_details = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus.RedistributionDetails()
                                    self.redistribution_details.parent = self


                                class RedistributionDetails(object):
                                    """
                                    Per level details of the redistributed route
                                    
                                    .. attribute:: isis_sh_route_redist_detail
                                    
                                    	isis sh route redist detail
                                    	**type**\: list of  :py:class:`IsisShRouteRedistDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.isis_sh_route_redist_detail = YList()
                                        self.isis_sh_route_redist_detail.parent = self
                                        self.isis_sh_route_redist_detail.name = 'isis_sh_route_redist_detail'


                                    class IsisShRouteRedistDetail(object):
                                        """
                                        isis sh route redist detail
                                        
                                        .. attribute:: level
                                        
                                        	Level into which the route is redistributed
                                        	**type**\:  :py:class:`IsisLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelEnum>`
                                        
                                        .. attribute:: owner
                                        
                                        	Protocol redistributing the route
                                        	**type**\:  :py:class:`Owner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.level = None
                                            self.owner = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner()
                                            self.owner.parent = self


                                        class Owner(object):
                                            """
                                            Protocol redistributing the route
                                            
                                            .. attribute:: application_name
                                            
                                            	Application Name
                                            	**type**\:  str
                                            
                                            .. attribute:: bgp_as_number
                                            
                                            	BGP Autonomous System number
                                            	**type**\:  str
                                            
                                            .. attribute:: eigrp_as_number
                                            
                                            	EIGRP Autonomous System number
                                            	**type**\:  str
                                            
                                            .. attribute:: isis_instance_id
                                            
                                            	IS\-IS instance identifier
                                            	**type**\:  str
                                            
                                            .. attribute:: ospf_process_id
                                            
                                            	OSPF process identifier
                                            	**type**\:  str
                                            
                                            .. attribute:: ospfv3_process_id
                                            
                                            	OSPFv3 process identifier
                                            	**type**\:  str
                                            
                                            .. attribute:: protocol
                                            
                                            	Protocol
                                            	**type**\:  :py:class:`IsisRedistProtoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisRedistProtoEnum>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.application_name = None
                                                self.bgp_as_number = None
                                                self.eigrp_as_number = None
                                                self.isis_instance_id = None
                                                self.ospf_process_id = None
                                                self.ospfv3_process_id = None
                                                self.protocol = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:owner'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.application_name is not None:
                                                    return True

                                                if self.bgp_as_number is not None:
                                                    return True

                                                if self.eigrp_as_number is not None:
                                                    return True

                                                if self.isis_instance_id is not None:
                                                    return True

                                                if self.ospf_process_id is not None:
                                                    return True

                                                if self.ospfv3_process_id is not None:
                                                    return True

                                                if self.protocol is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:isis-sh-route-redist-detail'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.level is not None:
                                                return True

                                            if self.owner is not None and self.owner._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:redistribution-details'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.isis_sh_route_redist_detail is not None:
                                            for child_ref in self.isis_sh_route_redist_detail:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus.RedistributionDetails']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:redistributed-status'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.is_valid is not None:
                                        return True

                                    if self.redistribution_details is not None and self.redistribution_details._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus']['meta_info']


                            class NativeStatus(object):
                                """
                                Status of native IS\-IS routes to the prefix
                                
                                .. attribute:: is_valid
                                
                                	IsValid
                                	**type**\:  :py:class:`IsisValidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValidEnum>`
                                
                                .. attribute:: native_details
                                
                                	Details of the native route
                                	**type**\:  :py:class:`NativeDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.is_valid = None
                                    self.native_details = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails()
                                    self.native_details.parent = self


                                class NativeDetails(object):
                                    """
                                    Details of the native route
                                    
                                    .. attribute:: backup
                                    
                                    	Backup paths to prefix
                                    	**type**\: list of  :py:class:`Backup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup>`
                                    
                                    .. attribute:: primary
                                    
                                    	Primary paths to prefix
                                    	**type**\:  :py:class:`Primary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary>`
                                    
                                    .. attribute:: priority
                                    
                                    	Relative importance of the prefix
                                    	**type**\:  :py:class:`IsisPrefixPriorityEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisPrefixPriorityEnum>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.backup = YList()
                                        self.backup.parent = self
                                        self.backup.name = 'backup'
                                        self.primary = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary()
                                        self.primary.parent = self
                                        self.priority = None


                                    class Primary(object):
                                        """
                                        Primary paths to prefix
                                        
                                        .. attribute:: administrative_distance
                                        
                                        	Administrative Distance
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: is_external_metric
                                        
                                        	Is the metric an external metric?
                                        	**type**\:  bool
                                        
                                        .. attribute:: metric
                                        
                                        	Distance to network
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: multicast_metric
                                        
                                        	Multicast\-intact distance to network
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: multicast_path
                                        
                                        	Multicast intact first hops toward the prefix
                                        	**type**\: list of  :py:class:`MulticastPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath>`
                                        
                                        .. attribute:: multicast_source
                                        
                                        	Multicast\-intact sources advertising the prefix
                                        	**type**\: list of  :py:class:`MulticastSource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource>`
                                        
                                        .. attribute:: origin
                                        
                                        	Origin of route
                                        	**type**\:  :py:class:`IsisPrefixOriginEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisPrefixOriginEnum>`
                                        
                                        .. attribute:: paths
                                        
                                        	First hops toward the prefix
                                        	**type**\: list of  :py:class:`Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Paths>`
                                        
                                        .. attribute:: source
                                        
                                        	Sources advertising the prefix
                                        	**type**\: list of  :py:class:`Source <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Source>`
                                        
                                        .. attribute:: srte_path
                                        
                                        	SR\-TE native first hops toward the prefix
                                        	**type**\: list of  :py:class:`SrtePath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath>`
                                        
                                        .. attribute:: ucmp_next_hop
                                        
                                        	UCMP first hops toward the prefix
                                        	**type**\: list of  :py:class:`UcmpNextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.administrative_distance = None
                                            self.is_external_metric = None
                                            self.metric = None
                                            self.multicast_metric = None
                                            self.multicast_path = YList()
                                            self.multicast_path.parent = self
                                            self.multicast_path.name = 'multicast_path'
                                            self.multicast_source = YList()
                                            self.multicast_source.parent = self
                                            self.multicast_source.name = 'multicast_source'
                                            self.origin = None
                                            self.paths = YList()
                                            self.paths.parent = self
                                            self.paths.name = 'paths'
                                            self.source = YList()
                                            self.source.parent = self
                                            self.source.name = 'source'
                                            self.srte_path = YList()
                                            self.srte_path.parent = self
                                            self.srte_path.name = 'srte_path'
                                            self.ucmp_next_hop = YList()
                                            self.ucmp_next_hop.parent = self
                                            self.ucmp_next_hop.name = 'ucmp_next_hop'


                                        class Paths(object):
                                            """
                                            First hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:paths'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Paths']['meta_info']


                                        class UcmpNextHop(object):
                                            """
                                            UCMP first hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: total_ucmp_distance
                                            
                                            	Distance to the network via this UCMP next hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.total_ucmp_distance = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ucmp-next-hop'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.total_ucmp_distance is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop']['meta_info']


                                        class MulticastPath(object):
                                            """
                                            Multicast intact first hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:multicast-path'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath']['meta_info']


                                        class SrtePath(object):
                                            """
                                            SR\-TE native first hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:srte-path'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath']['meta_info']


                                        class Source(object):
                                            """
                                            Sources advertising the prefix
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Source.NodalSid>`
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\:  list of int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.nodal_sid = YList()
                                                self.nodal_sid.parent = self
                                                self.nodal_sid.name = 'nodal_sid'
                                                self.source_address = None
                                                self.source_lsp_id = None
                                                self.tags = YLeafList()
                                                self.tags.parent = self
                                                self.tags.name = 'tags'


                                            class NodalSid(object):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.eflag = None
                                                    self.lflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.rflag = None
                                                    self.sid_value = None
                                                    self.vflag = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:nodal-sid'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.eflag is not None:
                                                        return True

                                                    if self.lflag is not None:
                                                        return True

                                                    if self.nflag is not None:
                                                        return True

                                                    if self.pflag is not None:
                                                        return True

                                                    if self.rflag is not None:
                                                        return True

                                                    if self.sid_value is not None:
                                                        return True

                                                    if self.vflag is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Source.NodalSid']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:source'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.nodal_sid is not None:
                                                    for child_ref in self.nodal_sid:
                                                        if child_ref._has_data():
                                                            return True

                                                if self.source_address is not None:
                                                    return True

                                                if self.source_lsp_id is not None:
                                                    return True

                                                if self.tags is not None:
                                                    for child in self.tags:
                                                        if child is not None:
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Source']['meta_info']


                                        class MulticastSource(object):
                                            """
                                            Multicast\-intact sources advertising the prefix
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource.NodalSid>`
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\:  list of int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.nodal_sid = YList()
                                                self.nodal_sid.parent = self
                                                self.nodal_sid.name = 'nodal_sid'
                                                self.source_address = None
                                                self.source_lsp_id = None
                                                self.tags = YLeafList()
                                                self.tags.parent = self
                                                self.tags.name = 'tags'


                                            class NodalSid(object):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.eflag = None
                                                    self.lflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.rflag = None
                                                    self.sid_value = None
                                                    self.vflag = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:nodal-sid'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.eflag is not None:
                                                        return True

                                                    if self.lflag is not None:
                                                        return True

                                                    if self.nflag is not None:
                                                        return True

                                                    if self.pflag is not None:
                                                        return True

                                                    if self.rflag is not None:
                                                        return True

                                                    if self.sid_value is not None:
                                                        return True

                                                    if self.vflag is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource.NodalSid']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:multicast-source'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.nodal_sid is not None:
                                                    for child_ref in self.nodal_sid:
                                                        if child_ref._has_data():
                                                            return True

                                                if self.source_address is not None:
                                                    return True

                                                if self.source_lsp_id is not None:
                                                    return True

                                                if self.tags is not None:
                                                    for child in self.tags:
                                                        if child is not None:
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:primary'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.administrative_distance is not None:
                                                return True

                                            if self.is_external_metric is not None:
                                                return True

                                            if self.metric is not None:
                                                return True

                                            if self.multicast_metric is not None:
                                                return True

                                            if self.multicast_path is not None:
                                                for child_ref in self.multicast_path:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.multicast_source is not None:
                                                for child_ref in self.multicast_source:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.origin is not None:
                                                return True

                                            if self.paths is not None:
                                                for child_ref in self.paths:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.source is not None:
                                                for child_ref in self.source:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.srte_path is not None:
                                                for child_ref in self.srte_path:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.ucmp_next_hop is not None:
                                                for child_ref in self.ucmp_next_hop:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary']['meta_info']


                                    class Backup(object):
                                        """
                                        Backup paths to prefix
                                        
                                        .. attribute:: administrative_distance
                                        
                                        	Administrative Distance
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: is_external_metric
                                        
                                        	Is the metric an external metric?
                                        	**type**\:  bool
                                        
                                        .. attribute:: metric
                                        
                                        	Distance to network
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: multicast_metric
                                        
                                        	Multicast\-intact distance to network
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: multicast_path
                                        
                                        	Multicast intact first hops toward the prefix
                                        	**type**\: list of  :py:class:`MulticastPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath>`
                                        
                                        .. attribute:: multicast_source
                                        
                                        	Multicast\-intact sources advertising the prefix
                                        	**type**\: list of  :py:class:`MulticastSource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource>`
                                        
                                        .. attribute:: origin
                                        
                                        	Origin of route
                                        	**type**\:  :py:class:`IsisPrefixOriginEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisPrefixOriginEnum>`
                                        
                                        .. attribute:: paths
                                        
                                        	First hops toward the prefix
                                        	**type**\: list of  :py:class:`Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Paths>`
                                        
                                        .. attribute:: source
                                        
                                        	Sources advertising the prefix
                                        	**type**\: list of  :py:class:`Source <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Source>`
                                        
                                        .. attribute:: srte_path
                                        
                                        	SR\-TE native first hops toward the prefix
                                        	**type**\: list of  :py:class:`SrtePath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath>`
                                        
                                        .. attribute:: ucmp_next_hop
                                        
                                        	UCMP first hops toward the prefix
                                        	**type**\: list of  :py:class:`UcmpNextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.administrative_distance = None
                                            self.is_external_metric = None
                                            self.metric = None
                                            self.multicast_metric = None
                                            self.multicast_path = YList()
                                            self.multicast_path.parent = self
                                            self.multicast_path.name = 'multicast_path'
                                            self.multicast_source = YList()
                                            self.multicast_source.parent = self
                                            self.multicast_source.name = 'multicast_source'
                                            self.origin = None
                                            self.paths = YList()
                                            self.paths.parent = self
                                            self.paths.name = 'paths'
                                            self.source = YList()
                                            self.source.parent = self
                                            self.source.name = 'source'
                                            self.srte_path = YList()
                                            self.srte_path.parent = self
                                            self.srte_path.name = 'srte_path'
                                            self.ucmp_next_hop = YList()
                                            self.ucmp_next_hop.parent = self
                                            self.ucmp_next_hop.name = 'ucmp_next_hop'


                                        class Paths(object):
                                            """
                                            First hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:paths'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Paths']['meta_info']


                                        class UcmpNextHop(object):
                                            """
                                            UCMP first hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: total_ucmp_distance
                                            
                                            	Distance to the network via this UCMP next hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.total_ucmp_distance = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ucmp-next-hop'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.total_ucmp_distance is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop']['meta_info']


                                        class MulticastPath(object):
                                            """
                                            Multicast intact first hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:multicast-path'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath']['meta_info']


                                        class SrtePath(object):
                                            """
                                            SR\-TE native first hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:srte-path'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath']['meta_info']


                                        class Source(object):
                                            """
                                            Sources advertising the prefix
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Source.NodalSid>`
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\:  list of int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.nodal_sid = YList()
                                                self.nodal_sid.parent = self
                                                self.nodal_sid.name = 'nodal_sid'
                                                self.source_address = None
                                                self.source_lsp_id = None
                                                self.tags = YLeafList()
                                                self.tags.parent = self
                                                self.tags.name = 'tags'


                                            class NodalSid(object):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.eflag = None
                                                    self.lflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.rflag = None
                                                    self.sid_value = None
                                                    self.vflag = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:nodal-sid'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.eflag is not None:
                                                        return True

                                                    if self.lflag is not None:
                                                        return True

                                                    if self.nflag is not None:
                                                        return True

                                                    if self.pflag is not None:
                                                        return True

                                                    if self.rflag is not None:
                                                        return True

                                                    if self.sid_value is not None:
                                                        return True

                                                    if self.vflag is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Source.NodalSid']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:source'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.nodal_sid is not None:
                                                    for child_ref in self.nodal_sid:
                                                        if child_ref._has_data():
                                                            return True

                                                if self.source_address is not None:
                                                    return True

                                                if self.source_lsp_id is not None:
                                                    return True

                                                if self.tags is not None:
                                                    for child in self.tags:
                                                        if child is not None:
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Source']['meta_info']


                                        class MulticastSource(object):
                                            """
                                            Multicast\-intact sources advertising the prefix
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource.NodalSid>`
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\:  list of int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.nodal_sid = YList()
                                                self.nodal_sid.parent = self
                                                self.nodal_sid.name = 'nodal_sid'
                                                self.source_address = None
                                                self.source_lsp_id = None
                                                self.tags = YLeafList()
                                                self.tags.parent = self
                                                self.tags.name = 'tags'


                                            class NodalSid(object):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.eflag = None
                                                    self.lflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.rflag = None
                                                    self.sid_value = None
                                                    self.vflag = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:nodal-sid'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.eflag is not None:
                                                        return True

                                                    if self.lflag is not None:
                                                        return True

                                                    if self.nflag is not None:
                                                        return True

                                                    if self.pflag is not None:
                                                        return True

                                                    if self.rflag is not None:
                                                        return True

                                                    if self.sid_value is not None:
                                                        return True

                                                    if self.vflag is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource.NodalSid']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:multicast-source'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.nodal_sid is not None:
                                                    for child_ref in self.nodal_sid:
                                                        if child_ref._has_data():
                                                            return True

                                                if self.source_address is not None:
                                                    return True

                                                if self.source_lsp_id is not None:
                                                    return True

                                                if self.tags is not None:
                                                    for child in self.tags:
                                                        if child is not None:
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:backup'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.administrative_distance is not None:
                                                return True

                                            if self.is_external_metric is not None:
                                                return True

                                            if self.metric is not None:
                                                return True

                                            if self.multicast_metric is not None:
                                                return True

                                            if self.multicast_path is not None:
                                                for child_ref in self.multicast_path:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.multicast_source is not None:
                                                for child_ref in self.multicast_source:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.origin is not None:
                                                return True

                                            if self.paths is not None:
                                                for child_ref in self.paths:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.source is not None:
                                                for child_ref in self.source:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.srte_path is not None:
                                                for child_ref in self.srte_path:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.ucmp_next_hop is not None:
                                                for child_ref in self.ucmp_next_hop:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:native-details'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.backup is not None:
                                            for child_ref in self.backup:
                                                if child_ref._has_data():
                                                    return True

                                        if self.primary is not None and self.primary._has_data():
                                            return True

                                        if self.priority is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:native-status'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.is_valid is not None:
                                        return True

                                    if self.native_details is not None and self.native_details._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus']['meta_info']


                            class PerLevelAdvertisingDetail(object):
                                """
                                Per level details of how the local system
                                advertises the prefix
                                
                                .. attribute:: advertising_origin
                                
                                	The origin of the advertisement
                                	**type**\:  :py:class:`IsisShRouteAdvOriginEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisShRouteAdvOriginEnum>`
                                
                                .. attribute:: is_external_metric
                                
                                	Is the metric an external metric?
                                	**type**\:  bool
                                
                                .. attribute:: is_external_reachability
                                
                                	Is the prefix external to the IS\-IS domain?
                                	**type**\:  bool
                                
                                .. attribute:: is_interarea
                                
                                	Is the up/down bit set?
                                	**type**\:  bool
                                
                                .. attribute:: is_propagated
                                
                                	Has the prefix been propagated from another level?
                                	**type**\:  bool
                                
                                .. attribute:: level
                                
                                	Level in which the prefix is advertised
                                	**type**\:  :py:class:`IsisLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelEnum>`
                                
                                .. attribute:: metric
                                
                                	Metric with which the prefix is advertised
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: nodal_sid
                                
                                	Nodal SIDs with the prefix item
                                	**type**\: list of  :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail.NodalSid>`
                                
                                .. attribute:: summarization_status
                                
                                	Status of summarization for the prefix
                                	**type**\:  :py:class:`SummarizationStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus>`
                                
                                .. attribute:: tags
                                
                                	Tags associated with the prefix
                                	**type**\:  list of int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.advertising_origin = None
                                    self.is_external_metric = None
                                    self.is_external_reachability = None
                                    self.is_interarea = None
                                    self.is_propagated = None
                                    self.level = None
                                    self.metric = None
                                    self.nodal_sid = YList()
                                    self.nodal_sid.parent = self
                                    self.nodal_sid.name = 'nodal_sid'
                                    self.summarization_status = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus()
                                    self.summarization_status.parent = self
                                    self.tags = YLeafList()
                                    self.tags.parent = self
                                    self.tags.name = 'tags'


                                class SummarizationStatus(object):
                                    """
                                    Status of summarization for the prefix
                                    
                                    .. attribute:: is_valid
                                    
                                    	IsValid
                                    	**type**\:  :py:class:`IsisValidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValidEnum>`
                                    
                                    .. attribute:: summary_prefix
                                    
                                    	Summarizing Prefix
                                    	**type**\:  :py:class:`SummaryPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.is_valid = None
                                        self.summary_prefix = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix()
                                        self.summary_prefix.parent = self


                                    class SummaryPrefix(object):
                                        """
                                        Summarizing Prefix
                                        
                                        .. attribute:: prefix
                                        
                                        	prefix
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: prefix_length
                                        
                                        	prefix length
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.prefix = None
                                            self.prefix_length = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:summary-prefix'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.prefix is not None:
                                                return True

                                            if self.prefix_length is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:summarization-status'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.is_valid is not None:
                                            return True

                                        if self.summary_prefix is not None and self.summary_prefix._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus']['meta_info']


                                class NodalSid(object):
                                    """
                                    Nodal SIDs with the prefix item
                                    
                                    .. attribute:: eflag
                                    
                                    	eflag
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: lflag
                                    
                                    	lflag
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: nflag
                                    
                                    	nflag
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: pflag
                                    
                                    	pflag
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: rflag
                                    
                                    	rflag
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: sid_value
                                    
                                    	sid value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: vflag
                                    
                                    	vflag
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.eflag = None
                                        self.lflag = None
                                        self.nflag = None
                                        self.pflag = None
                                        self.rflag = None
                                        self.sid_value = None
                                        self.vflag = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:nodal-sid'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.eflag is not None:
                                            return True

                                        if self.lflag is not None:
                                            return True

                                        if self.nflag is not None:
                                            return True

                                        if self.pflag is not None:
                                            return True

                                        if self.rflag is not None:
                                            return True

                                        if self.sid_value is not None:
                                            return True

                                        if self.vflag is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail.NodalSid']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:per-level-advertising-detail'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.advertising_origin is not None:
                                        return True

                                    if self.is_external_metric is not None:
                                        return True

                                    if self.is_external_reachability is not None:
                                        return True

                                    if self.is_interarea is not None:
                                        return True

                                    if self.is_propagated is not None:
                                        return True

                                    if self.level is not None:
                                        return True

                                    if self.metric is not None:
                                        return True

                                    if self.nodal_sid is not None:
                                        for child_ref in self.nodal_sid:
                                            if child_ref._has_data():
                                                return True

                                    if self.summarization_status is not None and self.summarization_status._has_data():
                                        return True

                                    if self.tags is not None:
                                        for child in self.tags:
                                            if child is not None:
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ipv4frr-backup'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.connected_status is not None and self.connected_status._has_data():
                                    return True

                                if self.native_status is not None and self.native_status._has_data():
                                    return True

                                if self.per_level_advertising_detail is not None:
                                    for child_ref in self.per_level_advertising_detail:
                                        if child_ref._has_data():
                                            return True

                                if self.prefix is not None:
                                    return True

                                if self.prefix_length is not None:
                                    return True

                                if self.redistributed_status is not None and self.redistributed_status._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ipv4frr-backups'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ipv4frr_backup is not None:
                                for child_ref in self.ipv4frr_backup:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups']['meta_info']


                    class Ipv4Routes(object):
                        """
                        IPv4 local route table
                        
                        .. attribute:: ipv4_route
                        
                        	An IPv4 route known to IS\-IS
                        	**type**\: list of  :py:class:`Ipv4Route <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.ipv4_route = YList()
                            self.ipv4_route.parent = self
                            self.ipv4_route.name = 'ipv4_route'


                        class Ipv4Route(object):
                            """
                            An IPv4 route known to IS\-IS
                            
                            .. attribute:: connected_status
                            
                            	Status of IS\-IS directly connected routes to the prefix
                            	**type**\:  :py:class:`ConnectedStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.ConnectedStatus>`
                            
                            .. attribute:: native_status
                            
                            	Status of native IS\-IS routes to the prefix
                            	**type**\:  :py:class:`NativeStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus>`
                            
                            .. attribute:: per_level_advertising_detail
                            
                            	Per level details of how the local system advertises the prefix
                            	**type**\: list of  :py:class:`PerLevelAdvertisingDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail>`
                            
                            .. attribute:: prefix
                            
                            	Prefix
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: prefix_length
                            
                            	Prefix Length
                            	**type**\:  int
                            
                            	**range:** 0..32
                            
                            .. attribute:: redistributed_status
                            
                            	Status of other protocols' routes redistributed into IS\-IS
                            	**type**\:  :py:class:`RedistributedStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.connected_status = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.ConnectedStatus()
                                self.connected_status.parent = self
                                self.native_status = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus()
                                self.native_status.parent = self
                                self.per_level_advertising_detail = YList()
                                self.per_level_advertising_detail.parent = self
                                self.per_level_advertising_detail.name = 'per_level_advertising_detail'
                                self.prefix = None
                                self.prefix_length = None
                                self.redistributed_status = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus()
                                self.redistributed_status.parent = self


                            class ConnectedStatus(object):
                                """
                                Status of IS\-IS directly connected routes to the
                                prefix
                                
                                .. attribute:: connected_details
                                
                                	Details of the directly connected prefix
                                	**type**\:  :py:class:`ConnectedDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.ConnectedStatus.ConnectedDetails>`
                                
                                .. attribute:: is_valid
                                
                                	IsValid
                                	**type**\:  :py:class:`IsisValidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValidEnum>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.connected_details = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.ConnectedStatus.ConnectedDetails()
                                    self.connected_details.parent = self
                                    self.is_valid = None


                                class ConnectedDetails(object):
                                    """
                                    Details of the directly connected prefix
                                    
                                    .. attribute:: interface
                                    
                                    	Interfaces
                                    	**type**\:  list of str
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.interface = YLeafList()
                                        self.interface.parent = self
                                        self.interface.name = 'interface'

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:connected-details'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.interface is not None:
                                            for child in self.interface:
                                                if child is not None:
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.ConnectedStatus.ConnectedDetails']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:connected-status'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.connected_details is not None and self.connected_details._has_data():
                                        return True

                                    if self.is_valid is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.ConnectedStatus']['meta_info']


                            class RedistributedStatus(object):
                                """
                                Status of other protocols' routes redistributed
                                into IS\-IS
                                
                                .. attribute:: is_valid
                                
                                	IsValid
                                	**type**\:  :py:class:`IsisValidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValidEnum>`
                                
                                .. attribute:: redistribution_details
                                
                                	Per level details of the redistributed route
                                	**type**\:  :py:class:`RedistributionDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus.RedistributionDetails>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.is_valid = None
                                    self.redistribution_details = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus.RedistributionDetails()
                                    self.redistribution_details.parent = self


                                class RedistributionDetails(object):
                                    """
                                    Per level details of the redistributed route
                                    
                                    .. attribute:: isis_sh_route_redist_detail
                                    
                                    	isis sh route redist detail
                                    	**type**\: list of  :py:class:`IsisShRouteRedistDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.isis_sh_route_redist_detail = YList()
                                        self.isis_sh_route_redist_detail.parent = self
                                        self.isis_sh_route_redist_detail.name = 'isis_sh_route_redist_detail'


                                    class IsisShRouteRedistDetail(object):
                                        """
                                        isis sh route redist detail
                                        
                                        .. attribute:: level
                                        
                                        	Level into which the route is redistributed
                                        	**type**\:  :py:class:`IsisLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelEnum>`
                                        
                                        .. attribute:: owner
                                        
                                        	Protocol redistributing the route
                                        	**type**\:  :py:class:`Owner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.level = None
                                            self.owner = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner()
                                            self.owner.parent = self


                                        class Owner(object):
                                            """
                                            Protocol redistributing the route
                                            
                                            .. attribute:: application_name
                                            
                                            	Application Name
                                            	**type**\:  str
                                            
                                            .. attribute:: bgp_as_number
                                            
                                            	BGP Autonomous System number
                                            	**type**\:  str
                                            
                                            .. attribute:: eigrp_as_number
                                            
                                            	EIGRP Autonomous System number
                                            	**type**\:  str
                                            
                                            .. attribute:: isis_instance_id
                                            
                                            	IS\-IS instance identifier
                                            	**type**\:  str
                                            
                                            .. attribute:: ospf_process_id
                                            
                                            	OSPF process identifier
                                            	**type**\:  str
                                            
                                            .. attribute:: ospfv3_process_id
                                            
                                            	OSPFv3 process identifier
                                            	**type**\:  str
                                            
                                            .. attribute:: protocol
                                            
                                            	Protocol
                                            	**type**\:  :py:class:`IsisRedistProtoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisRedistProtoEnum>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.application_name = None
                                                self.bgp_as_number = None
                                                self.eigrp_as_number = None
                                                self.isis_instance_id = None
                                                self.ospf_process_id = None
                                                self.ospfv3_process_id = None
                                                self.protocol = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:owner'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.application_name is not None:
                                                    return True

                                                if self.bgp_as_number is not None:
                                                    return True

                                                if self.eigrp_as_number is not None:
                                                    return True

                                                if self.isis_instance_id is not None:
                                                    return True

                                                if self.ospf_process_id is not None:
                                                    return True

                                                if self.ospfv3_process_id is not None:
                                                    return True

                                                if self.protocol is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:isis-sh-route-redist-detail'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.level is not None:
                                                return True

                                            if self.owner is not None and self.owner._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:redistribution-details'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.isis_sh_route_redist_detail is not None:
                                            for child_ref in self.isis_sh_route_redist_detail:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus.RedistributionDetails']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:redistributed-status'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.is_valid is not None:
                                        return True

                                    if self.redistribution_details is not None and self.redistribution_details._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus']['meta_info']


                            class NativeStatus(object):
                                """
                                Status of native IS\-IS routes to the prefix
                                
                                .. attribute:: is_valid
                                
                                	IsValid
                                	**type**\:  :py:class:`IsisValidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValidEnum>`
                                
                                .. attribute:: native_details
                                
                                	Details of the native route
                                	**type**\:  :py:class:`NativeDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.is_valid = None
                                    self.native_details = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails()
                                    self.native_details.parent = self


                                class NativeDetails(object):
                                    """
                                    Details of the native route
                                    
                                    .. attribute:: backup
                                    
                                    	Backup paths to prefix
                                    	**type**\: list of  :py:class:`Backup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup>`
                                    
                                    .. attribute:: primary
                                    
                                    	Primary paths to prefix
                                    	**type**\:  :py:class:`Primary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary>`
                                    
                                    .. attribute:: priority
                                    
                                    	Relative importance of the prefix
                                    	**type**\:  :py:class:`IsisPrefixPriorityEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisPrefixPriorityEnum>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.backup = YList()
                                        self.backup.parent = self
                                        self.backup.name = 'backup'
                                        self.primary = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary()
                                        self.primary.parent = self
                                        self.priority = None


                                    class Primary(object):
                                        """
                                        Primary paths to prefix
                                        
                                        .. attribute:: administrative_distance
                                        
                                        	Administrative Distance
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: is_external_metric
                                        
                                        	Is the metric an external metric?
                                        	**type**\:  bool
                                        
                                        .. attribute:: metric
                                        
                                        	Distance to network
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: multicast_metric
                                        
                                        	Multicast\-intact distance to network
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: multicast_path
                                        
                                        	Multicast intact first hops toward the prefix
                                        	**type**\: list of  :py:class:`MulticastPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastPath>`
                                        
                                        .. attribute:: multicast_source
                                        
                                        	Multicast\-intact sources advertising the prefix
                                        	**type**\: list of  :py:class:`MulticastSource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastSource>`
                                        
                                        .. attribute:: origin
                                        
                                        	Origin of route
                                        	**type**\:  :py:class:`IsisPrefixOriginEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisPrefixOriginEnum>`
                                        
                                        .. attribute:: paths
                                        
                                        	First hops toward the prefix
                                        	**type**\: list of  :py:class:`Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Paths>`
                                        
                                        .. attribute:: source
                                        
                                        	Sources advertising the prefix
                                        	**type**\: list of  :py:class:`Source <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Source>`
                                        
                                        .. attribute:: srte_path
                                        
                                        	SR\-TE native first hops toward the prefix
                                        	**type**\: list of  :py:class:`SrtePath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.SrtePath>`
                                        
                                        .. attribute:: ucmp_next_hop
                                        
                                        	UCMP first hops toward the prefix
                                        	**type**\: list of  :py:class:`UcmpNextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.UcmpNextHop>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.administrative_distance = None
                                            self.is_external_metric = None
                                            self.metric = None
                                            self.multicast_metric = None
                                            self.multicast_path = YList()
                                            self.multicast_path.parent = self
                                            self.multicast_path.name = 'multicast_path'
                                            self.multicast_source = YList()
                                            self.multicast_source.parent = self
                                            self.multicast_source.name = 'multicast_source'
                                            self.origin = None
                                            self.paths = YList()
                                            self.paths.parent = self
                                            self.paths.name = 'paths'
                                            self.source = YList()
                                            self.source.parent = self
                                            self.source.name = 'source'
                                            self.srte_path = YList()
                                            self.srte_path.parent = self
                                            self.srte_path.name = 'srte_path'
                                            self.ucmp_next_hop = YList()
                                            self.ucmp_next_hop.parent = self
                                            self.ucmp_next_hop.name = 'ucmp_next_hop'


                                        class Paths(object):
                                            """
                                            First hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:paths'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Paths']['meta_info']


                                        class UcmpNextHop(object):
                                            """
                                            UCMP first hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: total_ucmp_distance
                                            
                                            	Distance to the network via this UCMP next hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.total_ucmp_distance = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ucmp-next-hop'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.total_ucmp_distance is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.UcmpNextHop']['meta_info']


                                        class MulticastPath(object):
                                            """
                                            Multicast intact first hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:multicast-path'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastPath']['meta_info']


                                        class SrtePath(object):
                                            """
                                            SR\-TE native first hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:srte-path'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.SrtePath']['meta_info']


                                        class Source(object):
                                            """
                                            Sources advertising the prefix
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Source.NodalSid>`
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\:  list of int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.nodal_sid = YList()
                                                self.nodal_sid.parent = self
                                                self.nodal_sid.name = 'nodal_sid'
                                                self.source_address = None
                                                self.source_lsp_id = None
                                                self.tags = YLeafList()
                                                self.tags.parent = self
                                                self.tags.name = 'tags'


                                            class NodalSid(object):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.eflag = None
                                                    self.lflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.rflag = None
                                                    self.sid_value = None
                                                    self.vflag = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:nodal-sid'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.eflag is not None:
                                                        return True

                                                    if self.lflag is not None:
                                                        return True

                                                    if self.nflag is not None:
                                                        return True

                                                    if self.pflag is not None:
                                                        return True

                                                    if self.rflag is not None:
                                                        return True

                                                    if self.sid_value is not None:
                                                        return True

                                                    if self.vflag is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Source.NodalSid']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:source'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.nodal_sid is not None:
                                                    for child_ref in self.nodal_sid:
                                                        if child_ref._has_data():
                                                            return True

                                                if self.source_address is not None:
                                                    return True

                                                if self.source_lsp_id is not None:
                                                    return True

                                                if self.tags is not None:
                                                    for child in self.tags:
                                                        if child is not None:
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Source']['meta_info']


                                        class MulticastSource(object):
                                            """
                                            Multicast\-intact sources advertising the prefix
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastSource.NodalSid>`
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\:  list of int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.nodal_sid = YList()
                                                self.nodal_sid.parent = self
                                                self.nodal_sid.name = 'nodal_sid'
                                                self.source_address = None
                                                self.source_lsp_id = None
                                                self.tags = YLeafList()
                                                self.tags.parent = self
                                                self.tags.name = 'tags'


                                            class NodalSid(object):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.eflag = None
                                                    self.lflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.rflag = None
                                                    self.sid_value = None
                                                    self.vflag = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:nodal-sid'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.eflag is not None:
                                                        return True

                                                    if self.lflag is not None:
                                                        return True

                                                    if self.nflag is not None:
                                                        return True

                                                    if self.pflag is not None:
                                                        return True

                                                    if self.rflag is not None:
                                                        return True

                                                    if self.sid_value is not None:
                                                        return True

                                                    if self.vflag is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastSource.NodalSid']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:multicast-source'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.nodal_sid is not None:
                                                    for child_ref in self.nodal_sid:
                                                        if child_ref._has_data():
                                                            return True

                                                if self.source_address is not None:
                                                    return True

                                                if self.source_lsp_id is not None:
                                                    return True

                                                if self.tags is not None:
                                                    for child in self.tags:
                                                        if child is not None:
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastSource']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:primary'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.administrative_distance is not None:
                                                return True

                                            if self.is_external_metric is not None:
                                                return True

                                            if self.metric is not None:
                                                return True

                                            if self.multicast_metric is not None:
                                                return True

                                            if self.multicast_path is not None:
                                                for child_ref in self.multicast_path:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.multicast_source is not None:
                                                for child_ref in self.multicast_source:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.origin is not None:
                                                return True

                                            if self.paths is not None:
                                                for child_ref in self.paths:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.source is not None:
                                                for child_ref in self.source:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.srte_path is not None:
                                                for child_ref in self.srte_path:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.ucmp_next_hop is not None:
                                                for child_ref in self.ucmp_next_hop:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary']['meta_info']


                                    class Backup(object):
                                        """
                                        Backup paths to prefix
                                        
                                        .. attribute:: administrative_distance
                                        
                                        	Administrative Distance
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: is_external_metric
                                        
                                        	Is the metric an external metric?
                                        	**type**\:  bool
                                        
                                        .. attribute:: metric
                                        
                                        	Distance to network
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: multicast_metric
                                        
                                        	Multicast\-intact distance to network
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: multicast_path
                                        
                                        	Multicast intact first hops toward the prefix
                                        	**type**\: list of  :py:class:`MulticastPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastPath>`
                                        
                                        .. attribute:: multicast_source
                                        
                                        	Multicast\-intact sources advertising the prefix
                                        	**type**\: list of  :py:class:`MulticastSource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastSource>`
                                        
                                        .. attribute:: origin
                                        
                                        	Origin of route
                                        	**type**\:  :py:class:`IsisPrefixOriginEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisPrefixOriginEnum>`
                                        
                                        .. attribute:: paths
                                        
                                        	First hops toward the prefix
                                        	**type**\: list of  :py:class:`Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Paths>`
                                        
                                        .. attribute:: source
                                        
                                        	Sources advertising the prefix
                                        	**type**\: list of  :py:class:`Source <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Source>`
                                        
                                        .. attribute:: srte_path
                                        
                                        	SR\-TE native first hops toward the prefix
                                        	**type**\: list of  :py:class:`SrtePath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.SrtePath>`
                                        
                                        .. attribute:: ucmp_next_hop
                                        
                                        	UCMP first hops toward the prefix
                                        	**type**\: list of  :py:class:`UcmpNextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.UcmpNextHop>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.administrative_distance = None
                                            self.is_external_metric = None
                                            self.metric = None
                                            self.multicast_metric = None
                                            self.multicast_path = YList()
                                            self.multicast_path.parent = self
                                            self.multicast_path.name = 'multicast_path'
                                            self.multicast_source = YList()
                                            self.multicast_source.parent = self
                                            self.multicast_source.name = 'multicast_source'
                                            self.origin = None
                                            self.paths = YList()
                                            self.paths.parent = self
                                            self.paths.name = 'paths'
                                            self.source = YList()
                                            self.source.parent = self
                                            self.source.name = 'source'
                                            self.srte_path = YList()
                                            self.srte_path.parent = self
                                            self.srte_path.name = 'srte_path'
                                            self.ucmp_next_hop = YList()
                                            self.ucmp_next_hop.parent = self
                                            self.ucmp_next_hop.name = 'ucmp_next_hop'


                                        class Paths(object):
                                            """
                                            First hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:paths'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Paths']['meta_info']


                                        class UcmpNextHop(object):
                                            """
                                            UCMP first hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: total_ucmp_distance
                                            
                                            	Distance to the network via this UCMP next hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.total_ucmp_distance = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ucmp-next-hop'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.total_ucmp_distance is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.UcmpNextHop']['meta_info']


                                        class MulticastPath(object):
                                            """
                                            Multicast intact first hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:multicast-path'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastPath']['meta_info']


                                        class SrtePath(object):
                                            """
                                            SR\-TE native first hops toward the prefix
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\:  str
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.egress_interface = None
                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self.neighbor_address = None
                                                self.neighbor_id = None
                                                self.neighbor_snpa = None
                                                self.segment_routing_sid_value = None
                                                self.tag = None
                                                self.weight = None


                                            class FrrBackup(object):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\:  str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\:  bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\:  bool
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\:  str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\:  list of int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.egress_interface = None
                                                    self.is_downstream = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_remote_lfa = None
                                                    self.is_srlg_disjoint = None
                                                    self.neighbor_address = None
                                                    self.neighbor_id = None
                                                    self.neighbor_snpa = None
                                                    self.num_sid = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_router_pid = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.segment_routing_sid_value = None
                                                    self.segment_routing_sid_value_entry = YLeafList()
                                                    self.segment_routing_sid_value_entry.parent = self
                                                    self.segment_routing_sid_value_entry.name = 'segment_routing_sid_value_entry'
                                                    self.total_backup_distance = None
                                                    self.weight = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:frr-backup'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.egress_interface is not None:
                                                        return True

                                                    if self.is_downstream is not None:
                                                        return True

                                                    if self.is_epcfrr_lfa is not None:
                                                        return True

                                                    if self.is_lc_disjoint is not None:
                                                        return True

                                                    if self.is_node_protecting is not None:
                                                        return True

                                                    if self.is_primary_path is not None:
                                                        return True

                                                    if self.is_remote_lfa is not None:
                                                        return True

                                                    if self.is_srlg_disjoint is not None:
                                                        return True

                                                    if self.neighbor_address is not None:
                                                        return True

                                                    if self.neighbor_id is not None:
                                                        return True

                                                    if self.neighbor_snpa is not None:
                                                        return True

                                                    if self.num_sid is not None:
                                                        return True

                                                    if self.remote_lfa_router_id is not None:
                                                        return True

                                                    if self.remote_lfa_router_pid is not None:
                                                        return True

                                                    if self.remote_lfa_system_id is not None:
                                                        return True

                                                    if self.remote_lfa_system_pid is not None:
                                                        return True

                                                    if self.segment_routing_sid_value is not None:
                                                        return True

                                                    if self.segment_routing_sid_value_entry is not None:
                                                        for child in self.segment_routing_sid_value_entry:
                                                            if child is not None:
                                                                return True

                                                    if self.total_backup_distance is not None:
                                                        return True

                                                    if self.weight is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:srte-path'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.egress_interface is not None:
                                                    return True

                                                if self.frr_backup is not None and self.frr_backup._has_data():
                                                    return True

                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.neighbor_id is not None:
                                                    return True

                                                if self.neighbor_snpa is not None:
                                                    return True

                                                if self.segment_routing_sid_value is not None:
                                                    return True

                                                if self.tag is not None:
                                                    return True

                                                if self.weight is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.SrtePath']['meta_info']


                                        class Source(object):
                                            """
                                            Sources advertising the prefix
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Source.NodalSid>`
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\:  list of int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.nodal_sid = YList()
                                                self.nodal_sid.parent = self
                                                self.nodal_sid.name = 'nodal_sid'
                                                self.source_address = None
                                                self.source_lsp_id = None
                                                self.tags = YLeafList()
                                                self.tags.parent = self
                                                self.tags.name = 'tags'


                                            class NodalSid(object):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.eflag = None
                                                    self.lflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.rflag = None
                                                    self.sid_value = None
                                                    self.vflag = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:nodal-sid'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.eflag is not None:
                                                        return True

                                                    if self.lflag is not None:
                                                        return True

                                                    if self.nflag is not None:
                                                        return True

                                                    if self.pflag is not None:
                                                        return True

                                                    if self.rflag is not None:
                                                        return True

                                                    if self.sid_value is not None:
                                                        return True

                                                    if self.vflag is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Source.NodalSid']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:source'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.nodal_sid is not None:
                                                    for child_ref in self.nodal_sid:
                                                        if child_ref._has_data():
                                                            return True

                                                if self.source_address is not None:
                                                    return True

                                                if self.source_lsp_id is not None:
                                                    return True

                                                if self.tags is not None:
                                                    for child in self.tags:
                                                        if child is not None:
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Source']['meta_info']


                                        class MulticastSource(object):
                                            """
                                            Multicast\-intact sources advertising the prefix
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastSource.NodalSid>`
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\:  list of int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.nodal_sid = YList()
                                                self.nodal_sid.parent = self
                                                self.nodal_sid.name = 'nodal_sid'
                                                self.source_address = None
                                                self.source_lsp_id = None
                                                self.tags = YLeafList()
                                                self.tags.parent = self
                                                self.tags.name = 'tags'


                                            class NodalSid(object):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.eflag = None
                                                    self.lflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.rflag = None
                                                    self.sid_value = None
                                                    self.vflag = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:nodal-sid'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.eflag is not None:
                                                        return True

                                                    if self.lflag is not None:
                                                        return True

                                                    if self.nflag is not None:
                                                        return True

                                                    if self.pflag is not None:
                                                        return True

                                                    if self.rflag is not None:
                                                        return True

                                                    if self.sid_value is not None:
                                                        return True

                                                    if self.vflag is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastSource.NodalSid']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:multicast-source'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.nodal_sid is not None:
                                                    for child_ref in self.nodal_sid:
                                                        if child_ref._has_data():
                                                            return True

                                                if self.source_address is not None:
                                                    return True

                                                if self.source_lsp_id is not None:
                                                    return True

                                                if self.tags is not None:
                                                    for child in self.tags:
                                                        if child is not None:
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastSource']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:backup'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.administrative_distance is not None:
                                                return True

                                            if self.is_external_metric is not None:
                                                return True

                                            if self.metric is not None:
                                                return True

                                            if self.multicast_metric is not None:
                                                return True

                                            if self.multicast_path is not None:
                                                for child_ref in self.multicast_path:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.multicast_source is not None:
                                                for child_ref in self.multicast_source:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.origin is not None:
                                                return True

                                            if self.paths is not None:
                                                for child_ref in self.paths:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.source is not None:
                                                for child_ref in self.source:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.srte_path is not None:
                                                for child_ref in self.srte_path:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.ucmp_next_hop is not None:
                                                for child_ref in self.ucmp_next_hop:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:native-details'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.backup is not None:
                                            for child_ref in self.backup:
                                                if child_ref._has_data():
                                                    return True

                                        if self.primary is not None and self.primary._has_data():
                                            return True

                                        if self.priority is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:native-status'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.is_valid is not None:
                                        return True

                                    if self.native_details is not None and self.native_details._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus']['meta_info']


                            class PerLevelAdvertisingDetail(object):
                                """
                                Per level details of how the local system
                                advertises the prefix
                                
                                .. attribute:: advertising_origin
                                
                                	The origin of the advertisement
                                	**type**\:  :py:class:`IsisShRouteAdvOriginEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisShRouteAdvOriginEnum>`
                                
                                .. attribute:: is_external_metric
                                
                                	Is the metric an external metric?
                                	**type**\:  bool
                                
                                .. attribute:: is_external_reachability
                                
                                	Is the prefix external to the IS\-IS domain?
                                	**type**\:  bool
                                
                                .. attribute:: is_interarea
                                
                                	Is the up/down bit set?
                                	**type**\:  bool
                                
                                .. attribute:: is_propagated
                                
                                	Has the prefix been propagated from another level?
                                	**type**\:  bool
                                
                                .. attribute:: level
                                
                                	Level in which the prefix is advertised
                                	**type**\:  :py:class:`IsisLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelEnum>`
                                
                                .. attribute:: metric
                                
                                	Metric with which the prefix is advertised
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: nodal_sid
                                
                                	Nodal SIDs with the prefix item
                                	**type**\: list of  :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail.NodalSid>`
                                
                                .. attribute:: summarization_status
                                
                                	Status of summarization for the prefix
                                	**type**\:  :py:class:`SummarizationStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail.SummarizationStatus>`
                                
                                .. attribute:: tags
                                
                                	Tags associated with the prefix
                                	**type**\:  list of int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.advertising_origin = None
                                    self.is_external_metric = None
                                    self.is_external_reachability = None
                                    self.is_interarea = None
                                    self.is_propagated = None
                                    self.level = None
                                    self.metric = None
                                    self.nodal_sid = YList()
                                    self.nodal_sid.parent = self
                                    self.nodal_sid.name = 'nodal_sid'
                                    self.summarization_status = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail.SummarizationStatus()
                                    self.summarization_status.parent = self
                                    self.tags = YLeafList()
                                    self.tags.parent = self
                                    self.tags.name = 'tags'


                                class SummarizationStatus(object):
                                    """
                                    Status of summarization for the prefix
                                    
                                    .. attribute:: is_valid
                                    
                                    	IsValid
                                    	**type**\:  :py:class:`IsisValidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValidEnum>`
                                    
                                    .. attribute:: summary_prefix
                                    
                                    	Summarizing Prefix
                                    	**type**\:  :py:class:`SummaryPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.is_valid = None
                                        self.summary_prefix = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix()
                                        self.summary_prefix.parent = self


                                    class SummaryPrefix(object):
                                        """
                                        Summarizing Prefix
                                        
                                        .. attribute:: prefix
                                        
                                        	prefix
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: prefix_length
                                        
                                        	prefix length
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.prefix = None
                                            self.prefix_length = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:summary-prefix'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.prefix is not None:
                                                return True

                                            if self.prefix_length is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:summarization-status'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.is_valid is not None:
                                            return True

                                        if self.summary_prefix is not None and self.summary_prefix._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail.SummarizationStatus']['meta_info']


                                class NodalSid(object):
                                    """
                                    Nodal SIDs with the prefix item
                                    
                                    .. attribute:: eflag
                                    
                                    	eflag
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: lflag
                                    
                                    	lflag
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: nflag
                                    
                                    	nflag
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: pflag
                                    
                                    	pflag
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: rflag
                                    
                                    	rflag
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: sid_value
                                    
                                    	sid value
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: vflag
                                    
                                    	vflag
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.eflag = None
                                        self.lflag = None
                                        self.nflag = None
                                        self.pflag = None
                                        self.rflag = None
                                        self.sid_value = None
                                        self.vflag = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:nodal-sid'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.eflag is not None:
                                            return True

                                        if self.lflag is not None:
                                            return True

                                        if self.nflag is not None:
                                            return True

                                        if self.pflag is not None:
                                            return True

                                        if self.rflag is not None:
                                            return True

                                        if self.sid_value is not None:
                                            return True

                                        if self.vflag is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail.NodalSid']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:per-level-advertising-detail'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.advertising_origin is not None:
                                        return True

                                    if self.is_external_metric is not None:
                                        return True

                                    if self.is_external_reachability is not None:
                                        return True

                                    if self.is_interarea is not None:
                                        return True

                                    if self.is_propagated is not None:
                                        return True

                                    if self.level is not None:
                                        return True

                                    if self.metric is not None:
                                        return True

                                    if self.nodal_sid is not None:
                                        for child_ref in self.nodal_sid:
                                            if child_ref._has_data():
                                                return True

                                    if self.summarization_status is not None and self.summarization_status._has_data():
                                        return True

                                    if self.tags is not None:
                                        for child in self.tags:
                                            if child is not None:
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ipv4-route'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.connected_status is not None and self.connected_status._has_data():
                                    return True

                                if self.native_status is not None and self.native_status._has_data():
                                    return True

                                if self.per_level_advertising_detail is not None:
                                    for child_ref in self.per_level_advertising_detail:
                                        if child_ref._has_data():
                                            return True

                                if self.prefix is not None:
                                    return True

                                if self.prefix_length is not None:
                                    return True

                                if self.redistributed_status is not None and self.redistributed_status._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ipv4-routes'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ipv4_route is not None:
                                for child_ref in self.ipv4_route:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.Topologies.Topology.Ipv4Routes']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:topology'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.af_name is not None:
                            return True

                        if self.frr_summary is not None and self.frr_summary._has_data():
                            return True

                        if self.ipv4_routes is not None and self.ipv4_routes._has_data():
                            return True

                        if self.ipv4frr_backups is not None and self.ipv4frr_backups._has_data():
                            return True

                        if self.ipv6_routes is not None and self.ipv6_routes._has_data():
                            return True

                        if self.ipv6frr_backups is not None and self.ipv6frr_backups._has_data():
                            return True

                        if self.saf_name is not None:
                            return True

                        if self.topology_levels is not None and self.topology_levels._has_data():
                            return True

                        if self.topology_name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                        return meta._meta_table['Isis.Instances.Instance.Topologies.Topology']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:topologies'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.topology is not None:
                        for child_ref in self.topology:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                    return meta._meta_table['Isis.Instances.Instance.Topologies']['meta_info']


            class NsrStatus(object):
                """
                NSR Status information
                
                .. attribute:: isis_nsr_infra
                
                	ISIS NSR Infra
                	**type**\:  :py:class:`IsisNsrInfra <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra>`
                
                .. attribute:: isis_nsr_peer
                
                	ISIS NSR PEER STATUS
                	**type**\:  :py:class:`IsisNsrPeer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrPeer>`
                
                .. attribute:: isis_vm_state
                
                	ISIS VM STATE
                	**type**\:  int
                
                	**range:** 0..65535
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.isis_nsr_infra = Isis.Instances.Instance.NsrStatus.IsisNsrInfra()
                    self.isis_nsr_infra.parent = self
                    self.isis_nsr_peer = Isis.Instances.Instance.NsrStatus.IsisNsrPeer()
                    self.isis_nsr_peer.parent = self
                    self.isis_vm_state = None


                class IsisNsrPeer(object):
                    """
                    ISIS NSR PEER STATUS
                    
                    .. attribute:: full_sync_achieved
                    
                    	full sync achieved
                    	**type**\:  list of int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: man_sync_count
                    
                    	man sync count
                    	**type**\:  list of int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: nsr_chg_count
                    
                    	nsr chg count
                    	**type**\:  list of int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: uptime
                    
                    	uptime
                    	**type**\:  list of int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: uptime_valid
                    
                    	uptime valid
                    	**type**\: list of  :py:class:`UptimeValid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrPeer.UptimeValid>`
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.full_sync_achieved = YLeafList()
                        self.full_sync_achieved.parent = self
                        self.full_sync_achieved.name = 'full_sync_achieved'
                        self.man_sync_count = YLeafList()
                        self.man_sync_count.parent = self
                        self.man_sync_count.name = 'man_sync_count'
                        self.nsr_chg_count = YLeafList()
                        self.nsr_chg_count.parent = self
                        self.nsr_chg_count.name = 'nsr_chg_count'
                        self.uptime = YLeafList()
                        self.uptime.parent = self
                        self.uptime.name = 'uptime'
                        self.uptime_valid = YList()
                        self.uptime_valid.parent = self
                        self.uptime_valid.name = 'uptime_valid'


                    class UptimeValid(object):
                        """
                        uptime valid
                        
                        .. attribute:: entry
                        
                        	Array entry
                        	**type**\:  bool
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.entry = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:uptime-valid'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.entry is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.NsrStatus.IsisNsrPeer.UptimeValid']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:isis-nsr-peer'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.full_sync_achieved is not None:
                            for child in self.full_sync_achieved:
                                if child is not None:
                                    return True

                        if self.man_sync_count is not None:
                            for child in self.man_sync_count:
                                if child is not None:
                                    return True

                        if self.nsr_chg_count is not None:
                            for child in self.nsr_chg_count:
                                if child is not None:
                                    return True

                        if self.uptime is not None:
                            for child in self.uptime:
                                if child is not None:
                                    return True

                        if self.uptime_valid is not None:
                            for child_ref in self.uptime_valid:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                        return meta._meta_table['Isis.Instances.Instance.NsrStatus.IsisNsrPeer']['meta_info']


                class IsisNsrInfra(object):
                    """
                    ISIS NSR Infra
                    
                    .. attribute:: ds
                    
                    	ds
                    	**type**\:  :py:class:`Ds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds>`
                    
                    .. attribute:: gen
                    
                    	gen
                    	**type**\:  :py:class:`Gen <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Gen>`
                    
                    .. attribute:: ism
                    
                    	ism
                    	**type**\:  :py:class:`Ism <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ism>`
                    
                    .. attribute:: ncd
                    
                    	ncd
                    	**type**\: list of  :py:class:`Ncd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ncd>`
                    
                    .. attribute:: nii_idb
                    
                    	nii idb
                    	**type**\: list of  :py:class:`NiiIdb <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.NiiIdb>`
                    
                    .. attribute:: pm
                    
                    	pm
                    	**type**\:  :py:class:`Pm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Pm>`
                    
                    .. attribute:: te
                    
                    	te
                    	**type**\:  :py:class:`Te <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Te>`
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ds = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds()
                        self.ds.parent = self
                        self.gen = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Gen()
                        self.gen.parent = self
                        self.ism = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ism()
                        self.ism.parent = self
                        self.ncd = YList()
                        self.ncd.parent = self
                        self.ncd.name = 'ncd'
                        self.nii_idb = YList()
                        self.nii_idb.parent = self
                        self.nii_idb.name = 'nii_idb'
                        self.pm = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Pm()
                        self.pm.parent = self
                        self.te = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Te()
                        self.te.parent = self


                    class Gen(object):
                        """
                        gen
                        
                        .. attribute:: failover
                        
                        	failover
                        	**type**\:  bool
                        
                        .. attribute:: lanid_req_needed
                        
                        	lanid req needed
                        	**type**\:  bool
                        
                        .. attribute:: my_nodeid
                        
                        	my nodeid
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: my_process_id
                        
                        	my process id
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: nsf_configured
                        
                        	nsf configured
                        	**type**\:  bool
                        
                        .. attribute:: nsr_configured
                        
                        	nsr configured
                        	**type**\:  bool
                        
                        .. attribute:: nsr_enabled
                        
                        	nsr enabled
                        	**type**\:  bool
                        
                        .. attribute:: nsr_recv_err
                        
                        	nsr recv err
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: nsr_send_err
                        
                        	nsr send err
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: nsr_send_ready
                        
                        	nsr send ready
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: nsr_send_unready
                        
                        	nsr send unready
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: pm_ha_role
                        
                        	pm ha role
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: pm_issu_role
                        
                        	pm issu role
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: retry_flag
                        
                        	retry flag
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: sysmgr_ha_role
                        
                        	sysmgr ha role
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.failover = None
                            self.lanid_req_needed = None
                            self.my_nodeid = None
                            self.my_process_id = None
                            self.nsf_configured = None
                            self.nsr_configured = None
                            self.nsr_enabled = None
                            self.nsr_recv_err = None
                            self.nsr_send_err = None
                            self.nsr_send_ready = None
                            self.nsr_send_unready = None
                            self.pm_ha_role = None
                            self.pm_issu_role = None
                            self.retry_flag = None
                            self.sysmgr_ha_role = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:gen'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.failover is not None:
                                return True

                            if self.lanid_req_needed is not None:
                                return True

                            if self.my_nodeid is not None:
                                return True

                            if self.my_process_id is not None:
                                return True

                            if self.nsf_configured is not None:
                                return True

                            if self.nsr_configured is not None:
                                return True

                            if self.nsr_enabled is not None:
                                return True

                            if self.nsr_recv_err is not None:
                                return True

                            if self.nsr_send_err is not None:
                                return True

                            if self.nsr_send_ready is not None:
                                return True

                            if self.nsr_send_unready is not None:
                                return True

                            if self.pm_ha_role is not None:
                                return True

                            if self.pm_issu_role is not None:
                                return True

                            if self.retry_flag is not None:
                                return True

                            if self.sysmgr_ha_role is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Gen']['meta_info']


                    class Pm(object):
                        """
                        pm
                        
                        .. attribute:: conn_cb
                        
                        	conn cb
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: conn_status
                        
                        	conn status
                        	**type**\:  bool
                        
                        .. attribute:: disconn_cb
                        
                        	disconn cb
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: reg
                        
                        	reg
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.conn_cb = None
                            self.conn_status = None
                            self.disconn_cb = None
                            self.reg = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:pm'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.conn_cb is not None:
                                return True

                            if self.conn_status is not None:
                                return True

                            if self.disconn_cb is not None:
                                return True

                            if self.reg is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Pm']['meta_info']


                    class Ism(object):
                        """
                        ism
                        
                        .. attribute:: conn
                        
                        	conn
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: conn_cb
                        
                        	conn cb
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: conn_status
                        
                        	conn status
                        	**type**\:  bool
                        
                        .. attribute:: disconn
                        
                        	disconn
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: disconn_cb
                        
                        	disconn cb
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: evt_rsp_cb
                        
                        	evt rsp cb
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ha_opt
                        
                        	ha opt
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ha_opt_cb
                        
                        	ha opt cb
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: reg_rsp_cb
                        
                        	reg rsp cb
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: send_ready
                        
                        	send ready
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: wait_ready
                        
                        	wait ready
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.conn = None
                            self.conn_cb = None
                            self.conn_status = None
                            self.disconn = None
                            self.disconn_cb = None
                            self.evt_rsp_cb = None
                            self.ha_opt = None
                            self.ha_opt_cb = None
                            self.reg_rsp_cb = None
                            self.send_ready = None
                            self.wait_ready = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ism'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.conn is not None:
                                return True

                            if self.conn_cb is not None:
                                return True

                            if self.conn_status is not None:
                                return True

                            if self.disconn is not None:
                                return True

                            if self.disconn_cb is not None:
                                return True

                            if self.evt_rsp_cb is not None:
                                return True

                            if self.ha_opt is not None:
                                return True

                            if self.ha_opt_cb is not None:
                                return True

                            if self.reg_rsp_cb is not None:
                                return True

                            if self.send_ready is not None:
                                return True

                            if self.wait_ready is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ism']['meta_info']


                    class Ds(object):
                        """
                        ds
                        
                        .. attribute:: conn
                        
                        	conn
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: conn_cb
                        
                        	conn cb
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: conn_cb_ts
                        
                        	conn cb ts
                        	**type**\:  :py:class:`ConnCbTs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.ConnCbTs>`
                        
                        .. attribute:: conn_status
                        
                        	conn status
                        	**type**\:  bool
                        
                        .. attribute:: conn_status_ts
                        
                        	conn status ts
                        	**type**\:  :py:class:`ConnStatusTs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.ConnStatusTs>`
                        
                        .. attribute:: conn_ts
                        
                        	conn ts
                        	**type**\:  :py:class:`ConnTs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.ConnTs>`
                        
                        .. attribute:: del_cb
                        
                        	del cb
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: del_cb_ts
                        
                        	del cb ts
                        	**type**\:  :py:class:`DelCbTs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.DelCbTs>`
                        
                        .. attribute:: disconn_cb
                        
                        	disconn cb
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: disconn_cb_ts
                        
                        	disconn cb ts
                        	**type**\:  :py:class:`DisconnCbTs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.DisconnCbTs>`
                        
                        .. attribute:: notify_cb
                        
                        	notify cb
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: notify_cb_ts
                        
                        	notify cb ts
                        	**type**\:  :py:class:`NotifyCbTs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.NotifyCbTs>`
                        
                        .. attribute:: notify_peer
                        
                        	notify peer
                        	**type**\: list of  :py:class:`NotifyPeer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.NotifyPeer>`
                        
                        .. attribute:: notify_peer_xr
                        
                        	notify peer xr
                        	**type**\:  str
                        
                        	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                        
                        .. attribute:: pub
                        
                        	pub
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: pub_cb
                        
                        	pub cb
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: pub_cb_ts
                        
                        	pub cb ts
                        	**type**\:  :py:class:`PubCbTs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.PubCbTs>`
                        
                        .. attribute:: pub_ts
                        
                        	pub ts
                        	**type**\:  :py:class:`PubTs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.PubTs>`
                        
                        .. attribute:: reg
                        
                        	reg
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: reg_cb
                        
                        	reg cb
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: reg_cb_ts
                        
                        	reg cb ts
                        	**type**\:  :py:class:`RegCbTs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.RegCbTs>`
                        
                        .. attribute:: reg_ts
                        
                        	reg ts
                        	**type**\:  :py:class:`RegTs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.RegTs>`
                        
                        .. attribute:: remove_srv
                        
                        	remove srv
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: remove_srv_ts
                        
                        	remove srv ts
                        	**type**\:  :py:class:`RemoveSrvTs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.RemoveSrvTs>`
                        
                        .. attribute:: unreg
                        
                        	unreg
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: unreg_cb
                        
                        	unreg cb
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: unreg_cb_ts
                        
                        	unreg cb ts
                        	**type**\:  :py:class:`UnregCbTs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.UnregCbTs>`
                        
                        .. attribute:: unreg_ts
                        
                        	unreg ts
                        	**type**\:  :py:class:`UnregTs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.UnregTs>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.conn = None
                            self.conn_cb = None
                            self.conn_cb_ts = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.ConnCbTs()
                            self.conn_cb_ts.parent = self
                            self.conn_status = None
                            self.conn_status_ts = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.ConnStatusTs()
                            self.conn_status_ts.parent = self
                            self.conn_ts = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.ConnTs()
                            self.conn_ts.parent = self
                            self.del_cb = None
                            self.del_cb_ts = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.DelCbTs()
                            self.del_cb_ts.parent = self
                            self.disconn_cb = None
                            self.disconn_cb_ts = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.DisconnCbTs()
                            self.disconn_cb_ts.parent = self
                            self.notify_cb = None
                            self.notify_cb_ts = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.NotifyCbTs()
                            self.notify_cb_ts.parent = self
                            self.notify_peer = YList()
                            self.notify_peer.parent = self
                            self.notify_peer.name = 'notify_peer'
                            self.notify_peer_xr = None
                            self.pub = None
                            self.pub_cb = None
                            self.pub_cb_ts = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.PubCbTs()
                            self.pub_cb_ts.parent = self
                            self.pub_ts = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.PubTs()
                            self.pub_ts.parent = self
                            self.reg = None
                            self.reg_cb = None
                            self.reg_cb_ts = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.RegCbTs()
                            self.reg_cb_ts.parent = self
                            self.reg_ts = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.RegTs()
                            self.reg_ts.parent = self
                            self.remove_srv = None
                            self.remove_srv_ts = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.RemoveSrvTs()
                            self.remove_srv_ts.parent = self
                            self.unreg = None
                            self.unreg_cb = None
                            self.unreg_cb_ts = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.UnregCbTs()
                            self.unreg_cb_ts.parent = self
                            self.unreg_ts = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.UnregTs()
                            self.unreg_ts.parent = self


                        class ConnTs(object):
                            """
                            conn ts
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.nano_seconds = None
                                self.seconds = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:conn-ts'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.nano_seconds is not None:
                                    return True

                                if self.seconds is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.ConnTs']['meta_info']


                        class ConnCbTs(object):
                            """
                            conn cb ts
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.nano_seconds = None
                                self.seconds = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:conn-cb-ts'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.nano_seconds is not None:
                                    return True

                                if self.seconds is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.ConnCbTs']['meta_info']


                        class PubTs(object):
                            """
                            pub ts
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.nano_seconds = None
                                self.seconds = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:pub-ts'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.nano_seconds is not None:
                                    return True

                                if self.seconds is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.PubTs']['meta_info']


                        class PubCbTs(object):
                            """
                            pub cb ts
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.nano_seconds = None
                                self.seconds = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:pub-cb-ts'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.nano_seconds is not None:
                                    return True

                                if self.seconds is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.PubCbTs']['meta_info']


                        class RegTs(object):
                            """
                            reg ts
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.nano_seconds = None
                                self.seconds = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:reg-ts'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.nano_seconds is not None:
                                    return True

                                if self.seconds is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.RegTs']['meta_info']


                        class RegCbTs(object):
                            """
                            reg cb ts
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.nano_seconds = None
                                self.seconds = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:reg-cb-ts'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.nano_seconds is not None:
                                    return True

                                if self.seconds is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.RegCbTs']['meta_info']


                        class UnregTs(object):
                            """
                            unreg ts
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.nano_seconds = None
                                self.seconds = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:unreg-ts'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.nano_seconds is not None:
                                    return True

                                if self.seconds is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.UnregTs']['meta_info']


                        class UnregCbTs(object):
                            """
                            unreg cb ts
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.nano_seconds = None
                                self.seconds = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:unreg-cb-ts'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.nano_seconds is not None:
                                    return True

                                if self.seconds is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.UnregCbTs']['meta_info']


                        class DisconnCbTs(object):
                            """
                            disconn cb ts
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.nano_seconds = None
                                self.seconds = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:disconn-cb-ts'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.nano_seconds is not None:
                                    return True

                                if self.seconds is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.DisconnCbTs']['meta_info']


                        class NotifyCbTs(object):
                            """
                            notify cb ts
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.nano_seconds = None
                                self.seconds = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:notify-cb-ts'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.nano_seconds is not None:
                                    return True

                                if self.seconds is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.NotifyCbTs']['meta_info']


                        class DelCbTs(object):
                            """
                            del cb ts
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.nano_seconds = None
                                self.seconds = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:del-cb-ts'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.nano_seconds is not None:
                                    return True

                                if self.seconds is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.DelCbTs']['meta_info']


                        class RemoveSrvTs(object):
                            """
                            remove srv ts
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.nano_seconds = None
                                self.seconds = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:remove-srv-ts'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.nano_seconds is not None:
                                    return True

                                if self.seconds is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.RemoveSrvTs']['meta_info']


                        class ConnStatusTs(object):
                            """
                            conn status ts
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.nano_seconds = None
                                self.seconds = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:conn-status-ts'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.nano_seconds is not None:
                                    return True

                                if self.seconds is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.ConnStatusTs']['meta_info']


                        class NotifyPeer(object):
                            """
                            notify peer
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.nano_seconds = None
                                self.seconds = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:notify-peer'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.nano_seconds is not None:
                                    return True

                                if self.seconds is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.NotifyPeer']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ds'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.conn is not None:
                                return True

                            if self.conn_cb is not None:
                                return True

                            if self.conn_cb_ts is not None and self.conn_cb_ts._has_data():
                                return True

                            if self.conn_status is not None:
                                return True

                            if self.conn_status_ts is not None and self.conn_status_ts._has_data():
                                return True

                            if self.conn_ts is not None and self.conn_ts._has_data():
                                return True

                            if self.del_cb is not None:
                                return True

                            if self.del_cb_ts is not None and self.del_cb_ts._has_data():
                                return True

                            if self.disconn_cb is not None:
                                return True

                            if self.disconn_cb_ts is not None and self.disconn_cb_ts._has_data():
                                return True

                            if self.notify_cb is not None:
                                return True

                            if self.notify_cb_ts is not None and self.notify_cb_ts._has_data():
                                return True

                            if self.notify_peer is not None:
                                for child_ref in self.notify_peer:
                                    if child_ref._has_data():
                                        return True

                            if self.notify_peer_xr is not None:
                                return True

                            if self.pub is not None:
                                return True

                            if self.pub_cb is not None:
                                return True

                            if self.pub_cb_ts is not None and self.pub_cb_ts._has_data():
                                return True

                            if self.pub_ts is not None and self.pub_ts._has_data():
                                return True

                            if self.reg is not None:
                                return True

                            if self.reg_cb is not None:
                                return True

                            if self.reg_cb_ts is not None and self.reg_cb_ts._has_data():
                                return True

                            if self.reg_ts is not None and self.reg_ts._has_data():
                                return True

                            if self.remove_srv is not None:
                                return True

                            if self.remove_srv_ts is not None and self.remove_srv_ts._has_data():
                                return True

                            if self.unreg is not None:
                                return True

                            if self.unreg_cb is not None:
                                return True

                            if self.unreg_cb_ts is not None and self.unreg_cb_ts._has_data():
                                return True

                            if self.unreg_ts is not None and self.unreg_ts._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds']['meta_info']


                    class Te(object):
                        """
                        te
                        
                        .. attribute:: adv_sync_data
                        
                        	adv sync data
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: conn_up
                        
                        	conn up
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: enabled
                        
                        	enabled
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: has_info_from_te
                        
                        	has info from te
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: link_purge_time_on
                        
                        	link purge time on
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: te_link_cb
                        
                        	te link cb
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: te_tunnel_cb
                        
                        	te tunnel cb
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: tunnel_purge_time_on
                        
                        	tunnel purge time on
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.adv_sync_data = None
                            self.conn_up = None
                            self.enabled = None
                            self.has_info_from_te = None
                            self.link_purge_time_on = None
                            self.te_link_cb = None
                            self.te_tunnel_cb = None
                            self.tunnel_purge_time_on = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:te'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.adv_sync_data is not None:
                                return True

                            if self.conn_up is not None:
                                return True

                            if self.enabled is not None:
                                return True

                            if self.has_info_from_te is not None:
                                return True

                            if self.link_purge_time_on is not None:
                                return True

                            if self.te_link_cb is not None:
                                return True

                            if self.te_tunnel_cb is not None:
                                return True

                            if self.tunnel_purge_time_on is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Te']['meta_info']


                    class Ncd(object):
                        """
                        ncd
                        
                        .. attribute:: chksum
                        
                        	chksum
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: conn_up
                        
                        	conn up
                        	**type**\:  bool
                        
                        .. attribute:: endp_hdl
                        
                        	endp hdl
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: recv_cnt
                        
                        	recv cnt
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: send_seqnum
                        
                        	send seqnum
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: vm_idx
                        
                        	vm idx
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.chksum = None
                            self.conn_up = None
                            self.endp_hdl = None
                            self.recv_cnt = None
                            self.send_seqnum = None
                            self.vm_idx = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ncd'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.chksum is not None:
                                return True

                            if self.conn_up is not None:
                                return True

                            if self.endp_hdl is not None:
                                return True

                            if self.recv_cnt is not None:
                                return True

                            if self.send_seqnum is not None:
                                return True

                            if self.vm_idx is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ncd']['meta_info']


                    class NiiIdb(object):
                        """
                        nii idb
                        
                        .. attribute:: brought_up
                        
                        	brought up
                        	**type**\:  bool
                        
                        .. attribute:: exist
                        
                        	exist
                        	**type**\:  bool
                        
                        .. attribute:: has_adj
                        
                        	has adj
                        	**type**\:  bool
                        
                        .. attribute:: retry_timer
                        
                        	retry timer
                        	**type**\:  bool
                        
                        .. attribute:: running
                        
                        	running
                        	**type**\:  bool
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.brought_up = None
                            self.exist = None
                            self.has_adj = None
                            self.retry_timer = None
                            self.running = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:nii-idb'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.brought_up is not None:
                                return True

                            if self.exist is not None:
                                return True

                            if self.has_adj is not None:
                                return True

                            if self.retry_timer is not None:
                                return True

                            if self.running is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.NsrStatus.IsisNsrInfra.NiiIdb']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:isis-nsr-infra'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ds is not None and self.ds._has_data():
                            return True

                        if self.gen is not None and self.gen._has_data():
                            return True

                        if self.ism is not None and self.ism._has_data():
                            return True

                        if self.ncd is not None:
                            for child_ref in self.ncd:
                                if child_ref._has_data():
                                    return True

                        if self.nii_idb is not None:
                            for child_ref in self.nii_idb:
                                if child_ref._has_data():
                                    return True

                        if self.pm is not None and self.pm._has_data():
                            return True

                        if self.te is not None and self.te._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                        return meta._meta_table['Isis.Instances.Instance.NsrStatus.IsisNsrInfra']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:nsr-status'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.isis_nsr_infra is not None and self.isis_nsr_infra._has_data():
                        return True

                    if self.isis_nsr_peer is not None and self.isis_nsr_peer._has_data():
                        return True

                    if self.isis_vm_state is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                    return meta._meta_table['Isis.Instances.Instance.NsrStatus']['meta_info']


            class Interfaces(object):
                """
                Interface table
                
                .. attribute:: interface
                
                	Information about one IS\-IS interface
                	**type**\: list of  :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.interface = YList()
                    self.interface.parent = self
                    self.interface.name = 'interface'


                class Interface(object):
                    """
                    Information about one IS\-IS interface
                    
                    .. attribute:: interface_name  <key>
                    
                    	Interface name
                    	**type**\:  str
                    
                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                    
                    .. attribute:: configured_circuit_type
                    
                    	Configured circuit type for the interface
                    	**type**\:  :py:class:`IsisLevelsEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelsEnum>`
                    
                    .. attribute:: configured_status
                    
                    	Configured interface status
                    	**type**\:  :py:class:`ConfiguredStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.ConfiguredStatus>`
                    
                    .. attribute:: interface_status_and_data
                    
                    	Information about the interface status and its data
                    	**type**\:  :py:class:`InterfaceStatusAndData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData>`
                    
                    .. attribute:: is_type
                    
                    	IS\-type of the router
                    	**type**\:  :py:class:`IsisLevelsEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelsEnum>`
                    
                    .. attribute:: mesh_group
                    
                    	Interface mesh group
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: nsr_intf
                    
                    	ISIS NSR Interface
                    	**type**\:  bool
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.interface_name = None
                        self.configured_circuit_type = None
                        self.configured_status = Isis.Instances.Instance.Interfaces.Interface.ConfiguredStatus()
                        self.configured_status.parent = self
                        self.interface_status_and_data = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData()
                        self.interface_status_and_data.parent = self
                        self.is_type = None
                        self.mesh_group = None
                        self.nsr_intf = None


                    class ConfiguredStatus(object):
                        """
                        Configured interface status
                        
                        .. attribute:: adjacency_form_status
                        
                        	Configured adjacency formation status
                        	**type**\:  bool
                        
                        .. attribute:: adv_prefix_status
                        
                        	Configured prefix advertisement status
                        	**type**\:  bool
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.adjacency_form_status = None
                            self.adv_prefix_status = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:configured-status'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.adjacency_form_status is not None:
                                return True

                            if self.adv_prefix_status is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.ConfiguredStatus']['meta_info']


                    class InterfaceStatusAndData(object):
                        """
                        Information about the interface status and its
                        data
                        
                        .. attribute:: disabled
                        
                        	The interface state if disabled
                        	**type**\:  :py:class:`Disabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Disabled>`
                        
                        .. attribute:: enabled
                        
                        	The interface state if enabled
                        	**type**\:  :py:class:`Enabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled>`
                        
                        .. attribute:: status
                        
                        	Status
                        	**type**\:  :py:class:`IsisEnabledEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisEnabledEnum>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.disabled = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Disabled()
                            self.disabled.parent = self
                            self.enabled = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled()
                            self.enabled.parent = self
                            self.status = None


                        class Disabled(object):
                            """
                            The interface state if disabled
                            
                            .. attribute:: reason_code
                            
                            	Reason why the interface is disabled
                            	**type**\:  :py:class:`IsisIfDisabledReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfDisabledReasonEnum>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.reason_code = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:disabled'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.reason_code is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Disabled']['meta_info']


                        class Enabled(object):
                            """
                            The interface state if enabled
                            
                            .. attribute:: adjacency_form_status
                            
                            	Interface's Adjacency Formation status
                            	**type**\:  :py:class:`AdjacencyFormStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdjacencyFormStatus>`
                            
                            .. attribute:: adv_prefix_status
                            
                            	Interface's Prefix Advertisement status
                            	**type**\:  :py:class:`AdvPrefixStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdvPrefixStatus>`
                            
                            .. attribute:: bfd_data
                            
                            	The BFD data for the given interface
                            	**type**\:  :py:class:`BfdData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.BfdData>`
                            
                            .. attribute:: clns_data
                            
                            	Interface data specific to CLNS I/O services
                            	**type**\:  :py:class:`ClnsData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData>`
                            
                            .. attribute:: enabled_circuit_type
                            
                            	Enabled Circuit type of the interface
                            	**type**\:  :py:class:`IsisLevelsEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelsEnum>`
                            
                            .. attribute:: interface_media_type
                            
                            	Media type of the interface
                            	**type**\:  :py:class:`IsisMediaClassEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisMediaClassEnum>`
                            
                            .. attribute:: local_circuit_number
                            
                            	Local Circuit Number of the interface
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: p2p_data
                            
                            	Data for an active P2P interface, NULL if not active or P2P
                            	**type**\:  :py:class:`P2PData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.P2PData>`
                            
                            .. attribute:: per_address_family_data
                            
                            	Array of address family information
                            	**type**\: list of  :py:class:`PerAddressFamilyData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData>`
                            
                            .. attribute:: per_area_data
                            
                            	Array of area information for an active interface
                            	**type**\: list of  :py:class:`PerAreaData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAreaData>`
                            
                            .. attribute:: per_topology_data
                            
                            	Array of topology information
                            	**type**\: list of  :py:class:`PerTopologyData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.adjacency_form_status = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdjacencyFormStatus()
                                self.adjacency_form_status.parent = self
                                self.adv_prefix_status = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdvPrefixStatus()
                                self.adv_prefix_status.parent = self
                                self.bfd_data = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.BfdData()
                                self.bfd_data.parent = self
                                self.clns_data = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData()
                                self.clns_data.parent = self
                                self.enabled_circuit_type = None
                                self.interface_media_type = None
                                self.local_circuit_number = None
                                self.p2p_data = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.P2PData()
                                self.p2p_data.parent = self
                                self.per_address_family_data = YList()
                                self.per_address_family_data.parent = self
                                self.per_address_family_data.name = 'per_address_family_data'
                                self.per_area_data = YList()
                                self.per_area_data.parent = self
                                self.per_area_data.name = 'per_area_data'
                                self.per_topology_data = YList()
                                self.per_topology_data.parent = self
                                self.per_topology_data.name = 'per_topology_data'


                            class AdjacencyFormStatus(object):
                                """
                                Interface's Adjacency Formation status
                                
                                .. attribute:: disabled
                                
                                	Disabled info for the adjacency formation status
                                	**type**\:  :py:class:`Disabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdjacencyFormStatus.Disabled>`
                                
                                .. attribute:: status
                                
                                	Status
                                	**type**\:  :py:class:`IsisEnabledEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisEnabledEnum>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.disabled = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdjacencyFormStatus.Disabled()
                                    self.disabled.parent = self
                                    self.status = None


                                class Disabled(object):
                                    """
                                    Disabled info for the adjacency formation status
                                    
                                    .. attribute:: reason_code
                                    
                                    	Reason why the interface is not able to form adjacencies
                                    	**type**\:  :py:class:`IsisIfAdjFormDisabledReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfAdjFormDisabledReasonEnum>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.reason_code = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:disabled'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.reason_code is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdjacencyFormStatus.Disabled']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:adjacency-form-status'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.disabled is not None and self.disabled._has_data():
                                        return True

                                    if self.status is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdjacencyFormStatus']['meta_info']


                            class AdvPrefixStatus(object):
                                """
                                Interface's Prefix Advertisement status
                                
                                .. attribute:: disabled
                                
                                	Disabled info for the prefix advertisement status
                                	**type**\:  :py:class:`Disabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdvPrefixStatus.Disabled>`
                                
                                .. attribute:: status
                                
                                	Status
                                	**type**\:  :py:class:`IsisEnabledEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisEnabledEnum>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.disabled = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdvPrefixStatus.Disabled()
                                    self.disabled.parent = self
                                    self.status = None


                                class Disabled(object):
                                    """
                                    Disabled info for the prefix advertisement
                                    status
                                    
                                    .. attribute:: reason_code
                                    
                                    	Reason why the interface is not able to advertise prefixes
                                    	**type**\:  :py:class:`IsisIfAdvPrefixDisabledReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfAdvPrefixDisabledReasonEnum>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.reason_code = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:disabled'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.reason_code is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdvPrefixStatus.Disabled']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:adv-prefix-status'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.disabled is not None and self.disabled._has_data():
                                        return True

                                    if self.status is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdvPrefixStatus']['meta_info']


                            class P2PData(object):
                                """
                                Data for an active P2P interface, NULL if not
                                active or P2P
                                
                                .. attribute:: extended_circuit_number
                                
                                	Extended Circuit Number valid for a P2P interface
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: retransmit_lsp_interval
                                
                                	Time in ms until the next scheduled LSP is retransmitted
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: retransmit_lsp_queue_size
                                
                                	No. of LSPs queued to be retransmitted
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: time_until_next_iih
                                
                                	Time in ms before the next IIH can be sent
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.extended_circuit_number = None
                                    self.retransmit_lsp_interval = None
                                    self.retransmit_lsp_queue_size = None
                                    self.time_until_next_iih = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:p2p-data'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.extended_circuit_number is not None:
                                        return True

                                    if self.retransmit_lsp_interval is not None:
                                        return True

                                    if self.retransmit_lsp_queue_size is not None:
                                        return True

                                    if self.time_until_next_iih is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.P2PData']['meta_info']


                            class BfdData(object):
                                """
                                The BFD data for the given interface
                                
                                .. attribute:: enabled
                                
                                	IPv4 BFD enabled status
                                	**type**\:  bool
                                
                                .. attribute:: interval
                                
                                	BFD hello minimum interval in milliseconds
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_enabled
                                
                                	IPv6 BFD enabled status
                                	**type**\:  bool
                                
                                .. attribute:: multiplier
                                
                                	BFD hello multiplier
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.enabled = None
                                    self.interval = None
                                    self.ipv6_enabled = None
                                    self.multiplier = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:bfd-data'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.enabled is not None:
                                        return True

                                    if self.interval is not None:
                                        return True

                                    if self.ipv6_enabled is not None:
                                        return True

                                    if self.multiplier is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.BfdData']['meta_info']


                            class ClnsData(object):
                                """
                                Interface data specific to CLNS I/O services
                                
                                .. attribute:: clns_status
                                
                                	Is CLNS protcol up or if not, the reason why it is not up
                                	**type**\:  :py:class:`ClnsStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.ClnsStatus>`
                                
                                .. attribute:: last_lsp_id_transmitted
                                
                                	Last LSP ID Transmitted
                                	**type**\:  str
                                
                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                
                                .. attribute:: last_lsp_level_transmitted
                                
                                	Level of the Last LSP Transmitted
                                	**type**\:  :py:class:`IsisLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelEnum>`
                                
                                .. attribute:: lsp_transmit_requested_flag
                                
                                	TRUE if an LSP transmission has been requested
                                	**type**\:  bool
                                
                                .. attribute:: lsp_transmitted_flag
                                
                                	TRUE if an LSP transmission has been sent, indicates LastLSPLevelTransmitted and LastLSP\_IDTransmitted valid
                                	**type**\:  bool
                                
                                .. attribute:: lsp_txmitd_b2b_limit
                                
                                	Number of LSPs that can be sent back to back in the current window without exceeding the pacing limit
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lsp_txmt_b2b_msecs
                                
                                	Time im msecs indicating the end of the window in which the 'back to back lsps to be sent' counter applies
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: media_specific_state
                                
                                	Media Specific CLNS state
                                	**type**\:  :py:class:`MediaSpecificState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState>`
                                
                                .. attribute:: mtu_info
                                
                                	A valid MTU or the reason for the MTU being invalid
                                	**type**\:  :py:class:`MtuInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MtuInfo>`
                                
                                .. attribute:: snpa_state
                                
                                	SNPA state
                                	**type**\:  :py:class:`SnpaState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.SnpaState>`
                                
                                .. attribute:: time_until_next_lsp
                                
                                	Time until next LSP may be sent (ms)
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.clns_status = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.ClnsStatus()
                                    self.clns_status.parent = self
                                    self.last_lsp_id_transmitted = None
                                    self.last_lsp_level_transmitted = None
                                    self.lsp_transmit_requested_flag = None
                                    self.lsp_transmitted_flag = None
                                    self.lsp_txmitd_b2b_limit = None
                                    self.lsp_txmt_b2b_msecs = None
                                    self.media_specific_state = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState()
                                    self.media_specific_state.parent = self
                                    self.mtu_info = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MtuInfo()
                                    self.mtu_info.parent = self
                                    self.snpa_state = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.SnpaState()
                                    self.snpa_state.parent = self
                                    self.time_until_next_lsp = None


                                class ClnsStatus(object):
                                    """
                                    Is CLNS protcol up or if not, the reason why it
                                    is not up
                                    
                                    .. attribute:: clns_down_info
                                    
                                    	State describing why CLNS is down
                                    	**type**\:  :py:class:`ClnsDownInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.ClnsStatus.ClnsDownInfo>`
                                    
                                    .. attribute:: status
                                    
                                    	Status
                                    	**type**\:  :py:class:`IsisUpEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisUpEnum>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.clns_down_info = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.ClnsStatus.ClnsDownInfo()
                                        self.clns_down_info.parent = self
                                        self.status = None


                                    class ClnsDownInfo(object):
                                        """
                                        State describing why CLNS is down
                                        
                                        .. attribute:: reason_code
                                        
                                        	Reason why CLNS is down
                                        	**type**\:  :py:class:`IsisIfClnsProtoDownReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfClnsProtoDownReasonEnum>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.reason_code = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:clns-down-info'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.reason_code is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.ClnsStatus.ClnsDownInfo']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:clns-status'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.clns_down_info is not None and self.clns_down_info._has_data():
                                            return True

                                        if self.status is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.ClnsStatus']['meta_info']


                                class MtuInfo(object):
                                    """
                                    A valid MTU or the reason for the MTU being
                                    invalid
                                    
                                    .. attribute:: invalid
                                    
                                    	Information pertaining to the invalid CLNS MTU
                                    	**type**\:  :py:class:`Invalid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MtuInfo.Invalid>`
                                    
                                    .. attribute:: mtu
                                    
                                    	Valid MTU
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: status
                                    
                                    	Status
                                    	**type**\:  :py:class:`IsisValidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValidEnum>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.invalid = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MtuInfo.Invalid()
                                        self.invalid.parent = self
                                        self.mtu = None
                                        self.status = None


                                    class Invalid(object):
                                        """
                                        Information pertaining to the invalid CLNS MTU
                                        
                                        .. attribute:: reason_code
                                        
                                        	Reason why the MTU is invalid
                                        	**type**\:  :py:class:`IsisIfClnsMtuInvalidReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfClnsMtuInvalidReasonEnum>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.reason_code = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:invalid'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.reason_code is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MtuInfo.Invalid']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:mtu-info'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.invalid is not None and self.invalid._has_data():
                                            return True

                                        if self.mtu is not None:
                                            return True

                                        if self.status is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MtuInfo']['meta_info']


                                class SnpaState(object):
                                    """
                                    SNPA state
                                    
                                    .. attribute:: known
                                    
                                    	Information pertaining to the known SNPA state
                                    	**type**\:  :py:class:`Known <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.SnpaState.Known>`
                                    
                                    .. attribute:: status
                                    
                                    	Status
                                    	**type**\:  :py:class:`IsisKnownEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisKnownEnum>`
                                    
                                    .. attribute:: unknown
                                    
                                    	Information pertaining to the unknown SNPA state
                                    	**type**\:  :py:class:`Unknown <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.SnpaState.Unknown>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.known = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.SnpaState.Known()
                                        self.known.parent = self
                                        self.status = None
                                        self.unknown = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.SnpaState.Unknown()
                                        self.unknown.parent = self


                                    class Unknown(object):
                                        """
                                        Information pertaining to the unknown SNPA state
                                        
                                        .. attribute:: reason_code
                                        
                                        	Reason why the SNPA is unknown
                                        	**type**\:  :py:class:`IsisIfClnsSnpaUnknownReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfClnsSnpaUnknownReasonEnum>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.reason_code = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:unknown'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.reason_code is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.SnpaState.Unknown']['meta_info']


                                    class Known(object):
                                        """
                                        Information pertaining to the known SNPA state
                                        
                                        .. attribute:: snpa
                                        
                                        	Valid SNPA
                                        	**type**\:  str
                                        
                                        	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.snpa = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:known'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.snpa is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.SnpaState.Known']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:snpa-state'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.known is not None and self.known._has_data():
                                            return True

                                        if self.status is not None:
                                            return True

                                        if self.unknown is not None and self.unknown._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.SnpaState']['meta_info']


                                class MediaSpecificState(object):
                                    """
                                    Media Specific CLNS state
                                    
                                    .. attribute:: clns_lan_data
                                    
                                    	LAN state
                                    	**type**\:  :py:class:`ClnsLanData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData>`
                                    
                                    .. attribute:: clns_media_type
                                    
                                    	CLNSMediaType
                                    	**type**\:  :py:class:`IsisMediaClassEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisMediaClassEnum>`
                                    
                                    .. attribute:: clns_p2p_data
                                    
                                    	Point\-to\-point state
                                    	**type**\:  :py:class:`ClnsP2PData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.clns_lan_data = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData()
                                        self.clns_lan_data.parent = self
                                        self.clns_media_type = None
                                        self.clns_p2p_data = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData()
                                        self.clns_p2p_data.parent = self


                                    class ClnsLanData(object):
                                        """
                                        LAN state
                                        
                                        .. attribute:: per_area_data
                                        
                                        	Array of per area CLNS data
                                        	**type**\: list of  :py:class:`PerAreaData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData.PerAreaData>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.per_area_data = YList()
                                            self.per_area_data.parent = self
                                            self.per_area_data.name = 'per_area_data'


                                        class PerAreaData(object):
                                            """
                                            Array of per area CLNS data
                                            
                                            .. attribute:: level
                                            
                                            	Level of the area
                                            	**type**\:  :py:class:`IsisLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelEnum>`
                                            
                                            .. attribute:: multicast_status
                                            
                                            	Multicast group membership status
                                            	**type**\:  :py:class:`MulticastStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData.PerAreaData.MulticastStatus>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.level = None
                                                self.multicast_status = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData.PerAreaData.MulticastStatus()
                                                self.multicast_status.parent = self


                                            class MulticastStatus(object):
                                                """
                                                Multicast group membership status
                                                
                                                .. attribute:: invalid
                                                
                                                	Information pertaining to the invalid multicast status
                                                	**type**\:  :py:class:`Invalid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData.PerAreaData.MulticastStatus.Invalid>`
                                                
                                                .. attribute:: status
                                                
                                                	Status
                                                	**type**\:  :py:class:`IsisValidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValidEnum>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.invalid = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData.PerAreaData.MulticastStatus.Invalid()
                                                    self.invalid.parent = self
                                                    self.status = None


                                                class Invalid(object):
                                                    """
                                                    Information pertaining to the invalid multicast
                                                    status
                                                    
                                                    .. attribute:: reason_code
                                                    
                                                    	Reason why the multicast status is invalid
                                                    	**type**\:  :py:class:`IsisIfMcastInvalidReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfMcastInvalidReasonEnum>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2015-11-09'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.reason_code = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:invalid'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return False

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.reason_code is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                        return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData.PerAreaData.MulticastStatus.Invalid']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:multicast-status'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.invalid is not None and self.invalid._has_data():
                                                        return True

                                                    if self.status is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData.PerAreaData.MulticastStatus']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:per-area-data'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.level is not None:
                                                    return True

                                                if self.multicast_status is not None and self.multicast_status._has_data():
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData.PerAreaData']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:clns-lan-data'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.per_area_data is not None:
                                                for child_ref in self.per_area_data:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData']['meta_info']


                                    class ClnsP2PData(object):
                                        """
                                        Point\-to\-point state
                                        
                                        .. attribute:: p2p_over_lan_data
                                        
                                        	Point\-to\-point over LAN data
                                        	**type**\:  :py:class:`P2POverLanData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData.P2POverLanData>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.p2p_over_lan_data = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData.P2POverLanData()
                                            self.p2p_over_lan_data.parent = self


                                        class P2POverLanData(object):
                                            """
                                            Point\-to\-point over LAN data
                                            
                                            .. attribute:: multicast_status
                                            
                                            	Multicast group membership status
                                            	**type**\:  :py:class:`MulticastStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData.P2POverLanData.MulticastStatus>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.multicast_status = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData.P2POverLanData.MulticastStatus()
                                                self.multicast_status.parent = self


                                            class MulticastStatus(object):
                                                """
                                                Multicast group membership status
                                                
                                                .. attribute:: invalid
                                                
                                                	Information pertaining to the invalid multicast status
                                                	**type**\:  :py:class:`Invalid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData.P2POverLanData.MulticastStatus.Invalid>`
                                                
                                                .. attribute:: status
                                                
                                                	Status
                                                	**type**\:  :py:class:`IsisValidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValidEnum>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.invalid = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData.P2POverLanData.MulticastStatus.Invalid()
                                                    self.invalid.parent = self
                                                    self.status = None


                                                class Invalid(object):
                                                    """
                                                    Information pertaining to the invalid multicast
                                                    status
                                                    
                                                    .. attribute:: reason_code
                                                    
                                                    	Reason why the multicast status is invalid
                                                    	**type**\:  :py:class:`IsisIfMcastInvalidReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfMcastInvalidReasonEnum>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2015-11-09'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.reason_code = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:invalid'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return False

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.reason_code is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                        return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData.P2POverLanData.MulticastStatus.Invalid']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:multicast-status'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.invalid is not None and self.invalid._has_data():
                                                        return True

                                                    if self.status is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData.P2POverLanData.MulticastStatus']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:p2p-over-lan-data'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.multicast_status is not None and self.multicast_status._has_data():
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData.P2POverLanData']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:clns-p2p-data'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.p2p_over_lan_data is not None and self.p2p_over_lan_data._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:media-specific-state'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.clns_lan_data is not None and self.clns_lan_data._has_data():
                                            return True

                                        if self.clns_media_type is not None:
                                            return True

                                        if self.clns_p2p_data is not None and self.clns_p2p_data._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:clns-data'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.clns_status is not None and self.clns_status._has_data():
                                        return True

                                    if self.last_lsp_id_transmitted is not None:
                                        return True

                                    if self.last_lsp_level_transmitted is not None:
                                        return True

                                    if self.lsp_transmit_requested_flag is not None:
                                        return True

                                    if self.lsp_transmitted_flag is not None:
                                        return True

                                    if self.lsp_txmitd_b2b_limit is not None:
                                        return True

                                    if self.lsp_txmt_b2b_msecs is not None:
                                        return True

                                    if self.media_specific_state is not None and self.media_specific_state._has_data():
                                        return True

                                    if self.mtu_info is not None and self.mtu_info._has_data():
                                        return True

                                    if self.snpa_state is not None and self.snpa_state._has_data():
                                        return True

                                    if self.time_until_next_lsp is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData']['meta_info']


                            class PerAreaData(object):
                                """
                                Array of area information for an active
                                interface
                                
                                .. attribute:: adjacency_count
                                
                                	Number of adjacencies
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lan_data
                                
                                	LAN data, NULL iff interface has non\-LAN media type
                                	**type**\:  :py:class:`LanData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAreaData.LanData>`
                                
                                .. attribute:: level
                                
                                	Level of the area
                                	**type**\:  :py:class:`IsisLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelEnum>`
                                
                                .. attribute:: lsp_pacing_interval
                                
                                	LSP pacing time period (ms)
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: psnp_transmit_queue_size
                                
                                	No. of SNP entries queued to be transmitted
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.adjacency_count = None
                                    self.lan_data = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAreaData.LanData()
                                    self.lan_data.parent = self
                                    self.level = None
                                    self.lsp_pacing_interval = None
                                    self.psnp_transmit_queue_size = None


                                class LanData(object):
                                    """
                                    LAN data, NULL iff interface has non\-LAN media
                                    type
                                    
                                    .. attribute:: are_we_dis
                                    
                                    	Flag indicating if this LAN circuit is the DIS
                                    	**type**\:  bool
                                    
                                    .. attribute:: circuit_lan_id
                                    
                                    	Circuit LAN ID
                                    	**type**\:  str
                                    
                                    	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                    
                                    .. attribute:: dispriority
                                    
                                    	Priority of current DIS on this LAN
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: interface_priority
                                    
                                    	Interface's DIS\-election priority
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: time_until_next_iih
                                    
                                    	Time (ms) until next IIH
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.are_we_dis = None
                                        self.circuit_lan_id = None
                                        self.dispriority = None
                                        self.interface_priority = None
                                        self.time_until_next_iih = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:lan-data'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.are_we_dis is not None:
                                            return True

                                        if self.circuit_lan_id is not None:
                                            return True

                                        if self.dispriority is not None:
                                            return True

                                        if self.interface_priority is not None:
                                            return True

                                        if self.time_until_next_iih is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAreaData.LanData']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:per-area-data'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.adjacency_count is not None:
                                        return True

                                    if self.lan_data is not None and self.lan_data._has_data():
                                        return True

                                    if self.level is not None:
                                        return True

                                    if self.lsp_pacing_interval is not None:
                                        return True

                                    if self.psnp_transmit_queue_size is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAreaData']['meta_info']


                            class PerTopologyData(object):
                                """
                                Array of topology information
                                
                                .. attribute:: status
                                
                                	Status of the topology
                                	**type**\:  :py:class:`Status <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status>`
                                
                                .. attribute:: topology_id
                                
                                	Topology identifier
                                	**type**\:  :py:class:`TopologyId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.TopologyId>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.status = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status()
                                    self.status.parent = self
                                    self.topology_id = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.TopologyId()
                                    self.topology_id.parent = self


                                class TopologyId(object):
                                    """
                                    Topology identifier
                                    
                                    .. attribute:: af_name
                                    
                                    	AF name
                                    	**type**\:  :py:class:`IsisAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfIdEnum>`
                                    
                                    .. attribute:: saf_name
                                    
                                    	Sub\-AF name
                                    	**type**\:  :py:class:`IsisSubAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisSubAfIdEnum>`
                                    
                                    .. attribute:: topology_name
                                    
                                    	Topology Name
                                    	**type**\:  str
                                    
                                    .. attribute:: vrf_name
                                    
                                    	VRF Name
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.af_name = None
                                        self.saf_name = None
                                        self.topology_name = None
                                        self.vrf_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:topology-id'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.af_name is not None:
                                            return True

                                        if self.saf_name is not None:
                                            return True

                                        if self.topology_name is not None:
                                            return True

                                        if self.vrf_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.TopologyId']['meta_info']


                                class Status(object):
                                    """
                                    Status of the topology
                                    
                                    .. attribute:: disabled
                                    
                                    	Disabled information of a topology
                                    	**type**\:  :py:class:`Disabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Disabled>`
                                    
                                    .. attribute:: enabled
                                    
                                    	Enabled information of a topology
                                    	**type**\:  :py:class:`Enabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled>`
                                    
                                    .. attribute:: status
                                    
                                    	Status
                                    	**type**\:  :py:class:`IsisEnabledEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisEnabledEnum>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.disabled = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Disabled()
                                        self.disabled.parent = self
                                        self.enabled = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled()
                                        self.enabled.parent = self
                                        self.status = None


                                    class Disabled(object):
                                        """
                                        Disabled information of a topology
                                        
                                        .. attribute:: reason_code
                                        
                                        	Reason why the topology is disabled
                                        	**type**\:  :py:class:`IsisIfTopoDisabledReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfTopoDisabledReasonEnum>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.reason_code = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:disabled'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.reason_code is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Disabled']['meta_info']


                                    class Enabled(object):
                                        """
                                        Enabled information of a topology
                                        
                                        .. attribute:: adjacency_form_status
                                        
                                        	Adjacency formation status of a topology
                                        	**type**\:  :py:class:`AdjacencyFormStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled.AdjacencyFormStatus>`
                                        
                                        .. attribute:: adv_prefix_status
                                        
                                        	Prefix advertisement status of a topology
                                        	**type**\:  :py:class:`AdvPrefixStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled.AdvPrefixStatus>`
                                        
                                        .. attribute:: ld_pv6_sync_status
                                        
                                        	Status of MPLS LDPv6 synchronization
                                        	**type**\:  bool
                                        
                                        .. attribute:: ldp_sync_status
                                        
                                        	Status of MPLS LDP synchronization
                                        	**type**\:  bool
                                        
                                        .. attribute:: level1_lkgp_configured
                                        
                                        	Link\-Group configure status for L1
                                        	**type**\:  bool
                                        
                                        .. attribute:: level1_metric
                                        
                                        	L1 metric for this topology
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: level1_offset_metric
                                        
                                        	L1 metric\-offset for this topology
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: level1_weight
                                        
                                        	L1 metric for this topology
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: level1ldp_sync_enabled
                                        
                                        	MPLS LDP sync enabled status for L1
                                        	**type**\:  bool
                                        
                                        .. attribute:: level1pp_configured
                                        
                                        	PP configure status for L1
                                        	**type**\:  bool
                                        
                                        .. attribute:: level1pp_metric
                                        
                                        	L1 PP\-metric for this topology
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: level2_lkgp_configured
                                        
                                        	Link\-Group configure status for L2
                                        	**type**\:  bool
                                        
                                        .. attribute:: level2_metric
                                        
                                        	L2 metric for this topology
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: level2_offset_metric
                                        
                                        	L2 metric\-offset for this topology
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: level2_weight
                                        
                                        	L2 metric for this topology
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: level2ldp_sync_enabled
                                        
                                        	MPLS LDP sync enabled status for L2
                                        	**type**\:  bool
                                        
                                        .. attribute:: level2pp_configured
                                        
                                        	PP configure status for L2
                                        	**type**\:  bool
                                        
                                        .. attribute:: level2pp_metric
                                        
                                        	L2 PP\-metric for this topology
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: max_label_supported
                                        
                                        	MPLS maximum number of labels supported
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.adjacency_form_status = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled.AdjacencyFormStatus()
                                            self.adjacency_form_status.parent = self
                                            self.adv_prefix_status = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled.AdvPrefixStatus()
                                            self.adv_prefix_status.parent = self
                                            self.ld_pv6_sync_status = None
                                            self.ldp_sync_status = None
                                            self.level1_lkgp_configured = None
                                            self.level1_metric = None
                                            self.level1_offset_metric = None
                                            self.level1_weight = None
                                            self.level1ldp_sync_enabled = None
                                            self.level1pp_configured = None
                                            self.level1pp_metric = None
                                            self.level2_lkgp_configured = None
                                            self.level2_metric = None
                                            self.level2_offset_metric = None
                                            self.level2_weight = None
                                            self.level2ldp_sync_enabled = None
                                            self.level2pp_configured = None
                                            self.level2pp_metric = None
                                            self.max_label_supported = None


                                        class AdjacencyFormStatus(object):
                                            """
                                            Adjacency formation status of a topology
                                            
                                            .. attribute:: disabled
                                            
                                            	Disabled state for the adjacency formation status of a topology
                                            	**type**\:  :py:class:`Disabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled.AdjacencyFormStatus.Disabled>`
                                            
                                            .. attribute:: status
                                            
                                            	Status
                                            	**type**\:  :py:class:`IsisEnabledEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisEnabledEnum>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.disabled = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled.AdjacencyFormStatus.Disabled()
                                                self.disabled.parent = self
                                                self.status = None


                                            class Disabled(object):
                                                """
                                                Disabled state for the adjacency formation
                                                status of a topology
                                                
                                                .. attribute:: reason_code
                                                
                                                	Reason why the adjacency formation status of a topology is disabled
                                                	**type**\:  :py:class:`IsisIfTopoAdjFormDisabledReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfTopoAdjFormDisabledReasonEnum>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.reason_code = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:disabled'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.reason_code is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled.AdjacencyFormStatus.Disabled']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:adjacency-form-status'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.disabled is not None and self.disabled._has_data():
                                                    return True

                                                if self.status is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled.AdjacencyFormStatus']['meta_info']


                                        class AdvPrefixStatus(object):
                                            """
                                            Prefix advertisement status of a topology
                                            
                                            .. attribute:: disabled
                                            
                                            	Disabled state for the prefix advertisement status of a topology
                                            	**type**\:  :py:class:`Disabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled.AdvPrefixStatus.Disabled>`
                                            
                                            .. attribute:: status
                                            
                                            	Status
                                            	**type**\:  :py:class:`IsisEnabledEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisEnabledEnum>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.disabled = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled.AdvPrefixStatus.Disabled()
                                                self.disabled.parent = self
                                                self.status = None


                                            class Disabled(object):
                                                """
                                                Disabled state for the prefix advertisement
                                                status of a topology
                                                
                                                .. attribute:: reason_code
                                                
                                                	Reason why the prefix advertisement status of a topology is disabled
                                                	**type**\:  :py:class:`IsisIfTopoAdvPrefixDisabledReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfTopoAdvPrefixDisabledReasonEnum>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.reason_code = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:disabled'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.reason_code is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled.AdvPrefixStatus.Disabled']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:adv-prefix-status'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.disabled is not None and self.disabled._has_data():
                                                    return True

                                                if self.status is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled.AdvPrefixStatus']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:enabled'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.adjacency_form_status is not None and self.adjacency_form_status._has_data():
                                                return True

                                            if self.adv_prefix_status is not None and self.adv_prefix_status._has_data():
                                                return True

                                            if self.ld_pv6_sync_status is not None:
                                                return True

                                            if self.ldp_sync_status is not None:
                                                return True

                                            if self.level1_lkgp_configured is not None:
                                                return True

                                            if self.level1_metric is not None:
                                                return True

                                            if self.level1_offset_metric is not None:
                                                return True

                                            if self.level1_weight is not None:
                                                return True

                                            if self.level1ldp_sync_enabled is not None:
                                                return True

                                            if self.level1pp_configured is not None:
                                                return True

                                            if self.level1pp_metric is not None:
                                                return True

                                            if self.level2_lkgp_configured is not None:
                                                return True

                                            if self.level2_metric is not None:
                                                return True

                                            if self.level2_offset_metric is not None:
                                                return True

                                            if self.level2_weight is not None:
                                                return True

                                            if self.level2ldp_sync_enabled is not None:
                                                return True

                                            if self.level2pp_configured is not None:
                                                return True

                                            if self.level2pp_metric is not None:
                                                return True

                                            if self.max_label_supported is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:status'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.disabled is not None and self.disabled._has_data():
                                            return True

                                        if self.enabled is not None and self.enabled._has_data():
                                            return True

                                        if self.status is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:per-topology-data'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.status is not None and self.status._has_data():
                                        return True

                                    if self.topology_id is not None and self.topology_id._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData']['meta_info']


                            class PerAddressFamilyData(object):
                                """
                                Array of address family information
                                
                                .. attribute:: af_name
                                
                                	Address Family Identifier of the interface
                                	**type**\:  :py:class:`IsisAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfIdEnum>`
                                
                                .. attribute:: af_status
                                
                                	Address Family status of the interface
                                	**type**\:  :py:class:`AfStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.af_name = None
                                    self.af_status = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus()
                                    self.af_status.parent = self


                                class AfStatus(object):
                                    """
                                    Address Family status of the interface
                                    
                                    .. attribute:: af_data
                                    
                                    	Enabled data for the AF of an interface
                                    	**type**\:  :py:class:`AfData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData>`
                                    
                                    .. attribute:: disabled
                                    
                                    	Disabled info for the AF of an interface
                                    	**type**\:  :py:class:`Disabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.Disabled>`
                                    
                                    .. attribute:: status
                                    
                                    	Status
                                    	**type**\:  :py:class:`IsisEnabledEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisEnabledEnum>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.af_data = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData()
                                        self.af_data.parent = self
                                        self.disabled = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.Disabled()
                                        self.disabled.parent = self
                                        self.status = None


                                    class Disabled(object):
                                        """
                                        Disabled info for the AF of an interface
                                        
                                        .. attribute:: reason_code
                                        
                                        	Reason why the Address Family is disabled
                                        	**type**\:  :py:class:`IsisIfAfDisabledReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfAfDisabledReasonEnum>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.reason_code = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:disabled'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.reason_code is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.Disabled']['meta_info']


                                    class AfData(object):
                                        """
                                        Enabled data for the AF of an interface
                                        
                                        .. attribute:: forwarding_address_status
                                        
                                        	Forwarding status of the AF
                                        	**type**\:  :py:class:`ForwardingAddressStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus>`
                                        
                                        .. attribute:: prefix_status
                                        
                                        	Prefix status of the AF
                                        	**type**\:  :py:class:`PrefixStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus>`
                                        
                                        .. attribute:: protocol_status
                                        
                                        	Protocol status of the AF
                                        	**type**\:  :py:class:`ProtocolStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ProtocolStatus>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.forwarding_address_status = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus()
                                            self.forwarding_address_status.parent = self
                                            self.prefix_status = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus()
                                            self.prefix_status.parent = self
                                            self.protocol_status = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ProtocolStatus()
                                            self.protocol_status.parent = self


                                        class ProtocolStatus(object):
                                            """
                                            Protocol status of the AF
                                            
                                            .. attribute:: disabled
                                            
                                            	Disabled state of the Address Family protocol
                                            	**type**\:  :py:class:`Disabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ProtocolStatus.Disabled>`
                                            
                                            .. attribute:: status
                                            
                                            	Status
                                            	**type**\:  :py:class:`IsisUpEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisUpEnum>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.disabled = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ProtocolStatus.Disabled()
                                                self.disabled.parent = self
                                                self.status = None


                                            class Disabled(object):
                                                """
                                                Disabled state of the Address Family protocol
                                                
                                                .. attribute:: reason_code
                                                
                                                	Reason why the Address Family protocol status is down
                                                	**type**\:  :py:class:`IsisIfAfProtoDownReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfAfProtoDownReasonEnum>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.reason_code = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:disabled'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.reason_code is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ProtocolStatus.Disabled']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:protocol-status'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.disabled is not None and self.disabled._has_data():
                                                    return True

                                                if self.status is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ProtocolStatus']['meta_info']


                                        class ForwardingAddressStatus(object):
                                            """
                                            Forwarding status of the AF
                                            
                                            .. attribute:: forwarding_address_data
                                            
                                            	Known Forwarding address data
                                            	**type**\:  :py:class:`ForwardingAddressData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus.ForwardingAddressData>`
                                            
                                            .. attribute:: status
                                            
                                            	Status
                                            	**type**\:  :py:class:`IsisKnownEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisKnownEnum>`
                                            
                                            .. attribute:: unknown
                                            
                                            	Unknown forwarding address data
                                            	**type**\:  :py:class:`Unknown <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus.Unknown>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.forwarding_address_data = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus.ForwardingAddressData()
                                                self.forwarding_address_data.parent = self
                                                self.status = None
                                                self.unknown = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus.Unknown()
                                                self.unknown.parent = self


                                            class Unknown(object):
                                                """
                                                Unknown forwarding address data
                                                
                                                .. attribute:: reason_code
                                                
                                                	Reason why the forwarding address(es) of an AF is(are) unknown
                                                	**type**\:  :py:class:`IsisIfAfFwdAddrUnknownReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfAfFwdAddrUnknownReasonEnum>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.reason_code = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:unknown'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.reason_code is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus.Unknown']['meta_info']


                                            class ForwardingAddressData(object):
                                                """
                                                Known Forwarding address data
                                                
                                                .. attribute:: forwarding_address
                                                
                                                	Array of forwarding addresses
                                                	**type**\: list of  :py:class:`ForwardingAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus.ForwardingAddressData.ForwardingAddress>`
                                                
                                                .. attribute:: unnumbered_interface_name
                                                
                                                	If the interface is unnumbered, then its name, else NULL
                                                	**type**\:  str
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.forwarding_address = YList()
                                                    self.forwarding_address.parent = self
                                                    self.forwarding_address.name = 'forwarding_address'
                                                    self.unnumbered_interface_name = None


                                                class ForwardingAddress(object):
                                                    """
                                                    Array of forwarding addresses
                                                    
                                                    .. attribute:: af_name
                                                    
                                                    	AFName
                                                    	**type**\:  :py:class:`IsisAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfIdEnum>`
                                                    
                                                    .. attribute:: ipv4
                                                    
                                                    	IPV4 address type
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: ipv6
                                                    
                                                    	IPV6 address type
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2015-11-09'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.af_name = None
                                                        self.ipv4 = None
                                                        self.ipv6 = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:forwarding-address'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return False

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.af_name is not None:
                                                            return True

                                                        if self.ipv4 is not None:
                                                            return True

                                                        if self.ipv6 is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                        return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus.ForwardingAddressData.ForwardingAddress']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:forwarding-address-data'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.forwarding_address is not None:
                                                        for child_ref in self.forwarding_address:
                                                            if child_ref._has_data():
                                                                return True

                                                    if self.unnumbered_interface_name is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus.ForwardingAddressData']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:forwarding-address-status'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.forwarding_address_data is not None and self.forwarding_address_data._has_data():
                                                    return True

                                                if self.status is not None:
                                                    return True

                                                if self.unknown is not None and self.unknown._has_data():
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus']['meta_info']


                                        class PrefixStatus(object):
                                            """
                                            Prefix status of the AF
                                            
                                            .. attribute:: prefix_data
                                            
                                            	Global prefix data for the Address Family
                                            	**type**\:  :py:class:`PrefixData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData>`
                                            
                                            .. attribute:: status
                                            
                                            	Status
                                            	**type**\:  :py:class:`IsisKnownEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisKnownEnum>`
                                            
                                            .. attribute:: unknown
                                            
                                            	Unknown state for the global prefixes
                                            	**type**\:  :py:class:`Unknown <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.Unknown>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.prefix_data = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData()
                                                self.prefix_data.parent = self
                                                self.status = None
                                                self.unknown = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.Unknown()
                                                self.unknown.parent = self


                                            class Unknown(object):
                                                """
                                                Unknown state for the global prefixes
                                                
                                                .. attribute:: reason_code
                                                
                                                	Reason why the global prefix(es) is(are) unknown
                                                	**type**\:  :py:class:`IsisIfAfPrefixUnknownReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfAfPrefixUnknownReasonEnum>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.reason_code = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:unknown'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.reason_code is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.Unknown']['meta_info']


                                            class PrefixData(object):
                                                """
                                                Global prefix data for the Address Family
                                                
                                                .. attribute:: is_unnumbered
                                                
                                                	Is the interface unnumbered
                                                	**type**\:  bool
                                                
                                                .. attribute:: prefix
                                                
                                                	Array of global prefixes
                                                	**type**\: list of  :py:class:`Prefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData.Prefix>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2015-11-09'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.is_unnumbered = None
                                                    self.prefix = YList()
                                                    self.prefix.parent = self
                                                    self.prefix.name = 'prefix'


                                                class Prefix(object):
                                                    """
                                                    Array of global prefixes
                                                    
                                                    .. attribute:: af_name
                                                    
                                                    	AFName
                                                    	**type**\:  :py:class:`IsisAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfIdEnum>`
                                                    
                                                    .. attribute:: ipv4
                                                    
                                                    	ipv4
                                                    	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData.Prefix.Ipv4>`
                                                    
                                                    .. attribute:: ipv6
                                                    
                                                    	ipv6
                                                    	**type**\:  :py:class:`Ipv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData.Prefix.Ipv6>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2015-11-09'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.af_name = None
                                                        self.ipv4 = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData.Prefix.Ipv4()
                                                        self.ipv4.parent = self
                                                        self.ipv6 = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData.Prefix.Ipv6()
                                                        self.ipv6.parent = self


                                                    class Ipv4(object):
                                                        """
                                                        ipv4
                                                        
                                                        .. attribute:: prefix
                                                        
                                                        	prefix
                                                        	**type**\:  str
                                                        
                                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                        
                                                        .. attribute:: prefix_length
                                                        
                                                        	prefix length
                                                        	**type**\:  int
                                                        
                                                        	**range:** 0..255
                                                        
                                                        

                                                        """

                                                        _prefix = 'clns-isis-oper'
                                                        _revision = '2015-11-09'

                                                        def __init__(self):
                                                            self.parent = None
                                                            self.prefix = None
                                                            self.prefix_length = None

                                                        @property
                                                        def _common_path(self):
                                                            if self.parent is None:
                                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ipv4'

                                                        def is_config(self):
                                                            ''' Returns True if this instance represents config data else returns False '''
                                                            return False

                                                        def _has_data(self):
                                                            if not self.is_config():
                                                                return False
                                                            if self.prefix is not None:
                                                                return True

                                                            if self.prefix_length is not None:
                                                                return True

                                                            return False

                                                        @staticmethod
                                                        def _meta_info():
                                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                            return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData.Prefix.Ipv4']['meta_info']


                                                    class Ipv6(object):
                                                        """
                                                        ipv6
                                                        
                                                        .. attribute:: prefix
                                                        
                                                        	prefix
                                                        	**type**\:  str
                                                        
                                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                        
                                                        .. attribute:: prefix_length
                                                        
                                                        	prefix length
                                                        	**type**\:  int
                                                        
                                                        	**range:** 0..255
                                                        
                                                        

                                                        """

                                                        _prefix = 'clns-isis-oper'
                                                        _revision = '2015-11-09'

                                                        def __init__(self):
                                                            self.parent = None
                                                            self.prefix = None
                                                            self.prefix_length = None

                                                        @property
                                                        def _common_path(self):
                                                            if self.parent is None:
                                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:ipv6'

                                                        def is_config(self):
                                                            ''' Returns True if this instance represents config data else returns False '''
                                                            return False

                                                        def _has_data(self):
                                                            if not self.is_config():
                                                                return False
                                                            if self.prefix is not None:
                                                                return True

                                                            if self.prefix_length is not None:
                                                                return True

                                                            return False

                                                        @staticmethod
                                                        def _meta_info():
                                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                            return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData.Prefix.Ipv6']['meta_info']

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:prefix'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return False

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.af_name is not None:
                                                            return True

                                                        if self.ipv4 is not None and self.ipv4._has_data():
                                                            return True

                                                        if self.ipv6 is not None and self.ipv6._has_data():
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                        return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData.Prefix']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:prefix-data'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return False

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.is_unnumbered is not None:
                                                        return True

                                                    if self.prefix is not None:
                                                        for child_ref in self.prefix:
                                                            if child_ref._has_data():
                                                                return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                    return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:prefix-status'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.prefix_data is not None and self.prefix_data._has_data():
                                                    return True

                                                if self.status is not None:
                                                    return True

                                                if self.unknown is not None and self.unknown._has_data():
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                                return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:af-data'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.forwarding_address_status is not None and self.forwarding_address_status._has_data():
                                                return True

                                            if self.prefix_status is not None and self.prefix_status._has_data():
                                                return True

                                            if self.protocol_status is not None and self.protocol_status._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                            return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:af-status'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.af_data is not None and self.af_data._has_data():
                                            return True

                                        if self.disabled is not None and self.disabled._has_data():
                                            return True

                                        if self.status is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                        return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:per-address-family-data'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.af_name is not None:
                                        return True

                                    if self.af_status is not None and self.af_status._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:enabled'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.adjacency_form_status is not None and self.adjacency_form_status._has_data():
                                    return True

                                if self.adv_prefix_status is not None and self.adv_prefix_status._has_data():
                                    return True

                                if self.bfd_data is not None and self.bfd_data._has_data():
                                    return True

                                if self.clns_data is not None and self.clns_data._has_data():
                                    return True

                                if self.enabled_circuit_type is not None:
                                    return True

                                if self.interface_media_type is not None:
                                    return True

                                if self.local_circuit_number is not None:
                                    return True

                                if self.p2p_data is not None and self.p2p_data._has_data():
                                    return True

                                if self.per_address_family_data is not None:
                                    for child_ref in self.per_address_family_data:
                                        if child_ref._has_data():
                                            return True

                                if self.per_area_data is not None:
                                    for child_ref in self.per_area_data:
                                        if child_ref._has_data():
                                            return True

                                if self.per_topology_data is not None:
                                    for child_ref in self.per_topology_data:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:interface-status-and-data'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.disabled is not None and self.disabled._has_data():
                                return True

                            if self.enabled is not None and self.enabled._has_data():
                                return True

                            if self.status is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.interface_name is None:
                            raise YPYModelError('Key property interface_name is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:interface[Cisco-IOS-XR-clns-isis-oper:interface-name = ' + str(self.interface_name) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.interface_name is not None:
                            return True

                        if self.configured_circuit_type is not None:
                            return True

                        if self.configured_status is not None and self.configured_status._has_data():
                            return True

                        if self.interface_status_and_data is not None and self.interface_status_and_data._has_data():
                            return True

                        if self.is_type is not None:
                            return True

                        if self.mesh_group is not None:
                            return True

                        if self.nsr_intf is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                        return meta._meta_table['Isis.Instances.Instance.Interfaces.Interface']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:interfaces'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.interface is not None:
                        for child_ref in self.interface:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                    return meta._meta_table['Isis.Instances.Instance.Interfaces']['meta_info']


            class CheckpointAdjacencies(object):
                """
                Checkpointed adjacency table
                
                .. attribute:: checkpoint_adjacency
                
                	A checkpointed IS\-IS adjacency
                	**type**\: list of  :py:class:`CheckpointAdjacency <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.CheckpointAdjacencies.CheckpointAdjacency>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.checkpoint_adjacency = YList()
                    self.checkpoint_adjacency.parent = self
                    self.checkpoint_adjacency.name = 'checkpoint_adjacency'


                class CheckpointAdjacency(object):
                    """
                    A checkpointed IS\-IS adjacency
                    
                    .. attribute:: checkpoint_adjacency_circuit_number
                    
                    	Neighbor circuit number
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: checkpoint_adjacency_holdtime
                    
                    	Adjacency holdtime (s)
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: checkpoint_adjacency_interface
                    
                    	Local interface
                    	**type**\:  str
                    
                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                    
                    .. attribute:: checkpoint_adjacency_lan_priority
                    
                    	Adjacency LAN priority
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: checkpoint_adjacency_level
                    
                    	Adjacency level
                    	**type**\:  :py:class:`IsisLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelEnum>`
                    
                    .. attribute:: checkpoint_adjacency_object_id
                    
                    	Checkpoint object ID
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: checkpoint_adjacency_per_address_family_next_hop
                    
                    	Per address family next hops
                    	**type**\: list of  :py:class:`CheckpointAdjacencyPerAddressFamilyNextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.CheckpointAdjacencies.CheckpointAdjacency.CheckpointAdjacencyPerAddressFamilyNextHop>`
                    
                    .. attribute:: checkpoint_adjacency_snpa
                    
                    	Neighbor SNPA
                    	**type**\:  str
                    
                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                    
                    .. attribute:: checkpoint_adjacency_system_id
                    
                    	Neighbor system ID
                    	**type**\:  str
                    
                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                    
                    .. attribute:: interface_name
                    
                    	Interface name
                    	**type**\:  str
                    
                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                    
                    .. attribute:: level
                    
                    	Level
                    	**type**\:  :py:class:`IsisInternalLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_datatypes.IsisInternalLevelEnum>`
                    
                    .. attribute:: system_id
                    
                    	System ID
                    	**type**\:  str
                    
                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.checkpoint_adjacency_circuit_number = None
                        self.checkpoint_adjacency_holdtime = None
                        self.checkpoint_adjacency_interface = None
                        self.checkpoint_adjacency_lan_priority = None
                        self.checkpoint_adjacency_level = None
                        self.checkpoint_adjacency_object_id = None
                        self.checkpoint_adjacency_per_address_family_next_hop = YList()
                        self.checkpoint_adjacency_per_address_family_next_hop.parent = self
                        self.checkpoint_adjacency_per_address_family_next_hop.name = 'checkpoint_adjacency_per_address_family_next_hop'
                        self.checkpoint_adjacency_snpa = None
                        self.checkpoint_adjacency_system_id = None
                        self.interface_name = None
                        self.level = None
                        self.system_id = None


                    class CheckpointAdjacencyPerAddressFamilyNextHop(object):
                        """
                        Per address family next hops
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IsisAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfIdEnum>`
                        
                        .. attribute:: ipv4
                        
                        	IPV4 address type
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPV6 address type
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.af_name = None
                            self.ipv4 = None
                            self.ipv6 = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:checkpoint-adjacency-per-address-family-next-hop'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.af_name is not None:
                                return True

                            if self.ipv4 is not None:
                                return True

                            if self.ipv6 is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.CheckpointAdjacencies.CheckpointAdjacency.CheckpointAdjacencyPerAddressFamilyNextHop']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:checkpoint-adjacency'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.checkpoint_adjacency_circuit_number is not None:
                            return True

                        if self.checkpoint_adjacency_holdtime is not None:
                            return True

                        if self.checkpoint_adjacency_interface is not None:
                            return True

                        if self.checkpoint_adjacency_lan_priority is not None:
                            return True

                        if self.checkpoint_adjacency_level is not None:
                            return True

                        if self.checkpoint_adjacency_object_id is not None:
                            return True

                        if self.checkpoint_adjacency_per_address_family_next_hop is not None:
                            for child_ref in self.checkpoint_adjacency_per_address_family_next_hop:
                                if child_ref._has_data():
                                    return True

                        if self.checkpoint_adjacency_snpa is not None:
                            return True

                        if self.checkpoint_adjacency_system_id is not None:
                            return True

                        if self.interface_name is not None:
                            return True

                        if self.level is not None:
                            return True

                        if self.system_id is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                        return meta._meta_table['Isis.Instances.Instance.CheckpointAdjacencies.CheckpointAdjacency']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:checkpoint-adjacencies'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.checkpoint_adjacency is not None:
                        for child_ref in self.checkpoint_adjacency:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                    return meta._meta_table['Isis.Instances.Instance.CheckpointAdjacencies']['meta_info']


            class ErrorLog(object):
                """
                Log of errors and warnings
                
                .. attribute:: log_entry
                
                	Error Log entries
                	**type**\: list of  :py:class:`LogEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.ErrorLog.LogEntry>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.log_entry = YList()
                    self.log_entry.parent = self
                    self.log_entry.name = 'log_entry'


                class LogEntry(object):
                    """
                    Error Log entries
                    
                    .. attribute:: error_code
                    
                    	Error code
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: error_log_level
                    
                    	Logging level
                    	**type**\:  :py:class:`IsisErrLogLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisErrLogLevelEnum>`
                    
                    .. attribute:: error_reason
                    
                    	Error details
                    	**type**\:  str
                    
                    .. attribute:: generic_data
                    
                    	Generic entry data
                    	**type**\:  :py:class:`GenericData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.ErrorLog.LogEntry.GenericData>`
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.error_code = None
                        self.error_log_level = None
                        self.error_reason = None
                        self.generic_data = Isis.Instances.Instance.ErrorLog.LogEntry.GenericData()
                        self.generic_data.parent = self


                    class GenericData(object):
                        """
                        Generic entry data
                        
                        .. attribute:: timestamp
                        
                        	Time in UTC relative to Jan 1st, 1970
                        	**type**\:  :py:class:`Timestamp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.ErrorLog.LogEntry.GenericData.Timestamp>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.timestamp = Isis.Instances.Instance.ErrorLog.LogEntry.GenericData.Timestamp()
                            self.timestamp.parent = self


                        class Timestamp(object):
                            """
                            Time in UTC relative to Jan 1st, 1970
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.nano_seconds = None
                                self.seconds = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:timestamp'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.nano_seconds is not None:
                                    return True

                                if self.seconds is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.ErrorLog.LogEntry.GenericData.Timestamp']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:generic-data'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.timestamp is not None and self.timestamp._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.ErrorLog.LogEntry.GenericData']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:log-entry'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.error_code is not None:
                            return True

                        if self.error_log_level is not None:
                            return True

                        if self.error_reason is not None:
                            return True

                        if self.generic_data is not None and self.generic_data._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                        return meta._meta_table['Isis.Instances.Instance.ErrorLog.LogEntry']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:error-log'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.log_entry is not None:
                        for child_ref in self.log_entry:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                    return meta._meta_table['Isis.Instances.Instance.ErrorLog']['meta_info']


            class CheckpointInterfaces(object):
                """
                Checkpointed interface table
                
                .. attribute:: checkpoint_interface
                
                	Checkpointed information about one IS\-IS interface
                	**type**\: list of  :py:class:`CheckpointInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.CheckpointInterfaces.CheckpointInterface>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.checkpoint_interface = YList()
                    self.checkpoint_interface.parent = self
                    self.checkpoint_interface.name = 'checkpoint_interface'


                class CheckpointInterface(object):
                    """
                    Checkpointed information about one IS\-IS
                    interface
                    
                    .. attribute:: interface_name  <key>
                    
                    	Interface name
                    	**type**\:  str
                    
                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                    
                    .. attribute:: checkpoint_interface_handle
                    
                    	Local interface handle
                    	**type**\:  str
                    
                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                    
                    .. attribute:: checkpoint_object_id
                    
                    	Checkpoint object ID
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: dis_areas
                    
                    	Areas in which this system is DIS
                    	**type**\:  :py:class:`IsisLevelsEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelsEnum>`
                    
                    .. attribute:: has_achieved_ld_pv6_sync
                    
                    	MPLS LDPv6 sync status
                    	**type**\:  bool
                    
                    .. attribute:: has_achieved_ldp_sync
                    
                    	MPLS LDP sync status
                    	**type**\:  bool
                    
                    .. attribute:: has_adjacency
                    
                    	TRUE if there is an adjacency on this interface
                    	**type**\:  bool
                    
                    .. attribute:: has_joined_mcast_group
                    
                    	TRUE if multicast group registration succeeded on this interface
                    	**type**\:  bool
                    
                    .. attribute:: interface_name_xr
                    
                    	Interface name
                    	**type**\:  str
                    
                    .. attribute:: local_circuit_number
                    
                    	Local circuit number
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: local_snpa
                    
                    	SNPA of this interface
                    	**type**\:  str
                    
                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.interface_name = None
                        self.checkpoint_interface_handle = None
                        self.checkpoint_object_id = None
                        self.dis_areas = None
                        self.has_achieved_ld_pv6_sync = None
                        self.has_achieved_ldp_sync = None
                        self.has_adjacency = None
                        self.has_joined_mcast_group = None
                        self.interface_name_xr = None
                        self.local_circuit_number = None
                        self.local_snpa = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.interface_name is None:
                            raise YPYModelError('Key property interface_name is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:checkpoint-interface[Cisco-IOS-XR-clns-isis-oper:interface-name = ' + str(self.interface_name) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.interface_name is not None:
                            return True

                        if self.checkpoint_interface_handle is not None:
                            return True

                        if self.checkpoint_object_id is not None:
                            return True

                        if self.dis_areas is not None:
                            return True

                        if self.has_achieved_ld_pv6_sync is not None:
                            return True

                        if self.has_achieved_ldp_sync is not None:
                            return True

                        if self.has_adjacency is not None:
                            return True

                        if self.has_joined_mcast_group is not None:
                            return True

                        if self.interface_name_xr is not None:
                            return True

                        if self.local_circuit_number is not None:
                            return True

                        if self.local_snpa is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                        return meta._meta_table['Isis.Instances.Instance.CheckpointInterfaces.CheckpointInterface']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:checkpoint-interfaces'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.checkpoint_interface is not None:
                        for child_ref in self.checkpoint_interface:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                    return meta._meta_table['Isis.Instances.Instance.CheckpointInterfaces']['meta_info']


            class InterfaceStatistics(object):
                """
                Interface statistics table
                
                .. attribute:: interface_statistic
                
                	Statistics data for one IS\-IS interface
                	**type**\: list of  :py:class:`InterfaceStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.interface_statistic = YList()
                    self.interface_statistic.parent = self
                    self.interface_statistic.name = 'interface_statistic'


                class InterfaceStatistic(object):
                    """
                    Statistics data for one IS\-IS interface
                    
                    .. attribute:: interface_name  <key>
                    
                    	Interface name
                    	**type**\:  str
                    
                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                    
                    .. attribute:: interface_media_type
                    
                    	Interface media class
                    	**type**\:  :py:class:`IsisMediaClassEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisMediaClassEnum>`
                    
                    .. attribute:: p2p_statistics
                    
                    	P2P interface statistics. NULL for non\-P2P interfaces
                    	**type**\:  :py:class:`P2PStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.P2PStatistics>`
                    
                    .. attribute:: per_area_data
                    
                    	Per\-area data
                    	**type**\: list of  :py:class:`PerAreaData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData>`
                    
                    .. attribute:: traffic_interface
                    
                    	Interface to which traffic statistics apply
                    	**type**\:  str
                    
                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.interface_name = None
                        self.interface_media_type = None
                        self.p2p_statistics = Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.P2PStatistics()
                        self.p2p_statistics.parent = self
                        self.per_area_data = YList()
                        self.per_area_data.parent = self
                        self.per_area_data.name = 'per_area_data'
                        self.traffic_interface = None


                    class P2PStatistics(object):
                        """
                        P2P interface statistics. NULL for non\-P2P
                        interfaces
                        
                        .. attribute:: iih_count
                        
                        	IIH statistics
                        	**type**\:  :py:class:`IihCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.P2PStatistics.IihCount>`
                        
                        .. attribute:: lsp_retransmit_count
                        
                        	LSP retransmissions
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: memory_exhausted_iih_count
                        
                        	IIHs not sent due to memory exhaustion
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.iih_count = Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.P2PStatistics.IihCount()
                            self.iih_count.parent = self
                            self.lsp_retransmit_count = None
                            self.memory_exhausted_iih_count = None


                        class IihCount(object):
                            """
                            IIH statistics
                            
                            .. attribute:: pdu_receive_count
                            
                            	PDUs received
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: pdu_send_count
                            
                            	PDUs sent
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.pdu_receive_count = None
                                self.pdu_send_count = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:iih-count'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.pdu_receive_count is not None:
                                    return True

                                if self.pdu_send_count is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.P2PStatistics.IihCount']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:p2p-statistics'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.iih_count is not None and self.iih_count._has_data():
                                return True

                            if self.lsp_retransmit_count is not None:
                                return True

                            if self.memory_exhausted_iih_count is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.P2PStatistics']['meta_info']


                    class PerAreaData(object):
                        """
                        Per\-area data
                        
                        .. attribute:: lan_data
                        
                        	LAN interface statistics. NULL for non\-LAN interfaces
                        	**type**\:  :py:class:`LanData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.LanData>`
                        
                        .. attribute:: level
                        
                        	Level of the area this data relates to
                        	**type**\:  :py:class:`IsisLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelEnum>`
                        
                        .. attribute:: statistics
                        
                        	Statistics
                        	**type**\:  :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.lan_data = Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.LanData()
                            self.lan_data.parent = self
                            self.level = None
                            self.statistics = Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics()
                            self.statistics.parent = self


                        class Statistics(object):
                            """
                            Statistics
                            
                            .. attribute:: csnp_count
                            
                            	CSNP statistics
                            	**type**\:  :py:class:`CsnpCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics.CsnpCount>`
                            
                            .. attribute:: lsp_count
                            
                            	LSP statistics
                            	**type**\:  :py:class:`LspCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics.LspCount>`
                            
                            .. attribute:: lsp_drop_count
                            
                            	Count of LSPs dropped due to minimum arrival time config
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: lsp_flooding_dup_count
                            
                            	Count of LSPs already received by neighbors and not flooded
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: psnp_count
                            
                            	PSNP statistics
                            	**type**\:  :py:class:`PsnpCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics.PsnpCount>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.csnp_count = Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics.CsnpCount()
                                self.csnp_count.parent = self
                                self.lsp_count = Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics.LspCount()
                                self.lsp_count.parent = self
                                self.lsp_drop_count = None
                                self.lsp_flooding_dup_count = None
                                self.psnp_count = Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics.PsnpCount()
                                self.psnp_count.parent = self


                            class LspCount(object):
                                """
                                LSP statistics
                                
                                .. attribute:: pdu_receive_count
                                
                                	PDUs received
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: pdu_send_count
                                
                                	PDUs sent
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.pdu_receive_count = None
                                    self.pdu_send_count = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:lsp-count'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.pdu_receive_count is not None:
                                        return True

                                    if self.pdu_send_count is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics.LspCount']['meta_info']


                            class CsnpCount(object):
                                """
                                CSNP statistics
                                
                                .. attribute:: pdu_receive_count
                                
                                	PDUs received
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: pdu_send_count
                                
                                	PDUs sent
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.pdu_receive_count = None
                                    self.pdu_send_count = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:csnp-count'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.pdu_receive_count is not None:
                                        return True

                                    if self.pdu_send_count is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics.CsnpCount']['meta_info']


                            class PsnpCount(object):
                                """
                                PSNP statistics
                                
                                .. attribute:: pdu_receive_count
                                
                                	PDUs received
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: pdu_send_count
                                
                                	PDUs sent
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.pdu_receive_count = None
                                    self.pdu_send_count = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:psnp-count'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.pdu_receive_count is not None:
                                        return True

                                    if self.pdu_send_count is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics.PsnpCount']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:statistics'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.csnp_count is not None and self.csnp_count._has_data():
                                    return True

                                if self.lsp_count is not None and self.lsp_count._has_data():
                                    return True

                                if self.lsp_drop_count is not None:
                                    return True

                                if self.lsp_flooding_dup_count is not None:
                                    return True

                                if self.psnp_count is not None and self.psnp_count._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics']['meta_info']


                        class LanData(object):
                            """
                            LAN interface statistics. NULL for non\-LAN
                            interfaces
                            
                            .. attribute:: dis_election_count
                            
                            	DIS elections
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: iih_count
                            
                            	IIH statistics
                            	**type**\:  :py:class:`IihCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.LanData.IihCount>`
                            
                            .. attribute:: memory_exhausted_iih_count
                            
                            	IIHs not sent due to memory exhaustion
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.dis_election_count = None
                                self.iih_count = Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.LanData.IihCount()
                                self.iih_count.parent = self
                                self.memory_exhausted_iih_count = None


                            class IihCount(object):
                                """
                                IIH statistics
                                
                                .. attribute:: pdu_receive_count
                                
                                	PDUs received
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: pdu_send_count
                                
                                	PDUs sent
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.pdu_receive_count = None
                                    self.pdu_send_count = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:iih-count'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.pdu_receive_count is not None:
                                        return True

                                    if self.pdu_send_count is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.LanData.IihCount']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:lan-data'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dis_election_count is not None:
                                    return True

                                if self.iih_count is not None and self.iih_count._has_data():
                                    return True

                                if self.memory_exhausted_iih_count is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.LanData']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:per-area-data'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.lan_data is not None and self.lan_data._has_data():
                                return True

                            if self.level is not None:
                                return True

                            if self.statistics is not None and self.statistics._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.interface_name is None:
                            raise YPYModelError('Key property interface_name is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:interface-statistic[Cisco-IOS-XR-clns-isis-oper:interface-name = ' + str(self.interface_name) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.interface_name is not None:
                            return True

                        if self.interface_media_type is not None:
                            return True

                        if self.p2p_statistics is not None and self.p2p_statistics._has_data():
                            return True

                        if self.per_area_data is not None:
                            for child_ref in self.per_area_data:
                                if child_ref._has_data():
                                    return True

                        if self.traffic_interface is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                        return meta._meta_table['Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:interface-statistics'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.interface_statistic is not None:
                        for child_ref in self.interface_statistic:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                    return meta._meta_table['Isis.Instances.Instance.InterfaceStatistics']['meta_info']


            class Protocol(object):
                """
                Basic protocol information about an IS\-IS
                instance
                
                .. attribute:: active_area_address
                
                	Active area addresses
                	**type**\:  list of str
                
                	**pattern:** [a\-fA\-F0\-9]{2}(\\.[a\-fA\-F0\-9]{4}){0,6}
                
                .. attribute:: configured_nsf_flavor
                
                	Configured NSF type
                	**type**\:  :py:class:`IsisNsfFlavorEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisNsfFlavorEnum>`
                
                .. attribute:: last_restart_nsf_flavor
                
                	NSF type of last restart
                	**type**\:  :py:class:`IsisNsfFlavorEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisNsfFlavorEnum>`
                
                .. attribute:: last_restart_status
                
                	Last restart status
                	**type**\:  :py:class:`IsisStartupStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisStartupStatusEnum>`
                
                .. attribute:: manual_area_address
                
                	Manual area addresses
                	**type**\:  list of str
                
                	**pattern:** [a\-fA\-F0\-9]{2}(\\.[a\-fA\-F0\-9]{4}){0,6}
                
                .. attribute:: nsap_system_id
                
                	Local system ID
                	**type**\:  str
                
                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                
                .. attribute:: per_topo_data
                
                	Per\-topology data
                	**type**\: list of  :py:class:`PerTopoData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Protocol.PerTopoData>`
                
                .. attribute:: remaining_time_for_next_nsf_restart
                
                	Time remaining until the next NSF restart may be attempted
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: running_levels
                
                	Levels running
                	**type**\:  :py:class:`IsisLevelsEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelsEnum>`
                
                .. attribute:: valid_nsap_system_id
                
                	Indicates if system ID valid
                	**type**\:  bool
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.active_area_address = YLeafList()
                    self.active_area_address.parent = self
                    self.active_area_address.name = 'active_area_address'
                    self.configured_nsf_flavor = None
                    self.last_restart_nsf_flavor = None
                    self.last_restart_status = None
                    self.manual_area_address = YLeafList()
                    self.manual_area_address.parent = self
                    self.manual_area_address.name = 'manual_area_address'
                    self.nsap_system_id = None
                    self.per_topo_data = YList()
                    self.per_topo_data.parent = self
                    self.per_topo_data.name = 'per_topo_data'
                    self.remaining_time_for_next_nsf_restart = None
                    self.running_levels = None
                    self.valid_nsap_system_id = None


                class PerTopoData(object):
                    """
                    Per\-topology data
                    
                    .. attribute:: advertise_passive_only
                    
                    	Advertise passive interface prefixes only
                    	**type**\:  bool
                    
                    .. attribute:: default_admin_distance
                    
                    	Default administrative distance
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: id
                    
                    	Topology ID
                    	**type**\:  :py:class:`Id <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Protocol.PerTopoData.Id>`
                    
                    .. attribute:: per_area_data
                    
                    	Per\-area data
                    	**type**\: list of  :py:class:`PerAreaData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Protocol.PerTopoData.PerAreaData>`
                    
                    .. attribute:: redist_protocols_list
                    
                    	List of redistributed protocols
                    	**type**\:  :py:class:`RedistProtocolsList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Protocol.PerTopoData.RedistProtocolsList>`
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.advertise_passive_only = None
                        self.default_admin_distance = None
                        self.id = Isis.Instances.Instance.Protocol.PerTopoData.Id()
                        self.id.parent = self
                        self.per_area_data = YList()
                        self.per_area_data.parent = self
                        self.per_area_data.name = 'per_area_data'
                        self.redist_protocols_list = Isis.Instances.Instance.Protocol.PerTopoData.RedistProtocolsList()
                        self.redist_protocols_list.parent = self


                    class Id(object):
                        """
                        Topology ID
                        
                        .. attribute:: af_name
                        
                        	AF name
                        	**type**\:  :py:class:`IsisAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfIdEnum>`
                        
                        .. attribute:: saf_name
                        
                        	Sub\-AF name
                        	**type**\:  :py:class:`IsisSubAfIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisSubAfIdEnum>`
                        
                        .. attribute:: topology_name
                        
                        	Topology Name
                        	**type**\:  str
                        
                        .. attribute:: vrf_name
                        
                        	VRF Name
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.af_name = None
                            self.saf_name = None
                            self.topology_name = None
                            self.vrf_name = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:id'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.af_name is not None:
                                return True

                            if self.saf_name is not None:
                                return True

                            if self.topology_name is not None:
                                return True

                            if self.vrf_name is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.Protocol.PerTopoData.Id']['meta_info']


                    class RedistProtocolsList(object):
                        """
                        List of redistributed protocols
                        
                        .. attribute:: isis_sh_redist_entry
                        
                        	isis sh redist entry
                        	**type**\: list of  :py:class:`IsisShRedistEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Protocol.PerTopoData.RedistProtocolsList.IsisShRedistEntry>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.isis_sh_redist_entry = YList()
                            self.isis_sh_redist_entry.parent = self
                            self.isis_sh_redist_entry.name = 'isis_sh_redist_entry'


                        class IsisShRedistEntry(object):
                            """
                            isis sh redist entry
                            
                            .. attribute:: protocol_details
                            
                            	Relevant details of the redistributed protocol
                            	**type**\:  :py:class:`ProtocolDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Protocol.PerTopoData.RedistProtocolsList.IsisShRedistEntry.ProtocolDetails>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.protocol_details = Isis.Instances.Instance.Protocol.PerTopoData.RedistProtocolsList.IsisShRedistEntry.ProtocolDetails()
                                self.protocol_details.parent = self


                            class ProtocolDetails(object):
                                """
                                Relevant details of the redistributed protocol
                                
                                .. attribute:: application_name
                                
                                	Application Name
                                	**type**\:  str
                                
                                .. attribute:: bgp_as_number
                                
                                	BGP Autonomous System number
                                	**type**\:  str
                                
                                .. attribute:: eigrp_as_number
                                
                                	EIGRP Autonomous System number
                                	**type**\:  str
                                
                                .. attribute:: isis_instance_id
                                
                                	IS\-IS instance identifier
                                	**type**\:  str
                                
                                .. attribute:: ospf_process_id
                                
                                	OSPF process identifier
                                	**type**\:  str
                                
                                .. attribute:: ospfv3_process_id
                                
                                	OSPFv3 process identifier
                                	**type**\:  str
                                
                                .. attribute:: protocol
                                
                                	Protocol
                                	**type**\:  :py:class:`IsisRedistProtoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisRedistProtoEnum>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.application_name = None
                                    self.bgp_as_number = None
                                    self.eigrp_as_number = None
                                    self.isis_instance_id = None
                                    self.ospf_process_id = None
                                    self.ospfv3_process_id = None
                                    self.protocol = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:protocol-details'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.application_name is not None:
                                        return True

                                    if self.bgp_as_number is not None:
                                        return True

                                    if self.eigrp_as_number is not None:
                                        return True

                                    if self.isis_instance_id is not None:
                                        return True

                                    if self.ospf_process_id is not None:
                                        return True

                                    if self.ospfv3_process_id is not None:
                                        return True

                                    if self.protocol is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                    return meta._meta_table['Isis.Instances.Instance.Protocol.PerTopoData.RedistProtocolsList.IsisShRedistEntry.ProtocolDetails']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:isis-sh-redist-entry'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.protocol_details is not None and self.protocol_details._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                                return meta._meta_table['Isis.Instances.Instance.Protocol.PerTopoData.RedistProtocolsList.IsisShRedistEntry']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:redist-protocols-list'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.isis_sh_redist_entry is not None:
                                for child_ref in self.isis_sh_redist_entry:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.Protocol.PerTopoData.RedistProtocolsList']['meta_info']


                    class PerAreaData(object):
                        """
                        Per\-area data
                        
                        .. attribute:: accepted_metric_style
                        
                        	Accept metric style
                        	**type**\:  :py:class:`IsisMetricStyleEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisMetricStyleEnum>`
                        
                        .. attribute:: generated_metric_style
                        
                        	Generate metric style
                        	**type**\:  :py:class:`IsisMetricStyleEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisMetricStyleEnum>`
                        
                        .. attribute:: ispf_state
                        
                        	ISPF state
                        	**type**\:  :py:class:`IsisEnabledEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisEnabledEnum>`
                        
                        .. attribute:: level
                        
                        	The level this data refers to
                        	**type**\:  :py:class:`IsisLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelEnum>`
                        
                        .. attribute:: metric
                        
                        	Metric
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: te_enabled
                        
                        	Indicates whether MPLS TE is enabled
                        	**type**\:  bool
                        
                        .. attribute:: uses_default_link_topo_flag
                        
                        	Does this topology use the default link topology
                        	**type**\:  bool
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.accepted_metric_style = None
                            self.generated_metric_style = None
                            self.ispf_state = None
                            self.level = None
                            self.metric = None
                            self.te_enabled = None
                            self.uses_default_link_topo_flag = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:per-area-data'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.accepted_metric_style is not None:
                                return True

                            if self.generated_metric_style is not None:
                                return True

                            if self.ispf_state is not None:
                                return True

                            if self.level is not None:
                                return True

                            if self.metric is not None:
                                return True

                            if self.te_enabled is not None:
                                return True

                            if self.uses_default_link_topo_flag is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.Protocol.PerTopoData.PerAreaData']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:per-topo-data'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.advertise_passive_only is not None:
                            return True

                        if self.default_admin_distance is not None:
                            return True

                        if self.id is not None and self.id._has_data():
                            return True

                        if self.per_area_data is not None:
                            for child_ref in self.per_area_data:
                                if child_ref._has_data():
                                    return True

                        if self.redist_protocols_list is not None and self.redist_protocols_list._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                        return meta._meta_table['Isis.Instances.Instance.Protocol.PerTopoData']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:protocol'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.active_area_address is not None:
                        for child in self.active_area_address:
                            if child is not None:
                                return True

                    if self.configured_nsf_flavor is not None:
                        return True

                    if self.last_restart_nsf_flavor is not None:
                        return True

                    if self.last_restart_status is not None:
                        return True

                    if self.manual_area_address is not None:
                        for child in self.manual_area_address:
                            if child is not None:
                                return True

                    if self.nsap_system_id is not None:
                        return True

                    if self.per_topo_data is not None:
                        for child_ref in self.per_topo_data:
                            if child_ref._has_data():
                                return True

                    if self.remaining_time_for_next_nsf_restart is not None:
                        return True

                    if self.running_levels is not None:
                        return True

                    if self.valid_nsap_system_id is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                    return meta._meta_table['Isis.Instances.Instance.Protocol']['meta_info']


            class NeighborSummaries(object):
                """
                Neighbor\-summary table
                
                .. attribute:: neighbor_summary
                
                	Neighbor\-summary data for a single interface
                	**type**\: list of  :py:class:`NeighborSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NeighborSummaries.NeighborSummary>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.neighbor_summary = YList()
                    self.neighbor_summary.parent = self
                    self.neighbor_summary.name = 'neighbor_summary'


                class NeighborSummary(object):
                    """
                    Neighbor\-summary data for a single interface
                    
                    .. attribute:: interface_name  <key>
                    
                    	Interface name
                    	**type**\:  str
                    
                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                    
                    .. attribute:: level12_neigbors
                    
                    	L12 neighbors
                    	**type**\:  :py:class:`Level12Neigbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NeighborSummaries.NeighborSummary.Level12Neigbors>`
                    
                    .. attribute:: level1_neighbors
                    
                    	L1\-only neighbors
                    	**type**\:  :py:class:`Level1Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NeighborSummaries.NeighborSummary.Level1Neighbors>`
                    
                    .. attribute:: level2_neighbors
                    
                    	L2\-only neighbors
                    	**type**\:  :py:class:`Level2Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NeighborSummaries.NeighborSummary.Level2Neighbors>`
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.interface_name = None
                        self.level12_neigbors = Isis.Instances.Instance.NeighborSummaries.NeighborSummary.Level12Neigbors()
                        self.level12_neigbors.parent = self
                        self.level1_neighbors = Isis.Instances.Instance.NeighborSummaries.NeighborSummary.Level1Neighbors()
                        self.level1_neighbors.parent = self
                        self.level2_neighbors = Isis.Instances.Instance.NeighborSummaries.NeighborSummary.Level2Neighbors()
                        self.level2_neighbors.parent = self


                    class Level1Neighbors(object):
                        """
                        L1\-only neighbors
                        
                        .. attribute:: neighbor_down_count
                        
                        	Neighbors down
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: neighbor_init_count
                        
                        	Neighbors being initialized
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: neighbor_up_count
                        
                        	Neighbors up
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.neighbor_down_count = None
                            self.neighbor_init_count = None
                            self.neighbor_up_count = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:level1-neighbors'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.neighbor_down_count is not None:
                                return True

                            if self.neighbor_init_count is not None:
                                return True

                            if self.neighbor_up_count is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.NeighborSummaries.NeighborSummary.Level1Neighbors']['meta_info']


                    class Level2Neighbors(object):
                        """
                        L2\-only neighbors
                        
                        .. attribute:: neighbor_down_count
                        
                        	Neighbors down
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: neighbor_init_count
                        
                        	Neighbors being initialized
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: neighbor_up_count
                        
                        	Neighbors up
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.neighbor_down_count = None
                            self.neighbor_init_count = None
                            self.neighbor_up_count = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:level2-neighbors'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.neighbor_down_count is not None:
                                return True

                            if self.neighbor_init_count is not None:
                                return True

                            if self.neighbor_up_count is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.NeighborSummaries.NeighborSummary.Level2Neighbors']['meta_info']


                    class Level12Neigbors(object):
                        """
                        L12 neighbors
                        
                        .. attribute:: neighbor_down_count
                        
                        	Neighbors down
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: neighbor_init_count
                        
                        	Neighbors being initialized
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: neighbor_up_count
                        
                        	Neighbors up
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.neighbor_down_count = None
                            self.neighbor_init_count = None
                            self.neighbor_up_count = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:level12-neigbors'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.neighbor_down_count is not None:
                                return True

                            if self.neighbor_init_count is not None:
                                return True

                            if self.neighbor_up_count is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.NeighborSummaries.NeighborSummary.Level12Neigbors']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.interface_name is None:
                            raise YPYModelError('Key property interface_name is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:neighbor-summary[Cisco-IOS-XR-clns-isis-oper:interface-name = ' + str(self.interface_name) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.interface_name is not None:
                            return True

                        if self.level12_neigbors is not None and self.level12_neigbors._has_data():
                            return True

                        if self.level1_neighbors is not None and self.level1_neighbors._has_data():
                            return True

                        if self.level2_neighbors is not None and self.level2_neighbors._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                        return meta._meta_table['Isis.Instances.Instance.NeighborSummaries.NeighborSummary']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:neighbor-summaries'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.neighbor_summary is not None:
                        for child_ref in self.neighbor_summary:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                    return meta._meta_table['Isis.Instances.Instance.NeighborSummaries']['meta_info']


            class CheckpointLsps(object):
                """
                Checkpointed LSP table
                
                .. attribute:: checkpoint_lsp
                
                	A checkpointed IS\-IS LSP
                	**type**\: list of  :py:class:`CheckpointLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.CheckpointLsps.CheckpointLsp>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.checkpoint_lsp = YList()
                    self.checkpoint_lsp.parent = self
                    self.checkpoint_lsp.name = 'checkpoint_lsp'


                class CheckpointLsp(object):
                    """
                    A checkpointed IS\-IS LSP
                    
                    .. attribute:: checkpoint_lsp_id
                    
                    	LSP ID
                    	**type**\:  str
                    
                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                    
                    .. attribute:: checkpoint_lsp_level
                    
                    	LSP level
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: checkpoint_lsp_local_flag
                    
                    	TRUE if this is a local LSP
                    	**type**\:  bool
                    
                    .. attribute:: checkpoint_lsp_object_id
                    
                    	LSP Checkpoint table object ID
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: level
                    
                    	Level
                    	**type**\:  :py:class:`IsisInternalLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_datatypes.IsisInternalLevelEnum>`
                    
                    .. attribute:: lsp_id
                    
                    	LSP ID
                    	**type**\:  str
                    
                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.checkpoint_lsp_id = None
                        self.checkpoint_lsp_level = None
                        self.checkpoint_lsp_local_flag = None
                        self.checkpoint_lsp_object_id = None
                        self.level = None
                        self.lsp_id = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:checkpoint-lsp'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.checkpoint_lsp_id is not None:
                            return True

                        if self.checkpoint_lsp_level is not None:
                            return True

                        if self.checkpoint_lsp_local_flag is not None:
                            return True

                        if self.checkpoint_lsp_object_id is not None:
                            return True

                        if self.level is not None:
                            return True

                        if self.lsp_id is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                        return meta._meta_table['Isis.Instances.Instance.CheckpointLsps.CheckpointLsp']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:checkpoint-lsps'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.checkpoint_lsp is not None:
                        for child_ref in self.checkpoint_lsp:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                    return meta._meta_table['Isis.Instances.Instance.CheckpointLsps']['meta_info']


            class MeshGroups(object):
                """
                Mesh\-group information
                
                .. attribute:: mesh_group_configured_interface_list
                
                	List of mesh\-group\-configured interfaces
                	**type**\:  :py:class:`MeshGroupConfiguredInterfaceList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.MeshGroups.MeshGroupConfiguredInterfaceList>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.mesh_group_configured_interface_list = Isis.Instances.Instance.MeshGroups.MeshGroupConfiguredInterfaceList()
                    self.mesh_group_configured_interface_list.parent = self


                class MeshGroupConfiguredInterfaceList(object):
                    """
                    List of mesh\-group\-configured interfaces
                    
                    .. attribute:: isis_sh_mesh_entry
                    
                    	isis sh mesh entry
                    	**type**\: list of  :py:class:`IsisShMeshEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.MeshGroups.MeshGroupConfiguredInterfaceList.IsisShMeshEntry>`
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.isis_sh_mesh_entry = YList()
                        self.isis_sh_mesh_entry.parent = self
                        self.isis_sh_mesh_entry.name = 'isis_sh_mesh_entry'


                    class IsisShMeshEntry(object):
                        """
                        isis sh mesh entry
                        
                        .. attribute:: mesh_group_interface
                        
                        	This interface
                        	**type**\:  str
                        
                        	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                        
                        .. attribute:: mesh_group_number
                        
                        	Mesh\-group number
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.mesh_group_interface = None
                            self.mesh_group_number = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:isis-sh-mesh-entry'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.mesh_group_interface is not None:
                                return True

                            if self.mesh_group_number is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.MeshGroups.MeshGroupConfiguredInterfaceList.IsisShMeshEntry']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:mesh-group-configured-interface-list'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.isis_sh_mesh_entry is not None:
                            for child_ref in self.isis_sh_mesh_entry:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                        return meta._meta_table['Isis.Instances.Instance.MeshGroups.MeshGroupConfiguredInterfaceList']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:mesh-groups'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.mesh_group_configured_interface_list is not None and self.mesh_group_configured_interface_list._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                    return meta._meta_table['Isis.Instances.Instance.MeshGroups']['meta_info']


            class NsrStatistics(object):
                """
                NSR Statistics information
                
                .. attribute:: isis_nsr_stats_data
                
                	ISIS NSR STATS Data
                	**type**\:  :py:class:`IsisNsrStatsData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatistics.IsisNsrStatsData>`
                
                .. attribute:: isis_vm_state
                
                	ISIS VM STATE
                	**type**\:  int
                
                	**range:** 0..65535
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.isis_nsr_stats_data = Isis.Instances.Instance.NsrStatistics.IsisNsrStatsData()
                    self.isis_nsr_stats_data.parent = self
                    self.isis_vm_state = None


                class IsisNsrStatsData(object):
                    """
                    ISIS NSR STATS Data
                    
                    .. attribute:: peer
                    
                    	peer
                    	**type**\: list of  :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatistics.IsisNsrStatsData.Peer>`
                    
                    .. attribute:: self
                    
                    	self
                    	**type**\:  :py:class:`Self <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatistics.IsisNsrStatsData.Self>`
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.peer = YList()
                        self.peer.parent = self
                        self.peer.name = 'peer'
                        self.self = Isis.Instances.Instance.NsrStatistics.IsisNsrStatsData.Self()
                        self.self.parent = self


                    class Self(object):
                        """
                        self
                        
                        .. attribute:: no_of_ipv4_routes
                        
                        	no of ipv4 routes
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: no_of_ipv6_routes
                        
                        	no of ipv6 routes
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: no_of_l1_adj
                        
                        	no of l1 adj
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_l1_lsp
                        
                        	no of l1 lsp
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: no_of_l2_adj
                        
                        	no of l2 adj
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_l2_lsp
                        
                        	no of l2 lsp
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: no_of_lan_interface
                        
                        	no of lan interface
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_live_interface
                        
                        	no of live interface
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_loopback_interface
                        
                        	no of loopback interface
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_ptp_interface
                        
                        	no of ptp interface
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_te_links
                        
                        	no of te links
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_te_tunnels
                        
                        	no of te tunnels
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: seqnum
                        
                        	seqnum
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.no_of_ipv4_routes = None
                            self.no_of_ipv6_routes = None
                            self.no_of_l1_adj = None
                            self.no_of_l1_lsp = None
                            self.no_of_l2_adj = None
                            self.no_of_l2_lsp = None
                            self.no_of_lan_interface = None
                            self.no_of_live_interface = None
                            self.no_of_loopback_interface = None
                            self.no_of_ptp_interface = None
                            self.no_of_te_links = None
                            self.no_of_te_tunnels = None
                            self.seqnum = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:self'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.no_of_ipv4_routes is not None:
                                return True

                            if self.no_of_ipv6_routes is not None:
                                return True

                            if self.no_of_l1_adj is not None:
                                return True

                            if self.no_of_l1_lsp is not None:
                                return True

                            if self.no_of_l2_adj is not None:
                                return True

                            if self.no_of_l2_lsp is not None:
                                return True

                            if self.no_of_lan_interface is not None:
                                return True

                            if self.no_of_live_interface is not None:
                                return True

                            if self.no_of_loopback_interface is not None:
                                return True

                            if self.no_of_ptp_interface is not None:
                                return True

                            if self.no_of_te_links is not None:
                                return True

                            if self.no_of_te_tunnels is not None:
                                return True

                            if self.seqnum is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.NsrStatistics.IsisNsrStatsData.Self']['meta_info']


                    class Peer(object):
                        """
                        peer
                        
                        .. attribute:: no_of_ipv4_routes
                        
                        	no of ipv4 routes
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: no_of_ipv6_routes
                        
                        	no of ipv6 routes
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: no_of_l1_adj
                        
                        	no of l1 adj
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_l1_lsp
                        
                        	no of l1 lsp
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: no_of_l2_adj
                        
                        	no of l2 adj
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_l2_lsp
                        
                        	no of l2 lsp
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: no_of_lan_interface
                        
                        	no of lan interface
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_live_interface
                        
                        	no of live interface
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_loopback_interface
                        
                        	no of loopback interface
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_ptp_interface
                        
                        	no of ptp interface
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_te_links
                        
                        	no of te links
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_te_tunnels
                        
                        	no of te tunnels
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: seqnum
                        
                        	seqnum
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.no_of_ipv4_routes = None
                            self.no_of_ipv6_routes = None
                            self.no_of_l1_adj = None
                            self.no_of_l1_lsp = None
                            self.no_of_l2_adj = None
                            self.no_of_l2_lsp = None
                            self.no_of_lan_interface = None
                            self.no_of_live_interface = None
                            self.no_of_loopback_interface = None
                            self.no_of_ptp_interface = None
                            self.no_of_te_links = None
                            self.no_of_te_tunnels = None
                            self.seqnum = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:peer'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.no_of_ipv4_routes is not None:
                                return True

                            if self.no_of_ipv6_routes is not None:
                                return True

                            if self.no_of_l1_adj is not None:
                                return True

                            if self.no_of_l1_lsp is not None:
                                return True

                            if self.no_of_l2_adj is not None:
                                return True

                            if self.no_of_l2_lsp is not None:
                                return True

                            if self.no_of_lan_interface is not None:
                                return True

                            if self.no_of_live_interface is not None:
                                return True

                            if self.no_of_loopback_interface is not None:
                                return True

                            if self.no_of_ptp_interface is not None:
                                return True

                            if self.no_of_te_links is not None:
                                return True

                            if self.no_of_te_tunnels is not None:
                                return True

                            if self.seqnum is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                            return meta._meta_table['Isis.Instances.Instance.NsrStatistics.IsisNsrStatsData.Peer']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:isis-nsr-stats-data'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.peer is not None:
                            for child_ref in self.peer:
                                if child_ref._has_data():
                                    return True

                        if self.self is not None and self.self._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                        return meta._meta_table['Isis.Instances.Instance.NsrStatistics.IsisNsrStatsData']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:nsr-statistics'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.isis_nsr_stats_data is not None and self.isis_nsr_stats_data._has_data():
                        return True

                    if self.isis_vm_state is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                    return meta._meta_table['Isis.Instances.Instance.NsrStatistics']['meta_info']


            class CheckpointTeTunnels(object):
                """
                Checkpointed TE tunnel table
                
                .. attribute:: checkpoint_te_tunnel
                
                	A checkpointed TE tunnel
                	**type**\: list of  :py:class:`CheckpointTeTunnel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.CheckpointTeTunnels.CheckpointTeTunnel>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.checkpoint_te_tunnel = YList()
                    self.checkpoint_te_tunnel.parent = self
                    self.checkpoint_te_tunnel.name = 'checkpoint_te_tunnel'


                class CheckpointTeTunnel(object):
                    """
                    A checkpointed TE tunnel
                    
                    .. attribute:: checkpoint_te_bandwidth
                    
                    	Tunnel bandwidth
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: checkpoint_te_flags
                    
                    	Tunnel flags
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: checkpoint_te_interface
                    
                    	Tunnel interface
                    	**type**\:  str
                    
                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                    
                    .. attribute:: checkpoint_te_level
                    
                    	TE database level
                    	**type**\:  :py:class:`IsisLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevelEnum>`
                    
                    .. attribute:: checkpoint_te_metric
                    
                    	Tunnel metric
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: checkpoint_te_metric_mode
                    
                    	Tunnel metric mode
                    	**type**\:  :py:class:`IsisMetricModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisMetricModeEnum>`
                    
                    .. attribute:: checkpoint_te_nexthop
                    
                    	Tunnel next\-hop IP address
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: checkpoint_te_object_id
                    
                    	Tunnel checkpoint object ID
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: checkpoint_te_system_id
                    
                    	Destination system ID
                    	**type**\:  str
                    
                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                    
                    .. attribute:: interface_name
                    
                    	Interface name
                    	**type**\:  str
                    
                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                    
                    .. attribute:: level
                    
                    	Level
                    	**type**\:  :py:class:`IsisInternalLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_datatypes.IsisInternalLevelEnum>`
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.checkpoint_te_bandwidth = None
                        self.checkpoint_te_flags = None
                        self.checkpoint_te_interface = None
                        self.checkpoint_te_level = None
                        self.checkpoint_te_metric = None
                        self.checkpoint_te_metric_mode = None
                        self.checkpoint_te_nexthop = None
                        self.checkpoint_te_object_id = None
                        self.checkpoint_te_system_id = None
                        self.interface_name = None
                        self.level = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:checkpoint-te-tunnel'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.checkpoint_te_bandwidth is not None:
                            return True

                        if self.checkpoint_te_flags is not None:
                            return True

                        if self.checkpoint_te_interface is not None:
                            return True

                        if self.checkpoint_te_level is not None:
                            return True

                        if self.checkpoint_te_metric is not None:
                            return True

                        if self.checkpoint_te_metric_mode is not None:
                            return True

                        if self.checkpoint_te_nexthop is not None:
                            return True

                        if self.checkpoint_te_object_id is not None:
                            return True

                        if self.checkpoint_te_system_id is not None:
                            return True

                        if self.interface_name is not None:
                            return True

                        if self.level is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                        return meta._meta_table['Isis.Instances.Instance.CheckpointTeTunnels.CheckpointTeTunnel']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-clns-isis-oper:checkpoint-te-tunnels'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.checkpoint_te_tunnel is not None:
                        for child_ref in self.checkpoint_te_tunnel:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                    return meta._meta_table['Isis.Instances.Instance.CheckpointTeTunnels']['meta_info']

            @property
            def _common_path(self):
                if self.instance_name is None:
                    raise YPYModelError('Key property instance_name is None')

                return '/Cisco-IOS-XR-clns-isis-oper:isis/Cisco-IOS-XR-clns-isis-oper:instances/Cisco-IOS-XR-clns-isis-oper:instance[Cisco-IOS-XR-clns-isis-oper:instance-name = ' + str(self.instance_name) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.instance_name is not None:
                    return True

                if self.checkpoint_adjacencies is not None and self.checkpoint_adjacencies._has_data():
                    return True

                if self.checkpoint_interfaces is not None and self.checkpoint_interfaces._has_data():
                    return True

                if self.checkpoint_lsps is not None and self.checkpoint_lsps._has_data():
                    return True

                if self.checkpoint_te_tunnels is not None and self.checkpoint_te_tunnels._has_data():
                    return True

                if self.error_log is not None and self.error_log._has_data():
                    return True

                if self.host_names is not None and self.host_names._has_data():
                    return True

                if self.interface_statistics is not None and self.interface_statistics._has_data():
                    return True

                if self.interfaces is not None and self.interfaces._has_data():
                    return True

                if self.levels is not None and self.levels._has_data():
                    return True

                if self.mesh_groups is not None and self.mesh_groups._has_data():
                    return True

                if self.neighbor_summaries is not None and self.neighbor_summaries._has_data():
                    return True

                if self.neighbors is not None and self.neighbors._has_data():
                    return True

                if self.nsr_statistics is not None and self.nsr_statistics._has_data():
                    return True

                if self.nsr_status is not None and self.nsr_status._has_data():
                    return True

                if self.protocol is not None and self.protocol._has_data():
                    return True

                if self.statistics_global is not None and self.statistics_global._has_data():
                    return True

                if self.topologies is not None and self.topologies._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
                return meta._meta_table['Isis.Instances.Instance']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-clns-isis-oper:isis/Cisco-IOS-XR-clns-isis-oper:instances'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance is not None:
                for child_ref in self.instance:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
            return meta._meta_table['Isis.Instances']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-clns-isis-oper:isis'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return False

    def _has_data(self):
        if not self.is_config():
            return False
        if self.instances is not None and self.instances._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_clns_isis_oper as meta
        return meta._meta_table['Isis']['meta_info']


