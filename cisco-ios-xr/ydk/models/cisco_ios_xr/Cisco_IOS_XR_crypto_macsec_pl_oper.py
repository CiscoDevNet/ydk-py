""" Cisco_IOS_XR_crypto_macsec_pl_oper 

This module contains a collection of YANG definitions
for Cisco IOS\-XR crypto\-macsec\-pl package operational data.

This module contains definitions
for the following management objects\:
  macsec\-platform\: MACSec operational data

Copyright (c) 2013\-2016 by Cisco Systems, Inc.
All rights reserved.

"""
from ydk.entity_utils import get_relative_entity_path as _get_relative_entity_path
from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YPYError, YPYModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error


class MacsecCard(Enum):
    """
    MacsecCard

    Macsec card

    .. data:: macsec_none = 0

    	macsec none

    .. data:: macsec_msfpga = 1

    	macsec msfpga

    .. data:: macsec_xlmsfpga = 2

    	macsec xlmsfpga

    .. data:: macsec_apm = 3

    	macsec apm

    """

    macsec_none = Enum.YLeaf(0, "macsec-none")

    macsec_msfpga = Enum.YLeaf(1, "macsec-msfpga")

    macsec_xlmsfpga = Enum.YLeaf(2, "macsec-xlmsfpga")

    macsec_apm = Enum.YLeaf(3, "macsec-apm")



class MacsecPlatform(Entity):
    """
    MACSec operational data
    
    .. attribute:: nodes
    
    	NodeTable for all the nodes
    	**type**\:   :py:class:`Nodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes>`
    
    

    """

    _prefix = 'crypto-macsec-pl-oper'
    _revision = '2015-11-09'

    def __init__(self):
        super(MacsecPlatform, self).__init__()
        self._top_entity = None

        self.yang_name = "macsec-platform"
        self.yang_parent_name = "Cisco-IOS-XR-crypto-macsec-pl-oper"

        self.nodes = MacsecPlatform.Nodes()
        self.nodes.parent = self
        self._children_name_map["nodes"] = "nodes"
        self._children_yang_names.add("nodes")


    class Nodes(Entity):
        """
        NodeTable for all the nodes
        
        .. attribute:: node
        
        	Node where macsec interfaces exist
        	**type**\: list of    :py:class:`Node <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node>`
        
        

        """

        _prefix = 'crypto-macsec-pl-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(MacsecPlatform.Nodes, self).__init__()

            self.yang_name = "nodes"
            self.yang_parent_name = "macsec-platform"

            self.node = YList(self)

        def __setattr__(self, name, value):
            self._check_monkey_patching_error(name, value)
            with _handle_type_error():
                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                        "Please use list append or extend method."
                                        .format(value))
                if isinstance(value, Enum.YLeaf):
                    value = value.name
                if name in () and name in self.__dict__:
                    if isinstance(value, YLeaf):
                        self.__dict__[name].set(value.get())
                    elif isinstance(value, YLeafList):
                        super(MacsecPlatform.Nodes, self).__setattr__(name, value)
                    else:
                        self.__dict__[name].set(value)
                else:
                    if hasattr(value, "parent") and name != "parent":
                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                            value.parent = self
                        elif value.parent is None and value.yang_name in self._children_yang_names:
                            value.parent = self
                    super(MacsecPlatform.Nodes, self).__setattr__(name, value)


        class Node(Entity):
            """
            Node where macsec interfaces exist
            
            .. attribute:: node_name  <key>
            
            	Node
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: interfaces
            
            	Table of Interfaces
            	**type**\:   :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces>`
            
            

            """

            _prefix = 'crypto-macsec-pl-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(MacsecPlatform.Nodes.Node, self).__init__()

                self.yang_name = "node"
                self.yang_parent_name = "nodes"

                self.node_name = YLeaf(YType.str, "node-name")

                self.interfaces = MacsecPlatform.Nodes.Node.Interfaces()
                self.interfaces.parent = self
                self._children_name_map["interfaces"] = "interfaces"
                self._children_yang_names.add("interfaces")

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in ("node_name") and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(MacsecPlatform.Nodes.Node, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(MacsecPlatform.Nodes.Node, self).__setattr__(name, value)


            class Interfaces(Entity):
                """
                Table of Interfaces
                
                .. attribute:: interface
                
                	Interface Where Macsec is configured
                	**type**\: list of    :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface>`
                
                

                """

                _prefix = 'crypto-macsec-pl-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(MacsecPlatform.Nodes.Node.Interfaces, self).__init__()

                    self.yang_name = "interfaces"
                    self.yang_parent_name = "node"

                    self.interface = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(MacsecPlatform.Nodes.Node.Interfaces, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(MacsecPlatform.Nodes.Node.Interfaces, self).__setattr__(name, value)


                class Interface(Entity):
                    """
                    Interface Where Macsec is configured
                    
                    .. attribute:: name  <key>
                    
                    	Value
                    	**type**\:  str
                    
                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                    
                    .. attribute:: hw_flow_s
                    
                    	Table of Hardware Flows
                    	**type**\:   :py:class:`HwFlowS <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS>`
                    
                    .. attribute:: hw_sas
                    
                    	Table of Hardware SAs
                    	**type**\:   :py:class:`HwSas <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas>`
                    
                    .. attribute:: hw_statistics
                    
                    	The Hardware Statistics
                    	**type**\:   :py:class:`HwStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics>`
                    
                    .. attribute:: sw_statistics
                    
                    	The Software Statistics
                    	**type**\:   :py:class:`SwStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics>`
                    
                    

                    """

                    _prefix = 'crypto-macsec-pl-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface, self).__init__()

                        self.yang_name = "interface"
                        self.yang_parent_name = "interfaces"

                        self.name = YLeaf(YType.str, "name")

                        self.hw_flow_s = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS()
                        self.hw_flow_s.parent = self
                        self._children_name_map["hw_flow_s"] = "hw-flow-s"
                        self._children_yang_names.add("hw-flow-s")

                        self.hw_sas = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas()
                        self.hw_sas.parent = self
                        self._children_name_map["hw_sas"] = "hw-sas"
                        self._children_yang_names.add("hw-sas")

                        self.hw_statistics = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics()
                        self.hw_statistics.parent = self
                        self._children_name_map["hw_statistics"] = "hw-statistics"
                        self._children_yang_names.add("hw-statistics")

                        self.sw_statistics = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics()
                        self.sw_statistics.parent = self
                        self._children_name_map["sw_statistics"] = "sw-statistics"
                        self._children_yang_names.add("sw-statistics")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface, self).__setattr__(name, value)


                    class HwStatistics(Entity):
                        """
                        The Hardware Statistics
                        
                        .. attribute:: ext
                        
                        	ext
                        	**type**\:   :py:class:`Ext <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext>`
                        
                        

                        """

                        _prefix = 'crypto-macsec-pl-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics, self).__init__()

                            self.yang_name = "hw-statistics"
                            self.yang_parent_name = "interface"

                            self.ext = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext()
                            self.ext.parent = self
                            self._children_name_map["ext"] = "ext"
                            self._children_yang_names.add("ext")


                        class Ext(Entity):
                            """
                            ext
                            
                            .. attribute:: es200_stats
                            
                            	ES200 Stats
                            	**type**\:   :py:class:`Es200Stats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats>`
                            
                            .. attribute:: msfpga_stats
                            
                            	MSFPGA Stats
                            	**type**\:   :py:class:`MsfpgaStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats>`
                            
                            .. attribute:: type
                            
                            	type
                            	**type**\:   :py:class:`MacsecCard <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecCard>`
                            
                            .. attribute:: xlfpga_stats
                            
                            	XLFPGA Stats
                            	**type**\:   :py:class:`XlfpgaStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.XlfpgaStats>`
                            
                            

                            """

                            _prefix = 'crypto-macsec-pl-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext, self).__init__()

                                self.yang_name = "ext"
                                self.yang_parent_name = "hw-statistics"

                                self.type = YLeaf(YType.enumeration, "type")

                                self.es200_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats()
                                self.es200_stats.parent = self
                                self._children_name_map["es200_stats"] = "es200-stats"
                                self._children_yang_names.add("es200-stats")

                                self.msfpga_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats()
                                self.msfpga_stats.parent = self
                                self._children_name_map["msfpga_stats"] = "msfpga-stats"
                                self._children_yang_names.add("msfpga-stats")

                                self.xlfpga_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.XlfpgaStats()
                                self.xlfpga_stats.parent = self
                                self._children_name_map["xlfpga_stats"] = "xlfpga-stats"
                                self._children_yang_names.add("xlfpga-stats")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("type") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext, self).__setattr__(name, value)


                            class MsfpgaStats(Entity):
                                """
                                MSFPGA Stats
                                
                                .. attribute:: rx_interface_macsec_stats
                                
                                	Rx interface Macsec Stats
                                	**type**\:   :py:class:`RxInterfaceMacsecStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats.RxInterfaceMacsecStats>`
                                
                                .. attribute:: rx_sa_stats
                                
                                	Rx SA Stats
                                	**type**\:   :py:class:`RxSaStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats.RxSaStats>`
                                
                                .. attribute:: tx_interface_macsec_stats
                                
                                	Tx interface Macsec Stats
                                	**type**\:   :py:class:`TxInterfaceMacsecStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats.TxInterfaceMacsecStats>`
                                
                                .. attribute:: tx_sa_stats
                                
                                	Tx SA Stats
                                	**type**\:   :py:class:`TxSaStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats.TxSaStats>`
                                
                                

                                """

                                _prefix = 'crypto-macsec-pl-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats, self).__init__()

                                    self.yang_name = "msfpga-stats"
                                    self.yang_parent_name = "ext"

                                    self.rx_interface_macsec_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats.RxInterfaceMacsecStats()
                                    self.rx_interface_macsec_stats.parent = self
                                    self._children_name_map["rx_interface_macsec_stats"] = "rx-interface-macsec-stats"
                                    self._children_yang_names.add("rx-interface-macsec-stats")

                                    self.rx_sa_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats.RxSaStats()
                                    self.rx_sa_stats.parent = self
                                    self._children_name_map["rx_sa_stats"] = "rx-sa-stats"
                                    self._children_yang_names.add("rx-sa-stats")

                                    self.tx_interface_macsec_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats.TxInterfaceMacsecStats()
                                    self.tx_interface_macsec_stats.parent = self
                                    self._children_name_map["tx_interface_macsec_stats"] = "tx-interface-macsec-stats"
                                    self._children_yang_names.add("tx-interface-macsec-stats")

                                    self.tx_sa_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats.TxSaStats()
                                    self.tx_sa_stats.parent = self
                                    self._children_name_map["tx_sa_stats"] = "tx-sa-stats"
                                    self._children_yang_names.add("tx-sa-stats")


                                class TxSaStats(Entity):
                                    """
                                    Tx SA Stats
                                    
                                    .. attribute:: out_octets_encrypted
                                    
                                    	Tx Octets Encrypted
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_octets_protected
                                    
                                    	Tx Octets Protected
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_pkts_encrypted
                                    
                                    	Tx Pkts Encrypted
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_pkts_protected
                                    
                                    	Tx Pkts Protected
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats.TxSaStats, self).__init__()

                                        self.yang_name = "tx-sa-stats"
                                        self.yang_parent_name = "msfpga-stats"

                                        self.out_octets_encrypted = YLeaf(YType.uint64, "out-octets-encrypted")

                                        self.out_octets_protected = YLeaf(YType.uint64, "out-octets-protected")

                                        self.out_pkts_encrypted = YLeaf(YType.uint64, "out-pkts-encrypted")

                                        self.out_pkts_protected = YLeaf(YType.uint64, "out-pkts-protected")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("out_octets_encrypted",
                                                        "out_octets_protected",
                                                        "out_pkts_encrypted",
                                                        "out_pkts_protected") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats.TxSaStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats.TxSaStats, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.out_octets_encrypted.is_set or
                                            self.out_octets_protected.is_set or
                                            self.out_pkts_encrypted.is_set or
                                            self.out_pkts_protected.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.out_octets_encrypted.yfilter != YFilter.not_set or
                                            self.out_octets_protected.yfilter != YFilter.not_set or
                                            self.out_pkts_encrypted.yfilter != YFilter.not_set or
                                            self.out_pkts_protected.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "tx-sa-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.out_octets_encrypted.is_set or self.out_octets_encrypted.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_octets_encrypted.get_name_leafdata())
                                        if (self.out_octets_protected.is_set or self.out_octets_protected.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_octets_protected.get_name_leafdata())
                                        if (self.out_pkts_encrypted.is_set or self.out_pkts_encrypted.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_pkts_encrypted.get_name_leafdata())
                                        if (self.out_pkts_protected.is_set or self.out_pkts_protected.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_pkts_protected.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "out-octets-encrypted" or name == "out-octets-protected" or name == "out-pkts-encrypted" or name == "out-pkts-protected"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "out-octets-encrypted"):
                                            self.out_octets_encrypted = value
                                            self.out_octets_encrypted.value_namespace = name_space
                                            self.out_octets_encrypted.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-octets-protected"):
                                            self.out_octets_protected = value
                                            self.out_octets_protected.value_namespace = name_space
                                            self.out_octets_protected.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-pkts-encrypted"):
                                            self.out_pkts_encrypted = value
                                            self.out_pkts_encrypted.value_namespace = name_space
                                            self.out_pkts_encrypted.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-pkts-protected"):
                                            self.out_pkts_protected = value
                                            self.out_pkts_protected.value_namespace = name_space
                                            self.out_pkts_protected.value_namespace_prefix = name_space_prefix


                                class RxSaStats(Entity):
                                    """
                                    Rx SA Stats
                                    
                                    .. attribute:: in_octets_decrypted
                                    
                                    	Rx Octets Decrypted
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_octets_validated
                                    
                                    	Rx Octets Validated
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_delayed
                                    
                                    	Rx Pkts Delayed
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_invalid
                                    
                                    	Rx Pkts Invalid
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_late
                                    
                                    	Rx Pkts Late
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_not_using_sa
                                    
                                    	Rx Pkts Not Using SA
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_not_valid
                                    
                                    	Rx Pkts Not Valid
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_ok
                                    
                                    	Rx Pkts OK
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_unchecked
                                    
                                    	Rx Pkts Unchecked
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_unused_sa
                                    
                                    	Rx Pkts Unused SA
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats.RxSaStats, self).__init__()

                                        self.yang_name = "rx-sa-stats"
                                        self.yang_parent_name = "msfpga-stats"

                                        self.in_octets_decrypted = YLeaf(YType.uint64, "in-octets-decrypted")

                                        self.in_octets_validated = YLeaf(YType.uint64, "in-octets-validated")

                                        self.in_pkts_delayed = YLeaf(YType.uint64, "in-pkts-delayed")

                                        self.in_pkts_invalid = YLeaf(YType.uint64, "in-pkts-invalid")

                                        self.in_pkts_late = YLeaf(YType.uint64, "in-pkts-late")

                                        self.in_pkts_not_using_sa = YLeaf(YType.uint64, "in-pkts-not-using-sa")

                                        self.in_pkts_not_valid = YLeaf(YType.uint64, "in-pkts-not-valid")

                                        self.in_pkts_ok = YLeaf(YType.uint64, "in-pkts-ok")

                                        self.in_pkts_unchecked = YLeaf(YType.uint64, "in-pkts-unchecked")

                                        self.in_pkts_unused_sa = YLeaf(YType.uint64, "in-pkts-unused-sa")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("in_octets_decrypted",
                                                        "in_octets_validated",
                                                        "in_pkts_delayed",
                                                        "in_pkts_invalid",
                                                        "in_pkts_late",
                                                        "in_pkts_not_using_sa",
                                                        "in_pkts_not_valid",
                                                        "in_pkts_ok",
                                                        "in_pkts_unchecked",
                                                        "in_pkts_unused_sa") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats.RxSaStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats.RxSaStats, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.in_octets_decrypted.is_set or
                                            self.in_octets_validated.is_set or
                                            self.in_pkts_delayed.is_set or
                                            self.in_pkts_invalid.is_set or
                                            self.in_pkts_late.is_set or
                                            self.in_pkts_not_using_sa.is_set or
                                            self.in_pkts_not_valid.is_set or
                                            self.in_pkts_ok.is_set or
                                            self.in_pkts_unchecked.is_set or
                                            self.in_pkts_unused_sa.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.in_octets_decrypted.yfilter != YFilter.not_set or
                                            self.in_octets_validated.yfilter != YFilter.not_set or
                                            self.in_pkts_delayed.yfilter != YFilter.not_set or
                                            self.in_pkts_invalid.yfilter != YFilter.not_set or
                                            self.in_pkts_late.yfilter != YFilter.not_set or
                                            self.in_pkts_not_using_sa.yfilter != YFilter.not_set or
                                            self.in_pkts_not_valid.yfilter != YFilter.not_set or
                                            self.in_pkts_ok.yfilter != YFilter.not_set or
                                            self.in_pkts_unchecked.yfilter != YFilter.not_set or
                                            self.in_pkts_unused_sa.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "rx-sa-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.in_octets_decrypted.is_set or self.in_octets_decrypted.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_octets_decrypted.get_name_leafdata())
                                        if (self.in_octets_validated.is_set or self.in_octets_validated.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_octets_validated.get_name_leafdata())
                                        if (self.in_pkts_delayed.is_set or self.in_pkts_delayed.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_delayed.get_name_leafdata())
                                        if (self.in_pkts_invalid.is_set or self.in_pkts_invalid.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_invalid.get_name_leafdata())
                                        if (self.in_pkts_late.is_set or self.in_pkts_late.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_late.get_name_leafdata())
                                        if (self.in_pkts_not_using_sa.is_set or self.in_pkts_not_using_sa.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_not_using_sa.get_name_leafdata())
                                        if (self.in_pkts_not_valid.is_set or self.in_pkts_not_valid.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_not_valid.get_name_leafdata())
                                        if (self.in_pkts_ok.is_set or self.in_pkts_ok.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_ok.get_name_leafdata())
                                        if (self.in_pkts_unchecked.is_set or self.in_pkts_unchecked.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_unchecked.get_name_leafdata())
                                        if (self.in_pkts_unused_sa.is_set or self.in_pkts_unused_sa.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_unused_sa.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "in-octets-decrypted" or name == "in-octets-validated" or name == "in-pkts-delayed" or name == "in-pkts-invalid" or name == "in-pkts-late" or name == "in-pkts-not-using-sa" or name == "in-pkts-not-valid" or name == "in-pkts-ok" or name == "in-pkts-unchecked" or name == "in-pkts-unused-sa"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "in-octets-decrypted"):
                                            self.in_octets_decrypted = value
                                            self.in_octets_decrypted.value_namespace = name_space
                                            self.in_octets_decrypted.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-octets-validated"):
                                            self.in_octets_validated = value
                                            self.in_octets_validated.value_namespace = name_space
                                            self.in_octets_validated.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-delayed"):
                                            self.in_pkts_delayed = value
                                            self.in_pkts_delayed.value_namespace = name_space
                                            self.in_pkts_delayed.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-invalid"):
                                            self.in_pkts_invalid = value
                                            self.in_pkts_invalid.value_namespace = name_space
                                            self.in_pkts_invalid.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-late"):
                                            self.in_pkts_late = value
                                            self.in_pkts_late.value_namespace = name_space
                                            self.in_pkts_late.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-not-using-sa"):
                                            self.in_pkts_not_using_sa = value
                                            self.in_pkts_not_using_sa.value_namespace = name_space
                                            self.in_pkts_not_using_sa.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-not-valid"):
                                            self.in_pkts_not_valid = value
                                            self.in_pkts_not_valid.value_namespace = name_space
                                            self.in_pkts_not_valid.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-ok"):
                                            self.in_pkts_ok = value
                                            self.in_pkts_ok.value_namespace = name_space
                                            self.in_pkts_ok.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-unchecked"):
                                            self.in_pkts_unchecked = value
                                            self.in_pkts_unchecked.value_namespace = name_space
                                            self.in_pkts_unchecked.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-unused-sa"):
                                            self.in_pkts_unused_sa = value
                                            self.in_pkts_unused_sa.value_namespace = name_space
                                            self.in_pkts_unused_sa.value_namespace_prefix = name_space_prefix


                                class TxInterfaceMacsecStats(Entity):
                                    """
                                    Tx interface Macsec Stats
                                    
                                    .. attribute:: out_pkt_too_long
                                    
                                    	Tx Pkts Too Long
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_pkt_uncontrolled
                                    
                                    	Tx Pkts Uncontrolled
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_pkt_untagged
                                    
                                    	Tx Pkts Untagged
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats.TxInterfaceMacsecStats, self).__init__()

                                        self.yang_name = "tx-interface-macsec-stats"
                                        self.yang_parent_name = "msfpga-stats"

                                        self.out_pkt_too_long = YLeaf(YType.uint64, "out-pkt-too-long")

                                        self.out_pkt_uncontrolled = YLeaf(YType.uint64, "out-pkt-uncontrolled")

                                        self.out_pkt_untagged = YLeaf(YType.uint64, "out-pkt-untagged")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("out_pkt_too_long",
                                                        "out_pkt_uncontrolled",
                                                        "out_pkt_untagged") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats.TxInterfaceMacsecStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats.TxInterfaceMacsecStats, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.out_pkt_too_long.is_set or
                                            self.out_pkt_uncontrolled.is_set or
                                            self.out_pkt_untagged.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.out_pkt_too_long.yfilter != YFilter.not_set or
                                            self.out_pkt_uncontrolled.yfilter != YFilter.not_set or
                                            self.out_pkt_untagged.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "tx-interface-macsec-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.out_pkt_too_long.is_set or self.out_pkt_too_long.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_pkt_too_long.get_name_leafdata())
                                        if (self.out_pkt_uncontrolled.is_set or self.out_pkt_uncontrolled.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_pkt_uncontrolled.get_name_leafdata())
                                        if (self.out_pkt_untagged.is_set or self.out_pkt_untagged.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_pkt_untagged.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "out-pkt-too-long" or name == "out-pkt-uncontrolled" or name == "out-pkt-untagged"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "out-pkt-too-long"):
                                            self.out_pkt_too_long = value
                                            self.out_pkt_too_long.value_namespace = name_space
                                            self.out_pkt_too_long.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-pkt-uncontrolled"):
                                            self.out_pkt_uncontrolled = value
                                            self.out_pkt_uncontrolled.value_namespace = name_space
                                            self.out_pkt_uncontrolled.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-pkt-untagged"):
                                            self.out_pkt_untagged = value
                                            self.out_pkt_untagged.value_namespace = name_space
                                            self.out_pkt_untagged.value_namespace_prefix = name_space_prefix


                                class RxInterfaceMacsecStats(Entity):
                                    """
                                    Rx interface Macsec Stats
                                    
                                    .. attribute:: in_pkt_bad_tag
                                    
                                    	Rx Pkts Bad tag
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkt_no_sci
                                    
                                    	Rx Pkts No Sci
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkt_notag
                                    
                                    	Rx Pkts Notag
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkt_overrun
                                    
                                    	Rx Pkts Over Run
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkt_tagged
                                    
                                    	Rx Pkts Tagged
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkt_uncontrolled
                                    
                                    	Rx Pkts Uncontrolled
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkt_unknown_sci
                                    
                                    	Rx Pkts Unknown Sci
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkt_untagged
                                    
                                    	Rx Pkts Untagged
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats.RxInterfaceMacsecStats, self).__init__()

                                        self.yang_name = "rx-interface-macsec-stats"
                                        self.yang_parent_name = "msfpga-stats"

                                        self.in_pkt_bad_tag = YLeaf(YType.uint64, "in-pkt-bad-tag")

                                        self.in_pkt_no_sci = YLeaf(YType.uint64, "in-pkt-no-sci")

                                        self.in_pkt_notag = YLeaf(YType.uint64, "in-pkt-notag")

                                        self.in_pkt_overrun = YLeaf(YType.uint64, "in-pkt-overrun")

                                        self.in_pkt_tagged = YLeaf(YType.uint64, "in-pkt-tagged")

                                        self.in_pkt_uncontrolled = YLeaf(YType.uint64, "in-pkt-uncontrolled")

                                        self.in_pkt_unknown_sci = YLeaf(YType.uint64, "in-pkt-unknown-sci")

                                        self.in_pkt_untagged = YLeaf(YType.uint64, "in-pkt-untagged")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("in_pkt_bad_tag",
                                                        "in_pkt_no_sci",
                                                        "in_pkt_notag",
                                                        "in_pkt_overrun",
                                                        "in_pkt_tagged",
                                                        "in_pkt_uncontrolled",
                                                        "in_pkt_unknown_sci",
                                                        "in_pkt_untagged") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats.RxInterfaceMacsecStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats.RxInterfaceMacsecStats, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.in_pkt_bad_tag.is_set or
                                            self.in_pkt_no_sci.is_set or
                                            self.in_pkt_notag.is_set or
                                            self.in_pkt_overrun.is_set or
                                            self.in_pkt_tagged.is_set or
                                            self.in_pkt_uncontrolled.is_set or
                                            self.in_pkt_unknown_sci.is_set or
                                            self.in_pkt_untagged.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.in_pkt_bad_tag.yfilter != YFilter.not_set or
                                            self.in_pkt_no_sci.yfilter != YFilter.not_set or
                                            self.in_pkt_notag.yfilter != YFilter.not_set or
                                            self.in_pkt_overrun.yfilter != YFilter.not_set or
                                            self.in_pkt_tagged.yfilter != YFilter.not_set or
                                            self.in_pkt_uncontrolled.yfilter != YFilter.not_set or
                                            self.in_pkt_unknown_sci.yfilter != YFilter.not_set or
                                            self.in_pkt_untagged.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "rx-interface-macsec-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.in_pkt_bad_tag.is_set or self.in_pkt_bad_tag.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkt_bad_tag.get_name_leafdata())
                                        if (self.in_pkt_no_sci.is_set or self.in_pkt_no_sci.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkt_no_sci.get_name_leafdata())
                                        if (self.in_pkt_notag.is_set or self.in_pkt_notag.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkt_notag.get_name_leafdata())
                                        if (self.in_pkt_overrun.is_set or self.in_pkt_overrun.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkt_overrun.get_name_leafdata())
                                        if (self.in_pkt_tagged.is_set or self.in_pkt_tagged.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkt_tagged.get_name_leafdata())
                                        if (self.in_pkt_uncontrolled.is_set or self.in_pkt_uncontrolled.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkt_uncontrolled.get_name_leafdata())
                                        if (self.in_pkt_unknown_sci.is_set or self.in_pkt_unknown_sci.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkt_unknown_sci.get_name_leafdata())
                                        if (self.in_pkt_untagged.is_set or self.in_pkt_untagged.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkt_untagged.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "in-pkt-bad-tag" or name == "in-pkt-no-sci" or name == "in-pkt-notag" or name == "in-pkt-overrun" or name == "in-pkt-tagged" or name == "in-pkt-uncontrolled" or name == "in-pkt-unknown-sci" or name == "in-pkt-untagged"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "in-pkt-bad-tag"):
                                            self.in_pkt_bad_tag = value
                                            self.in_pkt_bad_tag.value_namespace = name_space
                                            self.in_pkt_bad_tag.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkt-no-sci"):
                                            self.in_pkt_no_sci = value
                                            self.in_pkt_no_sci.value_namespace = name_space
                                            self.in_pkt_no_sci.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkt-notag"):
                                            self.in_pkt_notag = value
                                            self.in_pkt_notag.value_namespace = name_space
                                            self.in_pkt_notag.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkt-overrun"):
                                            self.in_pkt_overrun = value
                                            self.in_pkt_overrun.value_namespace = name_space
                                            self.in_pkt_overrun.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkt-tagged"):
                                            self.in_pkt_tagged = value
                                            self.in_pkt_tagged.value_namespace = name_space
                                            self.in_pkt_tagged.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkt-uncontrolled"):
                                            self.in_pkt_uncontrolled = value
                                            self.in_pkt_uncontrolled.value_namespace = name_space
                                            self.in_pkt_uncontrolled.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkt-unknown-sci"):
                                            self.in_pkt_unknown_sci = value
                                            self.in_pkt_unknown_sci.value_namespace = name_space
                                            self.in_pkt_unknown_sci.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkt-untagged"):
                                            self.in_pkt_untagged = value
                                            self.in_pkt_untagged.value_namespace = name_space
                                            self.in_pkt_untagged.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    return (
                                        (self.rx_interface_macsec_stats is not None and self.rx_interface_macsec_stats.has_data()) or
                                        (self.rx_sa_stats is not None and self.rx_sa_stats.has_data()) or
                                        (self.tx_interface_macsec_stats is not None and self.tx_interface_macsec_stats.has_data()) or
                                        (self.tx_sa_stats is not None and self.tx_sa_stats.has_data()))

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        (self.rx_interface_macsec_stats is not None and self.rx_interface_macsec_stats.has_operation()) or
                                        (self.rx_sa_stats is not None and self.rx_sa_stats.has_operation()) or
                                        (self.tx_interface_macsec_stats is not None and self.tx_interface_macsec_stats.has_operation()) or
                                        (self.tx_sa_stats is not None and self.tx_sa_stats.has_operation()))

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "msfpga-stats" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "rx-interface-macsec-stats"):
                                        if (self.rx_interface_macsec_stats is None):
                                            self.rx_interface_macsec_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats.RxInterfaceMacsecStats()
                                            self.rx_interface_macsec_stats.parent = self
                                            self._children_name_map["rx_interface_macsec_stats"] = "rx-interface-macsec-stats"
                                        return self.rx_interface_macsec_stats

                                    if (child_yang_name == "rx-sa-stats"):
                                        if (self.rx_sa_stats is None):
                                            self.rx_sa_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats.RxSaStats()
                                            self.rx_sa_stats.parent = self
                                            self._children_name_map["rx_sa_stats"] = "rx-sa-stats"
                                        return self.rx_sa_stats

                                    if (child_yang_name == "tx-interface-macsec-stats"):
                                        if (self.tx_interface_macsec_stats is None):
                                            self.tx_interface_macsec_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats.TxInterfaceMacsecStats()
                                            self.tx_interface_macsec_stats.parent = self
                                            self._children_name_map["tx_interface_macsec_stats"] = "tx-interface-macsec-stats"
                                        return self.tx_interface_macsec_stats

                                    if (child_yang_name == "tx-sa-stats"):
                                        if (self.tx_sa_stats is None):
                                            self.tx_sa_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats.TxSaStats()
                                            self.tx_sa_stats.parent = self
                                            self._children_name_map["tx_sa_stats"] = "tx-sa-stats"
                                        return self.tx_sa_stats

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "rx-interface-macsec-stats" or name == "rx-sa-stats" or name == "tx-interface-macsec-stats" or name == "tx-sa-stats"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class XlfpgaStats(Entity):
                                """
                                XLFPGA Stats
                                
                                .. attribute:: macsec_rx_stats
                                
                                	Rx SC and SA Level Stats
                                	**type**\:   :py:class:`MacsecRxStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.XlfpgaStats.MacsecRxStats>`
                                
                                .. attribute:: macsec_tx_stats
                                
                                	Tx SC and SA Level Stats
                                	**type**\:   :py:class:`MacsecTxStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.XlfpgaStats.MacsecTxStats>`
                                
                                

                                """

                                _prefix = 'crypto-macsec-pl-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.XlfpgaStats, self).__init__()

                                    self.yang_name = "xlfpga-stats"
                                    self.yang_parent_name = "ext"

                                    self.macsec_rx_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.XlfpgaStats.MacsecRxStats()
                                    self.macsec_rx_stats.parent = self
                                    self._children_name_map["macsec_rx_stats"] = "macsec-rx-stats"
                                    self._children_yang_names.add("macsec-rx-stats")

                                    self.macsec_tx_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.XlfpgaStats.MacsecTxStats()
                                    self.macsec_tx_stats.parent = self
                                    self._children_name_map["macsec_tx_stats"] = "macsec-tx-stats"
                                    self._children_yang_names.add("macsec-tx-stats")


                                class MacsecTxStats(Entity):
                                    """
                                    Tx SC and SA Level Stats
                                    
                                    .. attribute:: current_an
                                    
                                    	Current Tx AN
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sa_encrypted_pkts
                                    
                                    	Current Tx SA Encrypted Packets
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_bypass_pkts
                                    
                                    	Tx Bypass Packets
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_dropped_pkts
                                    
                                    	Tx Dropped Packets
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_eapol_pkts
                                    
                                    	Tx Eapol Packets
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_encrypted_octets
                                    
                                    	Tx Octets Encrypted
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_encrypted_pkts
                                    
                                    	Tx packets Encrypted
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_overrun_pkts
                                    
                                    	Tx Overrun Packets
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_toolong_pkts
                                    
                                    	Tx Pkts Too Long
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_untagged_pkts
                                    
                                    	Tx Untagged Packets
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.XlfpgaStats.MacsecTxStats, self).__init__()

                                        self.yang_name = "macsec-tx-stats"
                                        self.yang_parent_name = "xlfpga-stats"

                                        self.current_an = YLeaf(YType.uint64, "current-an")

                                        self.sa_encrypted_pkts = YLeaf(YType.uint64, "sa-encrypted-pkts")

                                        self.sc_bypass_pkts = YLeaf(YType.uint64, "sc-bypass-pkts")

                                        self.sc_dropped_pkts = YLeaf(YType.uint64, "sc-dropped-pkts")

                                        self.sc_eapol_pkts = YLeaf(YType.uint64, "sc-eapol-pkts")

                                        self.sc_encrypted_octets = YLeaf(YType.uint64, "sc-encrypted-octets")

                                        self.sc_encrypted_pkts = YLeaf(YType.uint64, "sc-encrypted-pkts")

                                        self.sc_overrun_pkts = YLeaf(YType.uint64, "sc-overrun-pkts")

                                        self.sc_toolong_pkts = YLeaf(YType.uint64, "sc-toolong-pkts")

                                        self.sc_untagged_pkts = YLeaf(YType.uint64, "sc-untagged-pkts")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("current_an",
                                                        "sa_encrypted_pkts",
                                                        "sc_bypass_pkts",
                                                        "sc_dropped_pkts",
                                                        "sc_eapol_pkts",
                                                        "sc_encrypted_octets",
                                                        "sc_encrypted_pkts",
                                                        "sc_overrun_pkts",
                                                        "sc_toolong_pkts",
                                                        "sc_untagged_pkts") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.XlfpgaStats.MacsecTxStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.XlfpgaStats.MacsecTxStats, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.current_an.is_set or
                                            self.sa_encrypted_pkts.is_set or
                                            self.sc_bypass_pkts.is_set or
                                            self.sc_dropped_pkts.is_set or
                                            self.sc_eapol_pkts.is_set or
                                            self.sc_encrypted_octets.is_set or
                                            self.sc_encrypted_pkts.is_set or
                                            self.sc_overrun_pkts.is_set or
                                            self.sc_toolong_pkts.is_set or
                                            self.sc_untagged_pkts.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.current_an.yfilter != YFilter.not_set or
                                            self.sa_encrypted_pkts.yfilter != YFilter.not_set or
                                            self.sc_bypass_pkts.yfilter != YFilter.not_set or
                                            self.sc_dropped_pkts.yfilter != YFilter.not_set or
                                            self.sc_eapol_pkts.yfilter != YFilter.not_set or
                                            self.sc_encrypted_octets.yfilter != YFilter.not_set or
                                            self.sc_encrypted_pkts.yfilter != YFilter.not_set or
                                            self.sc_overrun_pkts.yfilter != YFilter.not_set or
                                            self.sc_toolong_pkts.yfilter != YFilter.not_set or
                                            self.sc_untagged_pkts.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "macsec-tx-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.current_an.is_set or self.current_an.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.current_an.get_name_leafdata())
                                        if (self.sa_encrypted_pkts.is_set or self.sa_encrypted_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sa_encrypted_pkts.get_name_leafdata())
                                        if (self.sc_bypass_pkts.is_set or self.sc_bypass_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_bypass_pkts.get_name_leafdata())
                                        if (self.sc_dropped_pkts.is_set or self.sc_dropped_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_dropped_pkts.get_name_leafdata())
                                        if (self.sc_eapol_pkts.is_set or self.sc_eapol_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_eapol_pkts.get_name_leafdata())
                                        if (self.sc_encrypted_octets.is_set or self.sc_encrypted_octets.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_encrypted_octets.get_name_leafdata())
                                        if (self.sc_encrypted_pkts.is_set or self.sc_encrypted_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_encrypted_pkts.get_name_leafdata())
                                        if (self.sc_overrun_pkts.is_set or self.sc_overrun_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_overrun_pkts.get_name_leafdata())
                                        if (self.sc_toolong_pkts.is_set or self.sc_toolong_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_toolong_pkts.get_name_leafdata())
                                        if (self.sc_untagged_pkts.is_set or self.sc_untagged_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_untagged_pkts.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "current-an" or name == "sa-encrypted-pkts" or name == "sc-bypass-pkts" or name == "sc-dropped-pkts" or name == "sc-eapol-pkts" or name == "sc-encrypted-octets" or name == "sc-encrypted-pkts" or name == "sc-overrun-pkts" or name == "sc-toolong-pkts" or name == "sc-untagged-pkts"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "current-an"):
                                            self.current_an = value
                                            self.current_an.value_namespace = name_space
                                            self.current_an.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sa-encrypted-pkts"):
                                            self.sa_encrypted_pkts = value
                                            self.sa_encrypted_pkts.value_namespace = name_space
                                            self.sa_encrypted_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-bypass-pkts"):
                                            self.sc_bypass_pkts = value
                                            self.sc_bypass_pkts.value_namespace = name_space
                                            self.sc_bypass_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-dropped-pkts"):
                                            self.sc_dropped_pkts = value
                                            self.sc_dropped_pkts.value_namespace = name_space
                                            self.sc_dropped_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-eapol-pkts"):
                                            self.sc_eapol_pkts = value
                                            self.sc_eapol_pkts.value_namespace = name_space
                                            self.sc_eapol_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-encrypted-octets"):
                                            self.sc_encrypted_octets = value
                                            self.sc_encrypted_octets.value_namespace = name_space
                                            self.sc_encrypted_octets.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-encrypted-pkts"):
                                            self.sc_encrypted_pkts = value
                                            self.sc_encrypted_pkts.value_namespace = name_space
                                            self.sc_encrypted_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-overrun-pkts"):
                                            self.sc_overrun_pkts = value
                                            self.sc_overrun_pkts.value_namespace = name_space
                                            self.sc_overrun_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-toolong-pkts"):
                                            self.sc_toolong_pkts = value
                                            self.sc_toolong_pkts.value_namespace = name_space
                                            self.sc_toolong_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-untagged-pkts"):
                                            self.sc_untagged_pkts = value
                                            self.sc_untagged_pkts.value_namespace = name_space
                                            self.sc_untagged_pkts.value_namespace_prefix = name_space_prefix


                                class MacsecRxStats(Entity):
                                    """
                                    Rx SC and SA Level Stats
                                    
                                    .. attribute:: rx_sa_stat
                                    
                                    	Rx SA Level Stats
                                    	**type**\: list of    :py:class:`RxSaStat <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.XlfpgaStats.MacsecRxStats.RxSaStat>`
                                    
                                    .. attribute:: sc_bad_tag_pkts
                                    
                                    	Rx Bad Tag Packets
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_bypass_pkts
                                    
                                    	Rx Bypass Packets
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_decrypted_octets
                                    
                                    	Rx Octets Decrypted
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_delayed_pkts
                                    
                                    	Rx Delayed Pkts
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_dropped_pkts
                                    
                                    	Rx Dropped Packets
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_eapol_pkts
                                    
                                    	Rx Eapol Packets
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_invalid_pkts
                                    
                                    	Rx Pkts Invalid
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_late_pkts
                                    
                                    	Rx Late Pkts
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_no_sci_pkts
                                    
                                    	Rx No SCI Pkts
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_no_tag_pkts
                                    
                                    	Rx No Tag Packets
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_not_using_pkts
                                    
                                    	Rx Pkts Not Using SA
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_not_valid_pkts
                                    
                                    	Rx Not Valid Pkts
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_ok_pkts
                                    
                                    	Rx Pkts Ok
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_overrun_pkts
                                    
                                    	Rx Overrun Pkts
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_unchecked_pkts
                                    
                                    	Rx Unchecked Pkts
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_unknown_sci_pkts
                                    
                                    	Rx Unknown SCI Pkts
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_untagged_pkts
                                    
                                    	Rx Untagged Packets
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_unused_pkts
                                    
                                    	Rx Pkts Unused SA
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.XlfpgaStats.MacsecRxStats, self).__init__()

                                        self.yang_name = "macsec-rx-stats"
                                        self.yang_parent_name = "xlfpga-stats"

                                        self.sc_bad_tag_pkts = YLeaf(YType.uint64, "sc-bad-tag-pkts")

                                        self.sc_bypass_pkts = YLeaf(YType.uint64, "sc-bypass-pkts")

                                        self.sc_decrypted_octets = YLeaf(YType.uint64, "sc-decrypted-octets")

                                        self.sc_delayed_pkts = YLeaf(YType.uint64, "sc-delayed-pkts")

                                        self.sc_dropped_pkts = YLeaf(YType.uint64, "sc-dropped-pkts")

                                        self.sc_eapol_pkts = YLeaf(YType.uint64, "sc-eapol-pkts")

                                        self.sc_invalid_pkts = YLeaf(YType.uint64, "sc-invalid-pkts")

                                        self.sc_late_pkts = YLeaf(YType.uint64, "sc-late-pkts")

                                        self.sc_no_sci_pkts = YLeaf(YType.uint64, "sc-no-sci-pkts")

                                        self.sc_no_tag_pkts = YLeaf(YType.uint64, "sc-no-tag-pkts")

                                        self.sc_not_using_pkts = YLeaf(YType.uint64, "sc-not-using-pkts")

                                        self.sc_not_valid_pkts = YLeaf(YType.uint64, "sc-not-valid-pkts")

                                        self.sc_ok_pkts = YLeaf(YType.uint64, "sc-ok-pkts")

                                        self.sc_overrun_pkts = YLeaf(YType.uint64, "sc-overrun-pkts")

                                        self.sc_unchecked_pkts = YLeaf(YType.uint64, "sc-unchecked-pkts")

                                        self.sc_unknown_sci_pkts = YLeaf(YType.uint64, "sc-unknown-sci-pkts")

                                        self.sc_untagged_pkts = YLeaf(YType.uint64, "sc-untagged-pkts")

                                        self.sc_unused_pkts = YLeaf(YType.uint64, "sc-unused-pkts")

                                        self.rx_sa_stat = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("sc_bad_tag_pkts",
                                                        "sc_bypass_pkts",
                                                        "sc_decrypted_octets",
                                                        "sc_delayed_pkts",
                                                        "sc_dropped_pkts",
                                                        "sc_eapol_pkts",
                                                        "sc_invalid_pkts",
                                                        "sc_late_pkts",
                                                        "sc_no_sci_pkts",
                                                        "sc_no_tag_pkts",
                                                        "sc_not_using_pkts",
                                                        "sc_not_valid_pkts",
                                                        "sc_ok_pkts",
                                                        "sc_overrun_pkts",
                                                        "sc_unchecked_pkts",
                                                        "sc_unknown_sci_pkts",
                                                        "sc_untagged_pkts",
                                                        "sc_unused_pkts") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.XlfpgaStats.MacsecRxStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.XlfpgaStats.MacsecRxStats, self).__setattr__(name, value)


                                    class RxSaStat(Entity):
                                        """
                                        Rx SA Level Stats
                                        
                                        .. attribute:: an
                                        
                                        	Current Rx AN
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: sa_invalid_pkts
                                        
                                        	Rx Invalid Pkts for current AN
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: sa_not_using_pkts
                                        
                                        	Rx Pkts not using SA for Current AN
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: sa_not_valid_pkts
                                        
                                        	Rx Not Valid Pkts for Current AN
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: sa_ok_pkts
                                        
                                        	Rx Ok Pkts for Current AN
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: sa_unused_pkts
                                        
                                        	Rx Pkts Unused Pkts for Current AN
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        

                                        """

                                        _prefix = 'crypto-macsec-pl-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.XlfpgaStats.MacsecRxStats.RxSaStat, self).__init__()

                                            self.yang_name = "rx-sa-stat"
                                            self.yang_parent_name = "macsec-rx-stats"

                                            self.an = YLeaf(YType.uint64, "an")

                                            self.sa_invalid_pkts = YLeaf(YType.uint64, "sa-invalid-pkts")

                                            self.sa_not_using_pkts = YLeaf(YType.uint64, "sa-not-using-pkts")

                                            self.sa_not_valid_pkts = YLeaf(YType.uint64, "sa-not-valid-pkts")

                                            self.sa_ok_pkts = YLeaf(YType.uint64, "sa-ok-pkts")

                                            self.sa_unused_pkts = YLeaf(YType.uint64, "sa-unused-pkts")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("an",
                                                            "sa_invalid_pkts",
                                                            "sa_not_using_pkts",
                                                            "sa_not_valid_pkts",
                                                            "sa_ok_pkts",
                                                            "sa_unused_pkts") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.XlfpgaStats.MacsecRxStats.RxSaStat, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.XlfpgaStats.MacsecRxStats.RxSaStat, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.an.is_set or
                                                self.sa_invalid_pkts.is_set or
                                                self.sa_not_using_pkts.is_set or
                                                self.sa_not_valid_pkts.is_set or
                                                self.sa_ok_pkts.is_set or
                                                self.sa_unused_pkts.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.an.yfilter != YFilter.not_set or
                                                self.sa_invalid_pkts.yfilter != YFilter.not_set or
                                                self.sa_not_using_pkts.yfilter != YFilter.not_set or
                                                self.sa_not_valid_pkts.yfilter != YFilter.not_set or
                                                self.sa_ok_pkts.yfilter != YFilter.not_set or
                                                self.sa_unused_pkts.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "rx-sa-stat" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.an.is_set or self.an.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.an.get_name_leafdata())
                                            if (self.sa_invalid_pkts.is_set or self.sa_invalid_pkts.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sa_invalid_pkts.get_name_leafdata())
                                            if (self.sa_not_using_pkts.is_set or self.sa_not_using_pkts.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sa_not_using_pkts.get_name_leafdata())
                                            if (self.sa_not_valid_pkts.is_set or self.sa_not_valid_pkts.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sa_not_valid_pkts.get_name_leafdata())
                                            if (self.sa_ok_pkts.is_set or self.sa_ok_pkts.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sa_ok_pkts.get_name_leafdata())
                                            if (self.sa_unused_pkts.is_set or self.sa_unused_pkts.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sa_unused_pkts.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "an" or name == "sa-invalid-pkts" or name == "sa-not-using-pkts" or name == "sa-not-valid-pkts" or name == "sa-ok-pkts" or name == "sa-unused-pkts"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "an"):
                                                self.an = value
                                                self.an.value_namespace = name_space
                                                self.an.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sa-invalid-pkts"):
                                                self.sa_invalid_pkts = value
                                                self.sa_invalid_pkts.value_namespace = name_space
                                                self.sa_invalid_pkts.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sa-not-using-pkts"):
                                                self.sa_not_using_pkts = value
                                                self.sa_not_using_pkts.value_namespace = name_space
                                                self.sa_not_using_pkts.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sa-not-valid-pkts"):
                                                self.sa_not_valid_pkts = value
                                                self.sa_not_valid_pkts.value_namespace = name_space
                                                self.sa_not_valid_pkts.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sa-ok-pkts"):
                                                self.sa_ok_pkts = value
                                                self.sa_ok_pkts.value_namespace = name_space
                                                self.sa_ok_pkts.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sa-unused-pkts"):
                                                self.sa_unused_pkts = value
                                                self.sa_unused_pkts.value_namespace = name_space
                                                self.sa_unused_pkts.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        for c in self.rx_sa_stat:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.sc_bad_tag_pkts.is_set or
                                            self.sc_bypass_pkts.is_set or
                                            self.sc_decrypted_octets.is_set or
                                            self.sc_delayed_pkts.is_set or
                                            self.sc_dropped_pkts.is_set or
                                            self.sc_eapol_pkts.is_set or
                                            self.sc_invalid_pkts.is_set or
                                            self.sc_late_pkts.is_set or
                                            self.sc_no_sci_pkts.is_set or
                                            self.sc_no_tag_pkts.is_set or
                                            self.sc_not_using_pkts.is_set or
                                            self.sc_not_valid_pkts.is_set or
                                            self.sc_ok_pkts.is_set or
                                            self.sc_overrun_pkts.is_set or
                                            self.sc_unchecked_pkts.is_set or
                                            self.sc_unknown_sci_pkts.is_set or
                                            self.sc_untagged_pkts.is_set or
                                            self.sc_unused_pkts.is_set)

                                    def has_operation(self):
                                        for c in self.rx_sa_stat:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.sc_bad_tag_pkts.yfilter != YFilter.not_set or
                                            self.sc_bypass_pkts.yfilter != YFilter.not_set or
                                            self.sc_decrypted_octets.yfilter != YFilter.not_set or
                                            self.sc_delayed_pkts.yfilter != YFilter.not_set or
                                            self.sc_dropped_pkts.yfilter != YFilter.not_set or
                                            self.sc_eapol_pkts.yfilter != YFilter.not_set or
                                            self.sc_invalid_pkts.yfilter != YFilter.not_set or
                                            self.sc_late_pkts.yfilter != YFilter.not_set or
                                            self.sc_no_sci_pkts.yfilter != YFilter.not_set or
                                            self.sc_no_tag_pkts.yfilter != YFilter.not_set or
                                            self.sc_not_using_pkts.yfilter != YFilter.not_set or
                                            self.sc_not_valid_pkts.yfilter != YFilter.not_set or
                                            self.sc_ok_pkts.yfilter != YFilter.not_set or
                                            self.sc_overrun_pkts.yfilter != YFilter.not_set or
                                            self.sc_unchecked_pkts.yfilter != YFilter.not_set or
                                            self.sc_unknown_sci_pkts.yfilter != YFilter.not_set or
                                            self.sc_untagged_pkts.yfilter != YFilter.not_set or
                                            self.sc_unused_pkts.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "macsec-rx-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.sc_bad_tag_pkts.is_set or self.sc_bad_tag_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_bad_tag_pkts.get_name_leafdata())
                                        if (self.sc_bypass_pkts.is_set or self.sc_bypass_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_bypass_pkts.get_name_leafdata())
                                        if (self.sc_decrypted_octets.is_set or self.sc_decrypted_octets.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_decrypted_octets.get_name_leafdata())
                                        if (self.sc_delayed_pkts.is_set or self.sc_delayed_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_delayed_pkts.get_name_leafdata())
                                        if (self.sc_dropped_pkts.is_set or self.sc_dropped_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_dropped_pkts.get_name_leafdata())
                                        if (self.sc_eapol_pkts.is_set or self.sc_eapol_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_eapol_pkts.get_name_leafdata())
                                        if (self.sc_invalid_pkts.is_set or self.sc_invalid_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_invalid_pkts.get_name_leafdata())
                                        if (self.sc_late_pkts.is_set or self.sc_late_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_late_pkts.get_name_leafdata())
                                        if (self.sc_no_sci_pkts.is_set or self.sc_no_sci_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_no_sci_pkts.get_name_leafdata())
                                        if (self.sc_no_tag_pkts.is_set or self.sc_no_tag_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_no_tag_pkts.get_name_leafdata())
                                        if (self.sc_not_using_pkts.is_set or self.sc_not_using_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_not_using_pkts.get_name_leafdata())
                                        if (self.sc_not_valid_pkts.is_set or self.sc_not_valid_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_not_valid_pkts.get_name_leafdata())
                                        if (self.sc_ok_pkts.is_set or self.sc_ok_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_ok_pkts.get_name_leafdata())
                                        if (self.sc_overrun_pkts.is_set or self.sc_overrun_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_overrun_pkts.get_name_leafdata())
                                        if (self.sc_unchecked_pkts.is_set or self.sc_unchecked_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_unchecked_pkts.get_name_leafdata())
                                        if (self.sc_unknown_sci_pkts.is_set or self.sc_unknown_sci_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_unknown_sci_pkts.get_name_leafdata())
                                        if (self.sc_untagged_pkts.is_set or self.sc_untagged_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_untagged_pkts.get_name_leafdata())
                                        if (self.sc_unused_pkts.is_set or self.sc_unused_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_unused_pkts.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "rx-sa-stat"):
                                            for c in self.rx_sa_stat:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.XlfpgaStats.MacsecRxStats.RxSaStat()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.rx_sa_stat.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "rx-sa-stat" or name == "sc-bad-tag-pkts" or name == "sc-bypass-pkts" or name == "sc-decrypted-octets" or name == "sc-delayed-pkts" or name == "sc-dropped-pkts" or name == "sc-eapol-pkts" or name == "sc-invalid-pkts" or name == "sc-late-pkts" or name == "sc-no-sci-pkts" or name == "sc-no-tag-pkts" or name == "sc-not-using-pkts" or name == "sc-not-valid-pkts" or name == "sc-ok-pkts" or name == "sc-overrun-pkts" or name == "sc-unchecked-pkts" or name == "sc-unknown-sci-pkts" or name == "sc-untagged-pkts" or name == "sc-unused-pkts"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "sc-bad-tag-pkts"):
                                            self.sc_bad_tag_pkts = value
                                            self.sc_bad_tag_pkts.value_namespace = name_space
                                            self.sc_bad_tag_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-bypass-pkts"):
                                            self.sc_bypass_pkts = value
                                            self.sc_bypass_pkts.value_namespace = name_space
                                            self.sc_bypass_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-decrypted-octets"):
                                            self.sc_decrypted_octets = value
                                            self.sc_decrypted_octets.value_namespace = name_space
                                            self.sc_decrypted_octets.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-delayed-pkts"):
                                            self.sc_delayed_pkts = value
                                            self.sc_delayed_pkts.value_namespace = name_space
                                            self.sc_delayed_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-dropped-pkts"):
                                            self.sc_dropped_pkts = value
                                            self.sc_dropped_pkts.value_namespace = name_space
                                            self.sc_dropped_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-eapol-pkts"):
                                            self.sc_eapol_pkts = value
                                            self.sc_eapol_pkts.value_namespace = name_space
                                            self.sc_eapol_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-invalid-pkts"):
                                            self.sc_invalid_pkts = value
                                            self.sc_invalid_pkts.value_namespace = name_space
                                            self.sc_invalid_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-late-pkts"):
                                            self.sc_late_pkts = value
                                            self.sc_late_pkts.value_namespace = name_space
                                            self.sc_late_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-no-sci-pkts"):
                                            self.sc_no_sci_pkts = value
                                            self.sc_no_sci_pkts.value_namespace = name_space
                                            self.sc_no_sci_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-no-tag-pkts"):
                                            self.sc_no_tag_pkts = value
                                            self.sc_no_tag_pkts.value_namespace = name_space
                                            self.sc_no_tag_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-not-using-pkts"):
                                            self.sc_not_using_pkts = value
                                            self.sc_not_using_pkts.value_namespace = name_space
                                            self.sc_not_using_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-not-valid-pkts"):
                                            self.sc_not_valid_pkts = value
                                            self.sc_not_valid_pkts.value_namespace = name_space
                                            self.sc_not_valid_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-ok-pkts"):
                                            self.sc_ok_pkts = value
                                            self.sc_ok_pkts.value_namespace = name_space
                                            self.sc_ok_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-overrun-pkts"):
                                            self.sc_overrun_pkts = value
                                            self.sc_overrun_pkts.value_namespace = name_space
                                            self.sc_overrun_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-unchecked-pkts"):
                                            self.sc_unchecked_pkts = value
                                            self.sc_unchecked_pkts.value_namespace = name_space
                                            self.sc_unchecked_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-unknown-sci-pkts"):
                                            self.sc_unknown_sci_pkts = value
                                            self.sc_unknown_sci_pkts.value_namespace = name_space
                                            self.sc_unknown_sci_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-untagged-pkts"):
                                            self.sc_untagged_pkts = value
                                            self.sc_untagged_pkts.value_namespace = name_space
                                            self.sc_untagged_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-unused-pkts"):
                                            self.sc_unused_pkts = value
                                            self.sc_unused_pkts.value_namespace = name_space
                                            self.sc_unused_pkts.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    return (
                                        (self.macsec_rx_stats is not None and self.macsec_rx_stats.has_data()) or
                                        (self.macsec_tx_stats is not None and self.macsec_tx_stats.has_data()))

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        (self.macsec_rx_stats is not None and self.macsec_rx_stats.has_operation()) or
                                        (self.macsec_tx_stats is not None and self.macsec_tx_stats.has_operation()))

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "xlfpga-stats" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "macsec-rx-stats"):
                                        if (self.macsec_rx_stats is None):
                                            self.macsec_rx_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.XlfpgaStats.MacsecRxStats()
                                            self.macsec_rx_stats.parent = self
                                            self._children_name_map["macsec_rx_stats"] = "macsec-rx-stats"
                                        return self.macsec_rx_stats

                                    if (child_yang_name == "macsec-tx-stats"):
                                        if (self.macsec_tx_stats is None):
                                            self.macsec_tx_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.XlfpgaStats.MacsecTxStats()
                                            self.macsec_tx_stats.parent = self
                                            self._children_name_map["macsec_tx_stats"] = "macsec-tx-stats"
                                        return self.macsec_tx_stats

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "macsec-rx-stats" or name == "macsec-tx-stats"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class Es200Stats(Entity):
                                """
                                ES200 Stats
                                
                                .. attribute:: rx_interface_macsec_stats
                                
                                	Rx interface Macsec Stats
                                	**type**\:   :py:class:`RxInterfaceMacsecStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.RxInterfaceMacsecStats>`
                                
                                .. attribute:: rx_port_stats
                                
                                	Port level RX Stats
                                	**type**\:   :py:class:`RxPortStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.RxPortStats>`
                                
                                .. attribute:: rx_sa_stats
                                
                                	Rx SA Stats
                                	**type**\:   :py:class:`RxSaStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.RxSaStats>`
                                
                                .. attribute:: rx_sc_macsec_stats
                                
                                	Rx SC Macsec Stats
                                	**type**\:   :py:class:`RxScMacsecStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.RxScMacsecStats>`
                                
                                .. attribute:: tx_interface_macsec_stats
                                
                                	Tx interface Macsec Stats
                                	**type**\:   :py:class:`TxInterfaceMacsecStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.TxInterfaceMacsecStats>`
                                
                                .. attribute:: tx_port_stats
                                
                                	Port level TX Stats
                                	**type**\:   :py:class:`TxPortStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.TxPortStats>`
                                
                                .. attribute:: tx_sa_stats
                                
                                	Tx SA Stats
                                	**type**\:   :py:class:`TxSaStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.TxSaStats>`
                                
                                .. attribute:: tx_sc_macsec_stats
                                
                                	Tx SC Macsec Stats
                                	**type**\:   :py:class:`TxScMacsecStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.TxScMacsecStats>`
                                
                                

                                """

                                _prefix = 'crypto-macsec-pl-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats, self).__init__()

                                    self.yang_name = "es200-stats"
                                    self.yang_parent_name = "ext"

                                    self.rx_interface_macsec_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.RxInterfaceMacsecStats()
                                    self.rx_interface_macsec_stats.parent = self
                                    self._children_name_map["rx_interface_macsec_stats"] = "rx-interface-macsec-stats"
                                    self._children_yang_names.add("rx-interface-macsec-stats")

                                    self.rx_port_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.RxPortStats()
                                    self.rx_port_stats.parent = self
                                    self._children_name_map["rx_port_stats"] = "rx-port-stats"
                                    self._children_yang_names.add("rx-port-stats")

                                    self.rx_sa_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.RxSaStats()
                                    self.rx_sa_stats.parent = self
                                    self._children_name_map["rx_sa_stats"] = "rx-sa-stats"
                                    self._children_yang_names.add("rx-sa-stats")

                                    self.rx_sc_macsec_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.RxScMacsecStats()
                                    self.rx_sc_macsec_stats.parent = self
                                    self._children_name_map["rx_sc_macsec_stats"] = "rx-sc-macsec-stats"
                                    self._children_yang_names.add("rx-sc-macsec-stats")

                                    self.tx_interface_macsec_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.TxInterfaceMacsecStats()
                                    self.tx_interface_macsec_stats.parent = self
                                    self._children_name_map["tx_interface_macsec_stats"] = "tx-interface-macsec-stats"
                                    self._children_yang_names.add("tx-interface-macsec-stats")

                                    self.tx_port_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.TxPortStats()
                                    self.tx_port_stats.parent = self
                                    self._children_name_map["tx_port_stats"] = "tx-port-stats"
                                    self._children_yang_names.add("tx-port-stats")

                                    self.tx_sa_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.TxSaStats()
                                    self.tx_sa_stats.parent = self
                                    self._children_name_map["tx_sa_stats"] = "tx-sa-stats"
                                    self._children_yang_names.add("tx-sa-stats")

                                    self.tx_sc_macsec_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.TxScMacsecStats()
                                    self.tx_sc_macsec_stats.parent = self
                                    self._children_name_map["tx_sc_macsec_stats"] = "tx-sc-macsec-stats"
                                    self._children_yang_names.add("tx-sc-macsec-stats")


                                class TxSaStats(Entity):
                                    """
                                    Tx SA Stats
                                    
                                    .. attribute:: out_octets_encrypted_protected1
                                    
                                    	octets1 encrypted/protected ?
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_pkts_encrypted_protected
                                    
                                    	packets encrypted/protected
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_pkts_too_long
                                    
                                    	packets exceeding egress MTU
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.TxSaStats, self).__init__()

                                        self.yang_name = "tx-sa-stats"
                                        self.yang_parent_name = "es200-stats"

                                        self.out_octets_encrypted_protected1 = YLeaf(YType.uint64, "out-octets-encrypted-protected1")

                                        self.out_pkts_encrypted_protected = YLeaf(YType.uint64, "out-pkts-encrypted-protected")

                                        self.out_pkts_too_long = YLeaf(YType.uint64, "out-pkts-too-long")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("out_octets_encrypted_protected1",
                                                        "out_pkts_encrypted_protected",
                                                        "out_pkts_too_long") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.TxSaStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.TxSaStats, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.out_octets_encrypted_protected1.is_set or
                                            self.out_pkts_encrypted_protected.is_set or
                                            self.out_pkts_too_long.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.out_octets_encrypted_protected1.yfilter != YFilter.not_set or
                                            self.out_pkts_encrypted_protected.yfilter != YFilter.not_set or
                                            self.out_pkts_too_long.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "tx-sa-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.out_octets_encrypted_protected1.is_set or self.out_octets_encrypted_protected1.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_octets_encrypted_protected1.get_name_leafdata())
                                        if (self.out_pkts_encrypted_protected.is_set or self.out_pkts_encrypted_protected.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_pkts_encrypted_protected.get_name_leafdata())
                                        if (self.out_pkts_too_long.is_set or self.out_pkts_too_long.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_pkts_too_long.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "out-octets-encrypted-protected1" or name == "out-pkts-encrypted-protected" or name == "out-pkts-too-long"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "out-octets-encrypted-protected1"):
                                            self.out_octets_encrypted_protected1 = value
                                            self.out_octets_encrypted_protected1.value_namespace = name_space
                                            self.out_octets_encrypted_protected1.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-pkts-encrypted-protected"):
                                            self.out_pkts_encrypted_protected = value
                                            self.out_pkts_encrypted_protected.value_namespace = name_space
                                            self.out_pkts_encrypted_protected.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-pkts-too-long"):
                                            self.out_pkts_too_long = value
                                            self.out_pkts_too_long.value_namespace = name_space
                                            self.out_pkts_too_long.value_namespace_prefix = name_space_prefix


                                class RxSaStats(Entity):
                                    """
                                    Rx SA Stats
                                    
                                    .. attribute:: in_octets_decrypted_validated1
                                    
                                    	octets1 decrypted/validated
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_octets_validated
                                    
                                    	octets validated
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_delayed
                                    
                                    	PN of packet outside replay window & validateFrames !strict
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_invalid
                                    
                                    	packet not valid & validateFrames !strict
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_late
                                    
                                    	PN of packet outside replay window & validateFrames strict
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_not_using_sa
                                    
                                    	packet assigned to SA not in use & validateFrames strict
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_not_valid
                                    
                                    	packet not valid & validateFrames strict
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_ok
                                    
                                    	packets with no error
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_unchecked
                                    
                                    	frame not valid & validateFrames disabled
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_unused_sa
                                    
                                    	packet assigned to SA not in use & validateFrames !strict
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.RxSaStats, self).__init__()

                                        self.yang_name = "rx-sa-stats"
                                        self.yang_parent_name = "es200-stats"

                                        self.in_octets_decrypted_validated1 = YLeaf(YType.uint64, "in-octets-decrypted-validated1")

                                        self.in_octets_validated = YLeaf(YType.uint64, "in-octets-validated")

                                        self.in_pkts_delayed = YLeaf(YType.uint64, "in-pkts-delayed")

                                        self.in_pkts_invalid = YLeaf(YType.uint64, "in-pkts-invalid")

                                        self.in_pkts_late = YLeaf(YType.uint64, "in-pkts-late")

                                        self.in_pkts_not_using_sa = YLeaf(YType.uint64, "in-pkts-not-using-sa")

                                        self.in_pkts_not_valid = YLeaf(YType.uint64, "in-pkts-not-valid")

                                        self.in_pkts_ok = YLeaf(YType.uint64, "in-pkts-ok")

                                        self.in_pkts_unchecked = YLeaf(YType.uint64, "in-pkts-unchecked")

                                        self.in_pkts_unused_sa = YLeaf(YType.uint64, "in-pkts-unused-sa")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("in_octets_decrypted_validated1",
                                                        "in_octets_validated",
                                                        "in_pkts_delayed",
                                                        "in_pkts_invalid",
                                                        "in_pkts_late",
                                                        "in_pkts_not_using_sa",
                                                        "in_pkts_not_valid",
                                                        "in_pkts_ok",
                                                        "in_pkts_unchecked",
                                                        "in_pkts_unused_sa") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.RxSaStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.RxSaStats, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.in_octets_decrypted_validated1.is_set or
                                            self.in_octets_validated.is_set or
                                            self.in_pkts_delayed.is_set or
                                            self.in_pkts_invalid.is_set or
                                            self.in_pkts_late.is_set or
                                            self.in_pkts_not_using_sa.is_set or
                                            self.in_pkts_not_valid.is_set or
                                            self.in_pkts_ok.is_set or
                                            self.in_pkts_unchecked.is_set or
                                            self.in_pkts_unused_sa.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.in_octets_decrypted_validated1.yfilter != YFilter.not_set or
                                            self.in_octets_validated.yfilter != YFilter.not_set or
                                            self.in_pkts_delayed.yfilter != YFilter.not_set or
                                            self.in_pkts_invalid.yfilter != YFilter.not_set or
                                            self.in_pkts_late.yfilter != YFilter.not_set or
                                            self.in_pkts_not_using_sa.yfilter != YFilter.not_set or
                                            self.in_pkts_not_valid.yfilter != YFilter.not_set or
                                            self.in_pkts_ok.yfilter != YFilter.not_set or
                                            self.in_pkts_unchecked.yfilter != YFilter.not_set or
                                            self.in_pkts_unused_sa.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "rx-sa-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.in_octets_decrypted_validated1.is_set or self.in_octets_decrypted_validated1.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_octets_decrypted_validated1.get_name_leafdata())
                                        if (self.in_octets_validated.is_set or self.in_octets_validated.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_octets_validated.get_name_leafdata())
                                        if (self.in_pkts_delayed.is_set or self.in_pkts_delayed.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_delayed.get_name_leafdata())
                                        if (self.in_pkts_invalid.is_set or self.in_pkts_invalid.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_invalid.get_name_leafdata())
                                        if (self.in_pkts_late.is_set or self.in_pkts_late.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_late.get_name_leafdata())
                                        if (self.in_pkts_not_using_sa.is_set or self.in_pkts_not_using_sa.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_not_using_sa.get_name_leafdata())
                                        if (self.in_pkts_not_valid.is_set or self.in_pkts_not_valid.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_not_valid.get_name_leafdata())
                                        if (self.in_pkts_ok.is_set or self.in_pkts_ok.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_ok.get_name_leafdata())
                                        if (self.in_pkts_unchecked.is_set or self.in_pkts_unchecked.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_unchecked.get_name_leafdata())
                                        if (self.in_pkts_unused_sa.is_set or self.in_pkts_unused_sa.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_unused_sa.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "in-octets-decrypted-validated1" or name == "in-octets-validated" or name == "in-pkts-delayed" or name == "in-pkts-invalid" or name == "in-pkts-late" or name == "in-pkts-not-using-sa" or name == "in-pkts-not-valid" or name == "in-pkts-ok" or name == "in-pkts-unchecked" or name == "in-pkts-unused-sa"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "in-octets-decrypted-validated1"):
                                            self.in_octets_decrypted_validated1 = value
                                            self.in_octets_decrypted_validated1.value_namespace = name_space
                                            self.in_octets_decrypted_validated1.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-octets-validated"):
                                            self.in_octets_validated = value
                                            self.in_octets_validated.value_namespace = name_space
                                            self.in_octets_validated.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-delayed"):
                                            self.in_pkts_delayed = value
                                            self.in_pkts_delayed.value_namespace = name_space
                                            self.in_pkts_delayed.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-invalid"):
                                            self.in_pkts_invalid = value
                                            self.in_pkts_invalid.value_namespace = name_space
                                            self.in_pkts_invalid.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-late"):
                                            self.in_pkts_late = value
                                            self.in_pkts_late.value_namespace = name_space
                                            self.in_pkts_late.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-not-using-sa"):
                                            self.in_pkts_not_using_sa = value
                                            self.in_pkts_not_using_sa.value_namespace = name_space
                                            self.in_pkts_not_using_sa.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-not-valid"):
                                            self.in_pkts_not_valid = value
                                            self.in_pkts_not_valid.value_namespace = name_space
                                            self.in_pkts_not_valid.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-ok"):
                                            self.in_pkts_ok = value
                                            self.in_pkts_ok.value_namespace = name_space
                                            self.in_pkts_ok.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-unchecked"):
                                            self.in_pkts_unchecked = value
                                            self.in_pkts_unchecked.value_namespace = name_space
                                            self.in_pkts_unchecked.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-unused-sa"):
                                            self.in_pkts_unused_sa = value
                                            self.in_pkts_unused_sa.value_namespace = name_space
                                            self.in_pkts_unused_sa.value_namespace_prefix = name_space_prefix


                                class TxScMacsecStats(Entity):
                                    """
                                    Tx SC Macsec Stats
                                    
                                    .. attribute:: out_pkts_sa_not_in_use
                                    
                                    	Packets received with SA not in use
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.TxScMacsecStats, self).__init__()

                                        self.yang_name = "tx-sc-macsec-stats"
                                        self.yang_parent_name = "es200-stats"

                                        self.out_pkts_sa_not_in_use = YLeaf(YType.uint64, "out-pkts-sa-not-in-use")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("out_pkts_sa_not_in_use") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.TxScMacsecStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.TxScMacsecStats, self).__setattr__(name, value)

                                    def has_data(self):
                                        return self.out_pkts_sa_not_in_use.is_set

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.out_pkts_sa_not_in_use.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "tx-sc-macsec-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.out_pkts_sa_not_in_use.is_set or self.out_pkts_sa_not_in_use.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_pkts_sa_not_in_use.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "out-pkts-sa-not-in-use"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "out-pkts-sa-not-in-use"):
                                            self.out_pkts_sa_not_in_use = value
                                            self.out_pkts_sa_not_in_use.value_namespace = name_space
                                            self.out_pkts_sa_not_in_use.value_namespace_prefix = name_space_prefix


                                class RxScMacsecStats(Entity):
                                    """
                                    Rx SC Macsec Stats
                                    
                                    .. attribute:: in_pkts_sa_not_in_use
                                    
                                    	Packets received with SA not in use
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.RxScMacsecStats, self).__init__()

                                        self.yang_name = "rx-sc-macsec-stats"
                                        self.yang_parent_name = "es200-stats"

                                        self.in_pkts_sa_not_in_use = YLeaf(YType.uint64, "in-pkts-sa-not-in-use")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("in_pkts_sa_not_in_use") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.RxScMacsecStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.RxScMacsecStats, self).__setattr__(name, value)

                                    def has_data(self):
                                        return self.in_pkts_sa_not_in_use.is_set

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.in_pkts_sa_not_in_use.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "rx-sc-macsec-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.in_pkts_sa_not_in_use.is_set or self.in_pkts_sa_not_in_use.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_sa_not_in_use.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "in-pkts-sa-not-in-use"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "in-pkts-sa-not-in-use"):
                                            self.in_pkts_sa_not_in_use = value
                                            self.in_pkts_sa_not_in_use.value_namespace = name_space
                                            self.in_pkts_sa_not_in_use.value_namespace_prefix = name_space_prefix


                                class TxInterfaceMacsecStats(Entity):
                                    """
                                    Tx interface Macsec Stats
                                    
                                    .. attribute:: out_bcast_pkts_ctrl
                                    
                                    	Broadcast pkts tx on controlled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_bcast_pkts_unctrl
                                    
                                    	Broadcast pkts tx on uncontrolled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_drop_pkts_class
                                    
                                    	Packets dropped due to overflow in classification pipeline
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_drop_pkts_data
                                    
                                    	Packets dropped due to overflow in  processing pipeline
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_mcast_pkts_ctrl
                                    
                                    	Multicast pkts tx on controlled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_mcast_pkts_unctrl
                                    
                                    	Multicast pkts tx on uncontrolled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_octets_common
                                    
                                    	Octets tx on common port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_octets_ctrl
                                    
                                    	Octets tx on controlled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_octets_unctrl
                                    
                                    	Octets tx on uncontrolled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_pkt_ctrl
                                    
                                    	egress packet that is classified as control packet
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_pkts_untagged
                                    
                                    	egress packet to go out untagged when protectFrames not set
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_rx_drop_pkts_ctrl
                                    
                                    	Data pkts dropped due to overrun
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_rx_drop_pkts_unctrl
                                    
                                    	Control pkts dropped due to overrun
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_rx_err_pkts_ctrl
                                    
                                    	Data pkts error\-terminated due to overrun
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_rx_err_pkts_unctrl
                                    
                                    	Control pkts error\-terminated due to overrun
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_ucast_pkts_ctrl
                                    
                                    	Unicast pkts tx on controlled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_ucast_pkts_unctrl
                                    
                                    	Unicast pkts tx on uncontrolled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: transform_error_pkts
                                    
                                    	counter to count internal errors in the MACSec core
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.TxInterfaceMacsecStats, self).__init__()

                                        self.yang_name = "tx-interface-macsec-stats"
                                        self.yang_parent_name = "es200-stats"

                                        self.out_bcast_pkts_ctrl = YLeaf(YType.uint64, "out-bcast-pkts-ctrl")

                                        self.out_bcast_pkts_unctrl = YLeaf(YType.uint64, "out-bcast-pkts-unctrl")

                                        self.out_drop_pkts_class = YLeaf(YType.uint64, "out-drop-pkts-class")

                                        self.out_drop_pkts_data = YLeaf(YType.uint64, "out-drop-pkts-data")

                                        self.out_mcast_pkts_ctrl = YLeaf(YType.uint64, "out-mcast-pkts-ctrl")

                                        self.out_mcast_pkts_unctrl = YLeaf(YType.uint64, "out-mcast-pkts-unctrl")

                                        self.out_octets_common = YLeaf(YType.uint64, "out-octets-common")

                                        self.out_octets_ctrl = YLeaf(YType.uint64, "out-octets-ctrl")

                                        self.out_octets_unctrl = YLeaf(YType.uint64, "out-octets-unctrl")

                                        self.out_pkt_ctrl = YLeaf(YType.uint64, "out-pkt-ctrl")

                                        self.out_pkts_untagged = YLeaf(YType.uint64, "out-pkts-untagged")

                                        self.out_rx_drop_pkts_ctrl = YLeaf(YType.uint64, "out-rx-drop-pkts-ctrl")

                                        self.out_rx_drop_pkts_unctrl = YLeaf(YType.uint64, "out-rx-drop-pkts-unctrl")

                                        self.out_rx_err_pkts_ctrl = YLeaf(YType.uint64, "out-rx-err-pkts-ctrl")

                                        self.out_rx_err_pkts_unctrl = YLeaf(YType.uint64, "out-rx-err-pkts-unctrl")

                                        self.out_ucast_pkts_ctrl = YLeaf(YType.uint64, "out-ucast-pkts-ctrl")

                                        self.out_ucast_pkts_unctrl = YLeaf(YType.uint64, "out-ucast-pkts-unctrl")

                                        self.transform_error_pkts = YLeaf(YType.uint64, "transform-error-pkts")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("out_bcast_pkts_ctrl",
                                                        "out_bcast_pkts_unctrl",
                                                        "out_drop_pkts_class",
                                                        "out_drop_pkts_data",
                                                        "out_mcast_pkts_ctrl",
                                                        "out_mcast_pkts_unctrl",
                                                        "out_octets_common",
                                                        "out_octets_ctrl",
                                                        "out_octets_unctrl",
                                                        "out_pkt_ctrl",
                                                        "out_pkts_untagged",
                                                        "out_rx_drop_pkts_ctrl",
                                                        "out_rx_drop_pkts_unctrl",
                                                        "out_rx_err_pkts_ctrl",
                                                        "out_rx_err_pkts_unctrl",
                                                        "out_ucast_pkts_ctrl",
                                                        "out_ucast_pkts_unctrl",
                                                        "transform_error_pkts") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.TxInterfaceMacsecStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.TxInterfaceMacsecStats, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.out_bcast_pkts_ctrl.is_set or
                                            self.out_bcast_pkts_unctrl.is_set or
                                            self.out_drop_pkts_class.is_set or
                                            self.out_drop_pkts_data.is_set or
                                            self.out_mcast_pkts_ctrl.is_set or
                                            self.out_mcast_pkts_unctrl.is_set or
                                            self.out_octets_common.is_set or
                                            self.out_octets_ctrl.is_set or
                                            self.out_octets_unctrl.is_set or
                                            self.out_pkt_ctrl.is_set or
                                            self.out_pkts_untagged.is_set or
                                            self.out_rx_drop_pkts_ctrl.is_set or
                                            self.out_rx_drop_pkts_unctrl.is_set or
                                            self.out_rx_err_pkts_ctrl.is_set or
                                            self.out_rx_err_pkts_unctrl.is_set or
                                            self.out_ucast_pkts_ctrl.is_set or
                                            self.out_ucast_pkts_unctrl.is_set or
                                            self.transform_error_pkts.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.out_bcast_pkts_ctrl.yfilter != YFilter.not_set or
                                            self.out_bcast_pkts_unctrl.yfilter != YFilter.not_set or
                                            self.out_drop_pkts_class.yfilter != YFilter.not_set or
                                            self.out_drop_pkts_data.yfilter != YFilter.not_set or
                                            self.out_mcast_pkts_ctrl.yfilter != YFilter.not_set or
                                            self.out_mcast_pkts_unctrl.yfilter != YFilter.not_set or
                                            self.out_octets_common.yfilter != YFilter.not_set or
                                            self.out_octets_ctrl.yfilter != YFilter.not_set or
                                            self.out_octets_unctrl.yfilter != YFilter.not_set or
                                            self.out_pkt_ctrl.yfilter != YFilter.not_set or
                                            self.out_pkts_untagged.yfilter != YFilter.not_set or
                                            self.out_rx_drop_pkts_ctrl.yfilter != YFilter.not_set or
                                            self.out_rx_drop_pkts_unctrl.yfilter != YFilter.not_set or
                                            self.out_rx_err_pkts_ctrl.yfilter != YFilter.not_set or
                                            self.out_rx_err_pkts_unctrl.yfilter != YFilter.not_set or
                                            self.out_ucast_pkts_ctrl.yfilter != YFilter.not_set or
                                            self.out_ucast_pkts_unctrl.yfilter != YFilter.not_set or
                                            self.transform_error_pkts.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "tx-interface-macsec-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.out_bcast_pkts_ctrl.is_set or self.out_bcast_pkts_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_bcast_pkts_ctrl.get_name_leafdata())
                                        if (self.out_bcast_pkts_unctrl.is_set or self.out_bcast_pkts_unctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_bcast_pkts_unctrl.get_name_leafdata())
                                        if (self.out_drop_pkts_class.is_set or self.out_drop_pkts_class.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_drop_pkts_class.get_name_leafdata())
                                        if (self.out_drop_pkts_data.is_set or self.out_drop_pkts_data.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_drop_pkts_data.get_name_leafdata())
                                        if (self.out_mcast_pkts_ctrl.is_set or self.out_mcast_pkts_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_mcast_pkts_ctrl.get_name_leafdata())
                                        if (self.out_mcast_pkts_unctrl.is_set or self.out_mcast_pkts_unctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_mcast_pkts_unctrl.get_name_leafdata())
                                        if (self.out_octets_common.is_set or self.out_octets_common.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_octets_common.get_name_leafdata())
                                        if (self.out_octets_ctrl.is_set or self.out_octets_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_octets_ctrl.get_name_leafdata())
                                        if (self.out_octets_unctrl.is_set or self.out_octets_unctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_octets_unctrl.get_name_leafdata())
                                        if (self.out_pkt_ctrl.is_set or self.out_pkt_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_pkt_ctrl.get_name_leafdata())
                                        if (self.out_pkts_untagged.is_set or self.out_pkts_untagged.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_pkts_untagged.get_name_leafdata())
                                        if (self.out_rx_drop_pkts_ctrl.is_set or self.out_rx_drop_pkts_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_rx_drop_pkts_ctrl.get_name_leafdata())
                                        if (self.out_rx_drop_pkts_unctrl.is_set or self.out_rx_drop_pkts_unctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_rx_drop_pkts_unctrl.get_name_leafdata())
                                        if (self.out_rx_err_pkts_ctrl.is_set or self.out_rx_err_pkts_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_rx_err_pkts_ctrl.get_name_leafdata())
                                        if (self.out_rx_err_pkts_unctrl.is_set or self.out_rx_err_pkts_unctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_rx_err_pkts_unctrl.get_name_leafdata())
                                        if (self.out_ucast_pkts_ctrl.is_set or self.out_ucast_pkts_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_ucast_pkts_ctrl.get_name_leafdata())
                                        if (self.out_ucast_pkts_unctrl.is_set or self.out_ucast_pkts_unctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_ucast_pkts_unctrl.get_name_leafdata())
                                        if (self.transform_error_pkts.is_set or self.transform_error_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.transform_error_pkts.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "out-bcast-pkts-ctrl" or name == "out-bcast-pkts-unctrl" or name == "out-drop-pkts-class" or name == "out-drop-pkts-data" or name == "out-mcast-pkts-ctrl" or name == "out-mcast-pkts-unctrl" or name == "out-octets-common" or name == "out-octets-ctrl" or name == "out-octets-unctrl" or name == "out-pkt-ctrl" or name == "out-pkts-untagged" or name == "out-rx-drop-pkts-ctrl" or name == "out-rx-drop-pkts-unctrl" or name == "out-rx-err-pkts-ctrl" or name == "out-rx-err-pkts-unctrl" or name == "out-ucast-pkts-ctrl" or name == "out-ucast-pkts-unctrl" or name == "transform-error-pkts"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "out-bcast-pkts-ctrl"):
                                            self.out_bcast_pkts_ctrl = value
                                            self.out_bcast_pkts_ctrl.value_namespace = name_space
                                            self.out_bcast_pkts_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-bcast-pkts-unctrl"):
                                            self.out_bcast_pkts_unctrl = value
                                            self.out_bcast_pkts_unctrl.value_namespace = name_space
                                            self.out_bcast_pkts_unctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-drop-pkts-class"):
                                            self.out_drop_pkts_class = value
                                            self.out_drop_pkts_class.value_namespace = name_space
                                            self.out_drop_pkts_class.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-drop-pkts-data"):
                                            self.out_drop_pkts_data = value
                                            self.out_drop_pkts_data.value_namespace = name_space
                                            self.out_drop_pkts_data.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-mcast-pkts-ctrl"):
                                            self.out_mcast_pkts_ctrl = value
                                            self.out_mcast_pkts_ctrl.value_namespace = name_space
                                            self.out_mcast_pkts_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-mcast-pkts-unctrl"):
                                            self.out_mcast_pkts_unctrl = value
                                            self.out_mcast_pkts_unctrl.value_namespace = name_space
                                            self.out_mcast_pkts_unctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-octets-common"):
                                            self.out_octets_common = value
                                            self.out_octets_common.value_namespace = name_space
                                            self.out_octets_common.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-octets-ctrl"):
                                            self.out_octets_ctrl = value
                                            self.out_octets_ctrl.value_namespace = name_space
                                            self.out_octets_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-octets-unctrl"):
                                            self.out_octets_unctrl = value
                                            self.out_octets_unctrl.value_namespace = name_space
                                            self.out_octets_unctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-pkt-ctrl"):
                                            self.out_pkt_ctrl = value
                                            self.out_pkt_ctrl.value_namespace = name_space
                                            self.out_pkt_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-pkts-untagged"):
                                            self.out_pkts_untagged = value
                                            self.out_pkts_untagged.value_namespace = name_space
                                            self.out_pkts_untagged.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-rx-drop-pkts-ctrl"):
                                            self.out_rx_drop_pkts_ctrl = value
                                            self.out_rx_drop_pkts_ctrl.value_namespace = name_space
                                            self.out_rx_drop_pkts_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-rx-drop-pkts-unctrl"):
                                            self.out_rx_drop_pkts_unctrl = value
                                            self.out_rx_drop_pkts_unctrl.value_namespace = name_space
                                            self.out_rx_drop_pkts_unctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-rx-err-pkts-ctrl"):
                                            self.out_rx_err_pkts_ctrl = value
                                            self.out_rx_err_pkts_ctrl.value_namespace = name_space
                                            self.out_rx_err_pkts_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-rx-err-pkts-unctrl"):
                                            self.out_rx_err_pkts_unctrl = value
                                            self.out_rx_err_pkts_unctrl.value_namespace = name_space
                                            self.out_rx_err_pkts_unctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-ucast-pkts-ctrl"):
                                            self.out_ucast_pkts_ctrl = value
                                            self.out_ucast_pkts_ctrl.value_namespace = name_space
                                            self.out_ucast_pkts_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-ucast-pkts-unctrl"):
                                            self.out_ucast_pkts_unctrl = value
                                            self.out_ucast_pkts_unctrl.value_namespace = name_space
                                            self.out_ucast_pkts_unctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "transform-error-pkts"):
                                            self.transform_error_pkts = value
                                            self.transform_error_pkts.value_namespace = name_space
                                            self.transform_error_pkts.value_namespace_prefix = name_space_prefix


                                class RxInterfaceMacsecStats(Entity):
                                    """
                                    Rx interface Macsec Stats
                                    
                                    .. attribute:: in_bcast_pkts_ctrl
                                    
                                    	Broadcast pkts rx on controlled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_bcast_pkts_unctrl
                                    
                                    	Broadcast pkts rx on uncontrolled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_drop_pkts_class
                                    
                                    	Packets dropped due to overflow in classification pipeline
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_drop_pkts_data
                                    
                                    	Packets dropped due to overflow in processing pipeline
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_mcast_pkts_ctrl
                                    
                                    	Multicast pkts rx on controlled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_mcast_pkts_unctrl
                                    
                                    	Multicast pkts rx on uncontrolled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_octets_ctrl
                                    
                                    	Octets rx on controlled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_octets_unctrl
                                    
                                    	Octets rx on uncontrolled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkt_bad_tag
                                    
                                    	ingress frames received with an invalid MACSec tag or ICV                                       added with next one gives InPktsSCIMiss
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkt_ctrl
                                    
                                    	ingress packet that is classified as control packet
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkt_no_sci
                                    
                                    	correctly tagged ingress frames for which no valid SC found & \\;                              validateFrames is strict
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkt_no_tag
                                    
                                    	ingress packet untagged & validateFrames is strict
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_tagged_ctrl
                                    
                                    	ingress packets that are control or KaY packets
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_unknown_sci
                                    
                                    	correctly tagged ingress frames for which no valid SC found &                                 validateFrames is !strict
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_untagged
                                    
                                    	ingress packet untagged & validateFrames is  !strict
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_rx_drop_pkts_ctrl
                                    
                                    	Data pkts dropped due to overrun
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_rx_drop_pkts_unctrl
                                    
                                    	Control pkts dropped due to overrun
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_rx_error_pkts_ctrl
                                    
                                    	Data pkts error\-terminated due to overrun
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_rx_error_pkts_unctrl
                                    
                                    	Control pkts error\-terminated due to overrun
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_ucast_pkts_ctrl
                                    
                                    	Unicast pkts rx on controlled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_ucast_pkts_unctrl
                                    
                                    	Unicast pkts rx on uncontrolled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: transform_error_pkts
                                    
                                    	counter to count internal errors in the MACSec core
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.RxInterfaceMacsecStats, self).__init__()

                                        self.yang_name = "rx-interface-macsec-stats"
                                        self.yang_parent_name = "es200-stats"

                                        self.in_bcast_pkts_ctrl = YLeaf(YType.uint64, "in-bcast-pkts-ctrl")

                                        self.in_bcast_pkts_unctrl = YLeaf(YType.uint64, "in-bcast-pkts-unctrl")

                                        self.in_drop_pkts_class = YLeaf(YType.uint64, "in-drop-pkts-class")

                                        self.in_drop_pkts_data = YLeaf(YType.uint64, "in-drop-pkts-data")

                                        self.in_mcast_pkts_ctrl = YLeaf(YType.uint64, "in-mcast-pkts-ctrl")

                                        self.in_mcast_pkts_unctrl = YLeaf(YType.uint64, "in-mcast-pkts-unctrl")

                                        self.in_octets_ctrl = YLeaf(YType.uint64, "in-octets-ctrl")

                                        self.in_octets_unctrl = YLeaf(YType.uint64, "in-octets-unctrl")

                                        self.in_pkt_bad_tag = YLeaf(YType.uint64, "in-pkt-bad-tag")

                                        self.in_pkt_ctrl = YLeaf(YType.uint64, "in-pkt-ctrl")

                                        self.in_pkt_no_sci = YLeaf(YType.uint64, "in-pkt-no-sci")

                                        self.in_pkt_no_tag = YLeaf(YType.uint64, "in-pkt-no-tag")

                                        self.in_pkts_tagged_ctrl = YLeaf(YType.uint64, "in-pkts-tagged-ctrl")

                                        self.in_pkts_unknown_sci = YLeaf(YType.uint64, "in-pkts-unknown-sci")

                                        self.in_pkts_untagged = YLeaf(YType.uint64, "in-pkts-untagged")

                                        self.in_rx_drop_pkts_ctrl = YLeaf(YType.uint64, "in-rx-drop-pkts-ctrl")

                                        self.in_rx_drop_pkts_unctrl = YLeaf(YType.uint64, "in-rx-drop-pkts-unctrl")

                                        self.in_rx_error_pkts_ctrl = YLeaf(YType.uint64, "in-rx-error-pkts-ctrl")

                                        self.in_rx_error_pkts_unctrl = YLeaf(YType.uint64, "in-rx-error-pkts-unctrl")

                                        self.in_ucast_pkts_ctrl = YLeaf(YType.uint64, "in-ucast-pkts-ctrl")

                                        self.in_ucast_pkts_unctrl = YLeaf(YType.uint64, "in-ucast-pkts-unctrl")

                                        self.transform_error_pkts = YLeaf(YType.uint64, "transform-error-pkts")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("in_bcast_pkts_ctrl",
                                                        "in_bcast_pkts_unctrl",
                                                        "in_drop_pkts_class",
                                                        "in_drop_pkts_data",
                                                        "in_mcast_pkts_ctrl",
                                                        "in_mcast_pkts_unctrl",
                                                        "in_octets_ctrl",
                                                        "in_octets_unctrl",
                                                        "in_pkt_bad_tag",
                                                        "in_pkt_ctrl",
                                                        "in_pkt_no_sci",
                                                        "in_pkt_no_tag",
                                                        "in_pkts_tagged_ctrl",
                                                        "in_pkts_unknown_sci",
                                                        "in_pkts_untagged",
                                                        "in_rx_drop_pkts_ctrl",
                                                        "in_rx_drop_pkts_unctrl",
                                                        "in_rx_error_pkts_ctrl",
                                                        "in_rx_error_pkts_unctrl",
                                                        "in_ucast_pkts_ctrl",
                                                        "in_ucast_pkts_unctrl",
                                                        "transform_error_pkts") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.RxInterfaceMacsecStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.RxInterfaceMacsecStats, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.in_bcast_pkts_ctrl.is_set or
                                            self.in_bcast_pkts_unctrl.is_set or
                                            self.in_drop_pkts_class.is_set or
                                            self.in_drop_pkts_data.is_set or
                                            self.in_mcast_pkts_ctrl.is_set or
                                            self.in_mcast_pkts_unctrl.is_set or
                                            self.in_octets_ctrl.is_set or
                                            self.in_octets_unctrl.is_set or
                                            self.in_pkt_bad_tag.is_set or
                                            self.in_pkt_ctrl.is_set or
                                            self.in_pkt_no_sci.is_set or
                                            self.in_pkt_no_tag.is_set or
                                            self.in_pkts_tagged_ctrl.is_set or
                                            self.in_pkts_unknown_sci.is_set or
                                            self.in_pkts_untagged.is_set or
                                            self.in_rx_drop_pkts_ctrl.is_set or
                                            self.in_rx_drop_pkts_unctrl.is_set or
                                            self.in_rx_error_pkts_ctrl.is_set or
                                            self.in_rx_error_pkts_unctrl.is_set or
                                            self.in_ucast_pkts_ctrl.is_set or
                                            self.in_ucast_pkts_unctrl.is_set or
                                            self.transform_error_pkts.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.in_bcast_pkts_ctrl.yfilter != YFilter.not_set or
                                            self.in_bcast_pkts_unctrl.yfilter != YFilter.not_set or
                                            self.in_drop_pkts_class.yfilter != YFilter.not_set or
                                            self.in_drop_pkts_data.yfilter != YFilter.not_set or
                                            self.in_mcast_pkts_ctrl.yfilter != YFilter.not_set or
                                            self.in_mcast_pkts_unctrl.yfilter != YFilter.not_set or
                                            self.in_octets_ctrl.yfilter != YFilter.not_set or
                                            self.in_octets_unctrl.yfilter != YFilter.not_set or
                                            self.in_pkt_bad_tag.yfilter != YFilter.not_set or
                                            self.in_pkt_ctrl.yfilter != YFilter.not_set or
                                            self.in_pkt_no_sci.yfilter != YFilter.not_set or
                                            self.in_pkt_no_tag.yfilter != YFilter.not_set or
                                            self.in_pkts_tagged_ctrl.yfilter != YFilter.not_set or
                                            self.in_pkts_unknown_sci.yfilter != YFilter.not_set or
                                            self.in_pkts_untagged.yfilter != YFilter.not_set or
                                            self.in_rx_drop_pkts_ctrl.yfilter != YFilter.not_set or
                                            self.in_rx_drop_pkts_unctrl.yfilter != YFilter.not_set or
                                            self.in_rx_error_pkts_ctrl.yfilter != YFilter.not_set or
                                            self.in_rx_error_pkts_unctrl.yfilter != YFilter.not_set or
                                            self.in_ucast_pkts_ctrl.yfilter != YFilter.not_set or
                                            self.in_ucast_pkts_unctrl.yfilter != YFilter.not_set or
                                            self.transform_error_pkts.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "rx-interface-macsec-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.in_bcast_pkts_ctrl.is_set or self.in_bcast_pkts_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_bcast_pkts_ctrl.get_name_leafdata())
                                        if (self.in_bcast_pkts_unctrl.is_set or self.in_bcast_pkts_unctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_bcast_pkts_unctrl.get_name_leafdata())
                                        if (self.in_drop_pkts_class.is_set or self.in_drop_pkts_class.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_drop_pkts_class.get_name_leafdata())
                                        if (self.in_drop_pkts_data.is_set or self.in_drop_pkts_data.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_drop_pkts_data.get_name_leafdata())
                                        if (self.in_mcast_pkts_ctrl.is_set or self.in_mcast_pkts_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_mcast_pkts_ctrl.get_name_leafdata())
                                        if (self.in_mcast_pkts_unctrl.is_set or self.in_mcast_pkts_unctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_mcast_pkts_unctrl.get_name_leafdata())
                                        if (self.in_octets_ctrl.is_set or self.in_octets_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_octets_ctrl.get_name_leafdata())
                                        if (self.in_octets_unctrl.is_set or self.in_octets_unctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_octets_unctrl.get_name_leafdata())
                                        if (self.in_pkt_bad_tag.is_set or self.in_pkt_bad_tag.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkt_bad_tag.get_name_leafdata())
                                        if (self.in_pkt_ctrl.is_set or self.in_pkt_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkt_ctrl.get_name_leafdata())
                                        if (self.in_pkt_no_sci.is_set or self.in_pkt_no_sci.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkt_no_sci.get_name_leafdata())
                                        if (self.in_pkt_no_tag.is_set or self.in_pkt_no_tag.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkt_no_tag.get_name_leafdata())
                                        if (self.in_pkts_tagged_ctrl.is_set or self.in_pkts_tagged_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_tagged_ctrl.get_name_leafdata())
                                        if (self.in_pkts_unknown_sci.is_set or self.in_pkts_unknown_sci.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_unknown_sci.get_name_leafdata())
                                        if (self.in_pkts_untagged.is_set or self.in_pkts_untagged.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_untagged.get_name_leafdata())
                                        if (self.in_rx_drop_pkts_ctrl.is_set or self.in_rx_drop_pkts_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_rx_drop_pkts_ctrl.get_name_leafdata())
                                        if (self.in_rx_drop_pkts_unctrl.is_set or self.in_rx_drop_pkts_unctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_rx_drop_pkts_unctrl.get_name_leafdata())
                                        if (self.in_rx_error_pkts_ctrl.is_set or self.in_rx_error_pkts_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_rx_error_pkts_ctrl.get_name_leafdata())
                                        if (self.in_rx_error_pkts_unctrl.is_set or self.in_rx_error_pkts_unctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_rx_error_pkts_unctrl.get_name_leafdata())
                                        if (self.in_ucast_pkts_ctrl.is_set or self.in_ucast_pkts_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_ucast_pkts_ctrl.get_name_leafdata())
                                        if (self.in_ucast_pkts_unctrl.is_set or self.in_ucast_pkts_unctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_ucast_pkts_unctrl.get_name_leafdata())
                                        if (self.transform_error_pkts.is_set or self.transform_error_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.transform_error_pkts.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "in-bcast-pkts-ctrl" or name == "in-bcast-pkts-unctrl" or name == "in-drop-pkts-class" or name == "in-drop-pkts-data" or name == "in-mcast-pkts-ctrl" or name == "in-mcast-pkts-unctrl" or name == "in-octets-ctrl" or name == "in-octets-unctrl" or name == "in-pkt-bad-tag" or name == "in-pkt-ctrl" or name == "in-pkt-no-sci" or name == "in-pkt-no-tag" or name == "in-pkts-tagged-ctrl" or name == "in-pkts-unknown-sci" or name == "in-pkts-untagged" or name == "in-rx-drop-pkts-ctrl" or name == "in-rx-drop-pkts-unctrl" or name == "in-rx-error-pkts-ctrl" or name == "in-rx-error-pkts-unctrl" or name == "in-ucast-pkts-ctrl" or name == "in-ucast-pkts-unctrl" or name == "transform-error-pkts"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "in-bcast-pkts-ctrl"):
                                            self.in_bcast_pkts_ctrl = value
                                            self.in_bcast_pkts_ctrl.value_namespace = name_space
                                            self.in_bcast_pkts_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-bcast-pkts-unctrl"):
                                            self.in_bcast_pkts_unctrl = value
                                            self.in_bcast_pkts_unctrl.value_namespace = name_space
                                            self.in_bcast_pkts_unctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-drop-pkts-class"):
                                            self.in_drop_pkts_class = value
                                            self.in_drop_pkts_class.value_namespace = name_space
                                            self.in_drop_pkts_class.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-drop-pkts-data"):
                                            self.in_drop_pkts_data = value
                                            self.in_drop_pkts_data.value_namespace = name_space
                                            self.in_drop_pkts_data.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-mcast-pkts-ctrl"):
                                            self.in_mcast_pkts_ctrl = value
                                            self.in_mcast_pkts_ctrl.value_namespace = name_space
                                            self.in_mcast_pkts_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-mcast-pkts-unctrl"):
                                            self.in_mcast_pkts_unctrl = value
                                            self.in_mcast_pkts_unctrl.value_namespace = name_space
                                            self.in_mcast_pkts_unctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-octets-ctrl"):
                                            self.in_octets_ctrl = value
                                            self.in_octets_ctrl.value_namespace = name_space
                                            self.in_octets_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-octets-unctrl"):
                                            self.in_octets_unctrl = value
                                            self.in_octets_unctrl.value_namespace = name_space
                                            self.in_octets_unctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkt-bad-tag"):
                                            self.in_pkt_bad_tag = value
                                            self.in_pkt_bad_tag.value_namespace = name_space
                                            self.in_pkt_bad_tag.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkt-ctrl"):
                                            self.in_pkt_ctrl = value
                                            self.in_pkt_ctrl.value_namespace = name_space
                                            self.in_pkt_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkt-no-sci"):
                                            self.in_pkt_no_sci = value
                                            self.in_pkt_no_sci.value_namespace = name_space
                                            self.in_pkt_no_sci.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkt-no-tag"):
                                            self.in_pkt_no_tag = value
                                            self.in_pkt_no_tag.value_namespace = name_space
                                            self.in_pkt_no_tag.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-tagged-ctrl"):
                                            self.in_pkts_tagged_ctrl = value
                                            self.in_pkts_tagged_ctrl.value_namespace = name_space
                                            self.in_pkts_tagged_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-unknown-sci"):
                                            self.in_pkts_unknown_sci = value
                                            self.in_pkts_unknown_sci.value_namespace = name_space
                                            self.in_pkts_unknown_sci.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-untagged"):
                                            self.in_pkts_untagged = value
                                            self.in_pkts_untagged.value_namespace = name_space
                                            self.in_pkts_untagged.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-rx-drop-pkts-ctrl"):
                                            self.in_rx_drop_pkts_ctrl = value
                                            self.in_rx_drop_pkts_ctrl.value_namespace = name_space
                                            self.in_rx_drop_pkts_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-rx-drop-pkts-unctrl"):
                                            self.in_rx_drop_pkts_unctrl = value
                                            self.in_rx_drop_pkts_unctrl.value_namespace = name_space
                                            self.in_rx_drop_pkts_unctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-rx-error-pkts-ctrl"):
                                            self.in_rx_error_pkts_ctrl = value
                                            self.in_rx_error_pkts_ctrl.value_namespace = name_space
                                            self.in_rx_error_pkts_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-rx-error-pkts-unctrl"):
                                            self.in_rx_error_pkts_unctrl = value
                                            self.in_rx_error_pkts_unctrl.value_namespace = name_space
                                            self.in_rx_error_pkts_unctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-ucast-pkts-ctrl"):
                                            self.in_ucast_pkts_ctrl = value
                                            self.in_ucast_pkts_ctrl.value_namespace = name_space
                                            self.in_ucast_pkts_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-ucast-pkts-unctrl"):
                                            self.in_ucast_pkts_unctrl = value
                                            self.in_ucast_pkts_unctrl.value_namespace = name_space
                                            self.in_ucast_pkts_unctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "transform-error-pkts"):
                                            self.transform_error_pkts = value
                                            self.transform_error_pkts.value_namespace = name_space
                                            self.transform_error_pkts.value_namespace_prefix = name_space_prefix


                                class TxPortStats(Entity):
                                    """
                                    Port level TX Stats
                                    
                                    .. attribute:: flow_miss
                                    
                                    	Pkts matching none of flow entries
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: multi_flow_match
                                    
                                    	Pkts matching multiple flow entries
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: parser_dropped
                                    
                                    	Pkts dropped by header parser as invalid
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: pkts_ctrl
                                    
                                    	Control pkts forwarded
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: pkts_data
                                    
                                    	Data pkts forwarded
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: pkts_dropped
                                    
                                    	Pkts dropped by classifier
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: pkts_err_in
                                    
                                    	Pkts received with an error indication
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.TxPortStats, self).__init__()

                                        self.yang_name = "tx-port-stats"
                                        self.yang_parent_name = "es200-stats"

                                        self.flow_miss = YLeaf(YType.uint64, "flow-miss")

                                        self.multi_flow_match = YLeaf(YType.uint64, "multi-flow-match")

                                        self.parser_dropped = YLeaf(YType.uint64, "parser-dropped")

                                        self.pkts_ctrl = YLeaf(YType.uint64, "pkts-ctrl")

                                        self.pkts_data = YLeaf(YType.uint64, "pkts-data")

                                        self.pkts_dropped = YLeaf(YType.uint64, "pkts-dropped")

                                        self.pkts_err_in = YLeaf(YType.uint64, "pkts-err-in")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("flow_miss",
                                                        "multi_flow_match",
                                                        "parser_dropped",
                                                        "pkts_ctrl",
                                                        "pkts_data",
                                                        "pkts_dropped",
                                                        "pkts_err_in") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.TxPortStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.TxPortStats, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.flow_miss.is_set or
                                            self.multi_flow_match.is_set or
                                            self.parser_dropped.is_set or
                                            self.pkts_ctrl.is_set or
                                            self.pkts_data.is_set or
                                            self.pkts_dropped.is_set or
                                            self.pkts_err_in.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.flow_miss.yfilter != YFilter.not_set or
                                            self.multi_flow_match.yfilter != YFilter.not_set or
                                            self.parser_dropped.yfilter != YFilter.not_set or
                                            self.pkts_ctrl.yfilter != YFilter.not_set or
                                            self.pkts_data.yfilter != YFilter.not_set or
                                            self.pkts_dropped.yfilter != YFilter.not_set or
                                            self.pkts_err_in.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "tx-port-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.flow_miss.is_set or self.flow_miss.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.flow_miss.get_name_leafdata())
                                        if (self.multi_flow_match.is_set or self.multi_flow_match.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.multi_flow_match.get_name_leafdata())
                                        if (self.parser_dropped.is_set or self.parser_dropped.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.parser_dropped.get_name_leafdata())
                                        if (self.pkts_ctrl.is_set or self.pkts_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.pkts_ctrl.get_name_leafdata())
                                        if (self.pkts_data.is_set or self.pkts_data.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.pkts_data.get_name_leafdata())
                                        if (self.pkts_dropped.is_set or self.pkts_dropped.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.pkts_dropped.get_name_leafdata())
                                        if (self.pkts_err_in.is_set or self.pkts_err_in.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.pkts_err_in.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "flow-miss" or name == "multi-flow-match" or name == "parser-dropped" or name == "pkts-ctrl" or name == "pkts-data" or name == "pkts-dropped" or name == "pkts-err-in"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "flow-miss"):
                                            self.flow_miss = value
                                            self.flow_miss.value_namespace = name_space
                                            self.flow_miss.value_namespace_prefix = name_space_prefix
                                        if(value_path == "multi-flow-match"):
                                            self.multi_flow_match = value
                                            self.multi_flow_match.value_namespace = name_space
                                            self.multi_flow_match.value_namespace_prefix = name_space_prefix
                                        if(value_path == "parser-dropped"):
                                            self.parser_dropped = value
                                            self.parser_dropped.value_namespace = name_space
                                            self.parser_dropped.value_namespace_prefix = name_space_prefix
                                        if(value_path == "pkts-ctrl"):
                                            self.pkts_ctrl = value
                                            self.pkts_ctrl.value_namespace = name_space
                                            self.pkts_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "pkts-data"):
                                            self.pkts_data = value
                                            self.pkts_data.value_namespace = name_space
                                            self.pkts_data.value_namespace_prefix = name_space_prefix
                                        if(value_path == "pkts-dropped"):
                                            self.pkts_dropped = value
                                            self.pkts_dropped.value_namespace = name_space
                                            self.pkts_dropped.value_namespace_prefix = name_space_prefix
                                        if(value_path == "pkts-err-in"):
                                            self.pkts_err_in = value
                                            self.pkts_err_in.value_namespace = name_space
                                            self.pkts_err_in.value_namespace_prefix = name_space_prefix


                                class RxPortStats(Entity):
                                    """
                                    Port level RX Stats
                                    
                                    .. attribute:: flow_miss
                                    
                                    	Pkts matching none of flow entries
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: multi_flow_match
                                    
                                    	Pkts matching multiple flow entries
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: parser_dropped
                                    
                                    	Pkts dropped by header parser as invalid
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: pkts_ctrl
                                    
                                    	Control pkts forwarded
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: pkts_data
                                    
                                    	Data pkts forwarded
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: pkts_dropped
                                    
                                    	Pkts dropped by classifier
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: pkts_err_in
                                    
                                    	Pkts received with an error indication
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.RxPortStats, self).__init__()

                                        self.yang_name = "rx-port-stats"
                                        self.yang_parent_name = "es200-stats"

                                        self.flow_miss = YLeaf(YType.uint64, "flow-miss")

                                        self.multi_flow_match = YLeaf(YType.uint64, "multi-flow-match")

                                        self.parser_dropped = YLeaf(YType.uint64, "parser-dropped")

                                        self.pkts_ctrl = YLeaf(YType.uint64, "pkts-ctrl")

                                        self.pkts_data = YLeaf(YType.uint64, "pkts-data")

                                        self.pkts_dropped = YLeaf(YType.uint64, "pkts-dropped")

                                        self.pkts_err_in = YLeaf(YType.uint64, "pkts-err-in")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("flow_miss",
                                                        "multi_flow_match",
                                                        "parser_dropped",
                                                        "pkts_ctrl",
                                                        "pkts_data",
                                                        "pkts_dropped",
                                                        "pkts_err_in") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.RxPortStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.RxPortStats, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.flow_miss.is_set or
                                            self.multi_flow_match.is_set or
                                            self.parser_dropped.is_set or
                                            self.pkts_ctrl.is_set or
                                            self.pkts_data.is_set or
                                            self.pkts_dropped.is_set or
                                            self.pkts_err_in.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.flow_miss.yfilter != YFilter.not_set or
                                            self.multi_flow_match.yfilter != YFilter.not_set or
                                            self.parser_dropped.yfilter != YFilter.not_set or
                                            self.pkts_ctrl.yfilter != YFilter.not_set or
                                            self.pkts_data.yfilter != YFilter.not_set or
                                            self.pkts_dropped.yfilter != YFilter.not_set or
                                            self.pkts_err_in.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "rx-port-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.flow_miss.is_set or self.flow_miss.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.flow_miss.get_name_leafdata())
                                        if (self.multi_flow_match.is_set or self.multi_flow_match.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.multi_flow_match.get_name_leafdata())
                                        if (self.parser_dropped.is_set or self.parser_dropped.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.parser_dropped.get_name_leafdata())
                                        if (self.pkts_ctrl.is_set or self.pkts_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.pkts_ctrl.get_name_leafdata())
                                        if (self.pkts_data.is_set or self.pkts_data.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.pkts_data.get_name_leafdata())
                                        if (self.pkts_dropped.is_set or self.pkts_dropped.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.pkts_dropped.get_name_leafdata())
                                        if (self.pkts_err_in.is_set or self.pkts_err_in.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.pkts_err_in.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "flow-miss" or name == "multi-flow-match" or name == "parser-dropped" or name == "pkts-ctrl" or name == "pkts-data" or name == "pkts-dropped" or name == "pkts-err-in"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "flow-miss"):
                                            self.flow_miss = value
                                            self.flow_miss.value_namespace = name_space
                                            self.flow_miss.value_namespace_prefix = name_space_prefix
                                        if(value_path == "multi-flow-match"):
                                            self.multi_flow_match = value
                                            self.multi_flow_match.value_namespace = name_space
                                            self.multi_flow_match.value_namespace_prefix = name_space_prefix
                                        if(value_path == "parser-dropped"):
                                            self.parser_dropped = value
                                            self.parser_dropped.value_namespace = name_space
                                            self.parser_dropped.value_namespace_prefix = name_space_prefix
                                        if(value_path == "pkts-ctrl"):
                                            self.pkts_ctrl = value
                                            self.pkts_ctrl.value_namespace = name_space
                                            self.pkts_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "pkts-data"):
                                            self.pkts_data = value
                                            self.pkts_data.value_namespace = name_space
                                            self.pkts_data.value_namespace_prefix = name_space_prefix
                                        if(value_path == "pkts-dropped"):
                                            self.pkts_dropped = value
                                            self.pkts_dropped.value_namespace = name_space
                                            self.pkts_dropped.value_namespace_prefix = name_space_prefix
                                        if(value_path == "pkts-err-in"):
                                            self.pkts_err_in = value
                                            self.pkts_err_in.value_namespace = name_space
                                            self.pkts_err_in.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    return (
                                        (self.rx_interface_macsec_stats is not None and self.rx_interface_macsec_stats.has_data()) or
                                        (self.rx_port_stats is not None and self.rx_port_stats.has_data()) or
                                        (self.rx_sa_stats is not None and self.rx_sa_stats.has_data()) or
                                        (self.rx_sc_macsec_stats is not None and self.rx_sc_macsec_stats.has_data()) or
                                        (self.tx_interface_macsec_stats is not None and self.tx_interface_macsec_stats.has_data()) or
                                        (self.tx_port_stats is not None and self.tx_port_stats.has_data()) or
                                        (self.tx_sa_stats is not None and self.tx_sa_stats.has_data()) or
                                        (self.tx_sc_macsec_stats is not None and self.tx_sc_macsec_stats.has_data()))

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        (self.rx_interface_macsec_stats is not None and self.rx_interface_macsec_stats.has_operation()) or
                                        (self.rx_port_stats is not None and self.rx_port_stats.has_operation()) or
                                        (self.rx_sa_stats is not None and self.rx_sa_stats.has_operation()) or
                                        (self.rx_sc_macsec_stats is not None and self.rx_sc_macsec_stats.has_operation()) or
                                        (self.tx_interface_macsec_stats is not None and self.tx_interface_macsec_stats.has_operation()) or
                                        (self.tx_port_stats is not None and self.tx_port_stats.has_operation()) or
                                        (self.tx_sa_stats is not None and self.tx_sa_stats.has_operation()) or
                                        (self.tx_sc_macsec_stats is not None and self.tx_sc_macsec_stats.has_operation()))

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "es200-stats" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "rx-interface-macsec-stats"):
                                        if (self.rx_interface_macsec_stats is None):
                                            self.rx_interface_macsec_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.RxInterfaceMacsecStats()
                                            self.rx_interface_macsec_stats.parent = self
                                            self._children_name_map["rx_interface_macsec_stats"] = "rx-interface-macsec-stats"
                                        return self.rx_interface_macsec_stats

                                    if (child_yang_name == "rx-port-stats"):
                                        if (self.rx_port_stats is None):
                                            self.rx_port_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.RxPortStats()
                                            self.rx_port_stats.parent = self
                                            self._children_name_map["rx_port_stats"] = "rx-port-stats"
                                        return self.rx_port_stats

                                    if (child_yang_name == "rx-sa-stats"):
                                        if (self.rx_sa_stats is None):
                                            self.rx_sa_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.RxSaStats()
                                            self.rx_sa_stats.parent = self
                                            self._children_name_map["rx_sa_stats"] = "rx-sa-stats"
                                        return self.rx_sa_stats

                                    if (child_yang_name == "rx-sc-macsec-stats"):
                                        if (self.rx_sc_macsec_stats is None):
                                            self.rx_sc_macsec_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.RxScMacsecStats()
                                            self.rx_sc_macsec_stats.parent = self
                                            self._children_name_map["rx_sc_macsec_stats"] = "rx-sc-macsec-stats"
                                        return self.rx_sc_macsec_stats

                                    if (child_yang_name == "tx-interface-macsec-stats"):
                                        if (self.tx_interface_macsec_stats is None):
                                            self.tx_interface_macsec_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.TxInterfaceMacsecStats()
                                            self.tx_interface_macsec_stats.parent = self
                                            self._children_name_map["tx_interface_macsec_stats"] = "tx-interface-macsec-stats"
                                        return self.tx_interface_macsec_stats

                                    if (child_yang_name == "tx-port-stats"):
                                        if (self.tx_port_stats is None):
                                            self.tx_port_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.TxPortStats()
                                            self.tx_port_stats.parent = self
                                            self._children_name_map["tx_port_stats"] = "tx-port-stats"
                                        return self.tx_port_stats

                                    if (child_yang_name == "tx-sa-stats"):
                                        if (self.tx_sa_stats is None):
                                            self.tx_sa_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.TxSaStats()
                                            self.tx_sa_stats.parent = self
                                            self._children_name_map["tx_sa_stats"] = "tx-sa-stats"
                                        return self.tx_sa_stats

                                    if (child_yang_name == "tx-sc-macsec-stats"):
                                        if (self.tx_sc_macsec_stats is None):
                                            self.tx_sc_macsec_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats.TxScMacsecStats()
                                            self.tx_sc_macsec_stats.parent = self
                                            self._children_name_map["tx_sc_macsec_stats"] = "tx-sc-macsec-stats"
                                        return self.tx_sc_macsec_stats

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "rx-interface-macsec-stats" or name == "rx-port-stats" or name == "rx-sa-stats" or name == "rx-sc-macsec-stats" or name == "tx-interface-macsec-stats" or name == "tx-port-stats" or name == "tx-sa-stats" or name == "tx-sc-macsec-stats"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass

                            def has_data(self):
                                return (
                                    self.type.is_set or
                                    (self.es200_stats is not None and self.es200_stats.has_data()) or
                                    (self.msfpga_stats is not None and self.msfpga_stats.has_data()) or
                                    (self.xlfpga_stats is not None and self.xlfpga_stats.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.type.yfilter != YFilter.not_set or
                                    (self.es200_stats is not None and self.es200_stats.has_operation()) or
                                    (self.msfpga_stats is not None and self.msfpga_stats.has_operation()) or
                                    (self.xlfpga_stats is not None and self.xlfpga_stats.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "ext" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.type.is_set or self.type.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.type.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "es200-stats"):
                                    if (self.es200_stats is None):
                                        self.es200_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.Es200Stats()
                                        self.es200_stats.parent = self
                                        self._children_name_map["es200_stats"] = "es200-stats"
                                    return self.es200_stats

                                if (child_yang_name == "msfpga-stats"):
                                    if (self.msfpga_stats is None):
                                        self.msfpga_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.MsfpgaStats()
                                        self.msfpga_stats.parent = self
                                        self._children_name_map["msfpga_stats"] = "msfpga-stats"
                                    return self.msfpga_stats

                                if (child_yang_name == "xlfpga-stats"):
                                    if (self.xlfpga_stats is None):
                                        self.xlfpga_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext.XlfpgaStats()
                                        self.xlfpga_stats.parent = self
                                        self._children_name_map["xlfpga_stats"] = "xlfpga-stats"
                                    return self.xlfpga_stats

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "es200-stats" or name == "msfpga-stats" or name == "xlfpga-stats" or name == "type"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "type"):
                                    self.type = value
                                    self.type.value_namespace = name_space
                                    self.type.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (self.ext is not None and self.ext.has_data())

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                (self.ext is not None and self.ext.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "hw-statistics" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "ext"):
                                if (self.ext is None):
                                    self.ext = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics.Ext()
                                    self.ext.parent = self
                                    self._children_name_map["ext"] = "ext"
                                return self.ext

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "ext"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class HwSas(Entity):
                        """
                        Table of Hardware SAs
                        
                        .. attribute:: hw_sa
                        
                        	Hardware Security Association
                        	**type**\: list of    :py:class:`HwSa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa>`
                        
                        

                        """

                        _prefix = 'crypto-macsec-pl-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas, self).__init__()

                            self.yang_name = "hw-sas"
                            self.yang_parent_name = "interface"

                            self.hw_sa = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas, self).__setattr__(name, value)


                        class HwSa(Entity):
                            """
                            Hardware Security Association
                            
                            .. attribute:: sa_id  <key>
                            
                            	SA ID
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: ext
                            
                            	ext
                            	**type**\:   :py:class:`Ext <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext>`
                            
                            

                            """

                            _prefix = 'crypto-macsec-pl-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa, self).__init__()

                                self.yang_name = "hw-sa"
                                self.yang_parent_name = "hw-sas"

                                self.sa_id = YLeaf(YType.int32, "sa-id")

                                self.ext = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext()
                                self.ext.parent = self
                                self._children_name_map["ext"] = "ext"
                                self._children_yang_names.add("ext")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("sa_id") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa, self).__setattr__(name, value)


                            class Ext(Entity):
                                """
                                ext
                                
                                .. attribute:: es200_sa
                                
                                	ES200 SA Information
                                	**type**\:   :py:class:`Es200Sa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa>`
                                
                                .. attribute:: msfpga_sa
                                
                                	MSFPGA SA Information
                                	**type**\:   :py:class:`MsfpgaSa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.MsfpgaSa>`
                                
                                .. attribute:: type
                                
                                	type
                                	**type**\:   :py:class:`MacsecCard <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecCard>`
                                
                                .. attribute:: xlfpga_sa
                                
                                	XLFPGA SA Information
                                	**type**\:   :py:class:`XlfpgaSa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.XlfpgaSa>`
                                
                                

                                """

                                _prefix = 'crypto-macsec-pl-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext, self).__init__()

                                    self.yang_name = "ext"
                                    self.yang_parent_name = "hw-sa"

                                    self.type = YLeaf(YType.enumeration, "type")

                                    self.es200_sa = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa()
                                    self.es200_sa.parent = self
                                    self._children_name_map["es200_sa"] = "es200-sa"
                                    self._children_yang_names.add("es200-sa")

                                    self.msfpga_sa = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.MsfpgaSa()
                                    self.msfpga_sa.parent = self
                                    self._children_name_map["msfpga_sa"] = "msfpga-sa"
                                    self._children_yang_names.add("msfpga-sa")

                                    self.xlfpga_sa = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.XlfpgaSa()
                                    self.xlfpga_sa.parent = self
                                    self._children_name_map["xlfpga_sa"] = "xlfpga-sa"
                                    self._children_yang_names.add("xlfpga-sa")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("type") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext, self).__setattr__(name, value)


                                class MsfpgaSa(Entity):
                                    """
                                    MSFPGA SA Information
                                    
                                    .. attribute:: rx_sa
                                    
                                    	Rx SA Details
                                    	**type**\:   :py:class:`RxSa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.MsfpgaSa.RxSa>`
                                    
                                    .. attribute:: tx_sa
                                    
                                    	Tx SA Details
                                    	**type**\:   :py:class:`TxSa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.MsfpgaSa.TxSa>`
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.MsfpgaSa, self).__init__()

                                        self.yang_name = "msfpga-sa"
                                        self.yang_parent_name = "ext"

                                        self.rx_sa = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.MsfpgaSa.RxSa()
                                        self.rx_sa.parent = self
                                        self._children_name_map["rx_sa"] = "rx-sa"
                                        self._children_yang_names.add("rx-sa")

                                        self.tx_sa = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.MsfpgaSa.TxSa()
                                        self.tx_sa.parent = self
                                        self._children_name_map["tx_sa"] = "tx-sa"
                                        self._children_yang_names.add("tx-sa")


                                    class TxSa(Entity):
                                        """
                                        Tx SA Details
                                        
                                        .. attribute:: action
                                        
                                        	Action
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: an
                                        
                                        	Association Number
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: c_offset
                                        
                                        	Conf offset
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: crypto_algo
                                        
                                        	Crypto Algorithm
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: in_use
                                        
                                        	In Use
                                        	**type**\:  bool
                                        
                                        .. attribute:: is_egress
                                        
                                        	rx\_tx direction
                                        	**type**\:  bool
                                        
                                        .. attribute:: key_len
                                        
                                        	Key Length
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: next_pn
                                        
                                        	Next Packet Number
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: q_bit
                                        
                                        	Q bit
                                        	**type**\:  bool
                                        
                                        .. attribute:: qq_bit
                                        
                                        	QQ bit
                                        	**type**\:  bool
                                        
                                        .. attribute:: sa_id
                                        
                                        	SA Index
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: sci
                                        
                                        	SCI
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: valid
                                        
                                        	SA Validity
                                        	**type**\:  bool
                                        
                                        .. attribute:: xpn
                                        
                                        	XPN EN
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'crypto-macsec-pl-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.MsfpgaSa.TxSa, self).__init__()

                                            self.yang_name = "tx-sa"
                                            self.yang_parent_name = "msfpga-sa"

                                            self.action = YLeaf(YType.uint8, "action")

                                            self.an = YLeaf(YType.uint8, "an")

                                            self.c_offset = YLeaf(YType.uint8, "c-offset")

                                            self.crypto_algo = YLeaf(YType.uint8, "crypto-algo")

                                            self.in_use = YLeaf(YType.boolean, "in-use")

                                            self.is_egress = YLeaf(YType.boolean, "is-egress")

                                            self.key_len = YLeaf(YType.uint8, "key-len")

                                            self.next_pn = YLeaf(YType.uint64, "next-pn")

                                            self.q_bit = YLeaf(YType.boolean, "q-bit")

                                            self.qq_bit = YLeaf(YType.boolean, "qq-bit")

                                            self.sa_id = YLeaf(YType.uint8, "sa-id")

                                            self.sci = YLeaf(YType.uint64, "sci")

                                            self.valid = YLeaf(YType.boolean, "valid")

                                            self.xpn = YLeaf(YType.uint8, "xpn")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("action",
                                                            "an",
                                                            "c_offset",
                                                            "crypto_algo",
                                                            "in_use",
                                                            "is_egress",
                                                            "key_len",
                                                            "next_pn",
                                                            "q_bit",
                                                            "qq_bit",
                                                            "sa_id",
                                                            "sci",
                                                            "valid",
                                                            "xpn") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.MsfpgaSa.TxSa, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.MsfpgaSa.TxSa, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.action.is_set or
                                                self.an.is_set or
                                                self.c_offset.is_set or
                                                self.crypto_algo.is_set or
                                                self.in_use.is_set or
                                                self.is_egress.is_set or
                                                self.key_len.is_set or
                                                self.next_pn.is_set or
                                                self.q_bit.is_set or
                                                self.qq_bit.is_set or
                                                self.sa_id.is_set or
                                                self.sci.is_set or
                                                self.valid.is_set or
                                                self.xpn.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.action.yfilter != YFilter.not_set or
                                                self.an.yfilter != YFilter.not_set or
                                                self.c_offset.yfilter != YFilter.not_set or
                                                self.crypto_algo.yfilter != YFilter.not_set or
                                                self.in_use.yfilter != YFilter.not_set or
                                                self.is_egress.yfilter != YFilter.not_set or
                                                self.key_len.yfilter != YFilter.not_set or
                                                self.next_pn.yfilter != YFilter.not_set or
                                                self.q_bit.yfilter != YFilter.not_set or
                                                self.qq_bit.yfilter != YFilter.not_set or
                                                self.sa_id.yfilter != YFilter.not_set or
                                                self.sci.yfilter != YFilter.not_set or
                                                self.valid.yfilter != YFilter.not_set or
                                                self.xpn.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "tx-sa" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.action.is_set or self.action.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.action.get_name_leafdata())
                                            if (self.an.is_set or self.an.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.an.get_name_leafdata())
                                            if (self.c_offset.is_set or self.c_offset.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.c_offset.get_name_leafdata())
                                            if (self.crypto_algo.is_set or self.crypto_algo.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.crypto_algo.get_name_leafdata())
                                            if (self.in_use.is_set or self.in_use.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.in_use.get_name_leafdata())
                                            if (self.is_egress.is_set or self.is_egress.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.is_egress.get_name_leafdata())
                                            if (self.key_len.is_set or self.key_len.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.key_len.get_name_leafdata())
                                            if (self.next_pn.is_set or self.next_pn.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.next_pn.get_name_leafdata())
                                            if (self.q_bit.is_set or self.q_bit.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.q_bit.get_name_leafdata())
                                            if (self.qq_bit.is_set or self.qq_bit.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.qq_bit.get_name_leafdata())
                                            if (self.sa_id.is_set or self.sa_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sa_id.get_name_leafdata())
                                            if (self.sci.is_set or self.sci.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sci.get_name_leafdata())
                                            if (self.valid.is_set or self.valid.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.valid.get_name_leafdata())
                                            if (self.xpn.is_set or self.xpn.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.xpn.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "action" or name == "an" or name == "c-offset" or name == "crypto-algo" or name == "in-use" or name == "is-egress" or name == "key-len" or name == "next-pn" or name == "q-bit" or name == "qq-bit" or name == "sa-id" or name == "sci" or name == "valid" or name == "xpn"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "action"):
                                                self.action = value
                                                self.action.value_namespace = name_space
                                                self.action.value_namespace_prefix = name_space_prefix
                                            if(value_path == "an"):
                                                self.an = value
                                                self.an.value_namespace = name_space
                                                self.an.value_namespace_prefix = name_space_prefix
                                            if(value_path == "c-offset"):
                                                self.c_offset = value
                                                self.c_offset.value_namespace = name_space
                                                self.c_offset.value_namespace_prefix = name_space_prefix
                                            if(value_path == "crypto-algo"):
                                                self.crypto_algo = value
                                                self.crypto_algo.value_namespace = name_space
                                                self.crypto_algo.value_namespace_prefix = name_space_prefix
                                            if(value_path == "in-use"):
                                                self.in_use = value
                                                self.in_use.value_namespace = name_space
                                                self.in_use.value_namespace_prefix = name_space_prefix
                                            if(value_path == "is-egress"):
                                                self.is_egress = value
                                                self.is_egress.value_namespace = name_space
                                                self.is_egress.value_namespace_prefix = name_space_prefix
                                            if(value_path == "key-len"):
                                                self.key_len = value
                                                self.key_len.value_namespace = name_space
                                                self.key_len.value_namespace_prefix = name_space_prefix
                                            if(value_path == "next-pn"):
                                                self.next_pn = value
                                                self.next_pn.value_namespace = name_space
                                                self.next_pn.value_namespace_prefix = name_space_prefix
                                            if(value_path == "q-bit"):
                                                self.q_bit = value
                                                self.q_bit.value_namespace = name_space
                                                self.q_bit.value_namespace_prefix = name_space_prefix
                                            if(value_path == "qq-bit"):
                                                self.qq_bit = value
                                                self.qq_bit.value_namespace = name_space
                                                self.qq_bit.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sa-id"):
                                                self.sa_id = value
                                                self.sa_id.value_namespace = name_space
                                                self.sa_id.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sci"):
                                                self.sci = value
                                                self.sci.value_namespace = name_space
                                                self.sci.value_namespace_prefix = name_space_prefix
                                            if(value_path == "valid"):
                                                self.valid = value
                                                self.valid.value_namespace = name_space
                                                self.valid.value_namespace_prefix = name_space_prefix
                                            if(value_path == "xpn"):
                                                self.xpn = value
                                                self.xpn.value_namespace = name_space
                                                self.xpn.value_namespace_prefix = name_space_prefix


                                    class RxSa(Entity):
                                        """
                                        Rx SA Details
                                        
                                        .. attribute:: action
                                        
                                        	Action
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: an
                                        
                                        	Association Number
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: c_offset
                                        
                                        	Conf offset
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: crypto_algo
                                        
                                        	Crypto Algorithm
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: in_use
                                        
                                        	In Use
                                        	**type**\:  bool
                                        
                                        .. attribute:: is_egress
                                        
                                        	rx\_tx direction
                                        	**type**\:  bool
                                        
                                        .. attribute:: key_len
                                        
                                        	Key Length
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: next_pn
                                        
                                        	Next Packet Number
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: q_bit
                                        
                                        	Q bit
                                        	**type**\:  bool
                                        
                                        .. attribute:: qq_bit
                                        
                                        	QQ bit
                                        	**type**\:  bool
                                        
                                        .. attribute:: sa_id
                                        
                                        	SA Index
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: sci
                                        
                                        	SCI
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: valid
                                        
                                        	SA Validity
                                        	**type**\:  bool
                                        
                                        .. attribute:: xpn
                                        
                                        	XPN EN
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'crypto-macsec-pl-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.MsfpgaSa.RxSa, self).__init__()

                                            self.yang_name = "rx-sa"
                                            self.yang_parent_name = "msfpga-sa"

                                            self.action = YLeaf(YType.uint8, "action")

                                            self.an = YLeaf(YType.uint8, "an")

                                            self.c_offset = YLeaf(YType.uint8, "c-offset")

                                            self.crypto_algo = YLeaf(YType.uint8, "crypto-algo")

                                            self.in_use = YLeaf(YType.boolean, "in-use")

                                            self.is_egress = YLeaf(YType.boolean, "is-egress")

                                            self.key_len = YLeaf(YType.uint8, "key-len")

                                            self.next_pn = YLeaf(YType.uint64, "next-pn")

                                            self.q_bit = YLeaf(YType.boolean, "q-bit")

                                            self.qq_bit = YLeaf(YType.boolean, "qq-bit")

                                            self.sa_id = YLeaf(YType.uint8, "sa-id")

                                            self.sci = YLeaf(YType.uint64, "sci")

                                            self.valid = YLeaf(YType.boolean, "valid")

                                            self.xpn = YLeaf(YType.uint8, "xpn")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("action",
                                                            "an",
                                                            "c_offset",
                                                            "crypto_algo",
                                                            "in_use",
                                                            "is_egress",
                                                            "key_len",
                                                            "next_pn",
                                                            "q_bit",
                                                            "qq_bit",
                                                            "sa_id",
                                                            "sci",
                                                            "valid",
                                                            "xpn") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.MsfpgaSa.RxSa, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.MsfpgaSa.RxSa, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.action.is_set or
                                                self.an.is_set or
                                                self.c_offset.is_set or
                                                self.crypto_algo.is_set or
                                                self.in_use.is_set or
                                                self.is_egress.is_set or
                                                self.key_len.is_set or
                                                self.next_pn.is_set or
                                                self.q_bit.is_set or
                                                self.qq_bit.is_set or
                                                self.sa_id.is_set or
                                                self.sci.is_set or
                                                self.valid.is_set or
                                                self.xpn.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.action.yfilter != YFilter.not_set or
                                                self.an.yfilter != YFilter.not_set or
                                                self.c_offset.yfilter != YFilter.not_set or
                                                self.crypto_algo.yfilter != YFilter.not_set or
                                                self.in_use.yfilter != YFilter.not_set or
                                                self.is_egress.yfilter != YFilter.not_set or
                                                self.key_len.yfilter != YFilter.not_set or
                                                self.next_pn.yfilter != YFilter.not_set or
                                                self.q_bit.yfilter != YFilter.not_set or
                                                self.qq_bit.yfilter != YFilter.not_set or
                                                self.sa_id.yfilter != YFilter.not_set or
                                                self.sci.yfilter != YFilter.not_set or
                                                self.valid.yfilter != YFilter.not_set or
                                                self.xpn.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "rx-sa" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.action.is_set or self.action.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.action.get_name_leafdata())
                                            if (self.an.is_set or self.an.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.an.get_name_leafdata())
                                            if (self.c_offset.is_set or self.c_offset.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.c_offset.get_name_leafdata())
                                            if (self.crypto_algo.is_set or self.crypto_algo.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.crypto_algo.get_name_leafdata())
                                            if (self.in_use.is_set or self.in_use.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.in_use.get_name_leafdata())
                                            if (self.is_egress.is_set or self.is_egress.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.is_egress.get_name_leafdata())
                                            if (self.key_len.is_set or self.key_len.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.key_len.get_name_leafdata())
                                            if (self.next_pn.is_set or self.next_pn.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.next_pn.get_name_leafdata())
                                            if (self.q_bit.is_set or self.q_bit.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.q_bit.get_name_leafdata())
                                            if (self.qq_bit.is_set or self.qq_bit.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.qq_bit.get_name_leafdata())
                                            if (self.sa_id.is_set or self.sa_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sa_id.get_name_leafdata())
                                            if (self.sci.is_set or self.sci.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sci.get_name_leafdata())
                                            if (self.valid.is_set or self.valid.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.valid.get_name_leafdata())
                                            if (self.xpn.is_set or self.xpn.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.xpn.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "action" or name == "an" or name == "c-offset" or name == "crypto-algo" or name == "in-use" or name == "is-egress" or name == "key-len" or name == "next-pn" or name == "q-bit" or name == "qq-bit" or name == "sa-id" or name == "sci" or name == "valid" or name == "xpn"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "action"):
                                                self.action = value
                                                self.action.value_namespace = name_space
                                                self.action.value_namespace_prefix = name_space_prefix
                                            if(value_path == "an"):
                                                self.an = value
                                                self.an.value_namespace = name_space
                                                self.an.value_namespace_prefix = name_space_prefix
                                            if(value_path == "c-offset"):
                                                self.c_offset = value
                                                self.c_offset.value_namespace = name_space
                                                self.c_offset.value_namespace_prefix = name_space_prefix
                                            if(value_path == "crypto-algo"):
                                                self.crypto_algo = value
                                                self.crypto_algo.value_namespace = name_space
                                                self.crypto_algo.value_namespace_prefix = name_space_prefix
                                            if(value_path == "in-use"):
                                                self.in_use = value
                                                self.in_use.value_namespace = name_space
                                                self.in_use.value_namespace_prefix = name_space_prefix
                                            if(value_path == "is-egress"):
                                                self.is_egress = value
                                                self.is_egress.value_namespace = name_space
                                                self.is_egress.value_namespace_prefix = name_space_prefix
                                            if(value_path == "key-len"):
                                                self.key_len = value
                                                self.key_len.value_namespace = name_space
                                                self.key_len.value_namespace_prefix = name_space_prefix
                                            if(value_path == "next-pn"):
                                                self.next_pn = value
                                                self.next_pn.value_namespace = name_space
                                                self.next_pn.value_namespace_prefix = name_space_prefix
                                            if(value_path == "q-bit"):
                                                self.q_bit = value
                                                self.q_bit.value_namespace = name_space
                                                self.q_bit.value_namespace_prefix = name_space_prefix
                                            if(value_path == "qq-bit"):
                                                self.qq_bit = value
                                                self.qq_bit.value_namespace = name_space
                                                self.qq_bit.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sa-id"):
                                                self.sa_id = value
                                                self.sa_id.value_namespace = name_space
                                                self.sa_id.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sci"):
                                                self.sci = value
                                                self.sci.value_namespace = name_space
                                                self.sci.value_namespace_prefix = name_space_prefix
                                            if(value_path == "valid"):
                                                self.valid = value
                                                self.valid.value_namespace = name_space
                                                self.valid.value_namespace_prefix = name_space_prefix
                                            if(value_path == "xpn"):
                                                self.xpn = value
                                                self.xpn.value_namespace = name_space
                                                self.xpn.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            (self.rx_sa is not None and self.rx_sa.has_data()) or
                                            (self.tx_sa is not None and self.tx_sa.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            (self.rx_sa is not None and self.rx_sa.has_operation()) or
                                            (self.tx_sa is not None and self.tx_sa.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "msfpga-sa" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "rx-sa"):
                                            if (self.rx_sa is None):
                                                self.rx_sa = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.MsfpgaSa.RxSa()
                                                self.rx_sa.parent = self
                                                self._children_name_map["rx_sa"] = "rx-sa"
                                            return self.rx_sa

                                        if (child_yang_name == "tx-sa"):
                                            if (self.tx_sa is None):
                                                self.tx_sa = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.MsfpgaSa.TxSa()
                                                self.tx_sa.parent = self
                                                self._children_name_map["tx_sa"] = "tx-sa"
                                            return self.tx_sa

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "rx-sa" or name == "tx-sa"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        pass


                                class XlfpgaSa(Entity):
                                    """
                                    XLFPGA SA Information
                                    
                                    .. attribute:: rx_sa
                                    
                                    	Rx SA Details
                                    	**type**\:   :py:class:`RxSa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.XlfpgaSa.RxSa>`
                                    
                                    .. attribute:: tx_sa
                                    
                                    	Tx SA Details
                                    	**type**\:   :py:class:`TxSa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.XlfpgaSa.TxSa>`
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.XlfpgaSa, self).__init__()

                                        self.yang_name = "xlfpga-sa"
                                        self.yang_parent_name = "ext"

                                        self.rx_sa = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.XlfpgaSa.RxSa()
                                        self.rx_sa.parent = self
                                        self._children_name_map["rx_sa"] = "rx-sa"
                                        self._children_yang_names.add("rx-sa")

                                        self.tx_sa = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.XlfpgaSa.TxSa()
                                        self.tx_sa.parent = self
                                        self._children_name_map["tx_sa"] = "tx-sa"
                                        self._children_yang_names.add("tx-sa")


                                    class TxSa(Entity):
                                        """
                                        Tx SA Details
                                        
                                        .. attribute:: an
                                        
                                        	Association Number
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: cipher_suite
                                        
                                        	Cipher Suite Used
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: confidentiality_offset
                                        
                                        	Confidentiality Offset
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: crc_value
                                        
                                        	CRC Value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: current_packet_num
                                        
                                        	Current Packet Number
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: fcs_err_cfg
                                        
                                        	FCS Error Config
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: initial_packet_number
                                        
                                        	Initial Packet Number
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: max_packet_num
                                        
                                        	Max Packet Number
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: protection_enable
                                        
                                        	Protection Enabled
                                        	**type**\:  bool
                                        
                                        .. attribute:: sectag_length
                                        
                                        	Sec Tag Length(bytes) 
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        	**units**\: byte
                                        
                                        .. attribute:: secure_channel_id
                                        
                                        	Secure Channel ID
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: secure_mode
                                        
                                        	Secure Mode \- Must/Should
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: ssci
                                        
                                        	Short Secure Channel ID
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'crypto-macsec-pl-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.XlfpgaSa.TxSa, self).__init__()

                                            self.yang_name = "tx-sa"
                                            self.yang_parent_name = "xlfpga-sa"

                                            self.an = YLeaf(YType.uint8, "an")

                                            self.cipher_suite = YLeaf(YType.uint32, "cipher-suite")

                                            self.confidentiality_offset = YLeaf(YType.uint8, "confidentiality-offset")

                                            self.crc_value = YLeaf(YType.uint32, "crc-value")

                                            self.current_packet_num = YLeaf(YType.uint64, "current-packet-num")

                                            self.fcs_err_cfg = YLeaf(YType.uint8, "fcs-err-cfg")

                                            self.initial_packet_number = YLeaf(YType.uint64, "initial-packet-number")

                                            self.max_packet_num = YLeaf(YType.uint64, "max-packet-num")

                                            self.protection_enable = YLeaf(YType.boolean, "protection-enable")

                                            self.sectag_length = YLeaf(YType.uint32, "sectag-length")

                                            self.secure_channel_id = YLeaf(YType.uint64, "secure-channel-id")

                                            self.secure_mode = YLeaf(YType.uint8, "secure-mode")

                                            self.ssci = YLeaf(YType.uint32, "ssci")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("an",
                                                            "cipher_suite",
                                                            "confidentiality_offset",
                                                            "crc_value",
                                                            "current_packet_num",
                                                            "fcs_err_cfg",
                                                            "initial_packet_number",
                                                            "max_packet_num",
                                                            "protection_enable",
                                                            "sectag_length",
                                                            "secure_channel_id",
                                                            "secure_mode",
                                                            "ssci") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.XlfpgaSa.TxSa, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.XlfpgaSa.TxSa, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.an.is_set or
                                                self.cipher_suite.is_set or
                                                self.confidentiality_offset.is_set or
                                                self.crc_value.is_set or
                                                self.current_packet_num.is_set or
                                                self.fcs_err_cfg.is_set or
                                                self.initial_packet_number.is_set or
                                                self.max_packet_num.is_set or
                                                self.protection_enable.is_set or
                                                self.sectag_length.is_set or
                                                self.secure_channel_id.is_set or
                                                self.secure_mode.is_set or
                                                self.ssci.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.an.yfilter != YFilter.not_set or
                                                self.cipher_suite.yfilter != YFilter.not_set or
                                                self.confidentiality_offset.yfilter != YFilter.not_set or
                                                self.crc_value.yfilter != YFilter.not_set or
                                                self.current_packet_num.yfilter != YFilter.not_set or
                                                self.fcs_err_cfg.yfilter != YFilter.not_set or
                                                self.initial_packet_number.yfilter != YFilter.not_set or
                                                self.max_packet_num.yfilter != YFilter.not_set or
                                                self.protection_enable.yfilter != YFilter.not_set or
                                                self.sectag_length.yfilter != YFilter.not_set or
                                                self.secure_channel_id.yfilter != YFilter.not_set or
                                                self.secure_mode.yfilter != YFilter.not_set or
                                                self.ssci.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "tx-sa" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.an.is_set or self.an.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.an.get_name_leafdata())
                                            if (self.cipher_suite.is_set or self.cipher_suite.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.cipher_suite.get_name_leafdata())
                                            if (self.confidentiality_offset.is_set or self.confidentiality_offset.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.confidentiality_offset.get_name_leafdata())
                                            if (self.crc_value.is_set or self.crc_value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.crc_value.get_name_leafdata())
                                            if (self.current_packet_num.is_set or self.current_packet_num.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.current_packet_num.get_name_leafdata())
                                            if (self.fcs_err_cfg.is_set or self.fcs_err_cfg.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.fcs_err_cfg.get_name_leafdata())
                                            if (self.initial_packet_number.is_set or self.initial_packet_number.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.initial_packet_number.get_name_leafdata())
                                            if (self.max_packet_num.is_set or self.max_packet_num.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.max_packet_num.get_name_leafdata())
                                            if (self.protection_enable.is_set or self.protection_enable.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.protection_enable.get_name_leafdata())
                                            if (self.sectag_length.is_set or self.sectag_length.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sectag_length.get_name_leafdata())
                                            if (self.secure_channel_id.is_set or self.secure_channel_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.secure_channel_id.get_name_leafdata())
                                            if (self.secure_mode.is_set or self.secure_mode.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.secure_mode.get_name_leafdata())
                                            if (self.ssci.is_set or self.ssci.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.ssci.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "an" or name == "cipher-suite" or name == "confidentiality-offset" or name == "crc-value" or name == "current-packet-num" or name == "fcs-err-cfg" or name == "initial-packet-number" or name == "max-packet-num" or name == "protection-enable" or name == "sectag-length" or name == "secure-channel-id" or name == "secure-mode" or name == "ssci"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "an"):
                                                self.an = value
                                                self.an.value_namespace = name_space
                                                self.an.value_namespace_prefix = name_space_prefix
                                            if(value_path == "cipher-suite"):
                                                self.cipher_suite = value
                                                self.cipher_suite.value_namespace = name_space
                                                self.cipher_suite.value_namespace_prefix = name_space_prefix
                                            if(value_path == "confidentiality-offset"):
                                                self.confidentiality_offset = value
                                                self.confidentiality_offset.value_namespace = name_space
                                                self.confidentiality_offset.value_namespace_prefix = name_space_prefix
                                            if(value_path == "crc-value"):
                                                self.crc_value = value
                                                self.crc_value.value_namespace = name_space
                                                self.crc_value.value_namespace_prefix = name_space_prefix
                                            if(value_path == "current-packet-num"):
                                                self.current_packet_num = value
                                                self.current_packet_num.value_namespace = name_space
                                                self.current_packet_num.value_namespace_prefix = name_space_prefix
                                            if(value_path == "fcs-err-cfg"):
                                                self.fcs_err_cfg = value
                                                self.fcs_err_cfg.value_namespace = name_space
                                                self.fcs_err_cfg.value_namespace_prefix = name_space_prefix
                                            if(value_path == "initial-packet-number"):
                                                self.initial_packet_number = value
                                                self.initial_packet_number.value_namespace = name_space
                                                self.initial_packet_number.value_namespace_prefix = name_space_prefix
                                            if(value_path == "max-packet-num"):
                                                self.max_packet_num = value
                                                self.max_packet_num.value_namespace = name_space
                                                self.max_packet_num.value_namespace_prefix = name_space_prefix
                                            if(value_path == "protection-enable"):
                                                self.protection_enable = value
                                                self.protection_enable.value_namespace = name_space
                                                self.protection_enable.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sectag-length"):
                                                self.sectag_length = value
                                                self.sectag_length.value_namespace = name_space
                                                self.sectag_length.value_namespace_prefix = name_space_prefix
                                            if(value_path == "secure-channel-id"):
                                                self.secure_channel_id = value
                                                self.secure_channel_id.value_namespace = name_space
                                                self.secure_channel_id.value_namespace_prefix = name_space_prefix
                                            if(value_path == "secure-mode"):
                                                self.secure_mode = value
                                                self.secure_mode.value_namespace = name_space
                                                self.secure_mode.value_namespace_prefix = name_space_prefix
                                            if(value_path == "ssci"):
                                                self.ssci = value
                                                self.ssci.value_namespace = name_space
                                                self.ssci.value_namespace_prefix = name_space_prefix


                                    class RxSa(Entity):
                                        """
                                        Rx SA Details
                                        
                                        .. attribute:: an
                                        
                                        	Association Number
                                        	**type**\:  str
                                        
                                        	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                        
                                        .. attribute:: auth_err_cfg
                                        
                                        	Auth  Error Config
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: cipher_suite
                                        
                                        	Cipher Suite Used
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: confidentiality_offset
                                        
                                        	Confidentiality Offset
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: crc_value
                                        
                                        	CRC Value
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: current_packet_num
                                        
                                        	Current Packet Number
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: fcs_err_cfg
                                        
                                        	FCS Error Config
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: lowest_acceptable_packet_num
                                        
                                        	Lowest Acceptable Packet Number
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: max_packet_num
                                        
                                        	Max Packet Number
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: next_expected_packet_num
                                        
                                        	Next expected Packet Number
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: num_an_in_use
                                        
                                        	Num of AN's in Use
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: pkt_tagged_detected
                                        
                                        	Tagged Pkts Detected
                                        	**type**\:  bool
                                        
                                        .. attribute:: pkt_tagged_validated
                                        
                                        	Tagged Pkts Validated
                                        	**type**\:  bool
                                        
                                        .. attribute:: pkt_untagged_detected
                                        
                                        	Untagged Pkts Detected
                                        	**type**\:  bool
                                        
                                        .. attribute:: protection_enable
                                        
                                        	Protection Enabled
                                        	**type**\:  bool
                                        
                                        .. attribute:: recent_an
                                        
                                        	Recent Association Num
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: replay_protect_mode
                                        
                                        	Replay Protect Mode
                                        	**type**\:  bool
                                        
                                        .. attribute:: replay_window
                                        
                                        	Replay Window 
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: secure_channel_id
                                        
                                        	Secure Channel ID
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: secure_mode
                                        
                                        	Secure Mode \- Must/Should
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: ssci
                                        
                                        	Short Secure Channel ID
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: validation_mode
                                        
                                        	Validation Mode
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'crypto-macsec-pl-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.XlfpgaSa.RxSa, self).__init__()

                                            self.yang_name = "rx-sa"
                                            self.yang_parent_name = "xlfpga-sa"

                                            self.an = YLeaf(YType.str, "an")

                                            self.auth_err_cfg = YLeaf(YType.uint32, "auth-err-cfg")

                                            self.cipher_suite = YLeaf(YType.uint32, "cipher-suite")

                                            self.confidentiality_offset = YLeaf(YType.uint8, "confidentiality-offset")

                                            self.crc_value = YLeafList(YType.uint32, "crc-value")

                                            self.current_packet_num = YLeaf(YType.uint64, "current-packet-num")

                                            self.fcs_err_cfg = YLeaf(YType.uint32, "fcs-err-cfg")

                                            self.lowest_acceptable_packet_num = YLeafList(YType.uint64, "lowest-acceptable-packet-num")

                                            self.max_packet_num = YLeaf(YType.uint64, "max-packet-num")

                                            self.next_expected_packet_num = YLeafList(YType.uint64, "next-expected-packet-num")

                                            self.num_an_in_use = YLeaf(YType.uint32, "num-an-in-use")

                                            self.pkt_tagged_detected = YLeaf(YType.boolean, "pkt-tagged-detected")

                                            self.pkt_tagged_validated = YLeaf(YType.boolean, "pkt-tagged-validated")

                                            self.pkt_untagged_detected = YLeaf(YType.boolean, "pkt-untagged-detected")

                                            self.protection_enable = YLeaf(YType.boolean, "protection-enable")

                                            self.recent_an = YLeaf(YType.uint8, "recent-an")

                                            self.replay_protect_mode = YLeaf(YType.boolean, "replay-protect-mode")

                                            self.replay_window = YLeaf(YType.uint32, "replay-window")

                                            self.secure_channel_id = YLeaf(YType.uint64, "secure-channel-id")

                                            self.secure_mode = YLeaf(YType.uint32, "secure-mode")

                                            self.ssci = YLeafList(YType.uint32, "ssci")

                                            self.validation_mode = YLeaf(YType.uint32, "validation-mode")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("an",
                                                            "auth_err_cfg",
                                                            "cipher_suite",
                                                            "confidentiality_offset",
                                                            "crc_value",
                                                            "current_packet_num",
                                                            "fcs_err_cfg",
                                                            "lowest_acceptable_packet_num",
                                                            "max_packet_num",
                                                            "next_expected_packet_num",
                                                            "num_an_in_use",
                                                            "pkt_tagged_detected",
                                                            "pkt_tagged_validated",
                                                            "pkt_untagged_detected",
                                                            "protection_enable",
                                                            "recent_an",
                                                            "replay_protect_mode",
                                                            "replay_window",
                                                            "secure_channel_id",
                                                            "secure_mode",
                                                            "ssci",
                                                            "validation_mode") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.XlfpgaSa.RxSa, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.XlfpgaSa.RxSa, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.crc_value.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            for leaf in self.lowest_acceptable_packet_num.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            for leaf in self.next_expected_packet_num.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            for leaf in self.ssci.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.an.is_set or
                                                self.auth_err_cfg.is_set or
                                                self.cipher_suite.is_set or
                                                self.confidentiality_offset.is_set or
                                                self.current_packet_num.is_set or
                                                self.fcs_err_cfg.is_set or
                                                self.max_packet_num.is_set or
                                                self.num_an_in_use.is_set or
                                                self.pkt_tagged_detected.is_set or
                                                self.pkt_tagged_validated.is_set or
                                                self.pkt_untagged_detected.is_set or
                                                self.protection_enable.is_set or
                                                self.recent_an.is_set or
                                                self.replay_protect_mode.is_set or
                                                self.replay_window.is_set or
                                                self.secure_channel_id.is_set or
                                                self.secure_mode.is_set or
                                                self.validation_mode.is_set)

                                        def has_operation(self):
                                            for leaf in self.crc_value.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            for leaf in self.lowest_acceptable_packet_num.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            for leaf in self.next_expected_packet_num.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            for leaf in self.ssci.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.an.yfilter != YFilter.not_set or
                                                self.auth_err_cfg.yfilter != YFilter.not_set or
                                                self.cipher_suite.yfilter != YFilter.not_set or
                                                self.confidentiality_offset.yfilter != YFilter.not_set or
                                                self.crc_value.yfilter != YFilter.not_set or
                                                self.current_packet_num.yfilter != YFilter.not_set or
                                                self.fcs_err_cfg.yfilter != YFilter.not_set or
                                                self.lowest_acceptable_packet_num.yfilter != YFilter.not_set or
                                                self.max_packet_num.yfilter != YFilter.not_set or
                                                self.next_expected_packet_num.yfilter != YFilter.not_set or
                                                self.num_an_in_use.yfilter != YFilter.not_set or
                                                self.pkt_tagged_detected.yfilter != YFilter.not_set or
                                                self.pkt_tagged_validated.yfilter != YFilter.not_set or
                                                self.pkt_untagged_detected.yfilter != YFilter.not_set or
                                                self.protection_enable.yfilter != YFilter.not_set or
                                                self.recent_an.yfilter != YFilter.not_set or
                                                self.replay_protect_mode.yfilter != YFilter.not_set or
                                                self.replay_window.yfilter != YFilter.not_set or
                                                self.secure_channel_id.yfilter != YFilter.not_set or
                                                self.secure_mode.yfilter != YFilter.not_set or
                                                self.ssci.yfilter != YFilter.not_set or
                                                self.validation_mode.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "rx-sa" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.an.is_set or self.an.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.an.get_name_leafdata())
                                            if (self.auth_err_cfg.is_set or self.auth_err_cfg.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.auth_err_cfg.get_name_leafdata())
                                            if (self.cipher_suite.is_set or self.cipher_suite.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.cipher_suite.get_name_leafdata())
                                            if (self.confidentiality_offset.is_set or self.confidentiality_offset.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.confidentiality_offset.get_name_leafdata())
                                            if (self.current_packet_num.is_set or self.current_packet_num.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.current_packet_num.get_name_leafdata())
                                            if (self.fcs_err_cfg.is_set or self.fcs_err_cfg.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.fcs_err_cfg.get_name_leafdata())
                                            if (self.max_packet_num.is_set or self.max_packet_num.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.max_packet_num.get_name_leafdata())
                                            if (self.num_an_in_use.is_set or self.num_an_in_use.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.num_an_in_use.get_name_leafdata())
                                            if (self.pkt_tagged_detected.is_set or self.pkt_tagged_detected.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.pkt_tagged_detected.get_name_leafdata())
                                            if (self.pkt_tagged_validated.is_set or self.pkt_tagged_validated.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.pkt_tagged_validated.get_name_leafdata())
                                            if (self.pkt_untagged_detected.is_set or self.pkt_untagged_detected.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.pkt_untagged_detected.get_name_leafdata())
                                            if (self.protection_enable.is_set or self.protection_enable.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.protection_enable.get_name_leafdata())
                                            if (self.recent_an.is_set or self.recent_an.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.recent_an.get_name_leafdata())
                                            if (self.replay_protect_mode.is_set or self.replay_protect_mode.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.replay_protect_mode.get_name_leafdata())
                                            if (self.replay_window.is_set or self.replay_window.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.replay_window.get_name_leafdata())
                                            if (self.secure_channel_id.is_set or self.secure_channel_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.secure_channel_id.get_name_leafdata())
                                            if (self.secure_mode.is_set or self.secure_mode.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.secure_mode.get_name_leafdata())
                                            if (self.validation_mode.is_set or self.validation_mode.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.validation_mode.get_name_leafdata())

                                            leaf_name_data.extend(self.crc_value.get_name_leafdata())

                                            leaf_name_data.extend(self.lowest_acceptable_packet_num.get_name_leafdata())

                                            leaf_name_data.extend(self.next_expected_packet_num.get_name_leafdata())

                                            leaf_name_data.extend(self.ssci.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "an" or name == "auth-err-cfg" or name == "cipher-suite" or name == "confidentiality-offset" or name == "crc-value" or name == "current-packet-num" or name == "fcs-err-cfg" or name == "lowest-acceptable-packet-num" or name == "max-packet-num" or name == "next-expected-packet-num" or name == "num-an-in-use" or name == "pkt-tagged-detected" or name == "pkt-tagged-validated" or name == "pkt-untagged-detected" or name == "protection-enable" or name == "recent-an" or name == "replay-protect-mode" or name == "replay-window" or name == "secure-channel-id" or name == "secure-mode" or name == "ssci" or name == "validation-mode"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "an"):
                                                self.an = value
                                                self.an.value_namespace = name_space
                                                self.an.value_namespace_prefix = name_space_prefix
                                            if(value_path == "auth-err-cfg"):
                                                self.auth_err_cfg = value
                                                self.auth_err_cfg.value_namespace = name_space
                                                self.auth_err_cfg.value_namespace_prefix = name_space_prefix
                                            if(value_path == "cipher-suite"):
                                                self.cipher_suite = value
                                                self.cipher_suite.value_namespace = name_space
                                                self.cipher_suite.value_namespace_prefix = name_space_prefix
                                            if(value_path == "confidentiality-offset"):
                                                self.confidentiality_offset = value
                                                self.confidentiality_offset.value_namespace = name_space
                                                self.confidentiality_offset.value_namespace_prefix = name_space_prefix
                                            if(value_path == "crc-value"):
                                                self.crc_value.append(value)
                                            if(value_path == "current-packet-num"):
                                                self.current_packet_num = value
                                                self.current_packet_num.value_namespace = name_space
                                                self.current_packet_num.value_namespace_prefix = name_space_prefix
                                            if(value_path == "fcs-err-cfg"):
                                                self.fcs_err_cfg = value
                                                self.fcs_err_cfg.value_namespace = name_space
                                                self.fcs_err_cfg.value_namespace_prefix = name_space_prefix
                                            if(value_path == "lowest-acceptable-packet-num"):
                                                self.lowest_acceptable_packet_num.append(value)
                                            if(value_path == "max-packet-num"):
                                                self.max_packet_num = value
                                                self.max_packet_num.value_namespace = name_space
                                                self.max_packet_num.value_namespace_prefix = name_space_prefix
                                            if(value_path == "next-expected-packet-num"):
                                                self.next_expected_packet_num.append(value)
                                            if(value_path == "num-an-in-use"):
                                                self.num_an_in_use = value
                                                self.num_an_in_use.value_namespace = name_space
                                                self.num_an_in_use.value_namespace_prefix = name_space_prefix
                                            if(value_path == "pkt-tagged-detected"):
                                                self.pkt_tagged_detected = value
                                                self.pkt_tagged_detected.value_namespace = name_space
                                                self.pkt_tagged_detected.value_namespace_prefix = name_space_prefix
                                            if(value_path == "pkt-tagged-validated"):
                                                self.pkt_tagged_validated = value
                                                self.pkt_tagged_validated.value_namespace = name_space
                                                self.pkt_tagged_validated.value_namespace_prefix = name_space_prefix
                                            if(value_path == "pkt-untagged-detected"):
                                                self.pkt_untagged_detected = value
                                                self.pkt_untagged_detected.value_namespace = name_space
                                                self.pkt_untagged_detected.value_namespace_prefix = name_space_prefix
                                            if(value_path == "protection-enable"):
                                                self.protection_enable = value
                                                self.protection_enable.value_namespace = name_space
                                                self.protection_enable.value_namespace_prefix = name_space_prefix
                                            if(value_path == "recent-an"):
                                                self.recent_an = value
                                                self.recent_an.value_namespace = name_space
                                                self.recent_an.value_namespace_prefix = name_space_prefix
                                            if(value_path == "replay-protect-mode"):
                                                self.replay_protect_mode = value
                                                self.replay_protect_mode.value_namespace = name_space
                                                self.replay_protect_mode.value_namespace_prefix = name_space_prefix
                                            if(value_path == "replay-window"):
                                                self.replay_window = value
                                                self.replay_window.value_namespace = name_space
                                                self.replay_window.value_namespace_prefix = name_space_prefix
                                            if(value_path == "secure-channel-id"):
                                                self.secure_channel_id = value
                                                self.secure_channel_id.value_namespace = name_space
                                                self.secure_channel_id.value_namespace_prefix = name_space_prefix
                                            if(value_path == "secure-mode"):
                                                self.secure_mode = value
                                                self.secure_mode.value_namespace = name_space
                                                self.secure_mode.value_namespace_prefix = name_space_prefix
                                            if(value_path == "ssci"):
                                                self.ssci.append(value)
                                            if(value_path == "validation-mode"):
                                                self.validation_mode = value
                                                self.validation_mode.value_namespace = name_space
                                                self.validation_mode.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            (self.rx_sa is not None and self.rx_sa.has_data()) or
                                            (self.tx_sa is not None and self.tx_sa.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            (self.rx_sa is not None and self.rx_sa.has_operation()) or
                                            (self.tx_sa is not None and self.tx_sa.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "xlfpga-sa" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "rx-sa"):
                                            if (self.rx_sa is None):
                                                self.rx_sa = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.XlfpgaSa.RxSa()
                                                self.rx_sa.parent = self
                                                self._children_name_map["rx_sa"] = "rx-sa"
                                            return self.rx_sa

                                        if (child_yang_name == "tx-sa"):
                                            if (self.tx_sa is None):
                                                self.tx_sa = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.XlfpgaSa.TxSa()
                                                self.tx_sa.parent = self
                                                self._children_name_map["tx_sa"] = "tx-sa"
                                            return self.tx_sa

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "rx-sa" or name == "tx-sa"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        pass


                                class Es200Sa(Entity):
                                    """
                                    ES200 SA Information
                                    
                                    .. attribute:: rx_sa
                                    
                                    	Rx SA Details
                                    	**type**\: list of    :py:class:`RxSa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa.RxSa>`
                                    
                                    .. attribute:: tx_sa
                                    
                                    	Tx SA Details
                                    	**type**\:   :py:class:`TxSa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa.TxSa>`
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa, self).__init__()

                                        self.yang_name = "es200-sa"
                                        self.yang_parent_name = "ext"

                                        self.tx_sa = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa.TxSa()
                                        self.tx_sa.parent = self
                                        self._children_name_map["tx_sa"] = "tx-sa"
                                        self._children_yang_names.add("tx-sa")

                                        self.rx_sa = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in () and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa, self).__setattr__(name, value)


                                    class TxSa(Entity):
                                        """
                                        Tx SA Details
                                        
                                        .. attribute:: current_pkt_number
                                        
                                        	Current packet Number
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: initial_pkt_number
                                        
                                        	Initial Packet Number
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: is_valid
                                        
                                        	Is structure valid
                                        	**type**\:  bool
                                        
                                        .. attribute:: max_pkt_number
                                        
                                        	Maximum packet Number
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: out_octets_encrypted_protected1
                                        
                                        	octets1 encrypted/protected
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: out_pkts_encrypted_protected
                                        
                                        	packets encrypted/protected
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: out_pkts_too_long
                                        
                                        	packets exceeding egress MTU
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: sa_id
                                        
                                        	SA Index
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: sc_no
                                        
                                        	SC Number
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: xform_params
                                        
                                        	 Xform Params
                                        	**type**\:   :py:class:`XformParams <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa.TxSa.XformParams>`
                                        
                                        

                                        """

                                        _prefix = 'crypto-macsec-pl-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa.TxSa, self).__init__()

                                            self.yang_name = "tx-sa"
                                            self.yang_parent_name = "es200-sa"

                                            self.current_pkt_number = YLeaf(YType.uint64, "current-pkt-number")

                                            self.initial_pkt_number = YLeaf(YType.uint8, "initial-pkt-number")

                                            self.is_valid = YLeaf(YType.boolean, "is-valid")

                                            self.max_pkt_number = YLeaf(YType.uint64, "max-pkt-number")

                                            self.out_octets_encrypted_protected1 = YLeaf(YType.uint8, "out-octets-encrypted-protected1")

                                            self.out_pkts_encrypted_protected = YLeaf(YType.uint8, "out-pkts-encrypted-protected")

                                            self.out_pkts_too_long = YLeaf(YType.uint8, "out-pkts-too-long")

                                            self.sa_id = YLeaf(YType.uint8, "sa-id")

                                            self.sc_no = YLeaf(YType.uint32, "sc-no")

                                            self.xform_params = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa.TxSa.XformParams()
                                            self.xform_params.parent = self
                                            self._children_name_map["xform_params"] = "xform-params"
                                            self._children_yang_names.add("xform-params")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("current_pkt_number",
                                                            "initial_pkt_number",
                                                            "is_valid",
                                                            "max_pkt_number",
                                                            "out_octets_encrypted_protected1",
                                                            "out_pkts_encrypted_protected",
                                                            "out_pkts_too_long",
                                                            "sa_id",
                                                            "sc_no") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa.TxSa, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa.TxSa, self).__setattr__(name, value)


                                        class XformParams(Entity):
                                            """
                                             Xform Params
                                            
                                            .. attribute:: aes_key_len
                                            
                                            	AES Key length
                                            	**type**\:  str
                                            
                                            .. attribute:: assoc_num
                                            
                                            	Association Number for egress
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: bgen_auth_key
                                            
                                            	TRUE to generate the authKey, so authKey in this struct not used                                  APM\_FALSE to use provided authKey
                                            	**type**\:  bool
                                            
                                            .. attribute:: crypt_algo
                                            
                                            	Cryptographic algo used
                                            	**type**\:  str
                                            
                                            .. attribute:: is_egress_tr
                                            
                                            	APM\_TRUE if this is Egress Transform record, APM\_FALSE otherwise
                                            	**type**\:  bool
                                            
                                            .. attribute:: is_seq_num64_bit
                                            
                                            	TRUE if Seq Num is 64\-bit, FALSE if it is 32\-bit
                                            	**type**\:  bool
                                            
                                            .. attribute:: replay_win_size
                                            
                                            	range of pkt nos considered valid
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'crypto-macsec-pl-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa.TxSa.XformParams, self).__init__()

                                                self.yang_name = "xform-params"
                                                self.yang_parent_name = "tx-sa"

                                                self.aes_key_len = YLeaf(YType.str, "aes-key-len")

                                                self.assoc_num = YLeaf(YType.uint8, "assoc-num")

                                                self.bgen_auth_key = YLeaf(YType.boolean, "bgen-auth-key")

                                                self.crypt_algo = YLeaf(YType.str, "crypt-algo")

                                                self.is_egress_tr = YLeaf(YType.boolean, "is-egress-tr")

                                                self.is_seq_num64_bit = YLeaf(YType.boolean, "is-seq-num64-bit")

                                                self.replay_win_size = YLeaf(YType.uint32, "replay-win-size")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("aes_key_len",
                                                                "assoc_num",
                                                                "bgen_auth_key",
                                                                "crypt_algo",
                                                                "is_egress_tr",
                                                                "is_seq_num64_bit",
                                                                "replay_win_size") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa.TxSa.XformParams, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa.TxSa.XformParams, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.aes_key_len.is_set or
                                                    self.assoc_num.is_set or
                                                    self.bgen_auth_key.is_set or
                                                    self.crypt_algo.is_set or
                                                    self.is_egress_tr.is_set or
                                                    self.is_seq_num64_bit.is_set or
                                                    self.replay_win_size.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.aes_key_len.yfilter != YFilter.not_set or
                                                    self.assoc_num.yfilter != YFilter.not_set or
                                                    self.bgen_auth_key.yfilter != YFilter.not_set or
                                                    self.crypt_algo.yfilter != YFilter.not_set or
                                                    self.is_egress_tr.yfilter != YFilter.not_set or
                                                    self.is_seq_num64_bit.yfilter != YFilter.not_set or
                                                    self.replay_win_size.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "xform-params" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.aes_key_len.is_set or self.aes_key_len.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.aes_key_len.get_name_leafdata())
                                                if (self.assoc_num.is_set or self.assoc_num.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.assoc_num.get_name_leafdata())
                                                if (self.bgen_auth_key.is_set or self.bgen_auth_key.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.bgen_auth_key.get_name_leafdata())
                                                if (self.crypt_algo.is_set or self.crypt_algo.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.crypt_algo.get_name_leafdata())
                                                if (self.is_egress_tr.is_set or self.is_egress_tr.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.is_egress_tr.get_name_leafdata())
                                                if (self.is_seq_num64_bit.is_set or self.is_seq_num64_bit.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.is_seq_num64_bit.get_name_leafdata())
                                                if (self.replay_win_size.is_set or self.replay_win_size.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.replay_win_size.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "aes-key-len" or name == "assoc-num" or name == "bgen-auth-key" or name == "crypt-algo" or name == "is-egress-tr" or name == "is-seq-num64-bit" or name == "replay-win-size"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "aes-key-len"):
                                                    self.aes_key_len = value
                                                    self.aes_key_len.value_namespace = name_space
                                                    self.aes_key_len.value_namespace_prefix = name_space_prefix
                                                if(value_path == "assoc-num"):
                                                    self.assoc_num = value
                                                    self.assoc_num.value_namespace = name_space
                                                    self.assoc_num.value_namespace_prefix = name_space_prefix
                                                if(value_path == "bgen-auth-key"):
                                                    self.bgen_auth_key = value
                                                    self.bgen_auth_key.value_namespace = name_space
                                                    self.bgen_auth_key.value_namespace_prefix = name_space_prefix
                                                if(value_path == "crypt-algo"):
                                                    self.crypt_algo = value
                                                    self.crypt_algo.value_namespace = name_space
                                                    self.crypt_algo.value_namespace_prefix = name_space_prefix
                                                if(value_path == "is-egress-tr"):
                                                    self.is_egress_tr = value
                                                    self.is_egress_tr.value_namespace = name_space
                                                    self.is_egress_tr.value_namespace_prefix = name_space_prefix
                                                if(value_path == "is-seq-num64-bit"):
                                                    self.is_seq_num64_bit = value
                                                    self.is_seq_num64_bit.value_namespace = name_space
                                                    self.is_seq_num64_bit.value_namespace_prefix = name_space_prefix
                                                if(value_path == "replay-win-size"):
                                                    self.replay_win_size = value
                                                    self.replay_win_size.value_namespace = name_space
                                                    self.replay_win_size.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            return (
                                                self.current_pkt_number.is_set or
                                                self.initial_pkt_number.is_set or
                                                self.is_valid.is_set or
                                                self.max_pkt_number.is_set or
                                                self.out_octets_encrypted_protected1.is_set or
                                                self.out_pkts_encrypted_protected.is_set or
                                                self.out_pkts_too_long.is_set or
                                                self.sa_id.is_set or
                                                self.sc_no.is_set or
                                                (self.xform_params is not None and self.xform_params.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.current_pkt_number.yfilter != YFilter.not_set or
                                                self.initial_pkt_number.yfilter != YFilter.not_set or
                                                self.is_valid.yfilter != YFilter.not_set or
                                                self.max_pkt_number.yfilter != YFilter.not_set or
                                                self.out_octets_encrypted_protected1.yfilter != YFilter.not_set or
                                                self.out_pkts_encrypted_protected.yfilter != YFilter.not_set or
                                                self.out_pkts_too_long.yfilter != YFilter.not_set or
                                                self.sa_id.yfilter != YFilter.not_set or
                                                self.sc_no.yfilter != YFilter.not_set or
                                                (self.xform_params is not None and self.xform_params.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "tx-sa" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.current_pkt_number.is_set or self.current_pkt_number.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.current_pkt_number.get_name_leafdata())
                                            if (self.initial_pkt_number.is_set or self.initial_pkt_number.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.initial_pkt_number.get_name_leafdata())
                                            if (self.is_valid.is_set or self.is_valid.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.is_valid.get_name_leafdata())
                                            if (self.max_pkt_number.is_set or self.max_pkt_number.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.max_pkt_number.get_name_leafdata())
                                            if (self.out_octets_encrypted_protected1.is_set or self.out_octets_encrypted_protected1.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.out_octets_encrypted_protected1.get_name_leafdata())
                                            if (self.out_pkts_encrypted_protected.is_set or self.out_pkts_encrypted_protected.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.out_pkts_encrypted_protected.get_name_leafdata())
                                            if (self.out_pkts_too_long.is_set or self.out_pkts_too_long.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.out_pkts_too_long.get_name_leafdata())
                                            if (self.sa_id.is_set or self.sa_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sa_id.get_name_leafdata())
                                            if (self.sc_no.is_set or self.sc_no.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sc_no.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "xform-params"):
                                                if (self.xform_params is None):
                                                    self.xform_params = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa.TxSa.XformParams()
                                                    self.xform_params.parent = self
                                                    self._children_name_map["xform_params"] = "xform-params"
                                                return self.xform_params

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "xform-params" or name == "current-pkt-number" or name == "initial-pkt-number" or name == "is-valid" or name == "max-pkt-number" or name == "out-octets-encrypted-protected1" or name == "out-pkts-encrypted-protected" or name == "out-pkts-too-long" or name == "sa-id" or name == "sc-no"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "current-pkt-number"):
                                                self.current_pkt_number = value
                                                self.current_pkt_number.value_namespace = name_space
                                                self.current_pkt_number.value_namespace_prefix = name_space_prefix
                                            if(value_path == "initial-pkt-number"):
                                                self.initial_pkt_number = value
                                                self.initial_pkt_number.value_namespace = name_space
                                                self.initial_pkt_number.value_namespace_prefix = name_space_prefix
                                            if(value_path == "is-valid"):
                                                self.is_valid = value
                                                self.is_valid.value_namespace = name_space
                                                self.is_valid.value_namespace_prefix = name_space_prefix
                                            if(value_path == "max-pkt-number"):
                                                self.max_pkt_number = value
                                                self.max_pkt_number.value_namespace = name_space
                                                self.max_pkt_number.value_namespace_prefix = name_space_prefix
                                            if(value_path == "out-octets-encrypted-protected1"):
                                                self.out_octets_encrypted_protected1 = value
                                                self.out_octets_encrypted_protected1.value_namespace = name_space
                                                self.out_octets_encrypted_protected1.value_namespace_prefix = name_space_prefix
                                            if(value_path == "out-pkts-encrypted-protected"):
                                                self.out_pkts_encrypted_protected = value
                                                self.out_pkts_encrypted_protected.value_namespace = name_space
                                                self.out_pkts_encrypted_protected.value_namespace_prefix = name_space_prefix
                                            if(value_path == "out-pkts-too-long"):
                                                self.out_pkts_too_long = value
                                                self.out_pkts_too_long.value_namespace = name_space
                                                self.out_pkts_too_long.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sa-id"):
                                                self.sa_id = value
                                                self.sa_id.value_namespace = name_space
                                                self.sa_id.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sc-no"):
                                                self.sc_no = value
                                                self.sc_no.value_namespace = name_space
                                                self.sc_no.value_namespace_prefix = name_space_prefix


                                    class RxSa(Entity):
                                        """
                                        Rx SA Details
                                        
                                        .. attribute:: in_octets_decrypted_validated1
                                        
                                        	octets1 decrypted/validated
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: in_octets_validated
                                        
                                        	octets validated
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: in_pkts_delayed
                                        
                                        	PN of packet outside replay window & validateFrames !strict
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: in_pkts_invalid
                                        
                                        	packet not valid & validateFrames !strict
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: in_pkts_late
                                        
                                        	PN of packet outside replay window & validateFrames strict
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: in_pkts_not_using_sa
                                        
                                        	packet assigned to SA not in use & validateFrames strict
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: in_pkts_not_valid
                                        
                                        	packet not valid & validateFrames strict
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: in_pkts_ok
                                        
                                        	packets with no error
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: in_pkts_unchecked
                                        
                                        	frame not valid & validateFrames disabled
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: in_pkts_unused_sa
                                        
                                        	packet assigned to SA not in use& validateFrames !strict
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: is_valid
                                        
                                        	Is structure valid
                                        	**type**\:  bool
                                        
                                        .. attribute:: sa_id
                                        
                                        	SA Index
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: sc_no
                                        
                                        	SC Number
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: xform_params
                                        
                                        	 Xform Params
                                        	**type**\:   :py:class:`XformParams <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa.RxSa.XformParams>`
                                        
                                        

                                        """

                                        _prefix = 'crypto-macsec-pl-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa.RxSa, self).__init__()

                                            self.yang_name = "rx-sa"
                                            self.yang_parent_name = "es200-sa"

                                            self.in_octets_decrypted_validated1 = YLeaf(YType.uint8, "in-octets-decrypted-validated1")

                                            self.in_octets_validated = YLeaf(YType.uint8, "in-octets-validated")

                                            self.in_pkts_delayed = YLeaf(YType.uint8, "in-pkts-delayed")

                                            self.in_pkts_invalid = YLeaf(YType.uint8, "in-pkts-invalid")

                                            self.in_pkts_late = YLeaf(YType.uint8, "in-pkts-late")

                                            self.in_pkts_not_using_sa = YLeaf(YType.uint8, "in-pkts-not-using-sa")

                                            self.in_pkts_not_valid = YLeaf(YType.uint8, "in-pkts-not-valid")

                                            self.in_pkts_ok = YLeaf(YType.uint8, "in-pkts-ok")

                                            self.in_pkts_unchecked = YLeaf(YType.uint8, "in-pkts-unchecked")

                                            self.in_pkts_unused_sa = YLeaf(YType.uint8, "in-pkts-unused-sa")

                                            self.is_valid = YLeaf(YType.boolean, "is-valid")

                                            self.sa_id = YLeaf(YType.uint8, "sa-id")

                                            self.sc_no = YLeaf(YType.uint32, "sc-no")

                                            self.xform_params = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa.RxSa.XformParams()
                                            self.xform_params.parent = self
                                            self._children_name_map["xform_params"] = "xform-params"
                                            self._children_yang_names.add("xform-params")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("in_octets_decrypted_validated1",
                                                            "in_octets_validated",
                                                            "in_pkts_delayed",
                                                            "in_pkts_invalid",
                                                            "in_pkts_late",
                                                            "in_pkts_not_using_sa",
                                                            "in_pkts_not_valid",
                                                            "in_pkts_ok",
                                                            "in_pkts_unchecked",
                                                            "in_pkts_unused_sa",
                                                            "is_valid",
                                                            "sa_id",
                                                            "sc_no") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa.RxSa, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa.RxSa, self).__setattr__(name, value)


                                        class XformParams(Entity):
                                            """
                                             Xform Params
                                            
                                            .. attribute:: aes_key_len
                                            
                                            	AES Key length
                                            	**type**\:  str
                                            
                                            .. attribute:: assoc_num
                                            
                                            	Association Number for egress
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: bgen_auth_key
                                            
                                            	TRUE to generate the authKey, so authKey in this struct not used                                  APM\_FALSE to use provided authKey
                                            	**type**\:  bool
                                            
                                            .. attribute:: crypt_algo
                                            
                                            	Cryptographic algo used
                                            	**type**\:  str
                                            
                                            .. attribute:: is_egress_tr
                                            
                                            	APM\_TRUE if this is Egress Transform record, APM\_FALSE otherwise
                                            	**type**\:  bool
                                            
                                            .. attribute:: is_seq_num64_bit
                                            
                                            	TRUE if Seq Num is 64\-bit, FALSE if it is 32\-bit
                                            	**type**\:  bool
                                            
                                            .. attribute:: replay_win_size
                                            
                                            	range of pkt nos considered valid
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'crypto-macsec-pl-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa.RxSa.XformParams, self).__init__()

                                                self.yang_name = "xform-params"
                                                self.yang_parent_name = "rx-sa"

                                                self.aes_key_len = YLeaf(YType.str, "aes-key-len")

                                                self.assoc_num = YLeaf(YType.uint8, "assoc-num")

                                                self.bgen_auth_key = YLeaf(YType.boolean, "bgen-auth-key")

                                                self.crypt_algo = YLeaf(YType.str, "crypt-algo")

                                                self.is_egress_tr = YLeaf(YType.boolean, "is-egress-tr")

                                                self.is_seq_num64_bit = YLeaf(YType.boolean, "is-seq-num64-bit")

                                                self.replay_win_size = YLeaf(YType.uint32, "replay-win-size")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("aes_key_len",
                                                                "assoc_num",
                                                                "bgen_auth_key",
                                                                "crypt_algo",
                                                                "is_egress_tr",
                                                                "is_seq_num64_bit",
                                                                "replay_win_size") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa.RxSa.XformParams, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa.RxSa.XformParams, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.aes_key_len.is_set or
                                                    self.assoc_num.is_set or
                                                    self.bgen_auth_key.is_set or
                                                    self.crypt_algo.is_set or
                                                    self.is_egress_tr.is_set or
                                                    self.is_seq_num64_bit.is_set or
                                                    self.replay_win_size.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.aes_key_len.yfilter != YFilter.not_set or
                                                    self.assoc_num.yfilter != YFilter.not_set or
                                                    self.bgen_auth_key.yfilter != YFilter.not_set or
                                                    self.crypt_algo.yfilter != YFilter.not_set or
                                                    self.is_egress_tr.yfilter != YFilter.not_set or
                                                    self.is_seq_num64_bit.yfilter != YFilter.not_set or
                                                    self.replay_win_size.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "xform-params" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.aes_key_len.is_set or self.aes_key_len.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.aes_key_len.get_name_leafdata())
                                                if (self.assoc_num.is_set or self.assoc_num.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.assoc_num.get_name_leafdata())
                                                if (self.bgen_auth_key.is_set or self.bgen_auth_key.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.bgen_auth_key.get_name_leafdata())
                                                if (self.crypt_algo.is_set or self.crypt_algo.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.crypt_algo.get_name_leafdata())
                                                if (self.is_egress_tr.is_set or self.is_egress_tr.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.is_egress_tr.get_name_leafdata())
                                                if (self.is_seq_num64_bit.is_set or self.is_seq_num64_bit.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.is_seq_num64_bit.get_name_leafdata())
                                                if (self.replay_win_size.is_set or self.replay_win_size.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.replay_win_size.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "aes-key-len" or name == "assoc-num" or name == "bgen-auth-key" or name == "crypt-algo" or name == "is-egress-tr" or name == "is-seq-num64-bit" or name == "replay-win-size"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "aes-key-len"):
                                                    self.aes_key_len = value
                                                    self.aes_key_len.value_namespace = name_space
                                                    self.aes_key_len.value_namespace_prefix = name_space_prefix
                                                if(value_path == "assoc-num"):
                                                    self.assoc_num = value
                                                    self.assoc_num.value_namespace = name_space
                                                    self.assoc_num.value_namespace_prefix = name_space_prefix
                                                if(value_path == "bgen-auth-key"):
                                                    self.bgen_auth_key = value
                                                    self.bgen_auth_key.value_namespace = name_space
                                                    self.bgen_auth_key.value_namespace_prefix = name_space_prefix
                                                if(value_path == "crypt-algo"):
                                                    self.crypt_algo = value
                                                    self.crypt_algo.value_namespace = name_space
                                                    self.crypt_algo.value_namespace_prefix = name_space_prefix
                                                if(value_path == "is-egress-tr"):
                                                    self.is_egress_tr = value
                                                    self.is_egress_tr.value_namespace = name_space
                                                    self.is_egress_tr.value_namespace_prefix = name_space_prefix
                                                if(value_path == "is-seq-num64-bit"):
                                                    self.is_seq_num64_bit = value
                                                    self.is_seq_num64_bit.value_namespace = name_space
                                                    self.is_seq_num64_bit.value_namespace_prefix = name_space_prefix
                                                if(value_path == "replay-win-size"):
                                                    self.replay_win_size = value
                                                    self.replay_win_size.value_namespace = name_space
                                                    self.replay_win_size.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            return (
                                                self.in_octets_decrypted_validated1.is_set or
                                                self.in_octets_validated.is_set or
                                                self.in_pkts_delayed.is_set or
                                                self.in_pkts_invalid.is_set or
                                                self.in_pkts_late.is_set or
                                                self.in_pkts_not_using_sa.is_set or
                                                self.in_pkts_not_valid.is_set or
                                                self.in_pkts_ok.is_set or
                                                self.in_pkts_unchecked.is_set or
                                                self.in_pkts_unused_sa.is_set or
                                                self.is_valid.is_set or
                                                self.sa_id.is_set or
                                                self.sc_no.is_set or
                                                (self.xform_params is not None and self.xform_params.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.in_octets_decrypted_validated1.yfilter != YFilter.not_set or
                                                self.in_octets_validated.yfilter != YFilter.not_set or
                                                self.in_pkts_delayed.yfilter != YFilter.not_set or
                                                self.in_pkts_invalid.yfilter != YFilter.not_set or
                                                self.in_pkts_late.yfilter != YFilter.not_set or
                                                self.in_pkts_not_using_sa.yfilter != YFilter.not_set or
                                                self.in_pkts_not_valid.yfilter != YFilter.not_set or
                                                self.in_pkts_ok.yfilter != YFilter.not_set or
                                                self.in_pkts_unchecked.yfilter != YFilter.not_set or
                                                self.in_pkts_unused_sa.yfilter != YFilter.not_set or
                                                self.is_valid.yfilter != YFilter.not_set or
                                                self.sa_id.yfilter != YFilter.not_set or
                                                self.sc_no.yfilter != YFilter.not_set or
                                                (self.xform_params is not None and self.xform_params.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "rx-sa" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.in_octets_decrypted_validated1.is_set or self.in_octets_decrypted_validated1.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.in_octets_decrypted_validated1.get_name_leafdata())
                                            if (self.in_octets_validated.is_set or self.in_octets_validated.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.in_octets_validated.get_name_leafdata())
                                            if (self.in_pkts_delayed.is_set or self.in_pkts_delayed.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.in_pkts_delayed.get_name_leafdata())
                                            if (self.in_pkts_invalid.is_set or self.in_pkts_invalid.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.in_pkts_invalid.get_name_leafdata())
                                            if (self.in_pkts_late.is_set or self.in_pkts_late.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.in_pkts_late.get_name_leafdata())
                                            if (self.in_pkts_not_using_sa.is_set or self.in_pkts_not_using_sa.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.in_pkts_not_using_sa.get_name_leafdata())
                                            if (self.in_pkts_not_valid.is_set or self.in_pkts_not_valid.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.in_pkts_not_valid.get_name_leafdata())
                                            if (self.in_pkts_ok.is_set or self.in_pkts_ok.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.in_pkts_ok.get_name_leafdata())
                                            if (self.in_pkts_unchecked.is_set or self.in_pkts_unchecked.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.in_pkts_unchecked.get_name_leafdata())
                                            if (self.in_pkts_unused_sa.is_set or self.in_pkts_unused_sa.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.in_pkts_unused_sa.get_name_leafdata())
                                            if (self.is_valid.is_set or self.is_valid.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.is_valid.get_name_leafdata())
                                            if (self.sa_id.is_set or self.sa_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sa_id.get_name_leafdata())
                                            if (self.sc_no.is_set or self.sc_no.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sc_no.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "xform-params"):
                                                if (self.xform_params is None):
                                                    self.xform_params = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa.RxSa.XformParams()
                                                    self.xform_params.parent = self
                                                    self._children_name_map["xform_params"] = "xform-params"
                                                return self.xform_params

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "xform-params" or name == "in-octets-decrypted-validated1" or name == "in-octets-validated" or name == "in-pkts-delayed" or name == "in-pkts-invalid" or name == "in-pkts-late" or name == "in-pkts-not-using-sa" or name == "in-pkts-not-valid" or name == "in-pkts-ok" or name == "in-pkts-unchecked" or name == "in-pkts-unused-sa" or name == "is-valid" or name == "sa-id" or name == "sc-no"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "in-octets-decrypted-validated1"):
                                                self.in_octets_decrypted_validated1 = value
                                                self.in_octets_decrypted_validated1.value_namespace = name_space
                                                self.in_octets_decrypted_validated1.value_namespace_prefix = name_space_prefix
                                            if(value_path == "in-octets-validated"):
                                                self.in_octets_validated = value
                                                self.in_octets_validated.value_namespace = name_space
                                                self.in_octets_validated.value_namespace_prefix = name_space_prefix
                                            if(value_path == "in-pkts-delayed"):
                                                self.in_pkts_delayed = value
                                                self.in_pkts_delayed.value_namespace = name_space
                                                self.in_pkts_delayed.value_namespace_prefix = name_space_prefix
                                            if(value_path == "in-pkts-invalid"):
                                                self.in_pkts_invalid = value
                                                self.in_pkts_invalid.value_namespace = name_space
                                                self.in_pkts_invalid.value_namespace_prefix = name_space_prefix
                                            if(value_path == "in-pkts-late"):
                                                self.in_pkts_late = value
                                                self.in_pkts_late.value_namespace = name_space
                                                self.in_pkts_late.value_namespace_prefix = name_space_prefix
                                            if(value_path == "in-pkts-not-using-sa"):
                                                self.in_pkts_not_using_sa = value
                                                self.in_pkts_not_using_sa.value_namespace = name_space
                                                self.in_pkts_not_using_sa.value_namespace_prefix = name_space_prefix
                                            if(value_path == "in-pkts-not-valid"):
                                                self.in_pkts_not_valid = value
                                                self.in_pkts_not_valid.value_namespace = name_space
                                                self.in_pkts_not_valid.value_namespace_prefix = name_space_prefix
                                            if(value_path == "in-pkts-ok"):
                                                self.in_pkts_ok = value
                                                self.in_pkts_ok.value_namespace = name_space
                                                self.in_pkts_ok.value_namespace_prefix = name_space_prefix
                                            if(value_path == "in-pkts-unchecked"):
                                                self.in_pkts_unchecked = value
                                                self.in_pkts_unchecked.value_namespace = name_space
                                                self.in_pkts_unchecked.value_namespace_prefix = name_space_prefix
                                            if(value_path == "in-pkts-unused-sa"):
                                                self.in_pkts_unused_sa = value
                                                self.in_pkts_unused_sa.value_namespace = name_space
                                                self.in_pkts_unused_sa.value_namespace_prefix = name_space_prefix
                                            if(value_path == "is-valid"):
                                                self.is_valid = value
                                                self.is_valid.value_namespace = name_space
                                                self.is_valid.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sa-id"):
                                                self.sa_id = value
                                                self.sa_id.value_namespace = name_space
                                                self.sa_id.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sc-no"):
                                                self.sc_no = value
                                                self.sc_no.value_namespace = name_space
                                                self.sc_no.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        for c in self.rx_sa:
                                            if (c.has_data()):
                                                return True
                                        return (self.tx_sa is not None and self.tx_sa.has_data())

                                    def has_operation(self):
                                        for c in self.rx_sa:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            (self.tx_sa is not None and self.tx_sa.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "es200-sa" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "rx-sa"):
                                            for c in self.rx_sa:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa.RxSa()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.rx_sa.append(c)
                                            return c

                                        if (child_yang_name == "tx-sa"):
                                            if (self.tx_sa is None):
                                                self.tx_sa = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa.TxSa()
                                                self.tx_sa.parent = self
                                                self._children_name_map["tx_sa"] = "tx-sa"
                                            return self.tx_sa

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "rx-sa" or name == "tx-sa"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        pass

                                def has_data(self):
                                    return (
                                        self.type.is_set or
                                        (self.es200_sa is not None and self.es200_sa.has_data()) or
                                        (self.msfpga_sa is not None and self.msfpga_sa.has_data()) or
                                        (self.xlfpga_sa is not None and self.xlfpga_sa.has_data()))

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.type.yfilter != YFilter.not_set or
                                        (self.es200_sa is not None and self.es200_sa.has_operation()) or
                                        (self.msfpga_sa is not None and self.msfpga_sa.has_operation()) or
                                        (self.xlfpga_sa is not None and self.xlfpga_sa.has_operation()))

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ext" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.type.is_set or self.type.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.type.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "es200-sa"):
                                        if (self.es200_sa is None):
                                            self.es200_sa = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.Es200Sa()
                                            self.es200_sa.parent = self
                                            self._children_name_map["es200_sa"] = "es200-sa"
                                        return self.es200_sa

                                    if (child_yang_name == "msfpga-sa"):
                                        if (self.msfpga_sa is None):
                                            self.msfpga_sa = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.MsfpgaSa()
                                            self.msfpga_sa.parent = self
                                            self._children_name_map["msfpga_sa"] = "msfpga-sa"
                                        return self.msfpga_sa

                                    if (child_yang_name == "xlfpga-sa"):
                                        if (self.xlfpga_sa is None):
                                            self.xlfpga_sa = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext.XlfpgaSa()
                                            self.xlfpga_sa.parent = self
                                            self._children_name_map["xlfpga_sa"] = "xlfpga-sa"
                                        return self.xlfpga_sa

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "es200-sa" or name == "msfpga-sa" or name == "xlfpga-sa" or name == "type"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "type"):
                                        self.type = value
                                        self.type.value_namespace = name_space
                                        self.type.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    self.sa_id.is_set or
                                    (self.ext is not None and self.ext.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.sa_id.yfilter != YFilter.not_set or
                                    (self.ext is not None and self.ext.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "hw-sa" + "[sa-id='" + self.sa_id.get() + "']" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.sa_id.is_set or self.sa_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.sa_id.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ext"):
                                    if (self.ext is None):
                                        self.ext = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa.Ext()
                                        self.ext.parent = self
                                        self._children_name_map["ext"] = "ext"
                                    return self.ext

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ext" or name == "sa-id"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "sa-id"):
                                    self.sa_id = value
                                    self.sa_id.value_namespace = name_space
                                    self.sa_id.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.hw_sa:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.hw_sa:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "hw-sas" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "hw-sa"):
                                for c in self.hw_sa:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas.HwSa()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.hw_sa.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "hw-sa"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class HwFlowS(Entity):
                        """
                        Table of Hardware Flows
                        
                        .. attribute:: hw_flow
                        
                        	Hardware Flow
                        	**type**\: list of    :py:class:`HwFlow <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow>`
                        
                        

                        """

                        _prefix = 'crypto-macsec-pl-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS, self).__init__()

                            self.yang_name = "hw-flow-s"
                            self.yang_parent_name = "interface"

                            self.hw_flow = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS, self).__setattr__(name, value)


                        class HwFlow(Entity):
                            """
                            Hardware Flow
                            
                            .. attribute:: flow_id  <key>
                            
                            	FLOW ID
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: ext
                            
                            	ext
                            	**type**\:   :py:class:`Ext <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext>`
                            
                            

                            """

                            _prefix = 'crypto-macsec-pl-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow, self).__init__()

                                self.yang_name = "hw-flow"
                                self.yang_parent_name = "hw-flow-s"

                                self.flow_id = YLeaf(YType.int32, "flow-id")

                                self.ext = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext()
                                self.ext.parent = self
                                self._children_name_map["ext"] = "ext"
                                self._children_yang_names.add("ext")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("flow_id") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow, self).__setattr__(name, value)


                            class Ext(Entity):
                                """
                                ext
                                
                                .. attribute:: es200_flow
                                
                                	ES200 Flow Information
                                	**type**\:   :py:class:`Es200Flow <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.Es200Flow>`
                                
                                .. attribute:: msfpga_flow
                                
                                	MSFPGA Flow Information
                                	**type**\:   :py:class:`MsfpgaFlow <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.MsfpgaFlow>`
                                
                                .. attribute:: type
                                
                                	type
                                	**type**\:   :py:class:`MacsecCard <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecCard>`
                                
                                

                                """

                                _prefix = 'crypto-macsec-pl-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext, self).__init__()

                                    self.yang_name = "ext"
                                    self.yang_parent_name = "hw-flow"

                                    self.type = YLeaf(YType.enumeration, "type")

                                    self.es200_flow = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.Es200Flow()
                                    self.es200_flow.parent = self
                                    self._children_name_map["es200_flow"] = "es200-flow"
                                    self._children_yang_names.add("es200-flow")

                                    self.msfpga_flow = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.MsfpgaFlow()
                                    self.msfpga_flow.parent = self
                                    self._children_name_map["msfpga_flow"] = "msfpga-flow"
                                    self._children_yang_names.add("msfpga-flow")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("type") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext, self).__setattr__(name, value)


                                class MsfpgaFlow(Entity):
                                    """
                                    MSFPGA Flow Information
                                    
                                    .. attribute:: rx_flow
                                    
                                    	Rx Flow Details
                                    	**type**\:   :py:class:`RxFlow <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.MsfpgaFlow.RxFlow>`
                                    
                                    .. attribute:: tx_flow
                                    
                                    	Tx Flow Details
                                    	**type**\:   :py:class:`TxFlow <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.MsfpgaFlow.TxFlow>`
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.MsfpgaFlow, self).__init__()

                                        self.yang_name = "msfpga-flow"
                                        self.yang_parent_name = "ext"

                                        self.rx_flow = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.MsfpgaFlow.RxFlow()
                                        self.rx_flow.parent = self
                                        self._children_name_map["rx_flow"] = "rx-flow"
                                        self._children_yang_names.add("rx-flow")

                                        self.tx_flow = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.MsfpgaFlow.TxFlow()
                                        self.tx_flow.parent = self
                                        self._children_name_map["tx_flow"] = "tx-flow"
                                        self._children_yang_names.add("tx-flow")


                                    class TxFlow(Entity):
                                        """
                                        Tx Flow Details
                                        
                                        .. attribute:: action
                                        
                                        	Action
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: ctrl_check
                                        
                                        	Ctrl Pkt ChkEn
                                        	**type**\:  bool
                                        
                                        .. attribute:: dmac_inuse
                                        
                                        	If MAC DA in Use
                                        	**type**\:  bool
                                        
                                        .. attribute:: ethertype
                                        
                                        	Ether Type
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: flow_id
                                        
                                        	Flow Index
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: in_use
                                        
                                        	In Use
                                        	**type**\:  bool
                                        
                                        .. attribute:: inner_vlan
                                        
                                        	Inner VLAN ID
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: inner_vlan_tpid
                                        
                                        	Inner Vlan TPID
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: inner_vlan_up
                                        
                                        	Inner Vlan UserPri
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: is_ctrl_pkt
                                        
                                        	Is Control Pkt
                                        	**type**\:  bool
                                        
                                        .. attribute:: is_egress
                                        
                                        	rx\_tx direction
                                        	**type**\:  bool
                                        
                                        .. attribute:: macda
                                        
                                        	MAC DA
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: macsa
                                        
                                        	MAC SA
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: match_bad_tag
                                        
                                        	Match Bad Tag
                                        	**type**\:  bool
                                        
                                        .. attribute:: match_kay_tag
                                        
                                        	MatchKaYTag
                                        	**type**\:  bool
                                        
                                        .. attribute:: match_pri
                                        
                                        	Match Priority
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: match_tagged
                                        
                                        	MatchTagged
                                        	**type**\:  bool
                                        
                                        .. attribute:: match_untagged
                                        
                                        	MatchUntagged
                                        	**type**\:  bool
                                        
                                        .. attribute:: outer_vlan
                                        
                                        	Outer VLAN ID
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: outer_vlan_tpid
                                        
                                        	Outer Vlan TPID
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: outer_vlan_up
                                        
                                        	Outer Vlan UserPri
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: sai
                                        
                                        	SAI
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: sci
                                        
                                        	SCI
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: sci_inuse
                                        
                                        	If SCI in use
                                        	**type**\:  bool
                                        
                                        .. attribute:: smac_inuse
                                        
                                        	If MAC SA in Use
                                        	**type**\:  bool
                                        
                                        .. attribute:: source_port
                                        
                                        	Source Port
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: source_port_chk
                                        
                                        	Source Port ChkEn
                                        	**type**\:  bool
                                        
                                        .. attribute:: tci
                                        
                                        	TCI E
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: tci_an
                                        
                                        	TCI AN
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: tci_an_chk
                                        
                                        	TciAnChkEn
                                        	**type**\:  bool
                                        
                                        .. attribute:: tci_c
                                        
                                        	TCI C
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: tci_chk
                                        
                                        	TciChkEn
                                        	**type**\:  bool
                                        
                                        .. attribute:: tci_e_xr
                                        
                                        	TCI ES
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: tci_sc
                                        
                                        	TCI SC
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: tci_scb
                                        
                                        	TCI SCB
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: tci_v
                                        
                                        	TCI V
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: valid
                                        
                                        	Flow Validity
                                        	**type**\:  bool
                                        
                                        

                                        """

                                        _prefix = 'crypto-macsec-pl-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.MsfpgaFlow.TxFlow, self).__init__()

                                            self.yang_name = "tx-flow"
                                            self.yang_parent_name = "msfpga-flow"

                                            self.action = YLeaf(YType.uint8, "action")

                                            self.ctrl_check = YLeaf(YType.boolean, "ctrl-check")

                                            self.dmac_inuse = YLeaf(YType.boolean, "dmac-inuse")

                                            self.ethertype = YLeaf(YType.uint16, "ethertype")

                                            self.flow_id = YLeaf(YType.uint8, "flow-id")

                                            self.in_use = YLeaf(YType.boolean, "in-use")

                                            self.inner_vlan = YLeaf(YType.uint16, "inner-vlan")

                                            self.inner_vlan_tpid = YLeaf(YType.uint16, "inner-vlan-tpid")

                                            self.inner_vlan_up = YLeaf(YType.uint8, "inner-vlan-up")

                                            self.is_ctrl_pkt = YLeaf(YType.boolean, "is-ctrl-pkt")

                                            self.is_egress = YLeaf(YType.boolean, "is-egress")

                                            self.macda = YLeafList(YType.uint8, "macda")

                                            self.macsa = YLeafList(YType.uint8, "macsa")

                                            self.match_bad_tag = YLeaf(YType.boolean, "match-bad-tag")

                                            self.match_kay_tag = YLeaf(YType.boolean, "match-kay-tag")

                                            self.match_pri = YLeaf(YType.uint8, "match-pri")

                                            self.match_tagged = YLeaf(YType.boolean, "match-tagged")

                                            self.match_untagged = YLeaf(YType.boolean, "match-untagged")

                                            self.outer_vlan = YLeaf(YType.uint16, "outer-vlan")

                                            self.outer_vlan_tpid = YLeaf(YType.uint16, "outer-vlan-tpid")

                                            self.outer_vlan_up = YLeaf(YType.uint8, "outer-vlan-up")

                                            self.sai = YLeaf(YType.uint32, "sai")

                                            self.sci = YLeaf(YType.uint64, "sci")

                                            self.sci_inuse = YLeaf(YType.boolean, "sci-inuse")

                                            self.smac_inuse = YLeaf(YType.boolean, "smac-inuse")

                                            self.source_port = YLeaf(YType.uint32, "source-port")

                                            self.source_port_chk = YLeaf(YType.boolean, "source-port-chk")

                                            self.tci = YLeaf(YType.uint8, "tci")

                                            self.tci_an = YLeaf(YType.uint8, "tci-an")

                                            self.tci_an_chk = YLeaf(YType.boolean, "tci-an-chk")

                                            self.tci_c = YLeaf(YType.uint8, "tci-c")

                                            self.tci_chk = YLeaf(YType.boolean, "tci-chk")

                                            self.tci_e_xr = YLeaf(YType.uint8, "tci-e-xr")

                                            self.tci_sc = YLeaf(YType.uint8, "tci-sc")

                                            self.tci_scb = YLeaf(YType.uint8, "tci-scb")

                                            self.tci_v = YLeaf(YType.uint8, "tci-v")

                                            self.valid = YLeaf(YType.boolean, "valid")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("action",
                                                            "ctrl_check",
                                                            "dmac_inuse",
                                                            "ethertype",
                                                            "flow_id",
                                                            "in_use",
                                                            "inner_vlan",
                                                            "inner_vlan_tpid",
                                                            "inner_vlan_up",
                                                            "is_ctrl_pkt",
                                                            "is_egress",
                                                            "macda",
                                                            "macsa",
                                                            "match_bad_tag",
                                                            "match_kay_tag",
                                                            "match_pri",
                                                            "match_tagged",
                                                            "match_untagged",
                                                            "outer_vlan",
                                                            "outer_vlan_tpid",
                                                            "outer_vlan_up",
                                                            "sai",
                                                            "sci",
                                                            "sci_inuse",
                                                            "smac_inuse",
                                                            "source_port",
                                                            "source_port_chk",
                                                            "tci",
                                                            "tci_an",
                                                            "tci_an_chk",
                                                            "tci_c",
                                                            "tci_chk",
                                                            "tci_e_xr",
                                                            "tci_sc",
                                                            "tci_scb",
                                                            "tci_v",
                                                            "valid") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.MsfpgaFlow.TxFlow, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.MsfpgaFlow.TxFlow, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.macda.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            for leaf in self.macsa.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.action.is_set or
                                                self.ctrl_check.is_set or
                                                self.dmac_inuse.is_set or
                                                self.ethertype.is_set or
                                                self.flow_id.is_set or
                                                self.in_use.is_set or
                                                self.inner_vlan.is_set or
                                                self.inner_vlan_tpid.is_set or
                                                self.inner_vlan_up.is_set or
                                                self.is_ctrl_pkt.is_set or
                                                self.is_egress.is_set or
                                                self.match_bad_tag.is_set or
                                                self.match_kay_tag.is_set or
                                                self.match_pri.is_set or
                                                self.match_tagged.is_set or
                                                self.match_untagged.is_set or
                                                self.outer_vlan.is_set or
                                                self.outer_vlan_tpid.is_set or
                                                self.outer_vlan_up.is_set or
                                                self.sai.is_set or
                                                self.sci.is_set or
                                                self.sci_inuse.is_set or
                                                self.smac_inuse.is_set or
                                                self.source_port.is_set or
                                                self.source_port_chk.is_set or
                                                self.tci.is_set or
                                                self.tci_an.is_set or
                                                self.tci_an_chk.is_set or
                                                self.tci_c.is_set or
                                                self.tci_chk.is_set or
                                                self.tci_e_xr.is_set or
                                                self.tci_sc.is_set or
                                                self.tci_scb.is_set or
                                                self.tci_v.is_set or
                                                self.valid.is_set)

                                        def has_operation(self):
                                            for leaf in self.macda.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            for leaf in self.macsa.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.action.yfilter != YFilter.not_set or
                                                self.ctrl_check.yfilter != YFilter.not_set or
                                                self.dmac_inuse.yfilter != YFilter.not_set or
                                                self.ethertype.yfilter != YFilter.not_set or
                                                self.flow_id.yfilter != YFilter.not_set or
                                                self.in_use.yfilter != YFilter.not_set or
                                                self.inner_vlan.yfilter != YFilter.not_set or
                                                self.inner_vlan_tpid.yfilter != YFilter.not_set or
                                                self.inner_vlan_up.yfilter != YFilter.not_set or
                                                self.is_ctrl_pkt.yfilter != YFilter.not_set or
                                                self.is_egress.yfilter != YFilter.not_set or
                                                self.macda.yfilter != YFilter.not_set or
                                                self.macsa.yfilter != YFilter.not_set or
                                                self.match_bad_tag.yfilter != YFilter.not_set or
                                                self.match_kay_tag.yfilter != YFilter.not_set or
                                                self.match_pri.yfilter != YFilter.not_set or
                                                self.match_tagged.yfilter != YFilter.not_set or
                                                self.match_untagged.yfilter != YFilter.not_set or
                                                self.outer_vlan.yfilter != YFilter.not_set or
                                                self.outer_vlan_tpid.yfilter != YFilter.not_set or
                                                self.outer_vlan_up.yfilter != YFilter.not_set or
                                                self.sai.yfilter != YFilter.not_set or
                                                self.sci.yfilter != YFilter.not_set or
                                                self.sci_inuse.yfilter != YFilter.not_set or
                                                self.smac_inuse.yfilter != YFilter.not_set or
                                                self.source_port.yfilter != YFilter.not_set or
                                                self.source_port_chk.yfilter != YFilter.not_set or
                                                self.tci.yfilter != YFilter.not_set or
                                                self.tci_an.yfilter != YFilter.not_set or
                                                self.tci_an_chk.yfilter != YFilter.not_set or
                                                self.tci_c.yfilter != YFilter.not_set or
                                                self.tci_chk.yfilter != YFilter.not_set or
                                                self.tci_e_xr.yfilter != YFilter.not_set or
                                                self.tci_sc.yfilter != YFilter.not_set or
                                                self.tci_scb.yfilter != YFilter.not_set or
                                                self.tci_v.yfilter != YFilter.not_set or
                                                self.valid.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "tx-flow" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.action.is_set or self.action.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.action.get_name_leafdata())
                                            if (self.ctrl_check.is_set or self.ctrl_check.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.ctrl_check.get_name_leafdata())
                                            if (self.dmac_inuse.is_set or self.dmac_inuse.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.dmac_inuse.get_name_leafdata())
                                            if (self.ethertype.is_set or self.ethertype.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.ethertype.get_name_leafdata())
                                            if (self.flow_id.is_set or self.flow_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.flow_id.get_name_leafdata())
                                            if (self.in_use.is_set or self.in_use.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.in_use.get_name_leafdata())
                                            if (self.inner_vlan.is_set or self.inner_vlan.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.inner_vlan.get_name_leafdata())
                                            if (self.inner_vlan_tpid.is_set or self.inner_vlan_tpid.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.inner_vlan_tpid.get_name_leafdata())
                                            if (self.inner_vlan_up.is_set or self.inner_vlan_up.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.inner_vlan_up.get_name_leafdata())
                                            if (self.is_ctrl_pkt.is_set or self.is_ctrl_pkt.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.is_ctrl_pkt.get_name_leafdata())
                                            if (self.is_egress.is_set or self.is_egress.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.is_egress.get_name_leafdata())
                                            if (self.match_bad_tag.is_set or self.match_bad_tag.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.match_bad_tag.get_name_leafdata())
                                            if (self.match_kay_tag.is_set or self.match_kay_tag.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.match_kay_tag.get_name_leafdata())
                                            if (self.match_pri.is_set or self.match_pri.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.match_pri.get_name_leafdata())
                                            if (self.match_tagged.is_set or self.match_tagged.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.match_tagged.get_name_leafdata())
                                            if (self.match_untagged.is_set or self.match_untagged.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.match_untagged.get_name_leafdata())
                                            if (self.outer_vlan.is_set or self.outer_vlan.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.outer_vlan.get_name_leafdata())
                                            if (self.outer_vlan_tpid.is_set or self.outer_vlan_tpid.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.outer_vlan_tpid.get_name_leafdata())
                                            if (self.outer_vlan_up.is_set or self.outer_vlan_up.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.outer_vlan_up.get_name_leafdata())
                                            if (self.sai.is_set or self.sai.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sai.get_name_leafdata())
                                            if (self.sci.is_set or self.sci.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sci.get_name_leafdata())
                                            if (self.sci_inuse.is_set or self.sci_inuse.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sci_inuse.get_name_leafdata())
                                            if (self.smac_inuse.is_set or self.smac_inuse.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.smac_inuse.get_name_leafdata())
                                            if (self.source_port.is_set or self.source_port.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.source_port.get_name_leafdata())
                                            if (self.source_port_chk.is_set or self.source_port_chk.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.source_port_chk.get_name_leafdata())
                                            if (self.tci.is_set or self.tci.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci.get_name_leafdata())
                                            if (self.tci_an.is_set or self.tci_an.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_an.get_name_leafdata())
                                            if (self.tci_an_chk.is_set or self.tci_an_chk.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_an_chk.get_name_leafdata())
                                            if (self.tci_c.is_set or self.tci_c.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_c.get_name_leafdata())
                                            if (self.tci_chk.is_set or self.tci_chk.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_chk.get_name_leafdata())
                                            if (self.tci_e_xr.is_set or self.tci_e_xr.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_e_xr.get_name_leafdata())
                                            if (self.tci_sc.is_set or self.tci_sc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_sc.get_name_leafdata())
                                            if (self.tci_scb.is_set or self.tci_scb.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_scb.get_name_leafdata())
                                            if (self.tci_v.is_set or self.tci_v.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_v.get_name_leafdata())
                                            if (self.valid.is_set or self.valid.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.valid.get_name_leafdata())

                                            leaf_name_data.extend(self.macda.get_name_leafdata())

                                            leaf_name_data.extend(self.macsa.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "action" or name == "ctrl-check" or name == "dmac-inuse" or name == "ethertype" or name == "flow-id" or name == "in-use" or name == "inner-vlan" or name == "inner-vlan-tpid" or name == "inner-vlan-up" or name == "is-ctrl-pkt" or name == "is-egress" or name == "macda" or name == "macsa" or name == "match-bad-tag" or name == "match-kay-tag" or name == "match-pri" or name == "match-tagged" or name == "match-untagged" or name == "outer-vlan" or name == "outer-vlan-tpid" or name == "outer-vlan-up" or name == "sai" or name == "sci" or name == "sci-inuse" or name == "smac-inuse" or name == "source-port" or name == "source-port-chk" or name == "tci" or name == "tci-an" or name == "tci-an-chk" or name == "tci-c" or name == "tci-chk" or name == "tci-e-xr" or name == "tci-sc" or name == "tci-scb" or name == "tci-v" or name == "valid"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "action"):
                                                self.action = value
                                                self.action.value_namespace = name_space
                                                self.action.value_namespace_prefix = name_space_prefix
                                            if(value_path == "ctrl-check"):
                                                self.ctrl_check = value
                                                self.ctrl_check.value_namespace = name_space
                                                self.ctrl_check.value_namespace_prefix = name_space_prefix
                                            if(value_path == "dmac-inuse"):
                                                self.dmac_inuse = value
                                                self.dmac_inuse.value_namespace = name_space
                                                self.dmac_inuse.value_namespace_prefix = name_space_prefix
                                            if(value_path == "ethertype"):
                                                self.ethertype = value
                                                self.ethertype.value_namespace = name_space
                                                self.ethertype.value_namespace_prefix = name_space_prefix
                                            if(value_path == "flow-id"):
                                                self.flow_id = value
                                                self.flow_id.value_namespace = name_space
                                                self.flow_id.value_namespace_prefix = name_space_prefix
                                            if(value_path == "in-use"):
                                                self.in_use = value
                                                self.in_use.value_namespace = name_space
                                                self.in_use.value_namespace_prefix = name_space_prefix
                                            if(value_path == "inner-vlan"):
                                                self.inner_vlan = value
                                                self.inner_vlan.value_namespace = name_space
                                                self.inner_vlan.value_namespace_prefix = name_space_prefix
                                            if(value_path == "inner-vlan-tpid"):
                                                self.inner_vlan_tpid = value
                                                self.inner_vlan_tpid.value_namespace = name_space
                                                self.inner_vlan_tpid.value_namespace_prefix = name_space_prefix
                                            if(value_path == "inner-vlan-up"):
                                                self.inner_vlan_up = value
                                                self.inner_vlan_up.value_namespace = name_space
                                                self.inner_vlan_up.value_namespace_prefix = name_space_prefix
                                            if(value_path == "is-ctrl-pkt"):
                                                self.is_ctrl_pkt = value
                                                self.is_ctrl_pkt.value_namespace = name_space
                                                self.is_ctrl_pkt.value_namespace_prefix = name_space_prefix
                                            if(value_path == "is-egress"):
                                                self.is_egress = value
                                                self.is_egress.value_namespace = name_space
                                                self.is_egress.value_namespace_prefix = name_space_prefix
                                            if(value_path == "macda"):
                                                self.macda.append(value)
                                            if(value_path == "macsa"):
                                                self.macsa.append(value)
                                            if(value_path == "match-bad-tag"):
                                                self.match_bad_tag = value
                                                self.match_bad_tag.value_namespace = name_space
                                                self.match_bad_tag.value_namespace_prefix = name_space_prefix
                                            if(value_path == "match-kay-tag"):
                                                self.match_kay_tag = value
                                                self.match_kay_tag.value_namespace = name_space
                                                self.match_kay_tag.value_namespace_prefix = name_space_prefix
                                            if(value_path == "match-pri"):
                                                self.match_pri = value
                                                self.match_pri.value_namespace = name_space
                                                self.match_pri.value_namespace_prefix = name_space_prefix
                                            if(value_path == "match-tagged"):
                                                self.match_tagged = value
                                                self.match_tagged.value_namespace = name_space
                                                self.match_tagged.value_namespace_prefix = name_space_prefix
                                            if(value_path == "match-untagged"):
                                                self.match_untagged = value
                                                self.match_untagged.value_namespace = name_space
                                                self.match_untagged.value_namespace_prefix = name_space_prefix
                                            if(value_path == "outer-vlan"):
                                                self.outer_vlan = value
                                                self.outer_vlan.value_namespace = name_space
                                                self.outer_vlan.value_namespace_prefix = name_space_prefix
                                            if(value_path == "outer-vlan-tpid"):
                                                self.outer_vlan_tpid = value
                                                self.outer_vlan_tpid.value_namespace = name_space
                                                self.outer_vlan_tpid.value_namespace_prefix = name_space_prefix
                                            if(value_path == "outer-vlan-up"):
                                                self.outer_vlan_up = value
                                                self.outer_vlan_up.value_namespace = name_space
                                                self.outer_vlan_up.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sai"):
                                                self.sai = value
                                                self.sai.value_namespace = name_space
                                                self.sai.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sci"):
                                                self.sci = value
                                                self.sci.value_namespace = name_space
                                                self.sci.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sci-inuse"):
                                                self.sci_inuse = value
                                                self.sci_inuse.value_namespace = name_space
                                                self.sci_inuse.value_namespace_prefix = name_space_prefix
                                            if(value_path == "smac-inuse"):
                                                self.smac_inuse = value
                                                self.smac_inuse.value_namespace = name_space
                                                self.smac_inuse.value_namespace_prefix = name_space_prefix
                                            if(value_path == "source-port"):
                                                self.source_port = value
                                                self.source_port.value_namespace = name_space
                                                self.source_port.value_namespace_prefix = name_space_prefix
                                            if(value_path == "source-port-chk"):
                                                self.source_port_chk = value
                                                self.source_port_chk.value_namespace = name_space
                                                self.source_port_chk.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci"):
                                                self.tci = value
                                                self.tci.value_namespace = name_space
                                                self.tci.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-an"):
                                                self.tci_an = value
                                                self.tci_an.value_namespace = name_space
                                                self.tci_an.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-an-chk"):
                                                self.tci_an_chk = value
                                                self.tci_an_chk.value_namespace = name_space
                                                self.tci_an_chk.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-c"):
                                                self.tci_c = value
                                                self.tci_c.value_namespace = name_space
                                                self.tci_c.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-chk"):
                                                self.tci_chk = value
                                                self.tci_chk.value_namespace = name_space
                                                self.tci_chk.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-e-xr"):
                                                self.tci_e_xr = value
                                                self.tci_e_xr.value_namespace = name_space
                                                self.tci_e_xr.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-sc"):
                                                self.tci_sc = value
                                                self.tci_sc.value_namespace = name_space
                                                self.tci_sc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-scb"):
                                                self.tci_scb = value
                                                self.tci_scb.value_namespace = name_space
                                                self.tci_scb.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-v"):
                                                self.tci_v = value
                                                self.tci_v.value_namespace = name_space
                                                self.tci_v.value_namespace_prefix = name_space_prefix
                                            if(value_path == "valid"):
                                                self.valid = value
                                                self.valid.value_namespace = name_space
                                                self.valid.value_namespace_prefix = name_space_prefix


                                    class RxFlow(Entity):
                                        """
                                        Rx Flow Details
                                        
                                        .. attribute:: action
                                        
                                        	Action
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: ctrl_check
                                        
                                        	Ctrl Pkt ChkEn
                                        	**type**\:  bool
                                        
                                        .. attribute:: dmac_inuse
                                        
                                        	If MAC DA in Use
                                        	**type**\:  bool
                                        
                                        .. attribute:: ethertype
                                        
                                        	Ether Type
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: flow_id
                                        
                                        	Flow Index
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: in_use
                                        
                                        	In Use
                                        	**type**\:  bool
                                        
                                        .. attribute:: inner_vlan
                                        
                                        	Inner VLAN ID
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: inner_vlan_tpid
                                        
                                        	Inner Vlan TPID
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: inner_vlan_up
                                        
                                        	Inner Vlan UserPri
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: is_ctrl_pkt
                                        
                                        	Is Control Pkt
                                        	**type**\:  bool
                                        
                                        .. attribute:: is_egress
                                        
                                        	rx\_tx direction
                                        	**type**\:  bool
                                        
                                        .. attribute:: macda
                                        
                                        	MAC DA
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: macsa
                                        
                                        	MAC SA
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: match_bad_tag
                                        
                                        	Match Bad Tag
                                        	**type**\:  bool
                                        
                                        .. attribute:: match_kay_tag
                                        
                                        	MatchKaYTag
                                        	**type**\:  bool
                                        
                                        .. attribute:: match_pri
                                        
                                        	Match Priority
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: match_tagged
                                        
                                        	MatchTagged
                                        	**type**\:  bool
                                        
                                        .. attribute:: match_untagged
                                        
                                        	MatchUntagged
                                        	**type**\:  bool
                                        
                                        .. attribute:: outer_vlan
                                        
                                        	Outer VLAN ID
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: outer_vlan_tpid
                                        
                                        	Outer Vlan TPID
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: outer_vlan_up
                                        
                                        	Outer Vlan UserPri
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: sai
                                        
                                        	SAI
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: sci
                                        
                                        	SCI
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: sci_inuse
                                        
                                        	If SCI in use
                                        	**type**\:  bool
                                        
                                        .. attribute:: smac_inuse
                                        
                                        	If MAC SA in Use
                                        	**type**\:  bool
                                        
                                        .. attribute:: source_port
                                        
                                        	Source Port
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: source_port_chk
                                        
                                        	Source Port ChkEn
                                        	**type**\:  bool
                                        
                                        .. attribute:: tci
                                        
                                        	TCI E
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: tci_an
                                        
                                        	TCI AN
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: tci_an_chk
                                        
                                        	TciAnChkEn
                                        	**type**\:  bool
                                        
                                        .. attribute:: tci_c
                                        
                                        	TCI C
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: tci_chk
                                        
                                        	TciChkEn
                                        	**type**\:  bool
                                        
                                        .. attribute:: tci_e_xr
                                        
                                        	TCI ES
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: tci_sc
                                        
                                        	TCI SC
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: tci_scb
                                        
                                        	TCI SCB
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: tci_v
                                        
                                        	TCI V
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: valid
                                        
                                        	Flow Validity
                                        	**type**\:  bool
                                        
                                        

                                        """

                                        _prefix = 'crypto-macsec-pl-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.MsfpgaFlow.RxFlow, self).__init__()

                                            self.yang_name = "rx-flow"
                                            self.yang_parent_name = "msfpga-flow"

                                            self.action = YLeaf(YType.uint8, "action")

                                            self.ctrl_check = YLeaf(YType.boolean, "ctrl-check")

                                            self.dmac_inuse = YLeaf(YType.boolean, "dmac-inuse")

                                            self.ethertype = YLeaf(YType.uint16, "ethertype")

                                            self.flow_id = YLeaf(YType.uint8, "flow-id")

                                            self.in_use = YLeaf(YType.boolean, "in-use")

                                            self.inner_vlan = YLeaf(YType.uint16, "inner-vlan")

                                            self.inner_vlan_tpid = YLeaf(YType.uint16, "inner-vlan-tpid")

                                            self.inner_vlan_up = YLeaf(YType.uint8, "inner-vlan-up")

                                            self.is_ctrl_pkt = YLeaf(YType.boolean, "is-ctrl-pkt")

                                            self.is_egress = YLeaf(YType.boolean, "is-egress")

                                            self.macda = YLeafList(YType.uint8, "macda")

                                            self.macsa = YLeafList(YType.uint8, "macsa")

                                            self.match_bad_tag = YLeaf(YType.boolean, "match-bad-tag")

                                            self.match_kay_tag = YLeaf(YType.boolean, "match-kay-tag")

                                            self.match_pri = YLeaf(YType.uint8, "match-pri")

                                            self.match_tagged = YLeaf(YType.boolean, "match-tagged")

                                            self.match_untagged = YLeaf(YType.boolean, "match-untagged")

                                            self.outer_vlan = YLeaf(YType.uint16, "outer-vlan")

                                            self.outer_vlan_tpid = YLeaf(YType.uint16, "outer-vlan-tpid")

                                            self.outer_vlan_up = YLeaf(YType.uint8, "outer-vlan-up")

                                            self.sai = YLeaf(YType.uint32, "sai")

                                            self.sci = YLeaf(YType.uint64, "sci")

                                            self.sci_inuse = YLeaf(YType.boolean, "sci-inuse")

                                            self.smac_inuse = YLeaf(YType.boolean, "smac-inuse")

                                            self.source_port = YLeaf(YType.uint32, "source-port")

                                            self.source_port_chk = YLeaf(YType.boolean, "source-port-chk")

                                            self.tci = YLeaf(YType.uint8, "tci")

                                            self.tci_an = YLeaf(YType.uint8, "tci-an")

                                            self.tci_an_chk = YLeaf(YType.boolean, "tci-an-chk")

                                            self.tci_c = YLeaf(YType.uint8, "tci-c")

                                            self.tci_chk = YLeaf(YType.boolean, "tci-chk")

                                            self.tci_e_xr = YLeaf(YType.uint8, "tci-e-xr")

                                            self.tci_sc = YLeaf(YType.uint8, "tci-sc")

                                            self.tci_scb = YLeaf(YType.uint8, "tci-scb")

                                            self.tci_v = YLeaf(YType.uint8, "tci-v")

                                            self.valid = YLeaf(YType.boolean, "valid")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("action",
                                                            "ctrl_check",
                                                            "dmac_inuse",
                                                            "ethertype",
                                                            "flow_id",
                                                            "in_use",
                                                            "inner_vlan",
                                                            "inner_vlan_tpid",
                                                            "inner_vlan_up",
                                                            "is_ctrl_pkt",
                                                            "is_egress",
                                                            "macda",
                                                            "macsa",
                                                            "match_bad_tag",
                                                            "match_kay_tag",
                                                            "match_pri",
                                                            "match_tagged",
                                                            "match_untagged",
                                                            "outer_vlan",
                                                            "outer_vlan_tpid",
                                                            "outer_vlan_up",
                                                            "sai",
                                                            "sci",
                                                            "sci_inuse",
                                                            "smac_inuse",
                                                            "source_port",
                                                            "source_port_chk",
                                                            "tci",
                                                            "tci_an",
                                                            "tci_an_chk",
                                                            "tci_c",
                                                            "tci_chk",
                                                            "tci_e_xr",
                                                            "tci_sc",
                                                            "tci_scb",
                                                            "tci_v",
                                                            "valid") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.MsfpgaFlow.RxFlow, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.MsfpgaFlow.RxFlow, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.macda.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            for leaf in self.macsa.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.action.is_set or
                                                self.ctrl_check.is_set or
                                                self.dmac_inuse.is_set or
                                                self.ethertype.is_set or
                                                self.flow_id.is_set or
                                                self.in_use.is_set or
                                                self.inner_vlan.is_set or
                                                self.inner_vlan_tpid.is_set or
                                                self.inner_vlan_up.is_set or
                                                self.is_ctrl_pkt.is_set or
                                                self.is_egress.is_set or
                                                self.match_bad_tag.is_set or
                                                self.match_kay_tag.is_set or
                                                self.match_pri.is_set or
                                                self.match_tagged.is_set or
                                                self.match_untagged.is_set or
                                                self.outer_vlan.is_set or
                                                self.outer_vlan_tpid.is_set or
                                                self.outer_vlan_up.is_set or
                                                self.sai.is_set or
                                                self.sci.is_set or
                                                self.sci_inuse.is_set or
                                                self.smac_inuse.is_set or
                                                self.source_port.is_set or
                                                self.source_port_chk.is_set or
                                                self.tci.is_set or
                                                self.tci_an.is_set or
                                                self.tci_an_chk.is_set or
                                                self.tci_c.is_set or
                                                self.tci_chk.is_set or
                                                self.tci_e_xr.is_set or
                                                self.tci_sc.is_set or
                                                self.tci_scb.is_set or
                                                self.tci_v.is_set or
                                                self.valid.is_set)

                                        def has_operation(self):
                                            for leaf in self.macda.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            for leaf in self.macsa.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.action.yfilter != YFilter.not_set or
                                                self.ctrl_check.yfilter != YFilter.not_set or
                                                self.dmac_inuse.yfilter != YFilter.not_set or
                                                self.ethertype.yfilter != YFilter.not_set or
                                                self.flow_id.yfilter != YFilter.not_set or
                                                self.in_use.yfilter != YFilter.not_set or
                                                self.inner_vlan.yfilter != YFilter.not_set or
                                                self.inner_vlan_tpid.yfilter != YFilter.not_set or
                                                self.inner_vlan_up.yfilter != YFilter.not_set or
                                                self.is_ctrl_pkt.yfilter != YFilter.not_set or
                                                self.is_egress.yfilter != YFilter.not_set or
                                                self.macda.yfilter != YFilter.not_set or
                                                self.macsa.yfilter != YFilter.not_set or
                                                self.match_bad_tag.yfilter != YFilter.not_set or
                                                self.match_kay_tag.yfilter != YFilter.not_set or
                                                self.match_pri.yfilter != YFilter.not_set or
                                                self.match_tagged.yfilter != YFilter.not_set or
                                                self.match_untagged.yfilter != YFilter.not_set or
                                                self.outer_vlan.yfilter != YFilter.not_set or
                                                self.outer_vlan_tpid.yfilter != YFilter.not_set or
                                                self.outer_vlan_up.yfilter != YFilter.not_set or
                                                self.sai.yfilter != YFilter.not_set or
                                                self.sci.yfilter != YFilter.not_set or
                                                self.sci_inuse.yfilter != YFilter.not_set or
                                                self.smac_inuse.yfilter != YFilter.not_set or
                                                self.source_port.yfilter != YFilter.not_set or
                                                self.source_port_chk.yfilter != YFilter.not_set or
                                                self.tci.yfilter != YFilter.not_set or
                                                self.tci_an.yfilter != YFilter.not_set or
                                                self.tci_an_chk.yfilter != YFilter.not_set or
                                                self.tci_c.yfilter != YFilter.not_set or
                                                self.tci_chk.yfilter != YFilter.not_set or
                                                self.tci_e_xr.yfilter != YFilter.not_set or
                                                self.tci_sc.yfilter != YFilter.not_set or
                                                self.tci_scb.yfilter != YFilter.not_set or
                                                self.tci_v.yfilter != YFilter.not_set or
                                                self.valid.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "rx-flow" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.action.is_set or self.action.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.action.get_name_leafdata())
                                            if (self.ctrl_check.is_set or self.ctrl_check.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.ctrl_check.get_name_leafdata())
                                            if (self.dmac_inuse.is_set or self.dmac_inuse.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.dmac_inuse.get_name_leafdata())
                                            if (self.ethertype.is_set or self.ethertype.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.ethertype.get_name_leafdata())
                                            if (self.flow_id.is_set or self.flow_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.flow_id.get_name_leafdata())
                                            if (self.in_use.is_set or self.in_use.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.in_use.get_name_leafdata())
                                            if (self.inner_vlan.is_set or self.inner_vlan.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.inner_vlan.get_name_leafdata())
                                            if (self.inner_vlan_tpid.is_set or self.inner_vlan_tpid.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.inner_vlan_tpid.get_name_leafdata())
                                            if (self.inner_vlan_up.is_set or self.inner_vlan_up.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.inner_vlan_up.get_name_leafdata())
                                            if (self.is_ctrl_pkt.is_set or self.is_ctrl_pkt.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.is_ctrl_pkt.get_name_leafdata())
                                            if (self.is_egress.is_set or self.is_egress.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.is_egress.get_name_leafdata())
                                            if (self.match_bad_tag.is_set or self.match_bad_tag.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.match_bad_tag.get_name_leafdata())
                                            if (self.match_kay_tag.is_set or self.match_kay_tag.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.match_kay_tag.get_name_leafdata())
                                            if (self.match_pri.is_set or self.match_pri.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.match_pri.get_name_leafdata())
                                            if (self.match_tagged.is_set or self.match_tagged.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.match_tagged.get_name_leafdata())
                                            if (self.match_untagged.is_set or self.match_untagged.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.match_untagged.get_name_leafdata())
                                            if (self.outer_vlan.is_set or self.outer_vlan.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.outer_vlan.get_name_leafdata())
                                            if (self.outer_vlan_tpid.is_set or self.outer_vlan_tpid.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.outer_vlan_tpid.get_name_leafdata())
                                            if (self.outer_vlan_up.is_set or self.outer_vlan_up.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.outer_vlan_up.get_name_leafdata())
                                            if (self.sai.is_set or self.sai.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sai.get_name_leafdata())
                                            if (self.sci.is_set or self.sci.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sci.get_name_leafdata())
                                            if (self.sci_inuse.is_set or self.sci_inuse.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sci_inuse.get_name_leafdata())
                                            if (self.smac_inuse.is_set or self.smac_inuse.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.smac_inuse.get_name_leafdata())
                                            if (self.source_port.is_set or self.source_port.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.source_port.get_name_leafdata())
                                            if (self.source_port_chk.is_set or self.source_port_chk.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.source_port_chk.get_name_leafdata())
                                            if (self.tci.is_set or self.tci.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci.get_name_leafdata())
                                            if (self.tci_an.is_set or self.tci_an.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_an.get_name_leafdata())
                                            if (self.tci_an_chk.is_set or self.tci_an_chk.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_an_chk.get_name_leafdata())
                                            if (self.tci_c.is_set or self.tci_c.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_c.get_name_leafdata())
                                            if (self.tci_chk.is_set or self.tci_chk.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_chk.get_name_leafdata())
                                            if (self.tci_e_xr.is_set or self.tci_e_xr.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_e_xr.get_name_leafdata())
                                            if (self.tci_sc.is_set or self.tci_sc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_sc.get_name_leafdata())
                                            if (self.tci_scb.is_set or self.tci_scb.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_scb.get_name_leafdata())
                                            if (self.tci_v.is_set or self.tci_v.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_v.get_name_leafdata())
                                            if (self.valid.is_set or self.valid.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.valid.get_name_leafdata())

                                            leaf_name_data.extend(self.macda.get_name_leafdata())

                                            leaf_name_data.extend(self.macsa.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "action" or name == "ctrl-check" or name == "dmac-inuse" or name == "ethertype" or name == "flow-id" or name == "in-use" or name == "inner-vlan" or name == "inner-vlan-tpid" or name == "inner-vlan-up" or name == "is-ctrl-pkt" or name == "is-egress" or name == "macda" or name == "macsa" or name == "match-bad-tag" or name == "match-kay-tag" or name == "match-pri" or name == "match-tagged" or name == "match-untagged" or name == "outer-vlan" or name == "outer-vlan-tpid" or name == "outer-vlan-up" or name == "sai" or name == "sci" or name == "sci-inuse" or name == "smac-inuse" or name == "source-port" or name == "source-port-chk" or name == "tci" or name == "tci-an" or name == "tci-an-chk" or name == "tci-c" or name == "tci-chk" or name == "tci-e-xr" or name == "tci-sc" or name == "tci-scb" or name == "tci-v" or name == "valid"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "action"):
                                                self.action = value
                                                self.action.value_namespace = name_space
                                                self.action.value_namespace_prefix = name_space_prefix
                                            if(value_path == "ctrl-check"):
                                                self.ctrl_check = value
                                                self.ctrl_check.value_namespace = name_space
                                                self.ctrl_check.value_namespace_prefix = name_space_prefix
                                            if(value_path == "dmac-inuse"):
                                                self.dmac_inuse = value
                                                self.dmac_inuse.value_namespace = name_space
                                                self.dmac_inuse.value_namespace_prefix = name_space_prefix
                                            if(value_path == "ethertype"):
                                                self.ethertype = value
                                                self.ethertype.value_namespace = name_space
                                                self.ethertype.value_namespace_prefix = name_space_prefix
                                            if(value_path == "flow-id"):
                                                self.flow_id = value
                                                self.flow_id.value_namespace = name_space
                                                self.flow_id.value_namespace_prefix = name_space_prefix
                                            if(value_path == "in-use"):
                                                self.in_use = value
                                                self.in_use.value_namespace = name_space
                                                self.in_use.value_namespace_prefix = name_space_prefix
                                            if(value_path == "inner-vlan"):
                                                self.inner_vlan = value
                                                self.inner_vlan.value_namespace = name_space
                                                self.inner_vlan.value_namespace_prefix = name_space_prefix
                                            if(value_path == "inner-vlan-tpid"):
                                                self.inner_vlan_tpid = value
                                                self.inner_vlan_tpid.value_namespace = name_space
                                                self.inner_vlan_tpid.value_namespace_prefix = name_space_prefix
                                            if(value_path == "inner-vlan-up"):
                                                self.inner_vlan_up = value
                                                self.inner_vlan_up.value_namespace = name_space
                                                self.inner_vlan_up.value_namespace_prefix = name_space_prefix
                                            if(value_path == "is-ctrl-pkt"):
                                                self.is_ctrl_pkt = value
                                                self.is_ctrl_pkt.value_namespace = name_space
                                                self.is_ctrl_pkt.value_namespace_prefix = name_space_prefix
                                            if(value_path == "is-egress"):
                                                self.is_egress = value
                                                self.is_egress.value_namespace = name_space
                                                self.is_egress.value_namespace_prefix = name_space_prefix
                                            if(value_path == "macda"):
                                                self.macda.append(value)
                                            if(value_path == "macsa"):
                                                self.macsa.append(value)
                                            if(value_path == "match-bad-tag"):
                                                self.match_bad_tag = value
                                                self.match_bad_tag.value_namespace = name_space
                                                self.match_bad_tag.value_namespace_prefix = name_space_prefix
                                            if(value_path == "match-kay-tag"):
                                                self.match_kay_tag = value
                                                self.match_kay_tag.value_namespace = name_space
                                                self.match_kay_tag.value_namespace_prefix = name_space_prefix
                                            if(value_path == "match-pri"):
                                                self.match_pri = value
                                                self.match_pri.value_namespace = name_space
                                                self.match_pri.value_namespace_prefix = name_space_prefix
                                            if(value_path == "match-tagged"):
                                                self.match_tagged = value
                                                self.match_tagged.value_namespace = name_space
                                                self.match_tagged.value_namespace_prefix = name_space_prefix
                                            if(value_path == "match-untagged"):
                                                self.match_untagged = value
                                                self.match_untagged.value_namespace = name_space
                                                self.match_untagged.value_namespace_prefix = name_space_prefix
                                            if(value_path == "outer-vlan"):
                                                self.outer_vlan = value
                                                self.outer_vlan.value_namespace = name_space
                                                self.outer_vlan.value_namespace_prefix = name_space_prefix
                                            if(value_path == "outer-vlan-tpid"):
                                                self.outer_vlan_tpid = value
                                                self.outer_vlan_tpid.value_namespace = name_space
                                                self.outer_vlan_tpid.value_namespace_prefix = name_space_prefix
                                            if(value_path == "outer-vlan-up"):
                                                self.outer_vlan_up = value
                                                self.outer_vlan_up.value_namespace = name_space
                                                self.outer_vlan_up.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sai"):
                                                self.sai = value
                                                self.sai.value_namespace = name_space
                                                self.sai.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sci"):
                                                self.sci = value
                                                self.sci.value_namespace = name_space
                                                self.sci.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sci-inuse"):
                                                self.sci_inuse = value
                                                self.sci_inuse.value_namespace = name_space
                                                self.sci_inuse.value_namespace_prefix = name_space_prefix
                                            if(value_path == "smac-inuse"):
                                                self.smac_inuse = value
                                                self.smac_inuse.value_namespace = name_space
                                                self.smac_inuse.value_namespace_prefix = name_space_prefix
                                            if(value_path == "source-port"):
                                                self.source_port = value
                                                self.source_port.value_namespace = name_space
                                                self.source_port.value_namespace_prefix = name_space_prefix
                                            if(value_path == "source-port-chk"):
                                                self.source_port_chk = value
                                                self.source_port_chk.value_namespace = name_space
                                                self.source_port_chk.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci"):
                                                self.tci = value
                                                self.tci.value_namespace = name_space
                                                self.tci.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-an"):
                                                self.tci_an = value
                                                self.tci_an.value_namespace = name_space
                                                self.tci_an.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-an-chk"):
                                                self.tci_an_chk = value
                                                self.tci_an_chk.value_namespace = name_space
                                                self.tci_an_chk.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-c"):
                                                self.tci_c = value
                                                self.tci_c.value_namespace = name_space
                                                self.tci_c.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-chk"):
                                                self.tci_chk = value
                                                self.tci_chk.value_namespace = name_space
                                                self.tci_chk.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-e-xr"):
                                                self.tci_e_xr = value
                                                self.tci_e_xr.value_namespace = name_space
                                                self.tci_e_xr.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-sc"):
                                                self.tci_sc = value
                                                self.tci_sc.value_namespace = name_space
                                                self.tci_sc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-scb"):
                                                self.tci_scb = value
                                                self.tci_scb.value_namespace = name_space
                                                self.tci_scb.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-v"):
                                                self.tci_v = value
                                                self.tci_v.value_namespace = name_space
                                                self.tci_v.value_namespace_prefix = name_space_prefix
                                            if(value_path == "valid"):
                                                self.valid = value
                                                self.valid.value_namespace = name_space
                                                self.valid.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            (self.rx_flow is not None and self.rx_flow.has_data()) or
                                            (self.tx_flow is not None and self.tx_flow.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            (self.rx_flow is not None and self.rx_flow.has_operation()) or
                                            (self.tx_flow is not None and self.tx_flow.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "msfpga-flow" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "rx-flow"):
                                            if (self.rx_flow is None):
                                                self.rx_flow = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.MsfpgaFlow.RxFlow()
                                                self.rx_flow.parent = self
                                                self._children_name_map["rx_flow"] = "rx-flow"
                                            return self.rx_flow

                                        if (child_yang_name == "tx-flow"):
                                            if (self.tx_flow is None):
                                                self.tx_flow = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.MsfpgaFlow.TxFlow()
                                                self.tx_flow.parent = self
                                                self._children_name_map["tx_flow"] = "tx-flow"
                                            return self.tx_flow

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "rx-flow" or name == "tx-flow"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        pass


                                class Es200Flow(Entity):
                                    """
                                    ES200 Flow Information
                                    
                                    .. attribute:: rx_flow
                                    
                                    	Rx Flow Details
                                    	**type**\:   :py:class:`RxFlow <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.Es200Flow.RxFlow>`
                                    
                                    .. attribute:: tx_flow
                                    
                                    	Tx Flow Details
                                    	**type**\:   :py:class:`TxFlow <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.Es200Flow.TxFlow>`
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.Es200Flow, self).__init__()

                                        self.yang_name = "es200-flow"
                                        self.yang_parent_name = "ext"

                                        self.rx_flow = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.Es200Flow.RxFlow()
                                        self.rx_flow.parent = self
                                        self._children_name_map["rx_flow"] = "rx-flow"
                                        self._children_yang_names.add("rx-flow")

                                        self.tx_flow = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.Es200Flow.TxFlow()
                                        self.tx_flow.parent = self
                                        self._children_name_map["tx_flow"] = "tx-flow"
                                        self._children_yang_names.add("tx-flow")


                                    class TxFlow(Entity):
                                        """
                                        Tx Flow Details
                                        
                                        .. attribute:: drop
                                        
                                        	Drop the packet
                                        	**type**\:  bool
                                        
                                        .. attribute:: ethertype
                                        
                                        	Parsed EtherType to match could be 0 if Ethertype should'nt                              be matched can be 0x88E5 for MACSec tag
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: flow_hits
                                        
                                        	Pkts matching the Flow
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: flow_no
                                        
                                        	Flow Number
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: force_ctrl
                                        
                                        	Force the pkt as control pkt irrepective         of the results of control packet detector
                                        	**type**\:  bool
                                        
                                        .. attribute:: inner_vlan_dei
                                        
                                        	Dei to match for innner Vlan tag
                                        	**type**\:  bool
                                        
                                        .. attribute:: inner_vlan_id
                                        
                                        	VLAN ID for inner tag used when two              VLAN Tags should be matched
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: inner_vlan_user_pri
                                        
                                        	 VLAN User priority for inner tag use            when matching two VLAN tags
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: is_flow_enabled
                                        
                                        	Is Flow Enabled
                                        	**type**\:  bool
                                        
                                        .. attribute:: macda
                                        
                                        	MAC DA
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: mask_da
                                        
                                        	DA mask
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: mask_ethertype
                                        
                                        	Parsed EtherType mask
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: mask_plain_bits
                                        
                                        	Plain Bits mask
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: match_priority
                                        
                                        	priority for match 0\-15(highest) 
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: mpls1_bos
                                        
                                        	 botton of stack 
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: mpls1_exp
                                        
                                        	 exp 
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: mpls1_label
                                        
                                        	 label 
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: mpls2_bos
                                        
                                        	 botton of stack 
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: mpls2_exp
                                        
                                        	 exp 
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: mpls2_label
                                        
                                        	 label 
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: outer_vlan_dei
                                        
                                        	Dei to match for outer Vlan tag
                                        	**type**\:  bool
                                        
                                        .. attribute:: outer_vlan_id
                                        
                                        	 VLAN ID for outer tag use this when             only one tag should be matched
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: outer_vlan_user_pri
                                        
                                        	VLAN User Priority for outer tag  use            this when only one tag should be matched
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: pbb_bvid
                                        
                                        	 Backbone Vlan id 
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: pbb_dei
                                        
                                        	 dei 
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: pbb_pcp
                                        
                                        	 pcp 
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: pbb_sid
                                        
                                        	 Service Instance id 
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: pkt_type
                                        
                                        	Type of packet. See ethMscCfyEPktType\_e
                                        	**type**\:  str
                                        
                                        .. attribute:: plain_bits
                                        
                                        	Plain bits to compare. Max values\:               untagged pkt \- 40 bits after EthType             1 VLAN tag \- 24 bits after parsed EthType        2 VLAN tags\- 8 bits after parsed EthType         1 MPLS tag \- 32 bits after 1st tag               2 MPLS tags\- 8 bits following after 2nd          or atmost 5th MPLS tag                           PBB \- 16 bits after C\-SA                         PBB with VLAN tag \- 16 bits of VLAN tag 
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        	**units**\: bit
                                        
                                        .. attribute:: plain_bits_size
                                        
                                        	No. of bits used in plainBits
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: psci
                                        
                                        	 SCI to be matched value required for            ingress only, pass NULL for egress
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tag_num
                                        
                                        	No. of MPLS or VLAN tags See ethMscCfyETagNum\_e 
                                        	**type**\:  str
                                        
                                        .. attribute:: tci
                                        
                                        	value of 'e' in TCI to match (1bit )
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: tci_c
                                        
                                        	value of 'c' in TCI to match (1bit) 
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: tci_chk
                                        
                                        	TCI bits will be checked only when this          bit is enabled. All the values of TCI bits       are mandatory when TCI check is used
                                        	**type**\:  bool
                                        
                                        .. attribute:: tci_e_xr
                                        
                                        	value of 'es' in TCI to match (1bit) 
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: tci_sc
                                        
                                        	value of 'sc' in TCI to match (1bit) 
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: tci_scb
                                        
                                        	value of 'scb' in TCI to match (1bit) 
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: tci_v
                                        
                                        	value of 'v' in TCI to match (1bit) 
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'crypto-macsec-pl-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.Es200Flow.TxFlow, self).__init__()

                                            self.yang_name = "tx-flow"
                                            self.yang_parent_name = "es200-flow"

                                            self.drop = YLeaf(YType.boolean, "drop")

                                            self.ethertype = YLeaf(YType.uint16, "ethertype")

                                            self.flow_hits = YLeaf(YType.uint64, "flow-hits")

                                            self.flow_no = YLeaf(YType.uint32, "flow-no")

                                            self.force_ctrl = YLeaf(YType.boolean, "force-ctrl")

                                            self.inner_vlan_dei = YLeaf(YType.boolean, "inner-vlan-dei")

                                            self.inner_vlan_id = YLeaf(YType.uint16, "inner-vlan-id")

                                            self.inner_vlan_user_pri = YLeaf(YType.uint8, "inner-vlan-user-pri")

                                            self.is_flow_enabled = YLeaf(YType.boolean, "is-flow-enabled")

                                            self.macda = YLeafList(YType.uint8, "macda")

                                            self.mask_da = YLeaf(YType.uint64, "mask-da")

                                            self.mask_ethertype = YLeaf(YType.uint32, "mask-ethertype")

                                            self.mask_plain_bits = YLeaf(YType.uint64, "mask-plain-bits")

                                            self.match_priority = YLeaf(YType.uint8, "match-priority")

                                            self.mpls1_bos = YLeaf(YType.uint8, "mpls1-bos")

                                            self.mpls1_exp = YLeaf(YType.uint8, "mpls1-exp")

                                            self.mpls1_label = YLeaf(YType.uint32, "mpls1-label")

                                            self.mpls2_bos = YLeaf(YType.uint8, "mpls2-bos")

                                            self.mpls2_exp = YLeaf(YType.uint8, "mpls2-exp")

                                            self.mpls2_label = YLeaf(YType.uint32, "mpls2-label")

                                            self.outer_vlan_dei = YLeaf(YType.boolean, "outer-vlan-dei")

                                            self.outer_vlan_id = YLeaf(YType.uint16, "outer-vlan-id")

                                            self.outer_vlan_user_pri = YLeaf(YType.uint8, "outer-vlan-user-pri")

                                            self.pbb_bvid = YLeaf(YType.uint32, "pbb-bvid")

                                            self.pbb_dei = YLeaf(YType.uint8, "pbb-dei")

                                            self.pbb_pcp = YLeaf(YType.uint8, "pbb-pcp")

                                            self.pbb_sid = YLeaf(YType.uint32, "pbb-sid")

                                            self.pkt_type = YLeaf(YType.str, "pkt-type")

                                            self.plain_bits = YLeaf(YType.uint64, "plain-bits")

                                            self.plain_bits_size = YLeaf(YType.uint8, "plain-bits-size")

                                            self.psci = YLeaf(YType.uint64, "psci")

                                            self.tag_num = YLeaf(YType.str, "tag-num")

                                            self.tci = YLeaf(YType.uint8, "tci")

                                            self.tci_c = YLeaf(YType.uint8, "tci-c")

                                            self.tci_chk = YLeaf(YType.boolean, "tci-chk")

                                            self.tci_e_xr = YLeaf(YType.uint8, "tci-e-xr")

                                            self.tci_sc = YLeaf(YType.uint8, "tci-sc")

                                            self.tci_scb = YLeaf(YType.uint8, "tci-scb")

                                            self.tci_v = YLeaf(YType.uint8, "tci-v")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("drop",
                                                            "ethertype",
                                                            "flow_hits",
                                                            "flow_no",
                                                            "force_ctrl",
                                                            "inner_vlan_dei",
                                                            "inner_vlan_id",
                                                            "inner_vlan_user_pri",
                                                            "is_flow_enabled",
                                                            "macda",
                                                            "mask_da",
                                                            "mask_ethertype",
                                                            "mask_plain_bits",
                                                            "match_priority",
                                                            "mpls1_bos",
                                                            "mpls1_exp",
                                                            "mpls1_label",
                                                            "mpls2_bos",
                                                            "mpls2_exp",
                                                            "mpls2_label",
                                                            "outer_vlan_dei",
                                                            "outer_vlan_id",
                                                            "outer_vlan_user_pri",
                                                            "pbb_bvid",
                                                            "pbb_dei",
                                                            "pbb_pcp",
                                                            "pbb_sid",
                                                            "pkt_type",
                                                            "plain_bits",
                                                            "plain_bits_size",
                                                            "psci",
                                                            "tag_num",
                                                            "tci",
                                                            "tci_c",
                                                            "tci_chk",
                                                            "tci_e_xr",
                                                            "tci_sc",
                                                            "tci_scb",
                                                            "tci_v") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.Es200Flow.TxFlow, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.Es200Flow.TxFlow, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.macda.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.drop.is_set or
                                                self.ethertype.is_set or
                                                self.flow_hits.is_set or
                                                self.flow_no.is_set or
                                                self.force_ctrl.is_set or
                                                self.inner_vlan_dei.is_set or
                                                self.inner_vlan_id.is_set or
                                                self.inner_vlan_user_pri.is_set or
                                                self.is_flow_enabled.is_set or
                                                self.mask_da.is_set or
                                                self.mask_ethertype.is_set or
                                                self.mask_plain_bits.is_set or
                                                self.match_priority.is_set or
                                                self.mpls1_bos.is_set or
                                                self.mpls1_exp.is_set or
                                                self.mpls1_label.is_set or
                                                self.mpls2_bos.is_set or
                                                self.mpls2_exp.is_set or
                                                self.mpls2_label.is_set or
                                                self.outer_vlan_dei.is_set or
                                                self.outer_vlan_id.is_set or
                                                self.outer_vlan_user_pri.is_set or
                                                self.pbb_bvid.is_set or
                                                self.pbb_dei.is_set or
                                                self.pbb_pcp.is_set or
                                                self.pbb_sid.is_set or
                                                self.pkt_type.is_set or
                                                self.plain_bits.is_set or
                                                self.plain_bits_size.is_set or
                                                self.psci.is_set or
                                                self.tag_num.is_set or
                                                self.tci.is_set or
                                                self.tci_c.is_set or
                                                self.tci_chk.is_set or
                                                self.tci_e_xr.is_set or
                                                self.tci_sc.is_set or
                                                self.tci_scb.is_set or
                                                self.tci_v.is_set)

                                        def has_operation(self):
                                            for leaf in self.macda.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.drop.yfilter != YFilter.not_set or
                                                self.ethertype.yfilter != YFilter.not_set or
                                                self.flow_hits.yfilter != YFilter.not_set or
                                                self.flow_no.yfilter != YFilter.not_set or
                                                self.force_ctrl.yfilter != YFilter.not_set or
                                                self.inner_vlan_dei.yfilter != YFilter.not_set or
                                                self.inner_vlan_id.yfilter != YFilter.not_set or
                                                self.inner_vlan_user_pri.yfilter != YFilter.not_set or
                                                self.is_flow_enabled.yfilter != YFilter.not_set or
                                                self.macda.yfilter != YFilter.not_set or
                                                self.mask_da.yfilter != YFilter.not_set or
                                                self.mask_ethertype.yfilter != YFilter.not_set or
                                                self.mask_plain_bits.yfilter != YFilter.not_set or
                                                self.match_priority.yfilter != YFilter.not_set or
                                                self.mpls1_bos.yfilter != YFilter.not_set or
                                                self.mpls1_exp.yfilter != YFilter.not_set or
                                                self.mpls1_label.yfilter != YFilter.not_set or
                                                self.mpls2_bos.yfilter != YFilter.not_set or
                                                self.mpls2_exp.yfilter != YFilter.not_set or
                                                self.mpls2_label.yfilter != YFilter.not_set or
                                                self.outer_vlan_dei.yfilter != YFilter.not_set or
                                                self.outer_vlan_id.yfilter != YFilter.not_set or
                                                self.outer_vlan_user_pri.yfilter != YFilter.not_set or
                                                self.pbb_bvid.yfilter != YFilter.not_set or
                                                self.pbb_dei.yfilter != YFilter.not_set or
                                                self.pbb_pcp.yfilter != YFilter.not_set or
                                                self.pbb_sid.yfilter != YFilter.not_set or
                                                self.pkt_type.yfilter != YFilter.not_set or
                                                self.plain_bits.yfilter != YFilter.not_set or
                                                self.plain_bits_size.yfilter != YFilter.not_set or
                                                self.psci.yfilter != YFilter.not_set or
                                                self.tag_num.yfilter != YFilter.not_set or
                                                self.tci.yfilter != YFilter.not_set or
                                                self.tci_c.yfilter != YFilter.not_set or
                                                self.tci_chk.yfilter != YFilter.not_set or
                                                self.tci_e_xr.yfilter != YFilter.not_set or
                                                self.tci_sc.yfilter != YFilter.not_set or
                                                self.tci_scb.yfilter != YFilter.not_set or
                                                self.tci_v.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "tx-flow" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.drop.is_set or self.drop.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.drop.get_name_leafdata())
                                            if (self.ethertype.is_set or self.ethertype.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.ethertype.get_name_leafdata())
                                            if (self.flow_hits.is_set or self.flow_hits.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.flow_hits.get_name_leafdata())
                                            if (self.flow_no.is_set or self.flow_no.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.flow_no.get_name_leafdata())
                                            if (self.force_ctrl.is_set or self.force_ctrl.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.force_ctrl.get_name_leafdata())
                                            if (self.inner_vlan_dei.is_set or self.inner_vlan_dei.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.inner_vlan_dei.get_name_leafdata())
                                            if (self.inner_vlan_id.is_set or self.inner_vlan_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.inner_vlan_id.get_name_leafdata())
                                            if (self.inner_vlan_user_pri.is_set or self.inner_vlan_user_pri.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.inner_vlan_user_pri.get_name_leafdata())
                                            if (self.is_flow_enabled.is_set or self.is_flow_enabled.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.is_flow_enabled.get_name_leafdata())
                                            if (self.mask_da.is_set or self.mask_da.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.mask_da.get_name_leafdata())
                                            if (self.mask_ethertype.is_set or self.mask_ethertype.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.mask_ethertype.get_name_leafdata())
                                            if (self.mask_plain_bits.is_set or self.mask_plain_bits.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.mask_plain_bits.get_name_leafdata())
                                            if (self.match_priority.is_set or self.match_priority.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.match_priority.get_name_leafdata())
                                            if (self.mpls1_bos.is_set or self.mpls1_bos.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.mpls1_bos.get_name_leafdata())
                                            if (self.mpls1_exp.is_set or self.mpls1_exp.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.mpls1_exp.get_name_leafdata())
                                            if (self.mpls1_label.is_set or self.mpls1_label.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.mpls1_label.get_name_leafdata())
                                            if (self.mpls2_bos.is_set or self.mpls2_bos.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.mpls2_bos.get_name_leafdata())
                                            if (self.mpls2_exp.is_set or self.mpls2_exp.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.mpls2_exp.get_name_leafdata())
                                            if (self.mpls2_label.is_set or self.mpls2_label.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.mpls2_label.get_name_leafdata())
                                            if (self.outer_vlan_dei.is_set or self.outer_vlan_dei.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.outer_vlan_dei.get_name_leafdata())
                                            if (self.outer_vlan_id.is_set or self.outer_vlan_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.outer_vlan_id.get_name_leafdata())
                                            if (self.outer_vlan_user_pri.is_set or self.outer_vlan_user_pri.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.outer_vlan_user_pri.get_name_leafdata())
                                            if (self.pbb_bvid.is_set or self.pbb_bvid.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.pbb_bvid.get_name_leafdata())
                                            if (self.pbb_dei.is_set or self.pbb_dei.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.pbb_dei.get_name_leafdata())
                                            if (self.pbb_pcp.is_set or self.pbb_pcp.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.pbb_pcp.get_name_leafdata())
                                            if (self.pbb_sid.is_set or self.pbb_sid.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.pbb_sid.get_name_leafdata())
                                            if (self.pkt_type.is_set or self.pkt_type.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.pkt_type.get_name_leafdata())
                                            if (self.plain_bits.is_set or self.plain_bits.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.plain_bits.get_name_leafdata())
                                            if (self.plain_bits_size.is_set or self.plain_bits_size.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.plain_bits_size.get_name_leafdata())
                                            if (self.psci.is_set or self.psci.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.psci.get_name_leafdata())
                                            if (self.tag_num.is_set or self.tag_num.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tag_num.get_name_leafdata())
                                            if (self.tci.is_set or self.tci.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci.get_name_leafdata())
                                            if (self.tci_c.is_set or self.tci_c.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_c.get_name_leafdata())
                                            if (self.tci_chk.is_set or self.tci_chk.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_chk.get_name_leafdata())
                                            if (self.tci_e_xr.is_set or self.tci_e_xr.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_e_xr.get_name_leafdata())
                                            if (self.tci_sc.is_set or self.tci_sc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_sc.get_name_leafdata())
                                            if (self.tci_scb.is_set or self.tci_scb.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_scb.get_name_leafdata())
                                            if (self.tci_v.is_set or self.tci_v.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_v.get_name_leafdata())

                                            leaf_name_data.extend(self.macda.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "drop" or name == "ethertype" or name == "flow-hits" or name == "flow-no" or name == "force-ctrl" or name == "inner-vlan-dei" or name == "inner-vlan-id" or name == "inner-vlan-user-pri" or name == "is-flow-enabled" or name == "macda" or name == "mask-da" or name == "mask-ethertype" or name == "mask-plain-bits" or name == "match-priority" or name == "mpls1-bos" or name == "mpls1-exp" or name == "mpls1-label" or name == "mpls2-bos" or name == "mpls2-exp" or name == "mpls2-label" or name == "outer-vlan-dei" or name == "outer-vlan-id" or name == "outer-vlan-user-pri" or name == "pbb-bvid" or name == "pbb-dei" or name == "pbb-pcp" or name == "pbb-sid" or name == "pkt-type" or name == "plain-bits" or name == "plain-bits-size" or name == "psci" or name == "tag-num" or name == "tci" or name == "tci-c" or name == "tci-chk" or name == "tci-e-xr" or name == "tci-sc" or name == "tci-scb" or name == "tci-v"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "drop"):
                                                self.drop = value
                                                self.drop.value_namespace = name_space
                                                self.drop.value_namespace_prefix = name_space_prefix
                                            if(value_path == "ethertype"):
                                                self.ethertype = value
                                                self.ethertype.value_namespace = name_space
                                                self.ethertype.value_namespace_prefix = name_space_prefix
                                            if(value_path == "flow-hits"):
                                                self.flow_hits = value
                                                self.flow_hits.value_namespace = name_space
                                                self.flow_hits.value_namespace_prefix = name_space_prefix
                                            if(value_path == "flow-no"):
                                                self.flow_no = value
                                                self.flow_no.value_namespace = name_space
                                                self.flow_no.value_namespace_prefix = name_space_prefix
                                            if(value_path == "force-ctrl"):
                                                self.force_ctrl = value
                                                self.force_ctrl.value_namespace = name_space
                                                self.force_ctrl.value_namespace_prefix = name_space_prefix
                                            if(value_path == "inner-vlan-dei"):
                                                self.inner_vlan_dei = value
                                                self.inner_vlan_dei.value_namespace = name_space
                                                self.inner_vlan_dei.value_namespace_prefix = name_space_prefix
                                            if(value_path == "inner-vlan-id"):
                                                self.inner_vlan_id = value
                                                self.inner_vlan_id.value_namespace = name_space
                                                self.inner_vlan_id.value_namespace_prefix = name_space_prefix
                                            if(value_path == "inner-vlan-user-pri"):
                                                self.inner_vlan_user_pri = value
                                                self.inner_vlan_user_pri.value_namespace = name_space
                                                self.inner_vlan_user_pri.value_namespace_prefix = name_space_prefix
                                            if(value_path == "is-flow-enabled"):
                                                self.is_flow_enabled = value
                                                self.is_flow_enabled.value_namespace = name_space
                                                self.is_flow_enabled.value_namespace_prefix = name_space_prefix
                                            if(value_path == "macda"):
                                                self.macda.append(value)
                                            if(value_path == "mask-da"):
                                                self.mask_da = value
                                                self.mask_da.value_namespace = name_space
                                                self.mask_da.value_namespace_prefix = name_space_prefix
                                            if(value_path == "mask-ethertype"):
                                                self.mask_ethertype = value
                                                self.mask_ethertype.value_namespace = name_space
                                                self.mask_ethertype.value_namespace_prefix = name_space_prefix
                                            if(value_path == "mask-plain-bits"):
                                                self.mask_plain_bits = value
                                                self.mask_plain_bits.value_namespace = name_space
                                                self.mask_plain_bits.value_namespace_prefix = name_space_prefix
                                            if(value_path == "match-priority"):
                                                self.match_priority = value
                                                self.match_priority.value_namespace = name_space
                                                self.match_priority.value_namespace_prefix = name_space_prefix
                                            if(value_path == "mpls1-bos"):
                                                self.mpls1_bos = value
                                                self.mpls1_bos.value_namespace = name_space
                                                self.mpls1_bos.value_namespace_prefix = name_space_prefix
                                            if(value_path == "mpls1-exp"):
                                                self.mpls1_exp = value
                                                self.mpls1_exp.value_namespace = name_space
                                                self.mpls1_exp.value_namespace_prefix = name_space_prefix
                                            if(value_path == "mpls1-label"):
                                                self.mpls1_label = value
                                                self.mpls1_label.value_namespace = name_space
                                                self.mpls1_label.value_namespace_prefix = name_space_prefix
                                            if(value_path == "mpls2-bos"):
                                                self.mpls2_bos = value
                                                self.mpls2_bos.value_namespace = name_space
                                                self.mpls2_bos.value_namespace_prefix = name_space_prefix
                                            if(value_path == "mpls2-exp"):
                                                self.mpls2_exp = value
                                                self.mpls2_exp.value_namespace = name_space
                                                self.mpls2_exp.value_namespace_prefix = name_space_prefix
                                            if(value_path == "mpls2-label"):
                                                self.mpls2_label = value
                                                self.mpls2_label.value_namespace = name_space
                                                self.mpls2_label.value_namespace_prefix = name_space_prefix
                                            if(value_path == "outer-vlan-dei"):
                                                self.outer_vlan_dei = value
                                                self.outer_vlan_dei.value_namespace = name_space
                                                self.outer_vlan_dei.value_namespace_prefix = name_space_prefix
                                            if(value_path == "outer-vlan-id"):
                                                self.outer_vlan_id = value
                                                self.outer_vlan_id.value_namespace = name_space
                                                self.outer_vlan_id.value_namespace_prefix = name_space_prefix
                                            if(value_path == "outer-vlan-user-pri"):
                                                self.outer_vlan_user_pri = value
                                                self.outer_vlan_user_pri.value_namespace = name_space
                                                self.outer_vlan_user_pri.value_namespace_prefix = name_space_prefix
                                            if(value_path == "pbb-bvid"):
                                                self.pbb_bvid = value
                                                self.pbb_bvid.value_namespace = name_space
                                                self.pbb_bvid.value_namespace_prefix = name_space_prefix
                                            if(value_path == "pbb-dei"):
                                                self.pbb_dei = value
                                                self.pbb_dei.value_namespace = name_space
                                                self.pbb_dei.value_namespace_prefix = name_space_prefix
                                            if(value_path == "pbb-pcp"):
                                                self.pbb_pcp = value
                                                self.pbb_pcp.value_namespace = name_space
                                                self.pbb_pcp.value_namespace_prefix = name_space_prefix
                                            if(value_path == "pbb-sid"):
                                                self.pbb_sid = value
                                                self.pbb_sid.value_namespace = name_space
                                                self.pbb_sid.value_namespace_prefix = name_space_prefix
                                            if(value_path == "pkt-type"):
                                                self.pkt_type = value
                                                self.pkt_type.value_namespace = name_space
                                                self.pkt_type.value_namespace_prefix = name_space_prefix
                                            if(value_path == "plain-bits"):
                                                self.plain_bits = value
                                                self.plain_bits.value_namespace = name_space
                                                self.plain_bits.value_namespace_prefix = name_space_prefix
                                            if(value_path == "plain-bits-size"):
                                                self.plain_bits_size = value
                                                self.plain_bits_size.value_namespace = name_space
                                                self.plain_bits_size.value_namespace_prefix = name_space_prefix
                                            if(value_path == "psci"):
                                                self.psci = value
                                                self.psci.value_namespace = name_space
                                                self.psci.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tag-num"):
                                                self.tag_num = value
                                                self.tag_num.value_namespace = name_space
                                                self.tag_num.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci"):
                                                self.tci = value
                                                self.tci.value_namespace = name_space
                                                self.tci.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-c"):
                                                self.tci_c = value
                                                self.tci_c.value_namespace = name_space
                                                self.tci_c.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-chk"):
                                                self.tci_chk = value
                                                self.tci_chk.value_namespace = name_space
                                                self.tci_chk.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-e-xr"):
                                                self.tci_e_xr = value
                                                self.tci_e_xr.value_namespace = name_space
                                                self.tci_e_xr.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-sc"):
                                                self.tci_sc = value
                                                self.tci_sc.value_namespace = name_space
                                                self.tci_sc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-scb"):
                                                self.tci_scb = value
                                                self.tci_scb.value_namespace = name_space
                                                self.tci_scb.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-v"):
                                                self.tci_v = value
                                                self.tci_v.value_namespace = name_space
                                                self.tci_v.value_namespace_prefix = name_space_prefix


                                    class RxFlow(Entity):
                                        """
                                        Rx Flow Details
                                        
                                        .. attribute:: drop
                                        
                                        	Drop the packet
                                        	**type**\:  bool
                                        
                                        .. attribute:: ethertype
                                        
                                        	Parsed EtherType to match could be 0 if Ethertype should'nt                              be matched can be 0x88E5 for MACSec tag
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: flow_hits
                                        
                                        	Pkts matching the Flow
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: flow_no
                                        
                                        	Flow Number
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: force_ctrl
                                        
                                        	Force the pkt as control pkt irrepective         of the results of control packet detector
                                        	**type**\:  bool
                                        
                                        .. attribute:: inner_vlan_dei
                                        
                                        	Dei to match for innner Vlan tag
                                        	**type**\:  bool
                                        
                                        .. attribute:: inner_vlan_id
                                        
                                        	VLAN ID for inner tag used when two              VLAN Tags should be matched
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: inner_vlan_user_pri
                                        
                                        	 VLAN User priority for inner tag use            when matching two VLAN tags
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: is_flow_enabled
                                        
                                        	Is Flow Enabled
                                        	**type**\:  bool
                                        
                                        .. attribute:: macda
                                        
                                        	MAC DA
                                        	**type**\:  list of int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: mask_da
                                        
                                        	DA mask
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: mask_ethertype
                                        
                                        	Parsed EtherType mask
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: mask_plain_bits
                                        
                                        	Plain Bits mask
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: match_priority
                                        
                                        	priority for match 0\-15(highest) 
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: mpls1_bos
                                        
                                        	 botton of stack 
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: mpls1_exp
                                        
                                        	 exp 
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: mpls1_label
                                        
                                        	 label 
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: mpls2_bos
                                        
                                        	 botton of stack 
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: mpls2_exp
                                        
                                        	 exp 
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: mpls2_label
                                        
                                        	 label 
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: outer_vlan_dei
                                        
                                        	Dei to match for outer Vlan tag
                                        	**type**\:  bool
                                        
                                        .. attribute:: outer_vlan_id
                                        
                                        	 VLAN ID for outer tag use this when             only one tag should be matched
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: outer_vlan_user_pri
                                        
                                        	VLAN User Priority for outer tag  use            this when only one tag should be matched
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: pbb_bvid
                                        
                                        	 Backbone Vlan id 
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: pbb_dei
                                        
                                        	 dei 
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: pbb_pcp
                                        
                                        	 pcp 
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: pbb_sid
                                        
                                        	 Service Instance id 
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: pkt_type
                                        
                                        	Type of packet. See ethMscCfyEPktType\_e
                                        	**type**\:  str
                                        
                                        .. attribute:: plain_bits
                                        
                                        	Plain bits to compare. Max values\:               untagged pkt \- 40 bits after EthType             1 VLAN tag \- 24 bits after parsed EthType        2 VLAN tags\- 8 bits after parsed EthType         1 MPLS tag \- 32 bits after 1st tag               2 MPLS tags\- 8 bits following after 2nd          or atmost 5th MPLS tag                           PBB \- 16 bits after C\-SA                         PBB with VLAN tag \- 16 bits of VLAN tag 
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        	**units**\: bit
                                        
                                        .. attribute:: plain_bits_size
                                        
                                        	No. of bits used in plainBits
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: psci
                                        
                                        	 SCI to be matched value required for            ingress only, pass NULL for egress
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: tag_num
                                        
                                        	No. of MPLS or VLAN tags See ethMscCfyETagNum\_e 
                                        	**type**\:  str
                                        
                                        .. attribute:: tci
                                        
                                        	value of 'e' in TCI to match (1bit )
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: tci_c
                                        
                                        	value of 'c' in TCI to match (1bit) 
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: tci_chk
                                        
                                        	TCI bits will be checked only when this          bit is enabled. All the values of TCI bits       are mandatory when TCI check is used
                                        	**type**\:  bool
                                        
                                        .. attribute:: tci_e_xr
                                        
                                        	value of 'es' in TCI to match (1bit) 
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: tci_sc
                                        
                                        	value of 'sc' in TCI to match (1bit) 
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: tci_scb
                                        
                                        	value of 'scb' in TCI to match (1bit) 
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: tci_v
                                        
                                        	value of 'v' in TCI to match (1bit) 
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'crypto-macsec-pl-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.Es200Flow.RxFlow, self).__init__()

                                            self.yang_name = "rx-flow"
                                            self.yang_parent_name = "es200-flow"

                                            self.drop = YLeaf(YType.boolean, "drop")

                                            self.ethertype = YLeaf(YType.uint16, "ethertype")

                                            self.flow_hits = YLeaf(YType.uint64, "flow-hits")

                                            self.flow_no = YLeaf(YType.uint32, "flow-no")

                                            self.force_ctrl = YLeaf(YType.boolean, "force-ctrl")

                                            self.inner_vlan_dei = YLeaf(YType.boolean, "inner-vlan-dei")

                                            self.inner_vlan_id = YLeaf(YType.uint16, "inner-vlan-id")

                                            self.inner_vlan_user_pri = YLeaf(YType.uint8, "inner-vlan-user-pri")

                                            self.is_flow_enabled = YLeaf(YType.boolean, "is-flow-enabled")

                                            self.macda = YLeafList(YType.uint8, "macda")

                                            self.mask_da = YLeaf(YType.uint64, "mask-da")

                                            self.mask_ethertype = YLeaf(YType.uint32, "mask-ethertype")

                                            self.mask_plain_bits = YLeaf(YType.uint64, "mask-plain-bits")

                                            self.match_priority = YLeaf(YType.uint8, "match-priority")

                                            self.mpls1_bos = YLeaf(YType.uint8, "mpls1-bos")

                                            self.mpls1_exp = YLeaf(YType.uint8, "mpls1-exp")

                                            self.mpls1_label = YLeaf(YType.uint32, "mpls1-label")

                                            self.mpls2_bos = YLeaf(YType.uint8, "mpls2-bos")

                                            self.mpls2_exp = YLeaf(YType.uint8, "mpls2-exp")

                                            self.mpls2_label = YLeaf(YType.uint32, "mpls2-label")

                                            self.outer_vlan_dei = YLeaf(YType.boolean, "outer-vlan-dei")

                                            self.outer_vlan_id = YLeaf(YType.uint16, "outer-vlan-id")

                                            self.outer_vlan_user_pri = YLeaf(YType.uint8, "outer-vlan-user-pri")

                                            self.pbb_bvid = YLeaf(YType.uint32, "pbb-bvid")

                                            self.pbb_dei = YLeaf(YType.uint8, "pbb-dei")

                                            self.pbb_pcp = YLeaf(YType.uint8, "pbb-pcp")

                                            self.pbb_sid = YLeaf(YType.uint32, "pbb-sid")

                                            self.pkt_type = YLeaf(YType.str, "pkt-type")

                                            self.plain_bits = YLeaf(YType.uint64, "plain-bits")

                                            self.plain_bits_size = YLeaf(YType.uint8, "plain-bits-size")

                                            self.psci = YLeaf(YType.uint64, "psci")

                                            self.tag_num = YLeaf(YType.str, "tag-num")

                                            self.tci = YLeaf(YType.uint8, "tci")

                                            self.tci_c = YLeaf(YType.uint8, "tci-c")

                                            self.tci_chk = YLeaf(YType.boolean, "tci-chk")

                                            self.tci_e_xr = YLeaf(YType.uint8, "tci-e-xr")

                                            self.tci_sc = YLeaf(YType.uint8, "tci-sc")

                                            self.tci_scb = YLeaf(YType.uint8, "tci-scb")

                                            self.tci_v = YLeaf(YType.uint8, "tci-v")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("drop",
                                                            "ethertype",
                                                            "flow_hits",
                                                            "flow_no",
                                                            "force_ctrl",
                                                            "inner_vlan_dei",
                                                            "inner_vlan_id",
                                                            "inner_vlan_user_pri",
                                                            "is_flow_enabled",
                                                            "macda",
                                                            "mask_da",
                                                            "mask_ethertype",
                                                            "mask_plain_bits",
                                                            "match_priority",
                                                            "mpls1_bos",
                                                            "mpls1_exp",
                                                            "mpls1_label",
                                                            "mpls2_bos",
                                                            "mpls2_exp",
                                                            "mpls2_label",
                                                            "outer_vlan_dei",
                                                            "outer_vlan_id",
                                                            "outer_vlan_user_pri",
                                                            "pbb_bvid",
                                                            "pbb_dei",
                                                            "pbb_pcp",
                                                            "pbb_sid",
                                                            "pkt_type",
                                                            "plain_bits",
                                                            "plain_bits_size",
                                                            "psci",
                                                            "tag_num",
                                                            "tci",
                                                            "tci_c",
                                                            "tci_chk",
                                                            "tci_e_xr",
                                                            "tci_sc",
                                                            "tci_scb",
                                                            "tci_v") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.Es200Flow.RxFlow, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.Es200Flow.RxFlow, self).__setattr__(name, value)

                                        def has_data(self):
                                            for leaf in self.macda.getYLeafs():
                                                if (leaf.yfilter != YFilter.not_set):
                                                    return True
                                            return (
                                                self.drop.is_set or
                                                self.ethertype.is_set or
                                                self.flow_hits.is_set or
                                                self.flow_no.is_set or
                                                self.force_ctrl.is_set or
                                                self.inner_vlan_dei.is_set or
                                                self.inner_vlan_id.is_set or
                                                self.inner_vlan_user_pri.is_set or
                                                self.is_flow_enabled.is_set or
                                                self.mask_da.is_set or
                                                self.mask_ethertype.is_set or
                                                self.mask_plain_bits.is_set or
                                                self.match_priority.is_set or
                                                self.mpls1_bos.is_set or
                                                self.mpls1_exp.is_set or
                                                self.mpls1_label.is_set or
                                                self.mpls2_bos.is_set or
                                                self.mpls2_exp.is_set or
                                                self.mpls2_label.is_set or
                                                self.outer_vlan_dei.is_set or
                                                self.outer_vlan_id.is_set or
                                                self.outer_vlan_user_pri.is_set or
                                                self.pbb_bvid.is_set or
                                                self.pbb_dei.is_set or
                                                self.pbb_pcp.is_set or
                                                self.pbb_sid.is_set or
                                                self.pkt_type.is_set or
                                                self.plain_bits.is_set or
                                                self.plain_bits_size.is_set or
                                                self.psci.is_set or
                                                self.tag_num.is_set or
                                                self.tci.is_set or
                                                self.tci_c.is_set or
                                                self.tci_chk.is_set or
                                                self.tci_e_xr.is_set or
                                                self.tci_sc.is_set or
                                                self.tci_scb.is_set or
                                                self.tci_v.is_set)

                                        def has_operation(self):
                                            for leaf in self.macda.getYLeafs():
                                                if (leaf.is_set):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.drop.yfilter != YFilter.not_set or
                                                self.ethertype.yfilter != YFilter.not_set or
                                                self.flow_hits.yfilter != YFilter.not_set or
                                                self.flow_no.yfilter != YFilter.not_set or
                                                self.force_ctrl.yfilter != YFilter.not_set or
                                                self.inner_vlan_dei.yfilter != YFilter.not_set or
                                                self.inner_vlan_id.yfilter != YFilter.not_set or
                                                self.inner_vlan_user_pri.yfilter != YFilter.not_set or
                                                self.is_flow_enabled.yfilter != YFilter.not_set or
                                                self.macda.yfilter != YFilter.not_set or
                                                self.mask_da.yfilter != YFilter.not_set or
                                                self.mask_ethertype.yfilter != YFilter.not_set or
                                                self.mask_plain_bits.yfilter != YFilter.not_set or
                                                self.match_priority.yfilter != YFilter.not_set or
                                                self.mpls1_bos.yfilter != YFilter.not_set or
                                                self.mpls1_exp.yfilter != YFilter.not_set or
                                                self.mpls1_label.yfilter != YFilter.not_set or
                                                self.mpls2_bos.yfilter != YFilter.not_set or
                                                self.mpls2_exp.yfilter != YFilter.not_set or
                                                self.mpls2_label.yfilter != YFilter.not_set or
                                                self.outer_vlan_dei.yfilter != YFilter.not_set or
                                                self.outer_vlan_id.yfilter != YFilter.not_set or
                                                self.outer_vlan_user_pri.yfilter != YFilter.not_set or
                                                self.pbb_bvid.yfilter != YFilter.not_set or
                                                self.pbb_dei.yfilter != YFilter.not_set or
                                                self.pbb_pcp.yfilter != YFilter.not_set or
                                                self.pbb_sid.yfilter != YFilter.not_set or
                                                self.pkt_type.yfilter != YFilter.not_set or
                                                self.plain_bits.yfilter != YFilter.not_set or
                                                self.plain_bits_size.yfilter != YFilter.not_set or
                                                self.psci.yfilter != YFilter.not_set or
                                                self.tag_num.yfilter != YFilter.not_set or
                                                self.tci.yfilter != YFilter.not_set or
                                                self.tci_c.yfilter != YFilter.not_set or
                                                self.tci_chk.yfilter != YFilter.not_set or
                                                self.tci_e_xr.yfilter != YFilter.not_set or
                                                self.tci_sc.yfilter != YFilter.not_set or
                                                self.tci_scb.yfilter != YFilter.not_set or
                                                self.tci_v.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "rx-flow" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.drop.is_set or self.drop.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.drop.get_name_leafdata())
                                            if (self.ethertype.is_set or self.ethertype.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.ethertype.get_name_leafdata())
                                            if (self.flow_hits.is_set or self.flow_hits.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.flow_hits.get_name_leafdata())
                                            if (self.flow_no.is_set or self.flow_no.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.flow_no.get_name_leafdata())
                                            if (self.force_ctrl.is_set or self.force_ctrl.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.force_ctrl.get_name_leafdata())
                                            if (self.inner_vlan_dei.is_set or self.inner_vlan_dei.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.inner_vlan_dei.get_name_leafdata())
                                            if (self.inner_vlan_id.is_set or self.inner_vlan_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.inner_vlan_id.get_name_leafdata())
                                            if (self.inner_vlan_user_pri.is_set or self.inner_vlan_user_pri.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.inner_vlan_user_pri.get_name_leafdata())
                                            if (self.is_flow_enabled.is_set or self.is_flow_enabled.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.is_flow_enabled.get_name_leafdata())
                                            if (self.mask_da.is_set or self.mask_da.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.mask_da.get_name_leafdata())
                                            if (self.mask_ethertype.is_set or self.mask_ethertype.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.mask_ethertype.get_name_leafdata())
                                            if (self.mask_plain_bits.is_set or self.mask_plain_bits.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.mask_plain_bits.get_name_leafdata())
                                            if (self.match_priority.is_set or self.match_priority.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.match_priority.get_name_leafdata())
                                            if (self.mpls1_bos.is_set or self.mpls1_bos.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.mpls1_bos.get_name_leafdata())
                                            if (self.mpls1_exp.is_set or self.mpls1_exp.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.mpls1_exp.get_name_leafdata())
                                            if (self.mpls1_label.is_set or self.mpls1_label.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.mpls1_label.get_name_leafdata())
                                            if (self.mpls2_bos.is_set or self.mpls2_bos.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.mpls2_bos.get_name_leafdata())
                                            if (self.mpls2_exp.is_set or self.mpls2_exp.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.mpls2_exp.get_name_leafdata())
                                            if (self.mpls2_label.is_set or self.mpls2_label.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.mpls2_label.get_name_leafdata())
                                            if (self.outer_vlan_dei.is_set or self.outer_vlan_dei.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.outer_vlan_dei.get_name_leafdata())
                                            if (self.outer_vlan_id.is_set or self.outer_vlan_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.outer_vlan_id.get_name_leafdata())
                                            if (self.outer_vlan_user_pri.is_set or self.outer_vlan_user_pri.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.outer_vlan_user_pri.get_name_leafdata())
                                            if (self.pbb_bvid.is_set or self.pbb_bvid.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.pbb_bvid.get_name_leafdata())
                                            if (self.pbb_dei.is_set or self.pbb_dei.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.pbb_dei.get_name_leafdata())
                                            if (self.pbb_pcp.is_set or self.pbb_pcp.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.pbb_pcp.get_name_leafdata())
                                            if (self.pbb_sid.is_set or self.pbb_sid.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.pbb_sid.get_name_leafdata())
                                            if (self.pkt_type.is_set or self.pkt_type.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.pkt_type.get_name_leafdata())
                                            if (self.plain_bits.is_set or self.plain_bits.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.plain_bits.get_name_leafdata())
                                            if (self.plain_bits_size.is_set or self.plain_bits_size.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.plain_bits_size.get_name_leafdata())
                                            if (self.psci.is_set or self.psci.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.psci.get_name_leafdata())
                                            if (self.tag_num.is_set or self.tag_num.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tag_num.get_name_leafdata())
                                            if (self.tci.is_set or self.tci.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci.get_name_leafdata())
                                            if (self.tci_c.is_set or self.tci_c.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_c.get_name_leafdata())
                                            if (self.tci_chk.is_set or self.tci_chk.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_chk.get_name_leafdata())
                                            if (self.tci_e_xr.is_set or self.tci_e_xr.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_e_xr.get_name_leafdata())
                                            if (self.tci_sc.is_set or self.tci_sc.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_sc.get_name_leafdata())
                                            if (self.tci_scb.is_set or self.tci_scb.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_scb.get_name_leafdata())
                                            if (self.tci_v.is_set or self.tci_v.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.tci_v.get_name_leafdata())

                                            leaf_name_data.extend(self.macda.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "drop" or name == "ethertype" or name == "flow-hits" or name == "flow-no" or name == "force-ctrl" or name == "inner-vlan-dei" or name == "inner-vlan-id" or name == "inner-vlan-user-pri" or name == "is-flow-enabled" or name == "macda" or name == "mask-da" or name == "mask-ethertype" or name == "mask-plain-bits" or name == "match-priority" or name == "mpls1-bos" or name == "mpls1-exp" or name == "mpls1-label" or name == "mpls2-bos" or name == "mpls2-exp" or name == "mpls2-label" or name == "outer-vlan-dei" or name == "outer-vlan-id" or name == "outer-vlan-user-pri" or name == "pbb-bvid" or name == "pbb-dei" or name == "pbb-pcp" or name == "pbb-sid" or name == "pkt-type" or name == "plain-bits" or name == "plain-bits-size" or name == "psci" or name == "tag-num" or name == "tci" or name == "tci-c" or name == "tci-chk" or name == "tci-e-xr" or name == "tci-sc" or name == "tci-scb" or name == "tci-v"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "drop"):
                                                self.drop = value
                                                self.drop.value_namespace = name_space
                                                self.drop.value_namespace_prefix = name_space_prefix
                                            if(value_path == "ethertype"):
                                                self.ethertype = value
                                                self.ethertype.value_namespace = name_space
                                                self.ethertype.value_namespace_prefix = name_space_prefix
                                            if(value_path == "flow-hits"):
                                                self.flow_hits = value
                                                self.flow_hits.value_namespace = name_space
                                                self.flow_hits.value_namespace_prefix = name_space_prefix
                                            if(value_path == "flow-no"):
                                                self.flow_no = value
                                                self.flow_no.value_namespace = name_space
                                                self.flow_no.value_namespace_prefix = name_space_prefix
                                            if(value_path == "force-ctrl"):
                                                self.force_ctrl = value
                                                self.force_ctrl.value_namespace = name_space
                                                self.force_ctrl.value_namespace_prefix = name_space_prefix
                                            if(value_path == "inner-vlan-dei"):
                                                self.inner_vlan_dei = value
                                                self.inner_vlan_dei.value_namespace = name_space
                                                self.inner_vlan_dei.value_namespace_prefix = name_space_prefix
                                            if(value_path == "inner-vlan-id"):
                                                self.inner_vlan_id = value
                                                self.inner_vlan_id.value_namespace = name_space
                                                self.inner_vlan_id.value_namespace_prefix = name_space_prefix
                                            if(value_path == "inner-vlan-user-pri"):
                                                self.inner_vlan_user_pri = value
                                                self.inner_vlan_user_pri.value_namespace = name_space
                                                self.inner_vlan_user_pri.value_namespace_prefix = name_space_prefix
                                            if(value_path == "is-flow-enabled"):
                                                self.is_flow_enabled = value
                                                self.is_flow_enabled.value_namespace = name_space
                                                self.is_flow_enabled.value_namespace_prefix = name_space_prefix
                                            if(value_path == "macda"):
                                                self.macda.append(value)
                                            if(value_path == "mask-da"):
                                                self.mask_da = value
                                                self.mask_da.value_namespace = name_space
                                                self.mask_da.value_namespace_prefix = name_space_prefix
                                            if(value_path == "mask-ethertype"):
                                                self.mask_ethertype = value
                                                self.mask_ethertype.value_namespace = name_space
                                                self.mask_ethertype.value_namespace_prefix = name_space_prefix
                                            if(value_path == "mask-plain-bits"):
                                                self.mask_plain_bits = value
                                                self.mask_plain_bits.value_namespace = name_space
                                                self.mask_plain_bits.value_namespace_prefix = name_space_prefix
                                            if(value_path == "match-priority"):
                                                self.match_priority = value
                                                self.match_priority.value_namespace = name_space
                                                self.match_priority.value_namespace_prefix = name_space_prefix
                                            if(value_path == "mpls1-bos"):
                                                self.mpls1_bos = value
                                                self.mpls1_bos.value_namespace = name_space
                                                self.mpls1_bos.value_namespace_prefix = name_space_prefix
                                            if(value_path == "mpls1-exp"):
                                                self.mpls1_exp = value
                                                self.mpls1_exp.value_namespace = name_space
                                                self.mpls1_exp.value_namespace_prefix = name_space_prefix
                                            if(value_path == "mpls1-label"):
                                                self.mpls1_label = value
                                                self.mpls1_label.value_namespace = name_space
                                                self.mpls1_label.value_namespace_prefix = name_space_prefix
                                            if(value_path == "mpls2-bos"):
                                                self.mpls2_bos = value
                                                self.mpls2_bos.value_namespace = name_space
                                                self.mpls2_bos.value_namespace_prefix = name_space_prefix
                                            if(value_path == "mpls2-exp"):
                                                self.mpls2_exp = value
                                                self.mpls2_exp.value_namespace = name_space
                                                self.mpls2_exp.value_namespace_prefix = name_space_prefix
                                            if(value_path == "mpls2-label"):
                                                self.mpls2_label = value
                                                self.mpls2_label.value_namespace = name_space
                                                self.mpls2_label.value_namespace_prefix = name_space_prefix
                                            if(value_path == "outer-vlan-dei"):
                                                self.outer_vlan_dei = value
                                                self.outer_vlan_dei.value_namespace = name_space
                                                self.outer_vlan_dei.value_namespace_prefix = name_space_prefix
                                            if(value_path == "outer-vlan-id"):
                                                self.outer_vlan_id = value
                                                self.outer_vlan_id.value_namespace = name_space
                                                self.outer_vlan_id.value_namespace_prefix = name_space_prefix
                                            if(value_path == "outer-vlan-user-pri"):
                                                self.outer_vlan_user_pri = value
                                                self.outer_vlan_user_pri.value_namespace = name_space
                                                self.outer_vlan_user_pri.value_namespace_prefix = name_space_prefix
                                            if(value_path == "pbb-bvid"):
                                                self.pbb_bvid = value
                                                self.pbb_bvid.value_namespace = name_space
                                                self.pbb_bvid.value_namespace_prefix = name_space_prefix
                                            if(value_path == "pbb-dei"):
                                                self.pbb_dei = value
                                                self.pbb_dei.value_namespace = name_space
                                                self.pbb_dei.value_namespace_prefix = name_space_prefix
                                            if(value_path == "pbb-pcp"):
                                                self.pbb_pcp = value
                                                self.pbb_pcp.value_namespace = name_space
                                                self.pbb_pcp.value_namespace_prefix = name_space_prefix
                                            if(value_path == "pbb-sid"):
                                                self.pbb_sid = value
                                                self.pbb_sid.value_namespace = name_space
                                                self.pbb_sid.value_namespace_prefix = name_space_prefix
                                            if(value_path == "pkt-type"):
                                                self.pkt_type = value
                                                self.pkt_type.value_namespace = name_space
                                                self.pkt_type.value_namespace_prefix = name_space_prefix
                                            if(value_path == "plain-bits"):
                                                self.plain_bits = value
                                                self.plain_bits.value_namespace = name_space
                                                self.plain_bits.value_namespace_prefix = name_space_prefix
                                            if(value_path == "plain-bits-size"):
                                                self.plain_bits_size = value
                                                self.plain_bits_size.value_namespace = name_space
                                                self.plain_bits_size.value_namespace_prefix = name_space_prefix
                                            if(value_path == "psci"):
                                                self.psci = value
                                                self.psci.value_namespace = name_space
                                                self.psci.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tag-num"):
                                                self.tag_num = value
                                                self.tag_num.value_namespace = name_space
                                                self.tag_num.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci"):
                                                self.tci = value
                                                self.tci.value_namespace = name_space
                                                self.tci.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-c"):
                                                self.tci_c = value
                                                self.tci_c.value_namespace = name_space
                                                self.tci_c.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-chk"):
                                                self.tci_chk = value
                                                self.tci_chk.value_namespace = name_space
                                                self.tci_chk.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-e-xr"):
                                                self.tci_e_xr = value
                                                self.tci_e_xr.value_namespace = name_space
                                                self.tci_e_xr.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-sc"):
                                                self.tci_sc = value
                                                self.tci_sc.value_namespace = name_space
                                                self.tci_sc.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-scb"):
                                                self.tci_scb = value
                                                self.tci_scb.value_namespace = name_space
                                                self.tci_scb.value_namespace_prefix = name_space_prefix
                                            if(value_path == "tci-v"):
                                                self.tci_v = value
                                                self.tci_v.value_namespace = name_space
                                                self.tci_v.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            (self.rx_flow is not None and self.rx_flow.has_data()) or
                                            (self.tx_flow is not None and self.tx_flow.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            (self.rx_flow is not None and self.rx_flow.has_operation()) or
                                            (self.tx_flow is not None and self.tx_flow.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "es200-flow" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "rx-flow"):
                                            if (self.rx_flow is None):
                                                self.rx_flow = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.Es200Flow.RxFlow()
                                                self.rx_flow.parent = self
                                                self._children_name_map["rx_flow"] = "rx-flow"
                                            return self.rx_flow

                                        if (child_yang_name == "tx-flow"):
                                            if (self.tx_flow is None):
                                                self.tx_flow = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.Es200Flow.TxFlow()
                                                self.tx_flow.parent = self
                                                self._children_name_map["tx_flow"] = "tx-flow"
                                            return self.tx_flow

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "rx-flow" or name == "tx-flow"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        pass

                                def has_data(self):
                                    return (
                                        self.type.is_set or
                                        (self.es200_flow is not None and self.es200_flow.has_data()) or
                                        (self.msfpga_flow is not None and self.msfpga_flow.has_data()))

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.type.yfilter != YFilter.not_set or
                                        (self.es200_flow is not None and self.es200_flow.has_operation()) or
                                        (self.msfpga_flow is not None and self.msfpga_flow.has_operation()))

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ext" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.type.is_set or self.type.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.type.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "es200-flow"):
                                        if (self.es200_flow is None):
                                            self.es200_flow = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.Es200Flow()
                                            self.es200_flow.parent = self
                                            self._children_name_map["es200_flow"] = "es200-flow"
                                        return self.es200_flow

                                    if (child_yang_name == "msfpga-flow"):
                                        if (self.msfpga_flow is None):
                                            self.msfpga_flow = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext.MsfpgaFlow()
                                            self.msfpga_flow.parent = self
                                            self._children_name_map["msfpga_flow"] = "msfpga-flow"
                                        return self.msfpga_flow

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "es200-flow" or name == "msfpga-flow" or name == "type"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "type"):
                                        self.type = value
                                        self.type.value_namespace = name_space
                                        self.type.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    self.flow_id.is_set or
                                    (self.ext is not None and self.ext.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.flow_id.yfilter != YFilter.not_set or
                                    (self.ext is not None and self.ext.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "hw-flow" + "[flow-id='" + self.flow_id.get() + "']" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.flow_id.is_set or self.flow_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.flow_id.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ext"):
                                    if (self.ext is None):
                                        self.ext = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow.Ext()
                                        self.ext.parent = self
                                        self._children_name_map["ext"] = "ext"
                                    return self.ext

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ext" or name == "flow-id"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "flow-id"):
                                    self.flow_id = value
                                    self.flow_id.value_namespace = name_space
                                    self.flow_id.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.hw_flow:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.hw_flow:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "hw-flow-s" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "hw-flow"):
                                for c in self.hw_flow:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS.HwFlow()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.hw_flow.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "hw-flow"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class SwStatistics(Entity):
                        """
                        The Software Statistics
                        
                        .. attribute:: ext
                        
                        	ext
                        	**type**\:   :py:class:`Ext <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext>`
                        
                        

                        """

                        _prefix = 'crypto-macsec-pl-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics, self).__init__()

                            self.yang_name = "sw-statistics"
                            self.yang_parent_name = "interface"

                            self.ext = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext()
                            self.ext.parent = self
                            self._children_name_map["ext"] = "ext"
                            self._children_yang_names.add("ext")


                        class Ext(Entity):
                            """
                            ext
                            
                            .. attribute:: es200_stats
                            
                            	ES200 Stats
                            	**type**\:   :py:class:`Es200Stats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats>`
                            
                            .. attribute:: msfpga_stats
                            
                            	MSFPGA Stats
                            	**type**\:   :py:class:`MsfpgaStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats>`
                            
                            .. attribute:: type
                            
                            	type
                            	**type**\:   :py:class:`MacsecCard <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecCard>`
                            
                            .. attribute:: xlfpga_stats
                            
                            	XLFPGA Stats
                            	**type**\:   :py:class:`XlfpgaStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.XlfpgaStats>`
                            
                            

                            """

                            _prefix = 'crypto-macsec-pl-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext, self).__init__()

                                self.yang_name = "ext"
                                self.yang_parent_name = "sw-statistics"

                                self.type = YLeaf(YType.enumeration, "type")

                                self.es200_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats()
                                self.es200_stats.parent = self
                                self._children_name_map["es200_stats"] = "es200-stats"
                                self._children_yang_names.add("es200-stats")

                                self.msfpga_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats()
                                self.msfpga_stats.parent = self
                                self._children_name_map["msfpga_stats"] = "msfpga-stats"
                                self._children_yang_names.add("msfpga-stats")

                                self.xlfpga_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.XlfpgaStats()
                                self.xlfpga_stats.parent = self
                                self._children_name_map["xlfpga_stats"] = "xlfpga-stats"
                                self._children_yang_names.add("xlfpga-stats")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("type") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext, self).__setattr__(name, value)


                            class MsfpgaStats(Entity):
                                """
                                MSFPGA Stats
                                
                                .. attribute:: rx_interface_macsec_stats
                                
                                	Rx interface Macsec Stats
                                	**type**\:   :py:class:`RxInterfaceMacsecStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats.RxInterfaceMacsecStats>`
                                
                                .. attribute:: rx_sa_stats
                                
                                	Rx SA Stats
                                	**type**\:   :py:class:`RxSaStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats.RxSaStats>`
                                
                                .. attribute:: tx_interface_macsec_stats
                                
                                	Tx interface Macsec Stats
                                	**type**\:   :py:class:`TxInterfaceMacsecStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats.TxInterfaceMacsecStats>`
                                
                                .. attribute:: tx_sa_stats
                                
                                	Tx SA Stats
                                	**type**\:   :py:class:`TxSaStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats.TxSaStats>`
                                
                                

                                """

                                _prefix = 'crypto-macsec-pl-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats, self).__init__()

                                    self.yang_name = "msfpga-stats"
                                    self.yang_parent_name = "ext"

                                    self.rx_interface_macsec_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats.RxInterfaceMacsecStats()
                                    self.rx_interface_macsec_stats.parent = self
                                    self._children_name_map["rx_interface_macsec_stats"] = "rx-interface-macsec-stats"
                                    self._children_yang_names.add("rx-interface-macsec-stats")

                                    self.rx_sa_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats.RxSaStats()
                                    self.rx_sa_stats.parent = self
                                    self._children_name_map["rx_sa_stats"] = "rx-sa-stats"
                                    self._children_yang_names.add("rx-sa-stats")

                                    self.tx_interface_macsec_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats.TxInterfaceMacsecStats()
                                    self.tx_interface_macsec_stats.parent = self
                                    self._children_name_map["tx_interface_macsec_stats"] = "tx-interface-macsec-stats"
                                    self._children_yang_names.add("tx-interface-macsec-stats")

                                    self.tx_sa_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats.TxSaStats()
                                    self.tx_sa_stats.parent = self
                                    self._children_name_map["tx_sa_stats"] = "tx-sa-stats"
                                    self._children_yang_names.add("tx-sa-stats")


                                class TxSaStats(Entity):
                                    """
                                    Tx SA Stats
                                    
                                    .. attribute:: out_octets_encrypted
                                    
                                    	Tx Octets Encrypted
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_octets_protected
                                    
                                    	Tx Octets Protected
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_pkts_encrypted
                                    
                                    	Tx Pkts Encrypted
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_pkts_protected
                                    
                                    	Tx Pkts Protected
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats.TxSaStats, self).__init__()

                                        self.yang_name = "tx-sa-stats"
                                        self.yang_parent_name = "msfpga-stats"

                                        self.out_octets_encrypted = YLeaf(YType.uint64, "out-octets-encrypted")

                                        self.out_octets_protected = YLeaf(YType.uint64, "out-octets-protected")

                                        self.out_pkts_encrypted = YLeaf(YType.uint64, "out-pkts-encrypted")

                                        self.out_pkts_protected = YLeaf(YType.uint64, "out-pkts-protected")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("out_octets_encrypted",
                                                        "out_octets_protected",
                                                        "out_pkts_encrypted",
                                                        "out_pkts_protected") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats.TxSaStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats.TxSaStats, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.out_octets_encrypted.is_set or
                                            self.out_octets_protected.is_set or
                                            self.out_pkts_encrypted.is_set or
                                            self.out_pkts_protected.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.out_octets_encrypted.yfilter != YFilter.not_set or
                                            self.out_octets_protected.yfilter != YFilter.not_set or
                                            self.out_pkts_encrypted.yfilter != YFilter.not_set or
                                            self.out_pkts_protected.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "tx-sa-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.out_octets_encrypted.is_set or self.out_octets_encrypted.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_octets_encrypted.get_name_leafdata())
                                        if (self.out_octets_protected.is_set or self.out_octets_protected.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_octets_protected.get_name_leafdata())
                                        if (self.out_pkts_encrypted.is_set or self.out_pkts_encrypted.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_pkts_encrypted.get_name_leafdata())
                                        if (self.out_pkts_protected.is_set or self.out_pkts_protected.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_pkts_protected.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "out-octets-encrypted" or name == "out-octets-protected" or name == "out-pkts-encrypted" or name == "out-pkts-protected"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "out-octets-encrypted"):
                                            self.out_octets_encrypted = value
                                            self.out_octets_encrypted.value_namespace = name_space
                                            self.out_octets_encrypted.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-octets-protected"):
                                            self.out_octets_protected = value
                                            self.out_octets_protected.value_namespace = name_space
                                            self.out_octets_protected.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-pkts-encrypted"):
                                            self.out_pkts_encrypted = value
                                            self.out_pkts_encrypted.value_namespace = name_space
                                            self.out_pkts_encrypted.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-pkts-protected"):
                                            self.out_pkts_protected = value
                                            self.out_pkts_protected.value_namespace = name_space
                                            self.out_pkts_protected.value_namespace_prefix = name_space_prefix


                                class RxSaStats(Entity):
                                    """
                                    Rx SA Stats
                                    
                                    .. attribute:: in_octets_decrypted
                                    
                                    	Rx Octets Decrypted
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_octets_validated
                                    
                                    	Rx Octets Validated
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_delayed
                                    
                                    	Rx Pkts Delayed
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_invalid
                                    
                                    	Rx Pkts Invalid
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_late
                                    
                                    	Rx Pkts Late
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_not_using_sa
                                    
                                    	Rx Pkts Not Using SA
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_not_valid
                                    
                                    	Rx Pkts Not Valid
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_ok
                                    
                                    	Rx Pkts OK
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_unchecked
                                    
                                    	Rx Pkts Unchecked
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_unused_sa
                                    
                                    	Rx Pkts Unused SA
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats.RxSaStats, self).__init__()

                                        self.yang_name = "rx-sa-stats"
                                        self.yang_parent_name = "msfpga-stats"

                                        self.in_octets_decrypted = YLeaf(YType.uint64, "in-octets-decrypted")

                                        self.in_octets_validated = YLeaf(YType.uint64, "in-octets-validated")

                                        self.in_pkts_delayed = YLeaf(YType.uint64, "in-pkts-delayed")

                                        self.in_pkts_invalid = YLeaf(YType.uint64, "in-pkts-invalid")

                                        self.in_pkts_late = YLeaf(YType.uint64, "in-pkts-late")

                                        self.in_pkts_not_using_sa = YLeaf(YType.uint64, "in-pkts-not-using-sa")

                                        self.in_pkts_not_valid = YLeaf(YType.uint64, "in-pkts-not-valid")

                                        self.in_pkts_ok = YLeaf(YType.uint64, "in-pkts-ok")

                                        self.in_pkts_unchecked = YLeaf(YType.uint64, "in-pkts-unchecked")

                                        self.in_pkts_unused_sa = YLeaf(YType.uint64, "in-pkts-unused-sa")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("in_octets_decrypted",
                                                        "in_octets_validated",
                                                        "in_pkts_delayed",
                                                        "in_pkts_invalid",
                                                        "in_pkts_late",
                                                        "in_pkts_not_using_sa",
                                                        "in_pkts_not_valid",
                                                        "in_pkts_ok",
                                                        "in_pkts_unchecked",
                                                        "in_pkts_unused_sa") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats.RxSaStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats.RxSaStats, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.in_octets_decrypted.is_set or
                                            self.in_octets_validated.is_set or
                                            self.in_pkts_delayed.is_set or
                                            self.in_pkts_invalid.is_set or
                                            self.in_pkts_late.is_set or
                                            self.in_pkts_not_using_sa.is_set or
                                            self.in_pkts_not_valid.is_set or
                                            self.in_pkts_ok.is_set or
                                            self.in_pkts_unchecked.is_set or
                                            self.in_pkts_unused_sa.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.in_octets_decrypted.yfilter != YFilter.not_set or
                                            self.in_octets_validated.yfilter != YFilter.not_set or
                                            self.in_pkts_delayed.yfilter != YFilter.not_set or
                                            self.in_pkts_invalid.yfilter != YFilter.not_set or
                                            self.in_pkts_late.yfilter != YFilter.not_set or
                                            self.in_pkts_not_using_sa.yfilter != YFilter.not_set or
                                            self.in_pkts_not_valid.yfilter != YFilter.not_set or
                                            self.in_pkts_ok.yfilter != YFilter.not_set or
                                            self.in_pkts_unchecked.yfilter != YFilter.not_set or
                                            self.in_pkts_unused_sa.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "rx-sa-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.in_octets_decrypted.is_set or self.in_octets_decrypted.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_octets_decrypted.get_name_leafdata())
                                        if (self.in_octets_validated.is_set or self.in_octets_validated.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_octets_validated.get_name_leafdata())
                                        if (self.in_pkts_delayed.is_set or self.in_pkts_delayed.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_delayed.get_name_leafdata())
                                        if (self.in_pkts_invalid.is_set or self.in_pkts_invalid.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_invalid.get_name_leafdata())
                                        if (self.in_pkts_late.is_set or self.in_pkts_late.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_late.get_name_leafdata())
                                        if (self.in_pkts_not_using_sa.is_set or self.in_pkts_not_using_sa.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_not_using_sa.get_name_leafdata())
                                        if (self.in_pkts_not_valid.is_set or self.in_pkts_not_valid.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_not_valid.get_name_leafdata())
                                        if (self.in_pkts_ok.is_set or self.in_pkts_ok.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_ok.get_name_leafdata())
                                        if (self.in_pkts_unchecked.is_set or self.in_pkts_unchecked.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_unchecked.get_name_leafdata())
                                        if (self.in_pkts_unused_sa.is_set or self.in_pkts_unused_sa.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_unused_sa.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "in-octets-decrypted" or name == "in-octets-validated" or name == "in-pkts-delayed" or name == "in-pkts-invalid" or name == "in-pkts-late" or name == "in-pkts-not-using-sa" or name == "in-pkts-not-valid" or name == "in-pkts-ok" or name == "in-pkts-unchecked" or name == "in-pkts-unused-sa"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "in-octets-decrypted"):
                                            self.in_octets_decrypted = value
                                            self.in_octets_decrypted.value_namespace = name_space
                                            self.in_octets_decrypted.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-octets-validated"):
                                            self.in_octets_validated = value
                                            self.in_octets_validated.value_namespace = name_space
                                            self.in_octets_validated.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-delayed"):
                                            self.in_pkts_delayed = value
                                            self.in_pkts_delayed.value_namespace = name_space
                                            self.in_pkts_delayed.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-invalid"):
                                            self.in_pkts_invalid = value
                                            self.in_pkts_invalid.value_namespace = name_space
                                            self.in_pkts_invalid.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-late"):
                                            self.in_pkts_late = value
                                            self.in_pkts_late.value_namespace = name_space
                                            self.in_pkts_late.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-not-using-sa"):
                                            self.in_pkts_not_using_sa = value
                                            self.in_pkts_not_using_sa.value_namespace = name_space
                                            self.in_pkts_not_using_sa.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-not-valid"):
                                            self.in_pkts_not_valid = value
                                            self.in_pkts_not_valid.value_namespace = name_space
                                            self.in_pkts_not_valid.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-ok"):
                                            self.in_pkts_ok = value
                                            self.in_pkts_ok.value_namespace = name_space
                                            self.in_pkts_ok.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-unchecked"):
                                            self.in_pkts_unchecked = value
                                            self.in_pkts_unchecked.value_namespace = name_space
                                            self.in_pkts_unchecked.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-unused-sa"):
                                            self.in_pkts_unused_sa = value
                                            self.in_pkts_unused_sa.value_namespace = name_space
                                            self.in_pkts_unused_sa.value_namespace_prefix = name_space_prefix


                                class TxInterfaceMacsecStats(Entity):
                                    """
                                    Tx interface Macsec Stats
                                    
                                    .. attribute:: out_pkt_too_long
                                    
                                    	Tx Pkts Too Long
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_pkt_uncontrolled
                                    
                                    	Tx Pkts Uncontrolled
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_pkt_untagged
                                    
                                    	Tx Pkts Untagged
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats.TxInterfaceMacsecStats, self).__init__()

                                        self.yang_name = "tx-interface-macsec-stats"
                                        self.yang_parent_name = "msfpga-stats"

                                        self.out_pkt_too_long = YLeaf(YType.uint64, "out-pkt-too-long")

                                        self.out_pkt_uncontrolled = YLeaf(YType.uint64, "out-pkt-uncontrolled")

                                        self.out_pkt_untagged = YLeaf(YType.uint64, "out-pkt-untagged")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("out_pkt_too_long",
                                                        "out_pkt_uncontrolled",
                                                        "out_pkt_untagged") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats.TxInterfaceMacsecStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats.TxInterfaceMacsecStats, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.out_pkt_too_long.is_set or
                                            self.out_pkt_uncontrolled.is_set or
                                            self.out_pkt_untagged.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.out_pkt_too_long.yfilter != YFilter.not_set or
                                            self.out_pkt_uncontrolled.yfilter != YFilter.not_set or
                                            self.out_pkt_untagged.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "tx-interface-macsec-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.out_pkt_too_long.is_set or self.out_pkt_too_long.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_pkt_too_long.get_name_leafdata())
                                        if (self.out_pkt_uncontrolled.is_set or self.out_pkt_uncontrolled.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_pkt_uncontrolled.get_name_leafdata())
                                        if (self.out_pkt_untagged.is_set or self.out_pkt_untagged.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_pkt_untagged.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "out-pkt-too-long" or name == "out-pkt-uncontrolled" or name == "out-pkt-untagged"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "out-pkt-too-long"):
                                            self.out_pkt_too_long = value
                                            self.out_pkt_too_long.value_namespace = name_space
                                            self.out_pkt_too_long.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-pkt-uncontrolled"):
                                            self.out_pkt_uncontrolled = value
                                            self.out_pkt_uncontrolled.value_namespace = name_space
                                            self.out_pkt_uncontrolled.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-pkt-untagged"):
                                            self.out_pkt_untagged = value
                                            self.out_pkt_untagged.value_namespace = name_space
                                            self.out_pkt_untagged.value_namespace_prefix = name_space_prefix


                                class RxInterfaceMacsecStats(Entity):
                                    """
                                    Rx interface Macsec Stats
                                    
                                    .. attribute:: in_pkt_bad_tag
                                    
                                    	Rx Pkts Bad tag
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkt_no_sci
                                    
                                    	Rx Pkts No Sci
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkt_notag
                                    
                                    	Rx Pkts Notag
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkt_overrun
                                    
                                    	Rx Pkts Over Run
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkt_tagged
                                    
                                    	Rx Pkts Tagged
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkt_uncontrolled
                                    
                                    	Rx Pkts Uncontrolled
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkt_unknown_sci
                                    
                                    	Rx Pkts Unknown Sci
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkt_untagged
                                    
                                    	Rx Pkts Untagged
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats.RxInterfaceMacsecStats, self).__init__()

                                        self.yang_name = "rx-interface-macsec-stats"
                                        self.yang_parent_name = "msfpga-stats"

                                        self.in_pkt_bad_tag = YLeaf(YType.uint64, "in-pkt-bad-tag")

                                        self.in_pkt_no_sci = YLeaf(YType.uint64, "in-pkt-no-sci")

                                        self.in_pkt_notag = YLeaf(YType.uint64, "in-pkt-notag")

                                        self.in_pkt_overrun = YLeaf(YType.uint64, "in-pkt-overrun")

                                        self.in_pkt_tagged = YLeaf(YType.uint64, "in-pkt-tagged")

                                        self.in_pkt_uncontrolled = YLeaf(YType.uint64, "in-pkt-uncontrolled")

                                        self.in_pkt_unknown_sci = YLeaf(YType.uint64, "in-pkt-unknown-sci")

                                        self.in_pkt_untagged = YLeaf(YType.uint64, "in-pkt-untagged")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("in_pkt_bad_tag",
                                                        "in_pkt_no_sci",
                                                        "in_pkt_notag",
                                                        "in_pkt_overrun",
                                                        "in_pkt_tagged",
                                                        "in_pkt_uncontrolled",
                                                        "in_pkt_unknown_sci",
                                                        "in_pkt_untagged") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats.RxInterfaceMacsecStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats.RxInterfaceMacsecStats, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.in_pkt_bad_tag.is_set or
                                            self.in_pkt_no_sci.is_set or
                                            self.in_pkt_notag.is_set or
                                            self.in_pkt_overrun.is_set or
                                            self.in_pkt_tagged.is_set or
                                            self.in_pkt_uncontrolled.is_set or
                                            self.in_pkt_unknown_sci.is_set or
                                            self.in_pkt_untagged.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.in_pkt_bad_tag.yfilter != YFilter.not_set or
                                            self.in_pkt_no_sci.yfilter != YFilter.not_set or
                                            self.in_pkt_notag.yfilter != YFilter.not_set or
                                            self.in_pkt_overrun.yfilter != YFilter.not_set or
                                            self.in_pkt_tagged.yfilter != YFilter.not_set or
                                            self.in_pkt_uncontrolled.yfilter != YFilter.not_set or
                                            self.in_pkt_unknown_sci.yfilter != YFilter.not_set or
                                            self.in_pkt_untagged.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "rx-interface-macsec-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.in_pkt_bad_tag.is_set or self.in_pkt_bad_tag.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkt_bad_tag.get_name_leafdata())
                                        if (self.in_pkt_no_sci.is_set or self.in_pkt_no_sci.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkt_no_sci.get_name_leafdata())
                                        if (self.in_pkt_notag.is_set or self.in_pkt_notag.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkt_notag.get_name_leafdata())
                                        if (self.in_pkt_overrun.is_set or self.in_pkt_overrun.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkt_overrun.get_name_leafdata())
                                        if (self.in_pkt_tagged.is_set or self.in_pkt_tagged.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkt_tagged.get_name_leafdata())
                                        if (self.in_pkt_uncontrolled.is_set or self.in_pkt_uncontrolled.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkt_uncontrolled.get_name_leafdata())
                                        if (self.in_pkt_unknown_sci.is_set or self.in_pkt_unknown_sci.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkt_unknown_sci.get_name_leafdata())
                                        if (self.in_pkt_untagged.is_set or self.in_pkt_untagged.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkt_untagged.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "in-pkt-bad-tag" or name == "in-pkt-no-sci" or name == "in-pkt-notag" or name == "in-pkt-overrun" or name == "in-pkt-tagged" or name == "in-pkt-uncontrolled" or name == "in-pkt-unknown-sci" or name == "in-pkt-untagged"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "in-pkt-bad-tag"):
                                            self.in_pkt_bad_tag = value
                                            self.in_pkt_bad_tag.value_namespace = name_space
                                            self.in_pkt_bad_tag.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkt-no-sci"):
                                            self.in_pkt_no_sci = value
                                            self.in_pkt_no_sci.value_namespace = name_space
                                            self.in_pkt_no_sci.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkt-notag"):
                                            self.in_pkt_notag = value
                                            self.in_pkt_notag.value_namespace = name_space
                                            self.in_pkt_notag.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkt-overrun"):
                                            self.in_pkt_overrun = value
                                            self.in_pkt_overrun.value_namespace = name_space
                                            self.in_pkt_overrun.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkt-tagged"):
                                            self.in_pkt_tagged = value
                                            self.in_pkt_tagged.value_namespace = name_space
                                            self.in_pkt_tagged.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkt-uncontrolled"):
                                            self.in_pkt_uncontrolled = value
                                            self.in_pkt_uncontrolled.value_namespace = name_space
                                            self.in_pkt_uncontrolled.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkt-unknown-sci"):
                                            self.in_pkt_unknown_sci = value
                                            self.in_pkt_unknown_sci.value_namespace = name_space
                                            self.in_pkt_unknown_sci.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkt-untagged"):
                                            self.in_pkt_untagged = value
                                            self.in_pkt_untagged.value_namespace = name_space
                                            self.in_pkt_untagged.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    return (
                                        (self.rx_interface_macsec_stats is not None and self.rx_interface_macsec_stats.has_data()) or
                                        (self.rx_sa_stats is not None and self.rx_sa_stats.has_data()) or
                                        (self.tx_interface_macsec_stats is not None and self.tx_interface_macsec_stats.has_data()) or
                                        (self.tx_sa_stats is not None and self.tx_sa_stats.has_data()))

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        (self.rx_interface_macsec_stats is not None and self.rx_interface_macsec_stats.has_operation()) or
                                        (self.rx_sa_stats is not None and self.rx_sa_stats.has_operation()) or
                                        (self.tx_interface_macsec_stats is not None and self.tx_interface_macsec_stats.has_operation()) or
                                        (self.tx_sa_stats is not None and self.tx_sa_stats.has_operation()))

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "msfpga-stats" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "rx-interface-macsec-stats"):
                                        if (self.rx_interface_macsec_stats is None):
                                            self.rx_interface_macsec_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats.RxInterfaceMacsecStats()
                                            self.rx_interface_macsec_stats.parent = self
                                            self._children_name_map["rx_interface_macsec_stats"] = "rx-interface-macsec-stats"
                                        return self.rx_interface_macsec_stats

                                    if (child_yang_name == "rx-sa-stats"):
                                        if (self.rx_sa_stats is None):
                                            self.rx_sa_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats.RxSaStats()
                                            self.rx_sa_stats.parent = self
                                            self._children_name_map["rx_sa_stats"] = "rx-sa-stats"
                                        return self.rx_sa_stats

                                    if (child_yang_name == "tx-interface-macsec-stats"):
                                        if (self.tx_interface_macsec_stats is None):
                                            self.tx_interface_macsec_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats.TxInterfaceMacsecStats()
                                            self.tx_interface_macsec_stats.parent = self
                                            self._children_name_map["tx_interface_macsec_stats"] = "tx-interface-macsec-stats"
                                        return self.tx_interface_macsec_stats

                                    if (child_yang_name == "tx-sa-stats"):
                                        if (self.tx_sa_stats is None):
                                            self.tx_sa_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats.TxSaStats()
                                            self.tx_sa_stats.parent = self
                                            self._children_name_map["tx_sa_stats"] = "tx-sa-stats"
                                        return self.tx_sa_stats

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "rx-interface-macsec-stats" or name == "rx-sa-stats" or name == "tx-interface-macsec-stats" or name == "tx-sa-stats"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class XlfpgaStats(Entity):
                                """
                                XLFPGA Stats
                                
                                .. attribute:: macsec_rx_stats
                                
                                	Rx SC and SA Level Stats
                                	**type**\:   :py:class:`MacsecRxStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.XlfpgaStats.MacsecRxStats>`
                                
                                .. attribute:: macsec_tx_stats
                                
                                	Tx SC and SA Level Stats
                                	**type**\:   :py:class:`MacsecTxStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.XlfpgaStats.MacsecTxStats>`
                                
                                

                                """

                                _prefix = 'crypto-macsec-pl-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.XlfpgaStats, self).__init__()

                                    self.yang_name = "xlfpga-stats"
                                    self.yang_parent_name = "ext"

                                    self.macsec_rx_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.XlfpgaStats.MacsecRxStats()
                                    self.macsec_rx_stats.parent = self
                                    self._children_name_map["macsec_rx_stats"] = "macsec-rx-stats"
                                    self._children_yang_names.add("macsec-rx-stats")

                                    self.macsec_tx_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.XlfpgaStats.MacsecTxStats()
                                    self.macsec_tx_stats.parent = self
                                    self._children_name_map["macsec_tx_stats"] = "macsec-tx-stats"
                                    self._children_yang_names.add("macsec-tx-stats")


                                class MacsecTxStats(Entity):
                                    """
                                    Tx SC and SA Level Stats
                                    
                                    .. attribute:: current_an
                                    
                                    	Current Tx AN
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sa_encrypted_pkts
                                    
                                    	Current Tx SA Encrypted Packets
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_bypass_pkts
                                    
                                    	Tx Bypass Packets
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_dropped_pkts
                                    
                                    	Tx Dropped Packets
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_eapol_pkts
                                    
                                    	Tx Eapol Packets
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_encrypted_octets
                                    
                                    	Tx Octets Encrypted
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_encrypted_pkts
                                    
                                    	Tx packets Encrypted
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_overrun_pkts
                                    
                                    	Tx Overrun Packets
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_toolong_pkts
                                    
                                    	Tx Pkts Too Long
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_untagged_pkts
                                    
                                    	Tx Untagged Packets
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.XlfpgaStats.MacsecTxStats, self).__init__()

                                        self.yang_name = "macsec-tx-stats"
                                        self.yang_parent_name = "xlfpga-stats"

                                        self.current_an = YLeaf(YType.uint64, "current-an")

                                        self.sa_encrypted_pkts = YLeaf(YType.uint64, "sa-encrypted-pkts")

                                        self.sc_bypass_pkts = YLeaf(YType.uint64, "sc-bypass-pkts")

                                        self.sc_dropped_pkts = YLeaf(YType.uint64, "sc-dropped-pkts")

                                        self.sc_eapol_pkts = YLeaf(YType.uint64, "sc-eapol-pkts")

                                        self.sc_encrypted_octets = YLeaf(YType.uint64, "sc-encrypted-octets")

                                        self.sc_encrypted_pkts = YLeaf(YType.uint64, "sc-encrypted-pkts")

                                        self.sc_overrun_pkts = YLeaf(YType.uint64, "sc-overrun-pkts")

                                        self.sc_toolong_pkts = YLeaf(YType.uint64, "sc-toolong-pkts")

                                        self.sc_untagged_pkts = YLeaf(YType.uint64, "sc-untagged-pkts")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("current_an",
                                                        "sa_encrypted_pkts",
                                                        "sc_bypass_pkts",
                                                        "sc_dropped_pkts",
                                                        "sc_eapol_pkts",
                                                        "sc_encrypted_octets",
                                                        "sc_encrypted_pkts",
                                                        "sc_overrun_pkts",
                                                        "sc_toolong_pkts",
                                                        "sc_untagged_pkts") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.XlfpgaStats.MacsecTxStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.XlfpgaStats.MacsecTxStats, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.current_an.is_set or
                                            self.sa_encrypted_pkts.is_set or
                                            self.sc_bypass_pkts.is_set or
                                            self.sc_dropped_pkts.is_set or
                                            self.sc_eapol_pkts.is_set or
                                            self.sc_encrypted_octets.is_set or
                                            self.sc_encrypted_pkts.is_set or
                                            self.sc_overrun_pkts.is_set or
                                            self.sc_toolong_pkts.is_set or
                                            self.sc_untagged_pkts.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.current_an.yfilter != YFilter.not_set or
                                            self.sa_encrypted_pkts.yfilter != YFilter.not_set or
                                            self.sc_bypass_pkts.yfilter != YFilter.not_set or
                                            self.sc_dropped_pkts.yfilter != YFilter.not_set or
                                            self.sc_eapol_pkts.yfilter != YFilter.not_set or
                                            self.sc_encrypted_octets.yfilter != YFilter.not_set or
                                            self.sc_encrypted_pkts.yfilter != YFilter.not_set or
                                            self.sc_overrun_pkts.yfilter != YFilter.not_set or
                                            self.sc_toolong_pkts.yfilter != YFilter.not_set or
                                            self.sc_untagged_pkts.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "macsec-tx-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.current_an.is_set or self.current_an.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.current_an.get_name_leafdata())
                                        if (self.sa_encrypted_pkts.is_set or self.sa_encrypted_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sa_encrypted_pkts.get_name_leafdata())
                                        if (self.sc_bypass_pkts.is_set or self.sc_bypass_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_bypass_pkts.get_name_leafdata())
                                        if (self.sc_dropped_pkts.is_set or self.sc_dropped_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_dropped_pkts.get_name_leafdata())
                                        if (self.sc_eapol_pkts.is_set or self.sc_eapol_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_eapol_pkts.get_name_leafdata())
                                        if (self.sc_encrypted_octets.is_set or self.sc_encrypted_octets.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_encrypted_octets.get_name_leafdata())
                                        if (self.sc_encrypted_pkts.is_set or self.sc_encrypted_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_encrypted_pkts.get_name_leafdata())
                                        if (self.sc_overrun_pkts.is_set or self.sc_overrun_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_overrun_pkts.get_name_leafdata())
                                        if (self.sc_toolong_pkts.is_set or self.sc_toolong_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_toolong_pkts.get_name_leafdata())
                                        if (self.sc_untagged_pkts.is_set or self.sc_untagged_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_untagged_pkts.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "current-an" or name == "sa-encrypted-pkts" or name == "sc-bypass-pkts" or name == "sc-dropped-pkts" or name == "sc-eapol-pkts" or name == "sc-encrypted-octets" or name == "sc-encrypted-pkts" or name == "sc-overrun-pkts" or name == "sc-toolong-pkts" or name == "sc-untagged-pkts"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "current-an"):
                                            self.current_an = value
                                            self.current_an.value_namespace = name_space
                                            self.current_an.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sa-encrypted-pkts"):
                                            self.sa_encrypted_pkts = value
                                            self.sa_encrypted_pkts.value_namespace = name_space
                                            self.sa_encrypted_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-bypass-pkts"):
                                            self.sc_bypass_pkts = value
                                            self.sc_bypass_pkts.value_namespace = name_space
                                            self.sc_bypass_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-dropped-pkts"):
                                            self.sc_dropped_pkts = value
                                            self.sc_dropped_pkts.value_namespace = name_space
                                            self.sc_dropped_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-eapol-pkts"):
                                            self.sc_eapol_pkts = value
                                            self.sc_eapol_pkts.value_namespace = name_space
                                            self.sc_eapol_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-encrypted-octets"):
                                            self.sc_encrypted_octets = value
                                            self.sc_encrypted_octets.value_namespace = name_space
                                            self.sc_encrypted_octets.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-encrypted-pkts"):
                                            self.sc_encrypted_pkts = value
                                            self.sc_encrypted_pkts.value_namespace = name_space
                                            self.sc_encrypted_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-overrun-pkts"):
                                            self.sc_overrun_pkts = value
                                            self.sc_overrun_pkts.value_namespace = name_space
                                            self.sc_overrun_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-toolong-pkts"):
                                            self.sc_toolong_pkts = value
                                            self.sc_toolong_pkts.value_namespace = name_space
                                            self.sc_toolong_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-untagged-pkts"):
                                            self.sc_untagged_pkts = value
                                            self.sc_untagged_pkts.value_namespace = name_space
                                            self.sc_untagged_pkts.value_namespace_prefix = name_space_prefix


                                class MacsecRxStats(Entity):
                                    """
                                    Rx SC and SA Level Stats
                                    
                                    .. attribute:: rx_sa_stat
                                    
                                    	Rx SA Level Stats
                                    	**type**\: list of    :py:class:`RxSaStat <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.XlfpgaStats.MacsecRxStats.RxSaStat>`
                                    
                                    .. attribute:: sc_bad_tag_pkts
                                    
                                    	Rx Bad Tag Packets
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_bypass_pkts
                                    
                                    	Rx Bypass Packets
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_decrypted_octets
                                    
                                    	Rx Octets Decrypted
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_delayed_pkts
                                    
                                    	Rx Delayed Pkts
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_dropped_pkts
                                    
                                    	Rx Dropped Packets
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_eapol_pkts
                                    
                                    	Rx Eapol Packets
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_invalid_pkts
                                    
                                    	Rx Pkts Invalid
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_late_pkts
                                    
                                    	Rx Late Pkts
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_no_sci_pkts
                                    
                                    	Rx No SCI Pkts
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_no_tag_pkts
                                    
                                    	Rx No Tag Packets
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_not_using_pkts
                                    
                                    	Rx Pkts Not Using SA
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_not_valid_pkts
                                    
                                    	Rx Not Valid Pkts
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_ok_pkts
                                    
                                    	Rx Pkts Ok
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_overrun_pkts
                                    
                                    	Rx Overrun Pkts
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_unchecked_pkts
                                    
                                    	Rx Unchecked Pkts
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_unknown_sci_pkts
                                    
                                    	Rx Unknown SCI Pkts
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_untagged_pkts
                                    
                                    	Rx Untagged Packets
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: sc_unused_pkts
                                    
                                    	Rx Pkts Unused SA
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.XlfpgaStats.MacsecRxStats, self).__init__()

                                        self.yang_name = "macsec-rx-stats"
                                        self.yang_parent_name = "xlfpga-stats"

                                        self.sc_bad_tag_pkts = YLeaf(YType.uint64, "sc-bad-tag-pkts")

                                        self.sc_bypass_pkts = YLeaf(YType.uint64, "sc-bypass-pkts")

                                        self.sc_decrypted_octets = YLeaf(YType.uint64, "sc-decrypted-octets")

                                        self.sc_delayed_pkts = YLeaf(YType.uint64, "sc-delayed-pkts")

                                        self.sc_dropped_pkts = YLeaf(YType.uint64, "sc-dropped-pkts")

                                        self.sc_eapol_pkts = YLeaf(YType.uint64, "sc-eapol-pkts")

                                        self.sc_invalid_pkts = YLeaf(YType.uint64, "sc-invalid-pkts")

                                        self.sc_late_pkts = YLeaf(YType.uint64, "sc-late-pkts")

                                        self.sc_no_sci_pkts = YLeaf(YType.uint64, "sc-no-sci-pkts")

                                        self.sc_no_tag_pkts = YLeaf(YType.uint64, "sc-no-tag-pkts")

                                        self.sc_not_using_pkts = YLeaf(YType.uint64, "sc-not-using-pkts")

                                        self.sc_not_valid_pkts = YLeaf(YType.uint64, "sc-not-valid-pkts")

                                        self.sc_ok_pkts = YLeaf(YType.uint64, "sc-ok-pkts")

                                        self.sc_overrun_pkts = YLeaf(YType.uint64, "sc-overrun-pkts")

                                        self.sc_unchecked_pkts = YLeaf(YType.uint64, "sc-unchecked-pkts")

                                        self.sc_unknown_sci_pkts = YLeaf(YType.uint64, "sc-unknown-sci-pkts")

                                        self.sc_untagged_pkts = YLeaf(YType.uint64, "sc-untagged-pkts")

                                        self.sc_unused_pkts = YLeaf(YType.uint64, "sc-unused-pkts")

                                        self.rx_sa_stat = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("sc_bad_tag_pkts",
                                                        "sc_bypass_pkts",
                                                        "sc_decrypted_octets",
                                                        "sc_delayed_pkts",
                                                        "sc_dropped_pkts",
                                                        "sc_eapol_pkts",
                                                        "sc_invalid_pkts",
                                                        "sc_late_pkts",
                                                        "sc_no_sci_pkts",
                                                        "sc_no_tag_pkts",
                                                        "sc_not_using_pkts",
                                                        "sc_not_valid_pkts",
                                                        "sc_ok_pkts",
                                                        "sc_overrun_pkts",
                                                        "sc_unchecked_pkts",
                                                        "sc_unknown_sci_pkts",
                                                        "sc_untagged_pkts",
                                                        "sc_unused_pkts") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.XlfpgaStats.MacsecRxStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.XlfpgaStats.MacsecRxStats, self).__setattr__(name, value)


                                    class RxSaStat(Entity):
                                        """
                                        Rx SA Level Stats
                                        
                                        .. attribute:: an
                                        
                                        	Current Rx AN
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: sa_invalid_pkts
                                        
                                        	Rx Invalid Pkts for current AN
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: sa_not_using_pkts
                                        
                                        	Rx Pkts not using SA for Current AN
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: sa_not_valid_pkts
                                        
                                        	Rx Not Valid Pkts for Current AN
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: sa_ok_pkts
                                        
                                        	Rx Ok Pkts for Current AN
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: sa_unused_pkts
                                        
                                        	Rx Pkts Unused Pkts for Current AN
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        

                                        """

                                        _prefix = 'crypto-macsec-pl-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.XlfpgaStats.MacsecRxStats.RxSaStat, self).__init__()

                                            self.yang_name = "rx-sa-stat"
                                            self.yang_parent_name = "macsec-rx-stats"

                                            self.an = YLeaf(YType.uint64, "an")

                                            self.sa_invalid_pkts = YLeaf(YType.uint64, "sa-invalid-pkts")

                                            self.sa_not_using_pkts = YLeaf(YType.uint64, "sa-not-using-pkts")

                                            self.sa_not_valid_pkts = YLeaf(YType.uint64, "sa-not-valid-pkts")

                                            self.sa_ok_pkts = YLeaf(YType.uint64, "sa-ok-pkts")

                                            self.sa_unused_pkts = YLeaf(YType.uint64, "sa-unused-pkts")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("an",
                                                            "sa_invalid_pkts",
                                                            "sa_not_using_pkts",
                                                            "sa_not_valid_pkts",
                                                            "sa_ok_pkts",
                                                            "sa_unused_pkts") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.XlfpgaStats.MacsecRxStats.RxSaStat, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.XlfpgaStats.MacsecRxStats.RxSaStat, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.an.is_set or
                                                self.sa_invalid_pkts.is_set or
                                                self.sa_not_using_pkts.is_set or
                                                self.sa_not_valid_pkts.is_set or
                                                self.sa_ok_pkts.is_set or
                                                self.sa_unused_pkts.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.an.yfilter != YFilter.not_set or
                                                self.sa_invalid_pkts.yfilter != YFilter.not_set or
                                                self.sa_not_using_pkts.yfilter != YFilter.not_set or
                                                self.sa_not_valid_pkts.yfilter != YFilter.not_set or
                                                self.sa_ok_pkts.yfilter != YFilter.not_set or
                                                self.sa_unused_pkts.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "rx-sa-stat" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.an.is_set or self.an.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.an.get_name_leafdata())
                                            if (self.sa_invalid_pkts.is_set or self.sa_invalid_pkts.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sa_invalid_pkts.get_name_leafdata())
                                            if (self.sa_not_using_pkts.is_set or self.sa_not_using_pkts.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sa_not_using_pkts.get_name_leafdata())
                                            if (self.sa_not_valid_pkts.is_set or self.sa_not_valid_pkts.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sa_not_valid_pkts.get_name_leafdata())
                                            if (self.sa_ok_pkts.is_set or self.sa_ok_pkts.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sa_ok_pkts.get_name_leafdata())
                                            if (self.sa_unused_pkts.is_set or self.sa_unused_pkts.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sa_unused_pkts.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "an" or name == "sa-invalid-pkts" or name == "sa-not-using-pkts" or name == "sa-not-valid-pkts" or name == "sa-ok-pkts" or name == "sa-unused-pkts"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "an"):
                                                self.an = value
                                                self.an.value_namespace = name_space
                                                self.an.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sa-invalid-pkts"):
                                                self.sa_invalid_pkts = value
                                                self.sa_invalid_pkts.value_namespace = name_space
                                                self.sa_invalid_pkts.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sa-not-using-pkts"):
                                                self.sa_not_using_pkts = value
                                                self.sa_not_using_pkts.value_namespace = name_space
                                                self.sa_not_using_pkts.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sa-not-valid-pkts"):
                                                self.sa_not_valid_pkts = value
                                                self.sa_not_valid_pkts.value_namespace = name_space
                                                self.sa_not_valid_pkts.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sa-ok-pkts"):
                                                self.sa_ok_pkts = value
                                                self.sa_ok_pkts.value_namespace = name_space
                                                self.sa_ok_pkts.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sa-unused-pkts"):
                                                self.sa_unused_pkts = value
                                                self.sa_unused_pkts.value_namespace = name_space
                                                self.sa_unused_pkts.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        for c in self.rx_sa_stat:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.sc_bad_tag_pkts.is_set or
                                            self.sc_bypass_pkts.is_set or
                                            self.sc_decrypted_octets.is_set or
                                            self.sc_delayed_pkts.is_set or
                                            self.sc_dropped_pkts.is_set or
                                            self.sc_eapol_pkts.is_set or
                                            self.sc_invalid_pkts.is_set or
                                            self.sc_late_pkts.is_set or
                                            self.sc_no_sci_pkts.is_set or
                                            self.sc_no_tag_pkts.is_set or
                                            self.sc_not_using_pkts.is_set or
                                            self.sc_not_valid_pkts.is_set or
                                            self.sc_ok_pkts.is_set or
                                            self.sc_overrun_pkts.is_set or
                                            self.sc_unchecked_pkts.is_set or
                                            self.sc_unknown_sci_pkts.is_set or
                                            self.sc_untagged_pkts.is_set or
                                            self.sc_unused_pkts.is_set)

                                    def has_operation(self):
                                        for c in self.rx_sa_stat:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.sc_bad_tag_pkts.yfilter != YFilter.not_set or
                                            self.sc_bypass_pkts.yfilter != YFilter.not_set or
                                            self.sc_decrypted_octets.yfilter != YFilter.not_set or
                                            self.sc_delayed_pkts.yfilter != YFilter.not_set or
                                            self.sc_dropped_pkts.yfilter != YFilter.not_set or
                                            self.sc_eapol_pkts.yfilter != YFilter.not_set or
                                            self.sc_invalid_pkts.yfilter != YFilter.not_set or
                                            self.sc_late_pkts.yfilter != YFilter.not_set or
                                            self.sc_no_sci_pkts.yfilter != YFilter.not_set or
                                            self.sc_no_tag_pkts.yfilter != YFilter.not_set or
                                            self.sc_not_using_pkts.yfilter != YFilter.not_set or
                                            self.sc_not_valid_pkts.yfilter != YFilter.not_set or
                                            self.sc_ok_pkts.yfilter != YFilter.not_set or
                                            self.sc_overrun_pkts.yfilter != YFilter.not_set or
                                            self.sc_unchecked_pkts.yfilter != YFilter.not_set or
                                            self.sc_unknown_sci_pkts.yfilter != YFilter.not_set or
                                            self.sc_untagged_pkts.yfilter != YFilter.not_set or
                                            self.sc_unused_pkts.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "macsec-rx-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.sc_bad_tag_pkts.is_set or self.sc_bad_tag_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_bad_tag_pkts.get_name_leafdata())
                                        if (self.sc_bypass_pkts.is_set or self.sc_bypass_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_bypass_pkts.get_name_leafdata())
                                        if (self.sc_decrypted_octets.is_set or self.sc_decrypted_octets.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_decrypted_octets.get_name_leafdata())
                                        if (self.sc_delayed_pkts.is_set or self.sc_delayed_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_delayed_pkts.get_name_leafdata())
                                        if (self.sc_dropped_pkts.is_set or self.sc_dropped_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_dropped_pkts.get_name_leafdata())
                                        if (self.sc_eapol_pkts.is_set or self.sc_eapol_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_eapol_pkts.get_name_leafdata())
                                        if (self.sc_invalid_pkts.is_set or self.sc_invalid_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_invalid_pkts.get_name_leafdata())
                                        if (self.sc_late_pkts.is_set or self.sc_late_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_late_pkts.get_name_leafdata())
                                        if (self.sc_no_sci_pkts.is_set or self.sc_no_sci_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_no_sci_pkts.get_name_leafdata())
                                        if (self.sc_no_tag_pkts.is_set or self.sc_no_tag_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_no_tag_pkts.get_name_leafdata())
                                        if (self.sc_not_using_pkts.is_set or self.sc_not_using_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_not_using_pkts.get_name_leafdata())
                                        if (self.sc_not_valid_pkts.is_set or self.sc_not_valid_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_not_valid_pkts.get_name_leafdata())
                                        if (self.sc_ok_pkts.is_set or self.sc_ok_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_ok_pkts.get_name_leafdata())
                                        if (self.sc_overrun_pkts.is_set or self.sc_overrun_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_overrun_pkts.get_name_leafdata())
                                        if (self.sc_unchecked_pkts.is_set or self.sc_unchecked_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_unchecked_pkts.get_name_leafdata())
                                        if (self.sc_unknown_sci_pkts.is_set or self.sc_unknown_sci_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_unknown_sci_pkts.get_name_leafdata())
                                        if (self.sc_untagged_pkts.is_set or self.sc_untagged_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_untagged_pkts.get_name_leafdata())
                                        if (self.sc_unused_pkts.is_set or self.sc_unused_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sc_unused_pkts.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "rx-sa-stat"):
                                            for c in self.rx_sa_stat:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.XlfpgaStats.MacsecRxStats.RxSaStat()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.rx_sa_stat.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "rx-sa-stat" or name == "sc-bad-tag-pkts" or name == "sc-bypass-pkts" or name == "sc-decrypted-octets" or name == "sc-delayed-pkts" or name == "sc-dropped-pkts" or name == "sc-eapol-pkts" or name == "sc-invalid-pkts" or name == "sc-late-pkts" or name == "sc-no-sci-pkts" or name == "sc-no-tag-pkts" or name == "sc-not-using-pkts" or name == "sc-not-valid-pkts" or name == "sc-ok-pkts" or name == "sc-overrun-pkts" or name == "sc-unchecked-pkts" or name == "sc-unknown-sci-pkts" or name == "sc-untagged-pkts" or name == "sc-unused-pkts"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "sc-bad-tag-pkts"):
                                            self.sc_bad_tag_pkts = value
                                            self.sc_bad_tag_pkts.value_namespace = name_space
                                            self.sc_bad_tag_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-bypass-pkts"):
                                            self.sc_bypass_pkts = value
                                            self.sc_bypass_pkts.value_namespace = name_space
                                            self.sc_bypass_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-decrypted-octets"):
                                            self.sc_decrypted_octets = value
                                            self.sc_decrypted_octets.value_namespace = name_space
                                            self.sc_decrypted_octets.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-delayed-pkts"):
                                            self.sc_delayed_pkts = value
                                            self.sc_delayed_pkts.value_namespace = name_space
                                            self.sc_delayed_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-dropped-pkts"):
                                            self.sc_dropped_pkts = value
                                            self.sc_dropped_pkts.value_namespace = name_space
                                            self.sc_dropped_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-eapol-pkts"):
                                            self.sc_eapol_pkts = value
                                            self.sc_eapol_pkts.value_namespace = name_space
                                            self.sc_eapol_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-invalid-pkts"):
                                            self.sc_invalid_pkts = value
                                            self.sc_invalid_pkts.value_namespace = name_space
                                            self.sc_invalid_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-late-pkts"):
                                            self.sc_late_pkts = value
                                            self.sc_late_pkts.value_namespace = name_space
                                            self.sc_late_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-no-sci-pkts"):
                                            self.sc_no_sci_pkts = value
                                            self.sc_no_sci_pkts.value_namespace = name_space
                                            self.sc_no_sci_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-no-tag-pkts"):
                                            self.sc_no_tag_pkts = value
                                            self.sc_no_tag_pkts.value_namespace = name_space
                                            self.sc_no_tag_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-not-using-pkts"):
                                            self.sc_not_using_pkts = value
                                            self.sc_not_using_pkts.value_namespace = name_space
                                            self.sc_not_using_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-not-valid-pkts"):
                                            self.sc_not_valid_pkts = value
                                            self.sc_not_valid_pkts.value_namespace = name_space
                                            self.sc_not_valid_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-ok-pkts"):
                                            self.sc_ok_pkts = value
                                            self.sc_ok_pkts.value_namespace = name_space
                                            self.sc_ok_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-overrun-pkts"):
                                            self.sc_overrun_pkts = value
                                            self.sc_overrun_pkts.value_namespace = name_space
                                            self.sc_overrun_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-unchecked-pkts"):
                                            self.sc_unchecked_pkts = value
                                            self.sc_unchecked_pkts.value_namespace = name_space
                                            self.sc_unchecked_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-unknown-sci-pkts"):
                                            self.sc_unknown_sci_pkts = value
                                            self.sc_unknown_sci_pkts.value_namespace = name_space
                                            self.sc_unknown_sci_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-untagged-pkts"):
                                            self.sc_untagged_pkts = value
                                            self.sc_untagged_pkts.value_namespace = name_space
                                            self.sc_untagged_pkts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sc-unused-pkts"):
                                            self.sc_unused_pkts = value
                                            self.sc_unused_pkts.value_namespace = name_space
                                            self.sc_unused_pkts.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    return (
                                        (self.macsec_rx_stats is not None and self.macsec_rx_stats.has_data()) or
                                        (self.macsec_tx_stats is not None and self.macsec_tx_stats.has_data()))

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        (self.macsec_rx_stats is not None and self.macsec_rx_stats.has_operation()) or
                                        (self.macsec_tx_stats is not None and self.macsec_tx_stats.has_operation()))

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "xlfpga-stats" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "macsec-rx-stats"):
                                        if (self.macsec_rx_stats is None):
                                            self.macsec_rx_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.XlfpgaStats.MacsecRxStats()
                                            self.macsec_rx_stats.parent = self
                                            self._children_name_map["macsec_rx_stats"] = "macsec-rx-stats"
                                        return self.macsec_rx_stats

                                    if (child_yang_name == "macsec-tx-stats"):
                                        if (self.macsec_tx_stats is None):
                                            self.macsec_tx_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.XlfpgaStats.MacsecTxStats()
                                            self.macsec_tx_stats.parent = self
                                            self._children_name_map["macsec_tx_stats"] = "macsec-tx-stats"
                                        return self.macsec_tx_stats

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "macsec-rx-stats" or name == "macsec-tx-stats"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class Es200Stats(Entity):
                                """
                                ES200 Stats
                                
                                .. attribute:: rx_interface_macsec_stats
                                
                                	Rx interface Macsec Stats
                                	**type**\:   :py:class:`RxInterfaceMacsecStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.RxInterfaceMacsecStats>`
                                
                                .. attribute:: rx_port_stats
                                
                                	Port level RX Stats
                                	**type**\:   :py:class:`RxPortStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.RxPortStats>`
                                
                                .. attribute:: rx_sa_stats
                                
                                	Rx SA Stats
                                	**type**\:   :py:class:`RxSaStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.RxSaStats>`
                                
                                .. attribute:: rx_sc_macsec_stats
                                
                                	Rx SC Macsec Stats
                                	**type**\:   :py:class:`RxScMacsecStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.RxScMacsecStats>`
                                
                                .. attribute:: tx_interface_macsec_stats
                                
                                	Tx interface Macsec Stats
                                	**type**\:   :py:class:`TxInterfaceMacsecStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.TxInterfaceMacsecStats>`
                                
                                .. attribute:: tx_port_stats
                                
                                	Port level TX Stats
                                	**type**\:   :py:class:`TxPortStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.TxPortStats>`
                                
                                .. attribute:: tx_sa_stats
                                
                                	Tx SA Stats
                                	**type**\:   :py:class:`TxSaStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.TxSaStats>`
                                
                                .. attribute:: tx_sc_macsec_stats
                                
                                	Tx SC Macsec Stats
                                	**type**\:   :py:class:`TxScMacsecStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_crypto_macsec_pl_oper.MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.TxScMacsecStats>`
                                
                                

                                """

                                _prefix = 'crypto-macsec-pl-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats, self).__init__()

                                    self.yang_name = "es200-stats"
                                    self.yang_parent_name = "ext"

                                    self.rx_interface_macsec_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.RxInterfaceMacsecStats()
                                    self.rx_interface_macsec_stats.parent = self
                                    self._children_name_map["rx_interface_macsec_stats"] = "rx-interface-macsec-stats"
                                    self._children_yang_names.add("rx-interface-macsec-stats")

                                    self.rx_port_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.RxPortStats()
                                    self.rx_port_stats.parent = self
                                    self._children_name_map["rx_port_stats"] = "rx-port-stats"
                                    self._children_yang_names.add("rx-port-stats")

                                    self.rx_sa_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.RxSaStats()
                                    self.rx_sa_stats.parent = self
                                    self._children_name_map["rx_sa_stats"] = "rx-sa-stats"
                                    self._children_yang_names.add("rx-sa-stats")

                                    self.rx_sc_macsec_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.RxScMacsecStats()
                                    self.rx_sc_macsec_stats.parent = self
                                    self._children_name_map["rx_sc_macsec_stats"] = "rx-sc-macsec-stats"
                                    self._children_yang_names.add("rx-sc-macsec-stats")

                                    self.tx_interface_macsec_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.TxInterfaceMacsecStats()
                                    self.tx_interface_macsec_stats.parent = self
                                    self._children_name_map["tx_interface_macsec_stats"] = "tx-interface-macsec-stats"
                                    self._children_yang_names.add("tx-interface-macsec-stats")

                                    self.tx_port_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.TxPortStats()
                                    self.tx_port_stats.parent = self
                                    self._children_name_map["tx_port_stats"] = "tx-port-stats"
                                    self._children_yang_names.add("tx-port-stats")

                                    self.tx_sa_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.TxSaStats()
                                    self.tx_sa_stats.parent = self
                                    self._children_name_map["tx_sa_stats"] = "tx-sa-stats"
                                    self._children_yang_names.add("tx-sa-stats")

                                    self.tx_sc_macsec_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.TxScMacsecStats()
                                    self.tx_sc_macsec_stats.parent = self
                                    self._children_name_map["tx_sc_macsec_stats"] = "tx-sc-macsec-stats"
                                    self._children_yang_names.add("tx-sc-macsec-stats")


                                class TxSaStats(Entity):
                                    """
                                    Tx SA Stats
                                    
                                    .. attribute:: out_octets_encrypted_protected1
                                    
                                    	octets1 encrypted/protected ?
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_pkts_encrypted_protected
                                    
                                    	packets encrypted/protected
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_pkts_too_long
                                    
                                    	packets exceeding egress MTU
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.TxSaStats, self).__init__()

                                        self.yang_name = "tx-sa-stats"
                                        self.yang_parent_name = "es200-stats"

                                        self.out_octets_encrypted_protected1 = YLeaf(YType.uint64, "out-octets-encrypted-protected1")

                                        self.out_pkts_encrypted_protected = YLeaf(YType.uint64, "out-pkts-encrypted-protected")

                                        self.out_pkts_too_long = YLeaf(YType.uint64, "out-pkts-too-long")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("out_octets_encrypted_protected1",
                                                        "out_pkts_encrypted_protected",
                                                        "out_pkts_too_long") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.TxSaStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.TxSaStats, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.out_octets_encrypted_protected1.is_set or
                                            self.out_pkts_encrypted_protected.is_set or
                                            self.out_pkts_too_long.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.out_octets_encrypted_protected1.yfilter != YFilter.not_set or
                                            self.out_pkts_encrypted_protected.yfilter != YFilter.not_set or
                                            self.out_pkts_too_long.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "tx-sa-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.out_octets_encrypted_protected1.is_set or self.out_octets_encrypted_protected1.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_octets_encrypted_protected1.get_name_leafdata())
                                        if (self.out_pkts_encrypted_protected.is_set or self.out_pkts_encrypted_protected.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_pkts_encrypted_protected.get_name_leafdata())
                                        if (self.out_pkts_too_long.is_set or self.out_pkts_too_long.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_pkts_too_long.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "out-octets-encrypted-protected1" or name == "out-pkts-encrypted-protected" or name == "out-pkts-too-long"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "out-octets-encrypted-protected1"):
                                            self.out_octets_encrypted_protected1 = value
                                            self.out_octets_encrypted_protected1.value_namespace = name_space
                                            self.out_octets_encrypted_protected1.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-pkts-encrypted-protected"):
                                            self.out_pkts_encrypted_protected = value
                                            self.out_pkts_encrypted_protected.value_namespace = name_space
                                            self.out_pkts_encrypted_protected.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-pkts-too-long"):
                                            self.out_pkts_too_long = value
                                            self.out_pkts_too_long.value_namespace = name_space
                                            self.out_pkts_too_long.value_namespace_prefix = name_space_prefix


                                class RxSaStats(Entity):
                                    """
                                    Rx SA Stats
                                    
                                    .. attribute:: in_octets_decrypted_validated1
                                    
                                    	octets1 decrypted/validated
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_octets_validated
                                    
                                    	octets validated
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_delayed
                                    
                                    	PN of packet outside replay window & validateFrames !strict
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_invalid
                                    
                                    	packet not valid & validateFrames !strict
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_late
                                    
                                    	PN of packet outside replay window & validateFrames strict
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_not_using_sa
                                    
                                    	packet assigned to SA not in use & validateFrames strict
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_not_valid
                                    
                                    	packet not valid & validateFrames strict
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_ok
                                    
                                    	packets with no error
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_unchecked
                                    
                                    	frame not valid & validateFrames disabled
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_unused_sa
                                    
                                    	packet assigned to SA not in use & validateFrames !strict
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.RxSaStats, self).__init__()

                                        self.yang_name = "rx-sa-stats"
                                        self.yang_parent_name = "es200-stats"

                                        self.in_octets_decrypted_validated1 = YLeaf(YType.uint64, "in-octets-decrypted-validated1")

                                        self.in_octets_validated = YLeaf(YType.uint64, "in-octets-validated")

                                        self.in_pkts_delayed = YLeaf(YType.uint64, "in-pkts-delayed")

                                        self.in_pkts_invalid = YLeaf(YType.uint64, "in-pkts-invalid")

                                        self.in_pkts_late = YLeaf(YType.uint64, "in-pkts-late")

                                        self.in_pkts_not_using_sa = YLeaf(YType.uint64, "in-pkts-not-using-sa")

                                        self.in_pkts_not_valid = YLeaf(YType.uint64, "in-pkts-not-valid")

                                        self.in_pkts_ok = YLeaf(YType.uint64, "in-pkts-ok")

                                        self.in_pkts_unchecked = YLeaf(YType.uint64, "in-pkts-unchecked")

                                        self.in_pkts_unused_sa = YLeaf(YType.uint64, "in-pkts-unused-sa")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("in_octets_decrypted_validated1",
                                                        "in_octets_validated",
                                                        "in_pkts_delayed",
                                                        "in_pkts_invalid",
                                                        "in_pkts_late",
                                                        "in_pkts_not_using_sa",
                                                        "in_pkts_not_valid",
                                                        "in_pkts_ok",
                                                        "in_pkts_unchecked",
                                                        "in_pkts_unused_sa") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.RxSaStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.RxSaStats, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.in_octets_decrypted_validated1.is_set or
                                            self.in_octets_validated.is_set or
                                            self.in_pkts_delayed.is_set or
                                            self.in_pkts_invalid.is_set or
                                            self.in_pkts_late.is_set or
                                            self.in_pkts_not_using_sa.is_set or
                                            self.in_pkts_not_valid.is_set or
                                            self.in_pkts_ok.is_set or
                                            self.in_pkts_unchecked.is_set or
                                            self.in_pkts_unused_sa.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.in_octets_decrypted_validated1.yfilter != YFilter.not_set or
                                            self.in_octets_validated.yfilter != YFilter.not_set or
                                            self.in_pkts_delayed.yfilter != YFilter.not_set or
                                            self.in_pkts_invalid.yfilter != YFilter.not_set or
                                            self.in_pkts_late.yfilter != YFilter.not_set or
                                            self.in_pkts_not_using_sa.yfilter != YFilter.not_set or
                                            self.in_pkts_not_valid.yfilter != YFilter.not_set or
                                            self.in_pkts_ok.yfilter != YFilter.not_set or
                                            self.in_pkts_unchecked.yfilter != YFilter.not_set or
                                            self.in_pkts_unused_sa.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "rx-sa-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.in_octets_decrypted_validated1.is_set or self.in_octets_decrypted_validated1.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_octets_decrypted_validated1.get_name_leafdata())
                                        if (self.in_octets_validated.is_set or self.in_octets_validated.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_octets_validated.get_name_leafdata())
                                        if (self.in_pkts_delayed.is_set or self.in_pkts_delayed.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_delayed.get_name_leafdata())
                                        if (self.in_pkts_invalid.is_set or self.in_pkts_invalid.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_invalid.get_name_leafdata())
                                        if (self.in_pkts_late.is_set or self.in_pkts_late.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_late.get_name_leafdata())
                                        if (self.in_pkts_not_using_sa.is_set or self.in_pkts_not_using_sa.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_not_using_sa.get_name_leafdata())
                                        if (self.in_pkts_not_valid.is_set or self.in_pkts_not_valid.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_not_valid.get_name_leafdata())
                                        if (self.in_pkts_ok.is_set or self.in_pkts_ok.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_ok.get_name_leafdata())
                                        if (self.in_pkts_unchecked.is_set or self.in_pkts_unchecked.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_unchecked.get_name_leafdata())
                                        if (self.in_pkts_unused_sa.is_set or self.in_pkts_unused_sa.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_unused_sa.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "in-octets-decrypted-validated1" or name == "in-octets-validated" or name == "in-pkts-delayed" or name == "in-pkts-invalid" or name == "in-pkts-late" or name == "in-pkts-not-using-sa" or name == "in-pkts-not-valid" or name == "in-pkts-ok" or name == "in-pkts-unchecked" or name == "in-pkts-unused-sa"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "in-octets-decrypted-validated1"):
                                            self.in_octets_decrypted_validated1 = value
                                            self.in_octets_decrypted_validated1.value_namespace = name_space
                                            self.in_octets_decrypted_validated1.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-octets-validated"):
                                            self.in_octets_validated = value
                                            self.in_octets_validated.value_namespace = name_space
                                            self.in_octets_validated.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-delayed"):
                                            self.in_pkts_delayed = value
                                            self.in_pkts_delayed.value_namespace = name_space
                                            self.in_pkts_delayed.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-invalid"):
                                            self.in_pkts_invalid = value
                                            self.in_pkts_invalid.value_namespace = name_space
                                            self.in_pkts_invalid.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-late"):
                                            self.in_pkts_late = value
                                            self.in_pkts_late.value_namespace = name_space
                                            self.in_pkts_late.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-not-using-sa"):
                                            self.in_pkts_not_using_sa = value
                                            self.in_pkts_not_using_sa.value_namespace = name_space
                                            self.in_pkts_not_using_sa.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-not-valid"):
                                            self.in_pkts_not_valid = value
                                            self.in_pkts_not_valid.value_namespace = name_space
                                            self.in_pkts_not_valid.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-ok"):
                                            self.in_pkts_ok = value
                                            self.in_pkts_ok.value_namespace = name_space
                                            self.in_pkts_ok.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-unchecked"):
                                            self.in_pkts_unchecked = value
                                            self.in_pkts_unchecked.value_namespace = name_space
                                            self.in_pkts_unchecked.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-unused-sa"):
                                            self.in_pkts_unused_sa = value
                                            self.in_pkts_unused_sa.value_namespace = name_space
                                            self.in_pkts_unused_sa.value_namespace_prefix = name_space_prefix


                                class TxScMacsecStats(Entity):
                                    """
                                    Tx SC Macsec Stats
                                    
                                    .. attribute:: out_pkts_sa_not_in_use
                                    
                                    	Packets received with SA not in use
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.TxScMacsecStats, self).__init__()

                                        self.yang_name = "tx-sc-macsec-stats"
                                        self.yang_parent_name = "es200-stats"

                                        self.out_pkts_sa_not_in_use = YLeaf(YType.uint64, "out-pkts-sa-not-in-use")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("out_pkts_sa_not_in_use") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.TxScMacsecStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.TxScMacsecStats, self).__setattr__(name, value)

                                    def has_data(self):
                                        return self.out_pkts_sa_not_in_use.is_set

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.out_pkts_sa_not_in_use.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "tx-sc-macsec-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.out_pkts_sa_not_in_use.is_set or self.out_pkts_sa_not_in_use.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_pkts_sa_not_in_use.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "out-pkts-sa-not-in-use"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "out-pkts-sa-not-in-use"):
                                            self.out_pkts_sa_not_in_use = value
                                            self.out_pkts_sa_not_in_use.value_namespace = name_space
                                            self.out_pkts_sa_not_in_use.value_namespace_prefix = name_space_prefix


                                class RxScMacsecStats(Entity):
                                    """
                                    Rx SC Macsec Stats
                                    
                                    .. attribute:: in_pkts_sa_not_in_use
                                    
                                    	Packets received with SA not in use
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.RxScMacsecStats, self).__init__()

                                        self.yang_name = "rx-sc-macsec-stats"
                                        self.yang_parent_name = "es200-stats"

                                        self.in_pkts_sa_not_in_use = YLeaf(YType.uint64, "in-pkts-sa-not-in-use")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("in_pkts_sa_not_in_use") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.RxScMacsecStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.RxScMacsecStats, self).__setattr__(name, value)

                                    def has_data(self):
                                        return self.in_pkts_sa_not_in_use.is_set

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.in_pkts_sa_not_in_use.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "rx-sc-macsec-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.in_pkts_sa_not_in_use.is_set or self.in_pkts_sa_not_in_use.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_sa_not_in_use.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "in-pkts-sa-not-in-use"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "in-pkts-sa-not-in-use"):
                                            self.in_pkts_sa_not_in_use = value
                                            self.in_pkts_sa_not_in_use.value_namespace = name_space
                                            self.in_pkts_sa_not_in_use.value_namespace_prefix = name_space_prefix


                                class TxInterfaceMacsecStats(Entity):
                                    """
                                    Tx interface Macsec Stats
                                    
                                    .. attribute:: out_bcast_pkts_ctrl
                                    
                                    	Broadcast pkts tx on controlled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_bcast_pkts_unctrl
                                    
                                    	Broadcast pkts tx on uncontrolled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_drop_pkts_class
                                    
                                    	Packets dropped due to overflow in classification pipeline
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_drop_pkts_data
                                    
                                    	Packets dropped due to overflow in  processing pipeline
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_mcast_pkts_ctrl
                                    
                                    	Multicast pkts tx on controlled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_mcast_pkts_unctrl
                                    
                                    	Multicast pkts tx on uncontrolled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_octets_common
                                    
                                    	Octets tx on common port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_octets_ctrl
                                    
                                    	Octets tx on controlled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_octets_unctrl
                                    
                                    	Octets tx on uncontrolled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_pkt_ctrl
                                    
                                    	egress packet that is classified as control packet
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_pkts_untagged
                                    
                                    	egress packet to go out untagged when protectFrames not set
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_rx_drop_pkts_ctrl
                                    
                                    	Data pkts dropped due to overrun
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_rx_drop_pkts_unctrl
                                    
                                    	Control pkts dropped due to overrun
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_rx_err_pkts_ctrl
                                    
                                    	Data pkts error\-terminated due to overrun
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_rx_err_pkts_unctrl
                                    
                                    	Control pkts error\-terminated due to overrun
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_ucast_pkts_ctrl
                                    
                                    	Unicast pkts tx on controlled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: out_ucast_pkts_unctrl
                                    
                                    	Unicast pkts tx on uncontrolled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: transform_error_pkts
                                    
                                    	counter to count internal errors in the MACSec core
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.TxInterfaceMacsecStats, self).__init__()

                                        self.yang_name = "tx-interface-macsec-stats"
                                        self.yang_parent_name = "es200-stats"

                                        self.out_bcast_pkts_ctrl = YLeaf(YType.uint64, "out-bcast-pkts-ctrl")

                                        self.out_bcast_pkts_unctrl = YLeaf(YType.uint64, "out-bcast-pkts-unctrl")

                                        self.out_drop_pkts_class = YLeaf(YType.uint64, "out-drop-pkts-class")

                                        self.out_drop_pkts_data = YLeaf(YType.uint64, "out-drop-pkts-data")

                                        self.out_mcast_pkts_ctrl = YLeaf(YType.uint64, "out-mcast-pkts-ctrl")

                                        self.out_mcast_pkts_unctrl = YLeaf(YType.uint64, "out-mcast-pkts-unctrl")

                                        self.out_octets_common = YLeaf(YType.uint64, "out-octets-common")

                                        self.out_octets_ctrl = YLeaf(YType.uint64, "out-octets-ctrl")

                                        self.out_octets_unctrl = YLeaf(YType.uint64, "out-octets-unctrl")

                                        self.out_pkt_ctrl = YLeaf(YType.uint64, "out-pkt-ctrl")

                                        self.out_pkts_untagged = YLeaf(YType.uint64, "out-pkts-untagged")

                                        self.out_rx_drop_pkts_ctrl = YLeaf(YType.uint64, "out-rx-drop-pkts-ctrl")

                                        self.out_rx_drop_pkts_unctrl = YLeaf(YType.uint64, "out-rx-drop-pkts-unctrl")

                                        self.out_rx_err_pkts_ctrl = YLeaf(YType.uint64, "out-rx-err-pkts-ctrl")

                                        self.out_rx_err_pkts_unctrl = YLeaf(YType.uint64, "out-rx-err-pkts-unctrl")

                                        self.out_ucast_pkts_ctrl = YLeaf(YType.uint64, "out-ucast-pkts-ctrl")

                                        self.out_ucast_pkts_unctrl = YLeaf(YType.uint64, "out-ucast-pkts-unctrl")

                                        self.transform_error_pkts = YLeaf(YType.uint64, "transform-error-pkts")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("out_bcast_pkts_ctrl",
                                                        "out_bcast_pkts_unctrl",
                                                        "out_drop_pkts_class",
                                                        "out_drop_pkts_data",
                                                        "out_mcast_pkts_ctrl",
                                                        "out_mcast_pkts_unctrl",
                                                        "out_octets_common",
                                                        "out_octets_ctrl",
                                                        "out_octets_unctrl",
                                                        "out_pkt_ctrl",
                                                        "out_pkts_untagged",
                                                        "out_rx_drop_pkts_ctrl",
                                                        "out_rx_drop_pkts_unctrl",
                                                        "out_rx_err_pkts_ctrl",
                                                        "out_rx_err_pkts_unctrl",
                                                        "out_ucast_pkts_ctrl",
                                                        "out_ucast_pkts_unctrl",
                                                        "transform_error_pkts") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.TxInterfaceMacsecStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.TxInterfaceMacsecStats, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.out_bcast_pkts_ctrl.is_set or
                                            self.out_bcast_pkts_unctrl.is_set or
                                            self.out_drop_pkts_class.is_set or
                                            self.out_drop_pkts_data.is_set or
                                            self.out_mcast_pkts_ctrl.is_set or
                                            self.out_mcast_pkts_unctrl.is_set or
                                            self.out_octets_common.is_set or
                                            self.out_octets_ctrl.is_set or
                                            self.out_octets_unctrl.is_set or
                                            self.out_pkt_ctrl.is_set or
                                            self.out_pkts_untagged.is_set or
                                            self.out_rx_drop_pkts_ctrl.is_set or
                                            self.out_rx_drop_pkts_unctrl.is_set or
                                            self.out_rx_err_pkts_ctrl.is_set or
                                            self.out_rx_err_pkts_unctrl.is_set or
                                            self.out_ucast_pkts_ctrl.is_set or
                                            self.out_ucast_pkts_unctrl.is_set or
                                            self.transform_error_pkts.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.out_bcast_pkts_ctrl.yfilter != YFilter.not_set or
                                            self.out_bcast_pkts_unctrl.yfilter != YFilter.not_set or
                                            self.out_drop_pkts_class.yfilter != YFilter.not_set or
                                            self.out_drop_pkts_data.yfilter != YFilter.not_set or
                                            self.out_mcast_pkts_ctrl.yfilter != YFilter.not_set or
                                            self.out_mcast_pkts_unctrl.yfilter != YFilter.not_set or
                                            self.out_octets_common.yfilter != YFilter.not_set or
                                            self.out_octets_ctrl.yfilter != YFilter.not_set or
                                            self.out_octets_unctrl.yfilter != YFilter.not_set or
                                            self.out_pkt_ctrl.yfilter != YFilter.not_set or
                                            self.out_pkts_untagged.yfilter != YFilter.not_set or
                                            self.out_rx_drop_pkts_ctrl.yfilter != YFilter.not_set or
                                            self.out_rx_drop_pkts_unctrl.yfilter != YFilter.not_set or
                                            self.out_rx_err_pkts_ctrl.yfilter != YFilter.not_set or
                                            self.out_rx_err_pkts_unctrl.yfilter != YFilter.not_set or
                                            self.out_ucast_pkts_ctrl.yfilter != YFilter.not_set or
                                            self.out_ucast_pkts_unctrl.yfilter != YFilter.not_set or
                                            self.transform_error_pkts.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "tx-interface-macsec-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.out_bcast_pkts_ctrl.is_set or self.out_bcast_pkts_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_bcast_pkts_ctrl.get_name_leafdata())
                                        if (self.out_bcast_pkts_unctrl.is_set or self.out_bcast_pkts_unctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_bcast_pkts_unctrl.get_name_leafdata())
                                        if (self.out_drop_pkts_class.is_set or self.out_drop_pkts_class.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_drop_pkts_class.get_name_leafdata())
                                        if (self.out_drop_pkts_data.is_set or self.out_drop_pkts_data.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_drop_pkts_data.get_name_leafdata())
                                        if (self.out_mcast_pkts_ctrl.is_set or self.out_mcast_pkts_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_mcast_pkts_ctrl.get_name_leafdata())
                                        if (self.out_mcast_pkts_unctrl.is_set or self.out_mcast_pkts_unctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_mcast_pkts_unctrl.get_name_leafdata())
                                        if (self.out_octets_common.is_set or self.out_octets_common.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_octets_common.get_name_leafdata())
                                        if (self.out_octets_ctrl.is_set or self.out_octets_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_octets_ctrl.get_name_leafdata())
                                        if (self.out_octets_unctrl.is_set or self.out_octets_unctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_octets_unctrl.get_name_leafdata())
                                        if (self.out_pkt_ctrl.is_set or self.out_pkt_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_pkt_ctrl.get_name_leafdata())
                                        if (self.out_pkts_untagged.is_set or self.out_pkts_untagged.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_pkts_untagged.get_name_leafdata())
                                        if (self.out_rx_drop_pkts_ctrl.is_set or self.out_rx_drop_pkts_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_rx_drop_pkts_ctrl.get_name_leafdata())
                                        if (self.out_rx_drop_pkts_unctrl.is_set or self.out_rx_drop_pkts_unctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_rx_drop_pkts_unctrl.get_name_leafdata())
                                        if (self.out_rx_err_pkts_ctrl.is_set or self.out_rx_err_pkts_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_rx_err_pkts_ctrl.get_name_leafdata())
                                        if (self.out_rx_err_pkts_unctrl.is_set or self.out_rx_err_pkts_unctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_rx_err_pkts_unctrl.get_name_leafdata())
                                        if (self.out_ucast_pkts_ctrl.is_set or self.out_ucast_pkts_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_ucast_pkts_ctrl.get_name_leafdata())
                                        if (self.out_ucast_pkts_unctrl.is_set or self.out_ucast_pkts_unctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.out_ucast_pkts_unctrl.get_name_leafdata())
                                        if (self.transform_error_pkts.is_set or self.transform_error_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.transform_error_pkts.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "out-bcast-pkts-ctrl" or name == "out-bcast-pkts-unctrl" or name == "out-drop-pkts-class" or name == "out-drop-pkts-data" or name == "out-mcast-pkts-ctrl" or name == "out-mcast-pkts-unctrl" or name == "out-octets-common" or name == "out-octets-ctrl" or name == "out-octets-unctrl" or name == "out-pkt-ctrl" or name == "out-pkts-untagged" or name == "out-rx-drop-pkts-ctrl" or name == "out-rx-drop-pkts-unctrl" or name == "out-rx-err-pkts-ctrl" or name == "out-rx-err-pkts-unctrl" or name == "out-ucast-pkts-ctrl" or name == "out-ucast-pkts-unctrl" or name == "transform-error-pkts"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "out-bcast-pkts-ctrl"):
                                            self.out_bcast_pkts_ctrl = value
                                            self.out_bcast_pkts_ctrl.value_namespace = name_space
                                            self.out_bcast_pkts_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-bcast-pkts-unctrl"):
                                            self.out_bcast_pkts_unctrl = value
                                            self.out_bcast_pkts_unctrl.value_namespace = name_space
                                            self.out_bcast_pkts_unctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-drop-pkts-class"):
                                            self.out_drop_pkts_class = value
                                            self.out_drop_pkts_class.value_namespace = name_space
                                            self.out_drop_pkts_class.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-drop-pkts-data"):
                                            self.out_drop_pkts_data = value
                                            self.out_drop_pkts_data.value_namespace = name_space
                                            self.out_drop_pkts_data.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-mcast-pkts-ctrl"):
                                            self.out_mcast_pkts_ctrl = value
                                            self.out_mcast_pkts_ctrl.value_namespace = name_space
                                            self.out_mcast_pkts_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-mcast-pkts-unctrl"):
                                            self.out_mcast_pkts_unctrl = value
                                            self.out_mcast_pkts_unctrl.value_namespace = name_space
                                            self.out_mcast_pkts_unctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-octets-common"):
                                            self.out_octets_common = value
                                            self.out_octets_common.value_namespace = name_space
                                            self.out_octets_common.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-octets-ctrl"):
                                            self.out_octets_ctrl = value
                                            self.out_octets_ctrl.value_namespace = name_space
                                            self.out_octets_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-octets-unctrl"):
                                            self.out_octets_unctrl = value
                                            self.out_octets_unctrl.value_namespace = name_space
                                            self.out_octets_unctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-pkt-ctrl"):
                                            self.out_pkt_ctrl = value
                                            self.out_pkt_ctrl.value_namespace = name_space
                                            self.out_pkt_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-pkts-untagged"):
                                            self.out_pkts_untagged = value
                                            self.out_pkts_untagged.value_namespace = name_space
                                            self.out_pkts_untagged.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-rx-drop-pkts-ctrl"):
                                            self.out_rx_drop_pkts_ctrl = value
                                            self.out_rx_drop_pkts_ctrl.value_namespace = name_space
                                            self.out_rx_drop_pkts_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-rx-drop-pkts-unctrl"):
                                            self.out_rx_drop_pkts_unctrl = value
                                            self.out_rx_drop_pkts_unctrl.value_namespace = name_space
                                            self.out_rx_drop_pkts_unctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-rx-err-pkts-ctrl"):
                                            self.out_rx_err_pkts_ctrl = value
                                            self.out_rx_err_pkts_ctrl.value_namespace = name_space
                                            self.out_rx_err_pkts_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-rx-err-pkts-unctrl"):
                                            self.out_rx_err_pkts_unctrl = value
                                            self.out_rx_err_pkts_unctrl.value_namespace = name_space
                                            self.out_rx_err_pkts_unctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-ucast-pkts-ctrl"):
                                            self.out_ucast_pkts_ctrl = value
                                            self.out_ucast_pkts_ctrl.value_namespace = name_space
                                            self.out_ucast_pkts_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "out-ucast-pkts-unctrl"):
                                            self.out_ucast_pkts_unctrl = value
                                            self.out_ucast_pkts_unctrl.value_namespace = name_space
                                            self.out_ucast_pkts_unctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "transform-error-pkts"):
                                            self.transform_error_pkts = value
                                            self.transform_error_pkts.value_namespace = name_space
                                            self.transform_error_pkts.value_namespace_prefix = name_space_prefix


                                class RxInterfaceMacsecStats(Entity):
                                    """
                                    Rx interface Macsec Stats
                                    
                                    .. attribute:: in_bcast_pkts_ctrl
                                    
                                    	Broadcast pkts rx on controlled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_bcast_pkts_unctrl
                                    
                                    	Broadcast pkts rx on uncontrolled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_drop_pkts_class
                                    
                                    	Packets dropped due to overflow in classification pipeline
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_drop_pkts_data
                                    
                                    	Packets dropped due to overflow in processing pipeline
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_mcast_pkts_ctrl
                                    
                                    	Multicast pkts rx on controlled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_mcast_pkts_unctrl
                                    
                                    	Multicast pkts rx on uncontrolled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_octets_ctrl
                                    
                                    	Octets rx on controlled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_octets_unctrl
                                    
                                    	Octets rx on uncontrolled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkt_bad_tag
                                    
                                    	ingress frames received with an invalid MACSec tag or ICV                                       added with next one gives InPktsSCIMiss
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkt_ctrl
                                    
                                    	ingress packet that is classified as control packet
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkt_no_sci
                                    
                                    	correctly tagged ingress frames for which no valid SC found & \\;                              validateFrames is strict
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkt_no_tag
                                    
                                    	ingress packet untagged & validateFrames is strict
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_tagged_ctrl
                                    
                                    	ingress packets that are control or KaY packets
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_unknown_sci
                                    
                                    	correctly tagged ingress frames for which no valid SC found &                                 validateFrames is !strict
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_pkts_untagged
                                    
                                    	ingress packet untagged & validateFrames is  !strict
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_rx_drop_pkts_ctrl
                                    
                                    	Data pkts dropped due to overrun
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_rx_drop_pkts_unctrl
                                    
                                    	Control pkts dropped due to overrun
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_rx_error_pkts_ctrl
                                    
                                    	Data pkts error\-terminated due to overrun
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_rx_error_pkts_unctrl
                                    
                                    	Control pkts error\-terminated due to overrun
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_ucast_pkts_ctrl
                                    
                                    	Unicast pkts rx on controlled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: in_ucast_pkts_unctrl
                                    
                                    	Unicast pkts rx on uncontrolled port
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: transform_error_pkts
                                    
                                    	counter to count internal errors in the MACSec core
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.RxInterfaceMacsecStats, self).__init__()

                                        self.yang_name = "rx-interface-macsec-stats"
                                        self.yang_parent_name = "es200-stats"

                                        self.in_bcast_pkts_ctrl = YLeaf(YType.uint64, "in-bcast-pkts-ctrl")

                                        self.in_bcast_pkts_unctrl = YLeaf(YType.uint64, "in-bcast-pkts-unctrl")

                                        self.in_drop_pkts_class = YLeaf(YType.uint64, "in-drop-pkts-class")

                                        self.in_drop_pkts_data = YLeaf(YType.uint64, "in-drop-pkts-data")

                                        self.in_mcast_pkts_ctrl = YLeaf(YType.uint64, "in-mcast-pkts-ctrl")

                                        self.in_mcast_pkts_unctrl = YLeaf(YType.uint64, "in-mcast-pkts-unctrl")

                                        self.in_octets_ctrl = YLeaf(YType.uint64, "in-octets-ctrl")

                                        self.in_octets_unctrl = YLeaf(YType.uint64, "in-octets-unctrl")

                                        self.in_pkt_bad_tag = YLeaf(YType.uint64, "in-pkt-bad-tag")

                                        self.in_pkt_ctrl = YLeaf(YType.uint64, "in-pkt-ctrl")

                                        self.in_pkt_no_sci = YLeaf(YType.uint64, "in-pkt-no-sci")

                                        self.in_pkt_no_tag = YLeaf(YType.uint64, "in-pkt-no-tag")

                                        self.in_pkts_tagged_ctrl = YLeaf(YType.uint64, "in-pkts-tagged-ctrl")

                                        self.in_pkts_unknown_sci = YLeaf(YType.uint64, "in-pkts-unknown-sci")

                                        self.in_pkts_untagged = YLeaf(YType.uint64, "in-pkts-untagged")

                                        self.in_rx_drop_pkts_ctrl = YLeaf(YType.uint64, "in-rx-drop-pkts-ctrl")

                                        self.in_rx_drop_pkts_unctrl = YLeaf(YType.uint64, "in-rx-drop-pkts-unctrl")

                                        self.in_rx_error_pkts_ctrl = YLeaf(YType.uint64, "in-rx-error-pkts-ctrl")

                                        self.in_rx_error_pkts_unctrl = YLeaf(YType.uint64, "in-rx-error-pkts-unctrl")

                                        self.in_ucast_pkts_ctrl = YLeaf(YType.uint64, "in-ucast-pkts-ctrl")

                                        self.in_ucast_pkts_unctrl = YLeaf(YType.uint64, "in-ucast-pkts-unctrl")

                                        self.transform_error_pkts = YLeaf(YType.uint64, "transform-error-pkts")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("in_bcast_pkts_ctrl",
                                                        "in_bcast_pkts_unctrl",
                                                        "in_drop_pkts_class",
                                                        "in_drop_pkts_data",
                                                        "in_mcast_pkts_ctrl",
                                                        "in_mcast_pkts_unctrl",
                                                        "in_octets_ctrl",
                                                        "in_octets_unctrl",
                                                        "in_pkt_bad_tag",
                                                        "in_pkt_ctrl",
                                                        "in_pkt_no_sci",
                                                        "in_pkt_no_tag",
                                                        "in_pkts_tagged_ctrl",
                                                        "in_pkts_unknown_sci",
                                                        "in_pkts_untagged",
                                                        "in_rx_drop_pkts_ctrl",
                                                        "in_rx_drop_pkts_unctrl",
                                                        "in_rx_error_pkts_ctrl",
                                                        "in_rx_error_pkts_unctrl",
                                                        "in_ucast_pkts_ctrl",
                                                        "in_ucast_pkts_unctrl",
                                                        "transform_error_pkts") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.RxInterfaceMacsecStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.RxInterfaceMacsecStats, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.in_bcast_pkts_ctrl.is_set or
                                            self.in_bcast_pkts_unctrl.is_set or
                                            self.in_drop_pkts_class.is_set or
                                            self.in_drop_pkts_data.is_set or
                                            self.in_mcast_pkts_ctrl.is_set or
                                            self.in_mcast_pkts_unctrl.is_set or
                                            self.in_octets_ctrl.is_set or
                                            self.in_octets_unctrl.is_set or
                                            self.in_pkt_bad_tag.is_set or
                                            self.in_pkt_ctrl.is_set or
                                            self.in_pkt_no_sci.is_set or
                                            self.in_pkt_no_tag.is_set or
                                            self.in_pkts_tagged_ctrl.is_set or
                                            self.in_pkts_unknown_sci.is_set or
                                            self.in_pkts_untagged.is_set or
                                            self.in_rx_drop_pkts_ctrl.is_set or
                                            self.in_rx_drop_pkts_unctrl.is_set or
                                            self.in_rx_error_pkts_ctrl.is_set or
                                            self.in_rx_error_pkts_unctrl.is_set or
                                            self.in_ucast_pkts_ctrl.is_set or
                                            self.in_ucast_pkts_unctrl.is_set or
                                            self.transform_error_pkts.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.in_bcast_pkts_ctrl.yfilter != YFilter.not_set or
                                            self.in_bcast_pkts_unctrl.yfilter != YFilter.not_set or
                                            self.in_drop_pkts_class.yfilter != YFilter.not_set or
                                            self.in_drop_pkts_data.yfilter != YFilter.not_set or
                                            self.in_mcast_pkts_ctrl.yfilter != YFilter.not_set or
                                            self.in_mcast_pkts_unctrl.yfilter != YFilter.not_set or
                                            self.in_octets_ctrl.yfilter != YFilter.not_set or
                                            self.in_octets_unctrl.yfilter != YFilter.not_set or
                                            self.in_pkt_bad_tag.yfilter != YFilter.not_set or
                                            self.in_pkt_ctrl.yfilter != YFilter.not_set or
                                            self.in_pkt_no_sci.yfilter != YFilter.not_set or
                                            self.in_pkt_no_tag.yfilter != YFilter.not_set or
                                            self.in_pkts_tagged_ctrl.yfilter != YFilter.not_set or
                                            self.in_pkts_unknown_sci.yfilter != YFilter.not_set or
                                            self.in_pkts_untagged.yfilter != YFilter.not_set or
                                            self.in_rx_drop_pkts_ctrl.yfilter != YFilter.not_set or
                                            self.in_rx_drop_pkts_unctrl.yfilter != YFilter.not_set or
                                            self.in_rx_error_pkts_ctrl.yfilter != YFilter.not_set or
                                            self.in_rx_error_pkts_unctrl.yfilter != YFilter.not_set or
                                            self.in_ucast_pkts_ctrl.yfilter != YFilter.not_set or
                                            self.in_ucast_pkts_unctrl.yfilter != YFilter.not_set or
                                            self.transform_error_pkts.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "rx-interface-macsec-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.in_bcast_pkts_ctrl.is_set or self.in_bcast_pkts_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_bcast_pkts_ctrl.get_name_leafdata())
                                        if (self.in_bcast_pkts_unctrl.is_set or self.in_bcast_pkts_unctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_bcast_pkts_unctrl.get_name_leafdata())
                                        if (self.in_drop_pkts_class.is_set or self.in_drop_pkts_class.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_drop_pkts_class.get_name_leafdata())
                                        if (self.in_drop_pkts_data.is_set or self.in_drop_pkts_data.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_drop_pkts_data.get_name_leafdata())
                                        if (self.in_mcast_pkts_ctrl.is_set or self.in_mcast_pkts_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_mcast_pkts_ctrl.get_name_leafdata())
                                        if (self.in_mcast_pkts_unctrl.is_set or self.in_mcast_pkts_unctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_mcast_pkts_unctrl.get_name_leafdata())
                                        if (self.in_octets_ctrl.is_set or self.in_octets_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_octets_ctrl.get_name_leafdata())
                                        if (self.in_octets_unctrl.is_set or self.in_octets_unctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_octets_unctrl.get_name_leafdata())
                                        if (self.in_pkt_bad_tag.is_set or self.in_pkt_bad_tag.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkt_bad_tag.get_name_leafdata())
                                        if (self.in_pkt_ctrl.is_set or self.in_pkt_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkt_ctrl.get_name_leafdata())
                                        if (self.in_pkt_no_sci.is_set or self.in_pkt_no_sci.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkt_no_sci.get_name_leafdata())
                                        if (self.in_pkt_no_tag.is_set or self.in_pkt_no_tag.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkt_no_tag.get_name_leafdata())
                                        if (self.in_pkts_tagged_ctrl.is_set or self.in_pkts_tagged_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_tagged_ctrl.get_name_leafdata())
                                        if (self.in_pkts_unknown_sci.is_set or self.in_pkts_unknown_sci.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_unknown_sci.get_name_leafdata())
                                        if (self.in_pkts_untagged.is_set or self.in_pkts_untagged.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_pkts_untagged.get_name_leafdata())
                                        if (self.in_rx_drop_pkts_ctrl.is_set or self.in_rx_drop_pkts_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_rx_drop_pkts_ctrl.get_name_leafdata())
                                        if (self.in_rx_drop_pkts_unctrl.is_set or self.in_rx_drop_pkts_unctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_rx_drop_pkts_unctrl.get_name_leafdata())
                                        if (self.in_rx_error_pkts_ctrl.is_set or self.in_rx_error_pkts_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_rx_error_pkts_ctrl.get_name_leafdata())
                                        if (self.in_rx_error_pkts_unctrl.is_set or self.in_rx_error_pkts_unctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_rx_error_pkts_unctrl.get_name_leafdata())
                                        if (self.in_ucast_pkts_ctrl.is_set or self.in_ucast_pkts_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_ucast_pkts_ctrl.get_name_leafdata())
                                        if (self.in_ucast_pkts_unctrl.is_set or self.in_ucast_pkts_unctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.in_ucast_pkts_unctrl.get_name_leafdata())
                                        if (self.transform_error_pkts.is_set or self.transform_error_pkts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.transform_error_pkts.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "in-bcast-pkts-ctrl" or name == "in-bcast-pkts-unctrl" or name == "in-drop-pkts-class" or name == "in-drop-pkts-data" or name == "in-mcast-pkts-ctrl" or name == "in-mcast-pkts-unctrl" or name == "in-octets-ctrl" or name == "in-octets-unctrl" or name == "in-pkt-bad-tag" or name == "in-pkt-ctrl" or name == "in-pkt-no-sci" or name == "in-pkt-no-tag" or name == "in-pkts-tagged-ctrl" or name == "in-pkts-unknown-sci" or name == "in-pkts-untagged" or name == "in-rx-drop-pkts-ctrl" or name == "in-rx-drop-pkts-unctrl" or name == "in-rx-error-pkts-ctrl" or name == "in-rx-error-pkts-unctrl" or name == "in-ucast-pkts-ctrl" or name == "in-ucast-pkts-unctrl" or name == "transform-error-pkts"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "in-bcast-pkts-ctrl"):
                                            self.in_bcast_pkts_ctrl = value
                                            self.in_bcast_pkts_ctrl.value_namespace = name_space
                                            self.in_bcast_pkts_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-bcast-pkts-unctrl"):
                                            self.in_bcast_pkts_unctrl = value
                                            self.in_bcast_pkts_unctrl.value_namespace = name_space
                                            self.in_bcast_pkts_unctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-drop-pkts-class"):
                                            self.in_drop_pkts_class = value
                                            self.in_drop_pkts_class.value_namespace = name_space
                                            self.in_drop_pkts_class.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-drop-pkts-data"):
                                            self.in_drop_pkts_data = value
                                            self.in_drop_pkts_data.value_namespace = name_space
                                            self.in_drop_pkts_data.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-mcast-pkts-ctrl"):
                                            self.in_mcast_pkts_ctrl = value
                                            self.in_mcast_pkts_ctrl.value_namespace = name_space
                                            self.in_mcast_pkts_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-mcast-pkts-unctrl"):
                                            self.in_mcast_pkts_unctrl = value
                                            self.in_mcast_pkts_unctrl.value_namespace = name_space
                                            self.in_mcast_pkts_unctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-octets-ctrl"):
                                            self.in_octets_ctrl = value
                                            self.in_octets_ctrl.value_namespace = name_space
                                            self.in_octets_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-octets-unctrl"):
                                            self.in_octets_unctrl = value
                                            self.in_octets_unctrl.value_namespace = name_space
                                            self.in_octets_unctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkt-bad-tag"):
                                            self.in_pkt_bad_tag = value
                                            self.in_pkt_bad_tag.value_namespace = name_space
                                            self.in_pkt_bad_tag.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkt-ctrl"):
                                            self.in_pkt_ctrl = value
                                            self.in_pkt_ctrl.value_namespace = name_space
                                            self.in_pkt_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkt-no-sci"):
                                            self.in_pkt_no_sci = value
                                            self.in_pkt_no_sci.value_namespace = name_space
                                            self.in_pkt_no_sci.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkt-no-tag"):
                                            self.in_pkt_no_tag = value
                                            self.in_pkt_no_tag.value_namespace = name_space
                                            self.in_pkt_no_tag.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-tagged-ctrl"):
                                            self.in_pkts_tagged_ctrl = value
                                            self.in_pkts_tagged_ctrl.value_namespace = name_space
                                            self.in_pkts_tagged_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-unknown-sci"):
                                            self.in_pkts_unknown_sci = value
                                            self.in_pkts_unknown_sci.value_namespace = name_space
                                            self.in_pkts_unknown_sci.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-pkts-untagged"):
                                            self.in_pkts_untagged = value
                                            self.in_pkts_untagged.value_namespace = name_space
                                            self.in_pkts_untagged.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-rx-drop-pkts-ctrl"):
                                            self.in_rx_drop_pkts_ctrl = value
                                            self.in_rx_drop_pkts_ctrl.value_namespace = name_space
                                            self.in_rx_drop_pkts_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-rx-drop-pkts-unctrl"):
                                            self.in_rx_drop_pkts_unctrl = value
                                            self.in_rx_drop_pkts_unctrl.value_namespace = name_space
                                            self.in_rx_drop_pkts_unctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-rx-error-pkts-ctrl"):
                                            self.in_rx_error_pkts_ctrl = value
                                            self.in_rx_error_pkts_ctrl.value_namespace = name_space
                                            self.in_rx_error_pkts_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-rx-error-pkts-unctrl"):
                                            self.in_rx_error_pkts_unctrl = value
                                            self.in_rx_error_pkts_unctrl.value_namespace = name_space
                                            self.in_rx_error_pkts_unctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-ucast-pkts-ctrl"):
                                            self.in_ucast_pkts_ctrl = value
                                            self.in_ucast_pkts_ctrl.value_namespace = name_space
                                            self.in_ucast_pkts_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "in-ucast-pkts-unctrl"):
                                            self.in_ucast_pkts_unctrl = value
                                            self.in_ucast_pkts_unctrl.value_namespace = name_space
                                            self.in_ucast_pkts_unctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "transform-error-pkts"):
                                            self.transform_error_pkts = value
                                            self.transform_error_pkts.value_namespace = name_space
                                            self.transform_error_pkts.value_namespace_prefix = name_space_prefix


                                class TxPortStats(Entity):
                                    """
                                    Port level TX Stats
                                    
                                    .. attribute:: flow_miss
                                    
                                    	Pkts matching none of flow entries
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: multi_flow_match
                                    
                                    	Pkts matching multiple flow entries
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: parser_dropped
                                    
                                    	Pkts dropped by header parser as invalid
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: pkts_ctrl
                                    
                                    	Control pkts forwarded
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: pkts_data
                                    
                                    	Data pkts forwarded
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: pkts_dropped
                                    
                                    	Pkts dropped by classifier
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: pkts_err_in
                                    
                                    	Pkts received with an error indication
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.TxPortStats, self).__init__()

                                        self.yang_name = "tx-port-stats"
                                        self.yang_parent_name = "es200-stats"

                                        self.flow_miss = YLeaf(YType.uint64, "flow-miss")

                                        self.multi_flow_match = YLeaf(YType.uint64, "multi-flow-match")

                                        self.parser_dropped = YLeaf(YType.uint64, "parser-dropped")

                                        self.pkts_ctrl = YLeaf(YType.uint64, "pkts-ctrl")

                                        self.pkts_data = YLeaf(YType.uint64, "pkts-data")

                                        self.pkts_dropped = YLeaf(YType.uint64, "pkts-dropped")

                                        self.pkts_err_in = YLeaf(YType.uint64, "pkts-err-in")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("flow_miss",
                                                        "multi_flow_match",
                                                        "parser_dropped",
                                                        "pkts_ctrl",
                                                        "pkts_data",
                                                        "pkts_dropped",
                                                        "pkts_err_in") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.TxPortStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.TxPortStats, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.flow_miss.is_set or
                                            self.multi_flow_match.is_set or
                                            self.parser_dropped.is_set or
                                            self.pkts_ctrl.is_set or
                                            self.pkts_data.is_set or
                                            self.pkts_dropped.is_set or
                                            self.pkts_err_in.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.flow_miss.yfilter != YFilter.not_set or
                                            self.multi_flow_match.yfilter != YFilter.not_set or
                                            self.parser_dropped.yfilter != YFilter.not_set or
                                            self.pkts_ctrl.yfilter != YFilter.not_set or
                                            self.pkts_data.yfilter != YFilter.not_set or
                                            self.pkts_dropped.yfilter != YFilter.not_set or
                                            self.pkts_err_in.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "tx-port-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.flow_miss.is_set or self.flow_miss.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.flow_miss.get_name_leafdata())
                                        if (self.multi_flow_match.is_set or self.multi_flow_match.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.multi_flow_match.get_name_leafdata())
                                        if (self.parser_dropped.is_set or self.parser_dropped.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.parser_dropped.get_name_leafdata())
                                        if (self.pkts_ctrl.is_set or self.pkts_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.pkts_ctrl.get_name_leafdata())
                                        if (self.pkts_data.is_set or self.pkts_data.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.pkts_data.get_name_leafdata())
                                        if (self.pkts_dropped.is_set or self.pkts_dropped.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.pkts_dropped.get_name_leafdata())
                                        if (self.pkts_err_in.is_set or self.pkts_err_in.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.pkts_err_in.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "flow-miss" or name == "multi-flow-match" or name == "parser-dropped" or name == "pkts-ctrl" or name == "pkts-data" or name == "pkts-dropped" or name == "pkts-err-in"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "flow-miss"):
                                            self.flow_miss = value
                                            self.flow_miss.value_namespace = name_space
                                            self.flow_miss.value_namespace_prefix = name_space_prefix
                                        if(value_path == "multi-flow-match"):
                                            self.multi_flow_match = value
                                            self.multi_flow_match.value_namespace = name_space
                                            self.multi_flow_match.value_namespace_prefix = name_space_prefix
                                        if(value_path == "parser-dropped"):
                                            self.parser_dropped = value
                                            self.parser_dropped.value_namespace = name_space
                                            self.parser_dropped.value_namespace_prefix = name_space_prefix
                                        if(value_path == "pkts-ctrl"):
                                            self.pkts_ctrl = value
                                            self.pkts_ctrl.value_namespace = name_space
                                            self.pkts_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "pkts-data"):
                                            self.pkts_data = value
                                            self.pkts_data.value_namespace = name_space
                                            self.pkts_data.value_namespace_prefix = name_space_prefix
                                        if(value_path == "pkts-dropped"):
                                            self.pkts_dropped = value
                                            self.pkts_dropped.value_namespace = name_space
                                            self.pkts_dropped.value_namespace_prefix = name_space_prefix
                                        if(value_path == "pkts-err-in"):
                                            self.pkts_err_in = value
                                            self.pkts_err_in.value_namespace = name_space
                                            self.pkts_err_in.value_namespace_prefix = name_space_prefix


                                class RxPortStats(Entity):
                                    """
                                    Port level RX Stats
                                    
                                    .. attribute:: flow_miss
                                    
                                    	Pkts matching none of flow entries
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: multi_flow_match
                                    
                                    	Pkts matching multiple flow entries
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: parser_dropped
                                    
                                    	Pkts dropped by header parser as invalid
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: pkts_ctrl
                                    
                                    	Control pkts forwarded
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: pkts_data
                                    
                                    	Data pkts forwarded
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: pkts_dropped
                                    
                                    	Pkts dropped by classifier
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: pkts_err_in
                                    
                                    	Pkts received with an error indication
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'crypto-macsec-pl-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.RxPortStats, self).__init__()

                                        self.yang_name = "rx-port-stats"
                                        self.yang_parent_name = "es200-stats"

                                        self.flow_miss = YLeaf(YType.uint64, "flow-miss")

                                        self.multi_flow_match = YLeaf(YType.uint64, "multi-flow-match")

                                        self.parser_dropped = YLeaf(YType.uint64, "parser-dropped")

                                        self.pkts_ctrl = YLeaf(YType.uint64, "pkts-ctrl")

                                        self.pkts_data = YLeaf(YType.uint64, "pkts-data")

                                        self.pkts_dropped = YLeaf(YType.uint64, "pkts-dropped")

                                        self.pkts_err_in = YLeaf(YType.uint64, "pkts-err-in")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("flow_miss",
                                                        "multi_flow_match",
                                                        "parser_dropped",
                                                        "pkts_ctrl",
                                                        "pkts_data",
                                                        "pkts_dropped",
                                                        "pkts_err_in") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.RxPortStats, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.RxPortStats, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.flow_miss.is_set or
                                            self.multi_flow_match.is_set or
                                            self.parser_dropped.is_set or
                                            self.pkts_ctrl.is_set or
                                            self.pkts_data.is_set or
                                            self.pkts_dropped.is_set or
                                            self.pkts_err_in.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.flow_miss.yfilter != YFilter.not_set or
                                            self.multi_flow_match.yfilter != YFilter.not_set or
                                            self.parser_dropped.yfilter != YFilter.not_set or
                                            self.pkts_ctrl.yfilter != YFilter.not_set or
                                            self.pkts_data.yfilter != YFilter.not_set or
                                            self.pkts_dropped.yfilter != YFilter.not_set or
                                            self.pkts_err_in.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "rx-port-stats" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.flow_miss.is_set or self.flow_miss.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.flow_miss.get_name_leafdata())
                                        if (self.multi_flow_match.is_set or self.multi_flow_match.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.multi_flow_match.get_name_leafdata())
                                        if (self.parser_dropped.is_set or self.parser_dropped.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.parser_dropped.get_name_leafdata())
                                        if (self.pkts_ctrl.is_set or self.pkts_ctrl.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.pkts_ctrl.get_name_leafdata())
                                        if (self.pkts_data.is_set or self.pkts_data.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.pkts_data.get_name_leafdata())
                                        if (self.pkts_dropped.is_set or self.pkts_dropped.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.pkts_dropped.get_name_leafdata())
                                        if (self.pkts_err_in.is_set or self.pkts_err_in.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.pkts_err_in.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "flow-miss" or name == "multi-flow-match" or name == "parser-dropped" or name == "pkts-ctrl" or name == "pkts-data" or name == "pkts-dropped" or name == "pkts-err-in"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "flow-miss"):
                                            self.flow_miss = value
                                            self.flow_miss.value_namespace = name_space
                                            self.flow_miss.value_namespace_prefix = name_space_prefix
                                        if(value_path == "multi-flow-match"):
                                            self.multi_flow_match = value
                                            self.multi_flow_match.value_namespace = name_space
                                            self.multi_flow_match.value_namespace_prefix = name_space_prefix
                                        if(value_path == "parser-dropped"):
                                            self.parser_dropped = value
                                            self.parser_dropped.value_namespace = name_space
                                            self.parser_dropped.value_namespace_prefix = name_space_prefix
                                        if(value_path == "pkts-ctrl"):
                                            self.pkts_ctrl = value
                                            self.pkts_ctrl.value_namespace = name_space
                                            self.pkts_ctrl.value_namespace_prefix = name_space_prefix
                                        if(value_path == "pkts-data"):
                                            self.pkts_data = value
                                            self.pkts_data.value_namespace = name_space
                                            self.pkts_data.value_namespace_prefix = name_space_prefix
                                        if(value_path == "pkts-dropped"):
                                            self.pkts_dropped = value
                                            self.pkts_dropped.value_namespace = name_space
                                            self.pkts_dropped.value_namespace_prefix = name_space_prefix
                                        if(value_path == "pkts-err-in"):
                                            self.pkts_err_in = value
                                            self.pkts_err_in.value_namespace = name_space
                                            self.pkts_err_in.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    return (
                                        (self.rx_interface_macsec_stats is not None and self.rx_interface_macsec_stats.has_data()) or
                                        (self.rx_port_stats is not None and self.rx_port_stats.has_data()) or
                                        (self.rx_sa_stats is not None and self.rx_sa_stats.has_data()) or
                                        (self.rx_sc_macsec_stats is not None and self.rx_sc_macsec_stats.has_data()) or
                                        (self.tx_interface_macsec_stats is not None and self.tx_interface_macsec_stats.has_data()) or
                                        (self.tx_port_stats is not None and self.tx_port_stats.has_data()) or
                                        (self.tx_sa_stats is not None and self.tx_sa_stats.has_data()) or
                                        (self.tx_sc_macsec_stats is not None and self.tx_sc_macsec_stats.has_data()))

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        (self.rx_interface_macsec_stats is not None and self.rx_interface_macsec_stats.has_operation()) or
                                        (self.rx_port_stats is not None and self.rx_port_stats.has_operation()) or
                                        (self.rx_sa_stats is not None and self.rx_sa_stats.has_operation()) or
                                        (self.rx_sc_macsec_stats is not None and self.rx_sc_macsec_stats.has_operation()) or
                                        (self.tx_interface_macsec_stats is not None and self.tx_interface_macsec_stats.has_operation()) or
                                        (self.tx_port_stats is not None and self.tx_port_stats.has_operation()) or
                                        (self.tx_sa_stats is not None and self.tx_sa_stats.has_operation()) or
                                        (self.tx_sc_macsec_stats is not None and self.tx_sc_macsec_stats.has_operation()))

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "es200-stats" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "rx-interface-macsec-stats"):
                                        if (self.rx_interface_macsec_stats is None):
                                            self.rx_interface_macsec_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.RxInterfaceMacsecStats()
                                            self.rx_interface_macsec_stats.parent = self
                                            self._children_name_map["rx_interface_macsec_stats"] = "rx-interface-macsec-stats"
                                        return self.rx_interface_macsec_stats

                                    if (child_yang_name == "rx-port-stats"):
                                        if (self.rx_port_stats is None):
                                            self.rx_port_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.RxPortStats()
                                            self.rx_port_stats.parent = self
                                            self._children_name_map["rx_port_stats"] = "rx-port-stats"
                                        return self.rx_port_stats

                                    if (child_yang_name == "rx-sa-stats"):
                                        if (self.rx_sa_stats is None):
                                            self.rx_sa_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.RxSaStats()
                                            self.rx_sa_stats.parent = self
                                            self._children_name_map["rx_sa_stats"] = "rx-sa-stats"
                                        return self.rx_sa_stats

                                    if (child_yang_name == "rx-sc-macsec-stats"):
                                        if (self.rx_sc_macsec_stats is None):
                                            self.rx_sc_macsec_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.RxScMacsecStats()
                                            self.rx_sc_macsec_stats.parent = self
                                            self._children_name_map["rx_sc_macsec_stats"] = "rx-sc-macsec-stats"
                                        return self.rx_sc_macsec_stats

                                    if (child_yang_name == "tx-interface-macsec-stats"):
                                        if (self.tx_interface_macsec_stats is None):
                                            self.tx_interface_macsec_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.TxInterfaceMacsecStats()
                                            self.tx_interface_macsec_stats.parent = self
                                            self._children_name_map["tx_interface_macsec_stats"] = "tx-interface-macsec-stats"
                                        return self.tx_interface_macsec_stats

                                    if (child_yang_name == "tx-port-stats"):
                                        if (self.tx_port_stats is None):
                                            self.tx_port_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.TxPortStats()
                                            self.tx_port_stats.parent = self
                                            self._children_name_map["tx_port_stats"] = "tx-port-stats"
                                        return self.tx_port_stats

                                    if (child_yang_name == "tx-sa-stats"):
                                        if (self.tx_sa_stats is None):
                                            self.tx_sa_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.TxSaStats()
                                            self.tx_sa_stats.parent = self
                                            self._children_name_map["tx_sa_stats"] = "tx-sa-stats"
                                        return self.tx_sa_stats

                                    if (child_yang_name == "tx-sc-macsec-stats"):
                                        if (self.tx_sc_macsec_stats is None):
                                            self.tx_sc_macsec_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats.TxScMacsecStats()
                                            self.tx_sc_macsec_stats.parent = self
                                            self._children_name_map["tx_sc_macsec_stats"] = "tx-sc-macsec-stats"
                                        return self.tx_sc_macsec_stats

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "rx-interface-macsec-stats" or name == "rx-port-stats" or name == "rx-sa-stats" or name == "rx-sc-macsec-stats" or name == "tx-interface-macsec-stats" or name == "tx-port-stats" or name == "tx-sa-stats" or name == "tx-sc-macsec-stats"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass

                            def has_data(self):
                                return (
                                    self.type.is_set or
                                    (self.es200_stats is not None and self.es200_stats.has_data()) or
                                    (self.msfpga_stats is not None and self.msfpga_stats.has_data()) or
                                    (self.xlfpga_stats is not None and self.xlfpga_stats.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.type.yfilter != YFilter.not_set or
                                    (self.es200_stats is not None and self.es200_stats.has_operation()) or
                                    (self.msfpga_stats is not None and self.msfpga_stats.has_operation()) or
                                    (self.xlfpga_stats is not None and self.xlfpga_stats.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "ext" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.type.is_set or self.type.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.type.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "es200-stats"):
                                    if (self.es200_stats is None):
                                        self.es200_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.Es200Stats()
                                        self.es200_stats.parent = self
                                        self._children_name_map["es200_stats"] = "es200-stats"
                                    return self.es200_stats

                                if (child_yang_name == "msfpga-stats"):
                                    if (self.msfpga_stats is None):
                                        self.msfpga_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.MsfpgaStats()
                                        self.msfpga_stats.parent = self
                                        self._children_name_map["msfpga_stats"] = "msfpga-stats"
                                    return self.msfpga_stats

                                if (child_yang_name == "xlfpga-stats"):
                                    if (self.xlfpga_stats is None):
                                        self.xlfpga_stats = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext.XlfpgaStats()
                                        self.xlfpga_stats.parent = self
                                        self._children_name_map["xlfpga_stats"] = "xlfpga-stats"
                                    return self.xlfpga_stats

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "es200-stats" or name == "msfpga-stats" or name == "xlfpga-stats" or name == "type"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "type"):
                                    self.type = value
                                    self.type.value_namespace = name_space
                                    self.type.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (self.ext is not None and self.ext.has_data())

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                (self.ext is not None and self.ext.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "sw-statistics" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "ext"):
                                if (self.ext is None):
                                    self.ext = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics.Ext()
                                    self.ext.parent = self
                                    self._children_name_map["ext"] = "ext"
                                return self.ext

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "ext"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            self.name.is_set or
                            (self.hw_flow_s is not None and self.hw_flow_s.has_data()) or
                            (self.hw_sas is not None and self.hw_sas.has_data()) or
                            (self.hw_statistics is not None and self.hw_statistics.has_data()) or
                            (self.sw_statistics is not None and self.sw_statistics.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.name.yfilter != YFilter.not_set or
                            (self.hw_flow_s is not None and self.hw_flow_s.has_operation()) or
                            (self.hw_sas is not None and self.hw_sas.has_operation()) or
                            (self.hw_statistics is not None and self.hw_statistics.has_operation()) or
                            (self.sw_statistics is not None and self.sw_statistics.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "interface" + "[name='" + self.name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "hw-flow-s"):
                            if (self.hw_flow_s is None):
                                self.hw_flow_s = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwFlowS()
                                self.hw_flow_s.parent = self
                                self._children_name_map["hw_flow_s"] = "hw-flow-s"
                            return self.hw_flow_s

                        if (child_yang_name == "hw-sas"):
                            if (self.hw_sas is None):
                                self.hw_sas = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwSas()
                                self.hw_sas.parent = self
                                self._children_name_map["hw_sas"] = "hw-sas"
                            return self.hw_sas

                        if (child_yang_name == "hw-statistics"):
                            if (self.hw_statistics is None):
                                self.hw_statistics = MacsecPlatform.Nodes.Node.Interfaces.Interface.HwStatistics()
                                self.hw_statistics.parent = self
                                self._children_name_map["hw_statistics"] = "hw-statistics"
                            return self.hw_statistics

                        if (child_yang_name == "sw-statistics"):
                            if (self.sw_statistics is None):
                                self.sw_statistics = MacsecPlatform.Nodes.Node.Interfaces.Interface.SwStatistics()
                                self.sw_statistics.parent = self
                                self._children_name_map["sw_statistics"] = "sw-statistics"
                            return self.sw_statistics

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "hw-flow-s" or name == "hw-sas" or name == "hw-statistics" or name == "sw-statistics" or name == "name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "name"):
                            self.name = value
                            self.name.value_namespace = name_space
                            self.name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.interface:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.interface:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "interfaces" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "interface"):
                        for c in self.interface:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = MacsecPlatform.Nodes.Node.Interfaces.Interface()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.interface.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "interface"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (
                    self.node_name.is_set or
                    (self.interfaces is not None and self.interfaces.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    self.node_name.yfilter != YFilter.not_set or
                    (self.interfaces is not None and self.interfaces.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "node" + "[node-name='" + self.node_name.get() + "']" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-crypto-macsec-pl-oper:macsec-platform/nodes/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()
                if (self.node_name.is_set or self.node_name.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.node_name.get_name_leafdata())

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "interfaces"):
                    if (self.interfaces is None):
                        self.interfaces = MacsecPlatform.Nodes.Node.Interfaces()
                        self.interfaces.parent = self
                        self._children_name_map["interfaces"] = "interfaces"
                    return self.interfaces

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "interfaces" or name == "node-name"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                if(value_path == "node-name"):
                    self.node_name = value
                    self.node_name.value_namespace = name_space
                    self.node_name.value_namespace_prefix = name_space_prefix

        def has_data(self):
            for c in self.node:
                if (c.has_data()):
                    return True
            return False

        def has_operation(self):
            for c in self.node:
                if (c.has_operation()):
                    return True
            return self.yfilter != YFilter.not_set

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "nodes" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-crypto-macsec-pl-oper:macsec-platform/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "node"):
                for c in self.node:
                    segment = c.get_segment_path()
                    if (segment_path == segment):
                        return c
                c = MacsecPlatform.Nodes.Node()
                c.parent = self
                local_reference_key = "ydk::seg::%s" % segment_path
                self._local_refs[local_reference_key] = c
                self.node.append(c)
                return c

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "node"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass

    def has_data(self):
        return (self.nodes is not None and self.nodes.has_data())

    def has_operation(self):
        return (
            self.yfilter != YFilter.not_set or
            (self.nodes is not None and self.nodes.has_operation()))

    def get_segment_path(self):
        path_buffer = ""
        path_buffer = "Cisco-IOS-XR-crypto-macsec-pl-oper:macsec-platform" + path_buffer

        return path_buffer

    def get_entity_path(self, ancestor):
        path_buffer = ""
        if (not ancestor is None):
            raise YPYModelError("ancestor has to be None for top-level node")

        path_buffer = self.get_segment_path()
        leaf_name_data = LeafDataList()

        entity_path = EntityPath(path_buffer, leaf_name_data)
        return entity_path

    def get_child_by_name(self, child_yang_name, segment_path):
        child = self._get_child_by_seg_name([child_yang_name, segment_path])
        if child is not None:
            return child

        if (child_yang_name == "nodes"):
            if (self.nodes is None):
                self.nodes = MacsecPlatform.Nodes()
                self.nodes.parent = self
                self._children_name_map["nodes"] = "nodes"
            return self.nodes

        return None

    def has_leaf_or_child_of_name(self, name):
        if(name == "nodes"):
            return True
        return False

    def set_value(self, value_path, value, name_space, name_space_prefix):
        pass

    def clone_ptr(self):
        self._top_entity = MacsecPlatform()
        return self._top_entity

