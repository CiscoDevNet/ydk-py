""" Cisco_IOS_XR_ipv4_ospf_cfg 

This module contains a collection of YANG definitions
for Cisco IOS\-XR ipv4\-ospf package configuration.

This module contains definitions
for the following management objects\:
  ospf\: OSPF configuration data

This YANG module augments the
  Cisco\-IOS\-XR\-snmp\-agent\-cfg
module with configuration data.

Copyright (c) 2013\-2016 by Cisco Systems, Inc.
All rights reserved.

"""


import re
import collections

from enum import Enum

from ydk.types import Empty, YList, YLeafList, DELETE, Decimal64, FixedBitsDict

from ydk.errors import YPYError, YPYModelError



class BfdEnableModeEnum(Enum):
    """
    BfdEnableModeEnum

    Bfd enable mode

    .. data:: disable = 0

    	Disable Mode - Prevent inheritance

    .. data:: default = 1

    	Default Mode - Default BFD behavior

    .. data:: strict = 2

    	Strict Mode - Hold down adj until BFD sesion up

    """

    disable = 0

    default = 1

    strict = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['BfdEnableModeEnum']


class NsrEnum(Enum):
    """
    NsrEnum

    Nsr

    .. data:: true = 1

    	Enable non-stop routing

    .. data:: false = 2

    	Disable non-stop routing

    """

    true = 1

    false = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['NsrEnum']


class OspfAddressFamilyEnum(Enum):
    """
    OspfAddressFamilyEnum

    Ospf address family

    .. data:: ipv4 = 1

    	IPv4

    """

    ipv4 = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfAddressFamilyEnum']


class OspfAuthenticationEnum(Enum):
    """
    OspfAuthenticationEnum

    Ospf authentication

    .. data:: none = 0

    	No Authentication

    .. data:: plain = 1

    	Plain Text Authentication

    .. data:: md5 = 2

    	MD5 Message Digest

    """

    none = 0

    plain = 1

    md5 = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfAuthenticationEnum']


class OspfCiscoNsfEnum(Enum):
    """
    OspfCiscoNsfEnum

    Ospf cisco nsf

    .. data:: always = 1

    	Do not require all neighbors to run NSF

    .. data:: require_nsf_neighbors = 2

    	Require all neighbors to run NSF

    """

    always = 1

    require_nsf_neighbors = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfCiscoNsfEnum']


class OspfDistListProtocolEnum(Enum):
    """
    OspfDistListProtocolEnum

    Ospf dist list protocol

    .. data:: all = 0

    	Default

    .. data:: connected = 1

    	Connected Routes

    .. data:: static = 3

    	Static Routes

    .. data:: bgp = 4

    	BGP

    .. data:: ospf = 7

    	OSPF

    .. data:: dagr = 9

    	DAGR

    """

    all = 0

    connected = 1

    static = 3

    bgp = 4

    ospf = 7

    dagr = 9


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfDistListProtocolEnum']


class OspfDomainIdEnum(Enum):
    """
    OspfDomainIdEnum

    Ospf domain id

    .. data:: type0005 = 5

    	Type 0x0005

    .. data:: type0105 = 261

    	Type 0x0105

    .. data:: type0205 = 517

    	Type 0x0205

    .. data:: type8005 = 32773

    	Type 0x8005

    """

    type0005 = 5

    type0105 = 261

    type0205 = 517

    type8005 = 32773


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfDomainIdEnum']


class OspfEigrpRouteEnum(Enum):
    """
    OspfEigrpRouteEnum

    Ospf eigrp route

    .. data:: internal = 0

    	EIGRP Internal Type

    .. data:: external = 1

    	EIGRP External Type

    """

    internal = 0

    external = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfEigrpRouteEnum']


class OspfFastRerouteEnum(Enum):
    """
    OspfFastRerouteEnum

    Ospf fast reroute

    .. data:: none = 0

    	None

    .. data:: per_link = 1

    	Per link

    .. data:: per_prefix = 2

    	Per prefix

    """

    none = 0

    per_link = 1

    per_prefix = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfFastRerouteEnum']


class OspfFastReroutePriorityEnum(Enum):
    """
    OspfFastReroutePriorityEnum

    Ospf fast reroute priority

    .. data:: critical = 0

    	Critical

    .. data:: high = 2

    	High

    .. data:: medium = 4

    	Medium

    .. data:: low = 6

    	low

    """

    critical = 0

    high = 2

    medium = 4

    low = 6


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfFastReroutePriorityEnum']


class OspfFastRerouteTiebreakersEnum(Enum):
    """
    OspfFastRerouteTiebreakersEnum

    Ospf fast reroute tiebreakers

    .. data:: downstream = 0

    	Downstream

    .. data:: line_card_disjoint = 1

    	LC Disjoint

    .. data:: lowest_metric = 2

    	Lowest metric

    .. data:: node_protect = 3

    	Node protection

    .. data:: primary_path = 4

    	Primary path

    .. data:: secondary_path = 5

    	Secondar path

    .. data:: srlg_disjoint = 6

    	SRLG

    """

    downstream = 0

    line_card_disjoint = 1

    lowest_metric = 2

    node_protect = 3

    primary_path = 4

    secondary_path = 5

    srlg_disjoint = 6


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfFastRerouteTiebreakersEnum']


class OspfFastRerouteTiebreakersIntfEnum(Enum):
    """
    OspfFastRerouteTiebreakersIntfEnum

    Ospf fast reroute tiebreakers intf

    .. data:: downstream = 0

    	Downstream

    .. data:: line_card_disjoint = 1

    	LC Disjoint

    .. data:: lowest_metric = 2

    	Lowest metric

    .. data:: node_protect = 3

    	Node protection

    .. data:: primary_path = 4

    	Primary path

    .. data:: secondary_path = 5

    	Secondar path

    .. data:: srlg_disjoint = 6

    	SRLG

    """

    downstream = 0

    line_card_disjoint = 1

    lowest_metric = 2

    node_protect = 3

    primary_path = 4

    secondary_path = 5

    srlg_disjoint = 6


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfFastRerouteTiebreakersIntfEnum']


class OspfFrrRlfaTunnelEnum(Enum):
    """
    OspfFrrRlfaTunnelEnum

    Ospf frr rlfa tunnel

    .. data:: none = 0

    	Disabled

    .. data:: mpls_ldp = 1

    	MPLS LDP

    """

    none = 0

    mpls_ldp = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfFrrRlfaTunnelEnum']


class OspfIetfNsfEnum(Enum):
    """
    OspfIetfNsfEnum

    Ospf ietf nsf

    .. data:: all = 3

    	Use IETF NSF in planned and unplanned cases

    """

    all = 3


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfIetfNsfEnum']


class OspfIetfNsfSupportEnum(Enum):
    """
    OspfIetfNsfSupportEnum

    Ospf ietf nsf support

    .. data:: never = 0

    	Do not perform IETF NSF helper role

    """

    never = 0


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfIetfNsfSupportEnum']


class OspfKeychainAuthEnum(Enum):
    """
    OspfKeychainAuthEnum

    Ospf keychain auth

    .. data:: none = 0

    	No Keychain Authentication

    .. data:: keychain = 3

    	Keychain Authentication

    """

    none = 0

    keychain = 3


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfKeychainAuthEnum']


class OspfLinkStateMetricEnum(Enum):
    """
    OspfLinkStateMetricEnum

    Ospf link state metric

    .. data:: type1 = 1

    	Type 1 External

    .. data:: type2 = 2

    	Type 2 External

    """

    type1 = 1

    type2 = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfLinkStateMetricEnum']


class OspfLogAdjEnum(Enum):
    """
    OspfLogAdjEnum

    Ospf log adj

    .. data:: brief = 0

    	Limited output

    .. data:: detail = 1

    	Verbose output

    .. data:: suppress = 2

    	No output

    """

    brief = 0

    detail = 1

    suppress = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfLogAdjEnum']


class OspfNetworkEnum(Enum):
    """
    OspfNetworkEnum

    Ospf network

    .. data:: broadcast = 1

    	Broadcast

    .. data:: non_broadcast = 2

    	NonBroadcast

    .. data:: point_to_point = 3

    	Point to Point

    .. data:: point_to_multipoint = 4

    	Point to Multipoint

    .. data:: non_broadcast_point_to_multipoint = 5

    	NonBroadcast Point to Multipoint

    """

    broadcast = 1

    non_broadcast = 2

    point_to_point = 3

    point_to_multipoint = 4

    non_broadcast_point_to_multipoint = 5


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfNetworkEnum']


class OspfProcFastRerouteEnum(Enum):
    """
    OspfProcFastRerouteEnum

    Ospf proc fast reroute

    .. data:: none = 0

    	None

    .. data:: per_link = 1

    	Per link

    .. data:: per_prefix = 2

    	Per prefix

    """

    none = 0

    per_link = 1

    per_prefix = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfProcFastRerouteEnum']


class OspfProcFrrRlfaTunnelEnum(Enum):
    """
    OspfProcFrrRlfaTunnelEnum

    Ospf proc frr rlfa tunnel

    .. data:: none = 0

    	Disabled

    .. data:: mpls_ldp = 1

    	MPLS LDP

    """

    none = 0

    mpls_ldp = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfProcFrrRlfaTunnelEnum']


class OspfRedistLsaEnum(Enum):
    """
    OspfRedistLsaEnum

    Ospf redist lsa

    .. data:: summary = 3

    	Type 3 (summary) LSA

    .. data:: external = 5

    	Type 5 (external) LSA

    """

    summary = 3

    external = 5


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfRedistLsaEnum']


class OspfRedistProtocolEnum(Enum):
    """
    OspfRedistProtocolEnum

    Ospf redist protocol

    .. data:: all = 0

    	Default

    .. data:: connected = 1

    	Connected Routes

    .. data:: static = 3

    	Static Routes

    .. data:: bgp = 4

    	BGP

    .. data:: rip = 5

    	RIP

    .. data:: isis = 6

    	ISIS

    .. data:: ospf = 7

    	OSPF

    .. data:: eigrp = 8

    	EIGRP

    .. data:: dagr = 9

    	DAGR

    .. data:: subscriber = 10

    	Subscriber Routes

    .. data:: application = 11

    	Application Routes

    .. data:: mobile = 12

    	Mobile Routes

    """

    all = 0

    connected = 1

    static = 3

    bgp = 4

    rip = 5

    isis = 6

    ospf = 7

    eigrp = 8

    dagr = 9

    subscriber = 10

    application = 11

    mobile = 12


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfRedistProtocolEnum']


class OspfRouteLevelEnum(Enum):
    """
    OspfRouteLevelEnum

    Ospf route level

    .. data:: type1 = 1

    	Type 1 only

    .. data:: type2 = 2

    	Type 2 only

    .. data:: type1_and2 = 3

    	Both Type 1 and Type 2

    """

    type1 = 1

    type2 = 2

    type1_and2 = 3


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfRouteLevelEnum']


class OspfSegmentRoutingEnum(Enum):
    """
    OspfSegmentRoutingEnum

    Ospf segment routing

    .. data:: disable = 0

    	Disable

    .. data:: mpls = 1

    	Mpls

    """

    disable = 0

    mpls = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfSegmentRoutingEnum']


class OspfSegmentRoutingForwardingEnum(Enum):
    """
    OspfSegmentRoutingForwardingEnum

    Ospf segment routing forwarding

    .. data:: disable = 0

    	Disable

    .. data:: mpls = 1

    	Mpls

    """

    disable = 0

    mpls = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfSegmentRoutingForwardingEnum']


class OspfShutdownEnum(Enum):
    """
    OspfShutdownEnum

    Ospf shutdown

    .. data:: full = 1

    	Full graceful shutdown

    .. data:: hostmode = 2

    	Enter host only mode

    .. data:: onreload = 3

    	Full graceful shutdown post reload

    """

    full = 1

    hostmode = 2

    onreload = 3


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfShutdownEnum']


class OspfSidEnum(Enum):
    """
    OspfSidEnum

    Ospf sid

    .. data:: index = 0

    	Index

    .. data:: absolute = 1

    	Absolute

    """

    index = 0

    absolute = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfSidEnum']


class OspfSubAddressFamilyEnum(Enum):
    """
    OspfSubAddressFamilyEnum

    Ospf sub address family

    .. data:: unicast = 1

    	Unicast

    """

    unicast = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfSubAddressFamilyEnum']


class OspfUloopAvoidanceEnum(Enum):
    """
    OspfUloopAvoidanceEnum

    Ospf uloop avoidance

    .. data:: protected = 1

    	Protected prefixes only

    .. data:: all = 2

    	All prefixes

    .. data:: segment_routing = 3

    	Microloop avoidance using Segment Routing

    """

    protected = 1

    all = 2

    segment_routing = 3


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['OspfUloopAvoidanceEnum']



class Ospf(object):
    """
    OSPF configuration data
    
    .. attribute:: global_
    
    	OSPF global configuration data
    	**type**\:   :py:class:`Global_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Global_>`
    
    .. attribute:: processes
    
    	Process related configuration
    	**type**\:   :py:class:`Processes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes>`
    
    

    """

    _prefix = 'ipv4-ospf-cfg'
    _revision = '2017-01-02'

    def __init__(self):
        self.global_ = Ospf.Global_()
        self.global_.parent = self
        self.processes = Ospf.Processes()
        self.processes.parent = self


    class Processes(object):
        """
        Process related configuration
        
        .. attribute:: process
        
        	Configuration for a particular OSPF process and associated default VRF
        	**type**\: list of    :py:class:`Process <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process>`
        
        

        """

        _prefix = 'ipv4-ospf-cfg'
        _revision = '2017-01-02'

        def __init__(self):
            self.parent = None
            self.process = YList()
            self.process.parent = self
            self.process.name = 'process'


        class Process(object):
            """
            Configuration for a particular OSPF process and
            associated default VRF
            
            .. attribute:: process_name  <key>
            
            	Name for this OSPF process
            	**type**\:  str
            
            	**length:** 1..32
            
            .. attribute:: default_vrf
            
            	Default VRF related configuration
            	**type**\:   :py:class:`DefaultVrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf>`
            
            .. attribute:: distribute
            
            	Enable distribution of link\-state database services
            	**type**\:   :py:class:`Distribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Distribute>`
            
            	**presence node**\: True
            
            .. attribute:: graceful_shutdown_timers
            
            	Adjust routing timers
            	**type**\:   :py:class:`GracefulShutdownTimers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.GracefulShutdownTimers>`
            
            .. attribute:: nsr
            
            	Enable non\-stop routing
            	**type**\:   :py:class:`NsrEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.NsrEnum>`
            
            	**default value**\: true
            
            .. attribute:: protocol_shutdown
            
            	Type of protocol shutdown
            	**type**\:   :py:class:`OspfShutdownEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfShutdownEnum>`
            
            .. attribute:: running
            
            	Enable routing on an IP network
            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: snmp
            
            	OSPF SNMP configuration
            	**type**\:   :py:class:`Snmp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Snmp>`
            
            .. attribute:: start
            
            	Start OSPF configuration
            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: vrfs
            
            	VRF related configuration
            	**type**\:   :py:class:`Vrfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs>`
            
            

            """

            _prefix = 'ipv4-ospf-cfg'
            _revision = '2017-01-02'

            def __init__(self):
                self.parent = None
                self.process_name = None
                self.default_vrf = Ospf.Processes.Process.DefaultVrf()
                self.default_vrf.parent = self
                self.distribute = None
                self.graceful_shutdown_timers = Ospf.Processes.Process.GracefulShutdownTimers()
                self.graceful_shutdown_timers.parent = self
                self.nsr = None
                self.protocol_shutdown = None
                self.running = None
                self.snmp = Ospf.Processes.Process.Snmp()
                self.snmp.parent = self
                self.start = None
                self.vrfs = Ospf.Processes.Process.Vrfs()
                self.vrfs.parent = self


            class Snmp(object):
                """
                OSPF SNMP configuration
                
                .. attribute:: trap_rate_limit
                
                	Per OSPF process SNMP trap rate\-limit
                	**type**\:   :py:class:`TrapRateLimit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Snmp.TrapRateLimit>`
                
                	**presence node**\: True
                
                

                """

                _prefix = 'ipv4-ospf-cfg'
                _revision = '2017-01-02'

                def __init__(self):
                    self.parent = None
                    self.trap_rate_limit = None


                class TrapRateLimit(object):
                    """
                    Per OSPF process SNMP trap rate\-limit
                    
                    .. attribute:: max_window_traps
                    
                    	Max number of traps to send in window time
                    	**type**\:  int
                    
                    	**range:** 0..300
                    
                    	**mandatory**\: True
                    
                    .. attribute:: window_size
                    
                    	Trap rate limit sliding window size
                    	**type**\:  int
                    
                    	**range:** 2..60
                    
                    	**mandatory**\: True
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-01-02'

                    def __init__(self):
                        self.parent = None
                        self._is_presence = True
                        self.max_window_traps = None
                        self.window_size = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:trap-rate-limit'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self._is_presence:
                            return True
                        if self.max_window_traps is not None:
                            return True

                        if self.window_size is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                        return meta._meta_table['Ospf.Processes.Process.Snmp.TrapRateLimit']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:snmp'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.trap_rate_limit is not None and self.trap_rate_limit._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                    return meta._meta_table['Ospf.Processes.Process.Snmp']['meta_info']


            class Distribute(object):
                """
                Enable distribution of link\-state database
                services
                
                .. attribute:: instance_id
                
                	Instance ID
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: throttle
                
                	Seconds
                	**type**\:  int
                
                	**range:** 1..3600
                
                	**units**\: second
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'ipv4-ospf-cfg'
                _revision = '2017-01-02'

                def __init__(self):
                    self.parent = None
                    self._is_presence = True
                    self.instance_id = None
                    self.throttle = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:distribute'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self._is_presence:
                        return True
                    if self.instance_id is not None:
                        return True

                    if self.throttle is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                    return meta._meta_table['Ospf.Processes.Process.Distribute']['meta_info']


            class Vrfs(object):
                """
                VRF related configuration
                
                .. attribute:: vrf
                
                	Configuration for a particular OSPF vrf
                	**type**\: list of    :py:class:`Vrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf>`
                
                

                """

                _prefix = 'ipv4-ospf-cfg'
                _revision = '2017-01-02'

                def __init__(self):
                    self.parent = None
                    self.vrf = YList()
                    self.vrf.parent = self
                    self.vrf.name = 'vrf'


                class Vrf(object):
                    """
                    Configuration for a particular OSPF vrf
                    
                    .. attribute:: vrf_name  <key>
                    
                    	Name for this vrf
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: adjacency_changes
                    
                    	Log changes in adjacency state
                    	**type**\:   :py:class:`OspfLogAdjEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLogAdjEnum>`
                    
                    .. attribute:: adjacency_stagger
                    
                    	Staggering OSPF adjacency bring up
                    	**type**\:   :py:class:`AdjacencyStagger <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AdjacencyStagger>`
                    
                    .. attribute:: af
                    
                    	OSPF address family
                    	**type**\:   :py:class:`Af <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Af>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: area_addresses
                    
                    	Area configuration
                    	**type**\:   :py:class:`AreaAddresses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses>`
                    
                    .. attribute:: auto_cost
                    
                    	Controls automatic cost based on bandwidth
                    	**type**\:   :py:class:`AutoCost <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AutoCost>`
                    
                    .. attribute:: default_information
                    
                    	Control distribution of default information
                    	**type**\:   :py:class:`DefaultInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.DefaultInformation>`
                    
                    .. attribute:: default_metric
                    
                    	Set default metric of redistributed routes
                    	**type**\:  int
                    
                    	**range:** 1..16777214
                    
                    	**default value**\: 1
                    
                    .. attribute:: disable_dn_bit_check
                    
                    	Disable DN bit check
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: distance
                    
                    	Administrative distance configuration
                    	**type**\:   :py:class:`Distance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Distance>`
                    
                    .. attribute:: domain_id
                    
                    	OSPF Domain ID
                    	**type**\:   :py:class:`DomainId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.DomainId>`
                    
                    .. attribute:: domain_tag
                    
                    	32 bit Domain tag value
                    	**type**\:  int
                    
                    	**range:** 1..4294967295
                    
                    .. attribute:: fast_reroute
                    
                    	Fast\-reroute instance scoped parameters
                    	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.FastReroute>`
                    
                    .. attribute:: ignore_mospf
                    
                    	Ignore MOSPF (Type 6) LSAs
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: max_lsa
                    
                    	Set max\-lsa configuration
                    	**type**\:   :py:class:`MaxLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.MaxLsa>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: max_metric
                    
                    	Set maximum metric configuration
                    	**type**\:   :py:class:`MaxMetric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.MaxMetric>`
                    
                    .. attribute:: maximum_interfaces
                    
                    	Max number of interfaces allowed to be configured
                    	**type**\:  int
                    
                    	**range:** 1..4294967295
                    
                    	**default value**\: 1024
                    
                    .. attribute:: maximum_paths
                    
                    	Forward packets over multiple paths (number of paths)
                    	**type**\:  int
                    
                    	**range:** 1..64
                    
                    .. attribute:: maximum_redistribute_prefix
                    
                    	Maximum number of prefixes redistributed into OSPF
                    	**type**\:   :py:class:`MaximumRedistributePrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.MaximumRedistributePrefix>`
                    
                    .. attribute:: microloop
                    
                    	Microloop configuration
                    	**type**\:   :py:class:`Microloop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Microloop>`
                    
                    .. attribute:: no_opaque
                    
                    	Disable opaque LSAs
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: nsf
                    
                    	Non Stop Forwarding configuration
                    	**type**\:   :py:class:`Nsf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Nsf>`
                    
                    .. attribute:: outgoing_route_updates
                    
                    	Filter outgoing routing updates
                    	**type**\:   :py:class:`OutgoingRouteUpdates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.OutgoingRouteUpdates>`
                    
                    .. attribute:: process_scope
                    
                    	Process scope configuration
                    	**type**\:   :py:class:`ProcessScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope>`
                    
                    .. attribute:: queue
                    
                    	Adjust OSPF input queue sizes and processing quantums
                    	**type**\:   :py:class:`Queue <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Queue>`
                    
                    .. attribute:: redistribution
                    
                    	Redistribute configurations
                    	**type**\:   :py:class:`Redistribution <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Redistribution>`
                    
                    .. attribute:: router_id
                    
                    	Router ID for this OSPF process. Enter an IP Address
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: snmp_context
                    
                    	OSPF SNMP context configuration
                    	**type**\:  str
                    
                    .. attribute:: snmp_trap_enabled
                    
                    	Enable/disable OSPF SNMP trap
                    	**type**\:  bool
                    
                    	**default value**\: false
                    
                    .. attribute:: spf_prefix_priority
                    
                    	Configure a route\-policy for prioritizing RIB route install
                    	**type**\:  str
                    
                    .. attribute:: summary_prefixes
                    
                    	Configure IP prefix summary
                    	**type**\:   :py:class:`SummaryPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes>`
                    
                    .. attribute:: timers
                    
                    	Adjust routing timers
                    	**type**\:   :py:class:`Timers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Timers>`
                    
                    .. attribute:: type7
                    
                    	Prefer type7 externals over type5
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: ucmp
                    
                    	Unequal Cost Multi\-ptah configuration
                    	**type**\:   :py:class:`Ucmp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Ucmp>`
                    
                    .. attribute:: vrf_lite
                    
                    	VRF lite capability
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: vrf_start
                    
                    	Start OSPF VRF configuration
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-01-02'

                    def __init__(self):
                        self.parent = None
                        self.vrf_name = None
                        self.adjacency_changes = None
                        self.adjacency_stagger = Ospf.Processes.Process.Vrfs.Vrf.AdjacencyStagger()
                        self.adjacency_stagger.parent = self
                        self.af = None
                        self.area_addresses = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses()
                        self.area_addresses.parent = self
                        self.auto_cost = Ospf.Processes.Process.Vrfs.Vrf.AutoCost()
                        self.auto_cost.parent = self
                        self.default_information = Ospf.Processes.Process.Vrfs.Vrf.DefaultInformation()
                        self.default_information.parent = self
                        self.default_metric = None
                        self.disable_dn_bit_check = None
                        self.distance = Ospf.Processes.Process.Vrfs.Vrf.Distance()
                        self.distance.parent = self
                        self.domain_id = Ospf.Processes.Process.Vrfs.Vrf.DomainId()
                        self.domain_id.parent = self
                        self.domain_tag = None
                        self.fast_reroute = Ospf.Processes.Process.Vrfs.Vrf.FastReroute()
                        self.fast_reroute.parent = self
                        self.ignore_mospf = None
                        self.max_lsa = None
                        self.max_metric = Ospf.Processes.Process.Vrfs.Vrf.MaxMetric()
                        self.max_metric.parent = self
                        self.maximum_interfaces = None
                        self.maximum_paths = None
                        self.maximum_redistribute_prefix = Ospf.Processes.Process.Vrfs.Vrf.MaximumRedistributePrefix()
                        self.maximum_redistribute_prefix.parent = self
                        self.microloop = Ospf.Processes.Process.Vrfs.Vrf.Microloop()
                        self.microloop.parent = self
                        self.no_opaque = None
                        self.nsf = Ospf.Processes.Process.Vrfs.Vrf.Nsf()
                        self.nsf.parent = self
                        self.outgoing_route_updates = Ospf.Processes.Process.Vrfs.Vrf.OutgoingRouteUpdates()
                        self.outgoing_route_updates.parent = self
                        self.process_scope = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope()
                        self.process_scope.parent = self
                        self.queue = Ospf.Processes.Process.Vrfs.Vrf.Queue()
                        self.queue.parent = self
                        self.redistribution = Ospf.Processes.Process.Vrfs.Vrf.Redistribution()
                        self.redistribution.parent = self
                        self.router_id = None
                        self.snmp_context = None
                        self.snmp_trap_enabled = None
                        self.spf_prefix_priority = None
                        self.summary_prefixes = Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes()
                        self.summary_prefixes.parent = self
                        self.timers = Ospf.Processes.Process.Vrfs.Vrf.Timers()
                        self.timers.parent = self
                        self.type7 = None
                        self.ucmp = Ospf.Processes.Process.Vrfs.Vrf.Ucmp()
                        self.ucmp.parent = self
                        self.vrf_lite = None
                        self.vrf_start = None


                    class DomainId(object):
                        """
                        OSPF Domain ID
                        
                        .. attribute:: primary_domain_id
                        
                        	OSPF Primary domain ID
                        	**type**\:   :py:class:`PrimaryDomainId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.DomainId.PrimaryDomainId>`
                        
                        .. attribute:: secondary_domain_ids
                        
                        	Secondary domain ID Table
                        	**type**\:   :py:class:`SecondaryDomainIds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.primary_domain_id = Ospf.Processes.Process.Vrfs.Vrf.DomainId.PrimaryDomainId()
                            self.primary_domain_id.parent = self
                            self.secondary_domain_ids = Ospf.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds()
                            self.secondary_domain_ids.parent = self


                        class PrimaryDomainId(object):
                            """
                            OSPF Primary domain ID
                            
                            .. attribute:: domain_id_name
                            
                            	Primary domain ID value
                            	**type**\:  str
                            
                            .. attribute:: domain_id_type
                            
                            	Primary domain ID type
                            	**type**\:   :py:class:`OspfDomainIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfDomainIdEnum>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.domain_id_name = None
                                self.domain_id_type = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:primary-domain-id'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.domain_id_name is not None:
                                    return True

                                if self.domain_id_type is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.DomainId.PrimaryDomainId']['meta_info']


                        class SecondaryDomainIds(object):
                            """
                            Secondary domain ID Table
                            
                            .. attribute:: secondary_domain_id
                            
                            	OSPF Secondary domain ID
                            	**type**\: list of    :py:class:`SecondaryDomainId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds.SecondaryDomainId>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.secondary_domain_id = YList()
                                self.secondary_domain_id.parent = self
                                self.secondary_domain_id.name = 'secondary_domain_id'


                            class SecondaryDomainId(object):
                                """
                                OSPF Secondary domain ID
                                
                                .. attribute:: domain_id_name  <key>
                                
                                	Secondary domain ID value
                                	**type**\:  str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: domain_id_type  <key>
                                
                                	Secondary domain ID type
                                	**type**\:   :py:class:`OspfDomainIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfDomainIdEnum>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.domain_id_name = None
                                    self.domain_id_type = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.domain_id_name is None:
                                        raise YPYModelError('Key property domain_id_name is None')
                                    if self.domain_id_type is None:
                                        raise YPYModelError('Key property domain_id_type is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:secondary-domain-id[Cisco-IOS-XR-ipv4-ospf-cfg:domain-id-name = ' + str(self.domain_id_name) + '][Cisco-IOS-XR-ipv4-ospf-cfg:domain-id-type = ' + str(self.domain_id_type) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.domain_id_name is not None:
                                        return True

                                    if self.domain_id_type is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds.SecondaryDomainId']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:secondary-domain-ids'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.secondary_domain_id is not None:
                                    for child_ref in self.secondary_domain_id:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:domain-id'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.primary_domain_id is not None and self.primary_domain_id._has_data():
                                return True

                            if self.secondary_domain_ids is not None and self.secondary_domain_ids._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.DomainId']['meta_info']


                    class Microloop(object):
                        """
                        Microloop configuration
                        
                        .. attribute:: avoidance
                        
                        	Microloop avoidance configuration
                        	**type**\:   :py:class:`Avoidance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Microloop.Avoidance>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.avoidance = Ospf.Processes.Process.Vrfs.Vrf.Microloop.Avoidance()
                            self.avoidance.parent = self


                        class Avoidance(object):
                            """
                            Microloop avoidance configuration
                            
                            .. attribute:: enable
                            
                            	MicroLoop avoidance feature enable configuration
                            	**type**\:   :py:class:`OspfUloopAvoidanceEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfUloopAvoidanceEnum>`
                            
                            	**default value**\: all
                            
                            .. attribute:: rib_update_delay
                            
                            	Delay to introduce between SPF and RIB update in msecs
                            	**type**\:  int
                            
                            	**range:** 1..600000
                            
                            	**units**\: millisecond
                            
                            	**default value**\: 5000
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.enable = None
                                self.rib_update_delay = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:avoidance'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.enable is not None:
                                    return True

                                if self.rib_update_delay is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.Microloop.Avoidance']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:microloop'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.avoidance is not None and self.avoidance._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.Microloop']['meta_info']


                    class MaximumRedistributePrefix(object):
                        """
                        Maximum number of prefixes redistributed into
                        OSPF
                        
                        .. attribute:: number_of_prefixes
                        
                        	Maximum number of prefixes redistributed
                        	**type**\:  int
                        
                        	**range:** 1..4294967295
                        
                        .. attribute:: threshold
                        
                        	Threshold value (%) at which to generate a warning msg
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: warning_only
                        
                        	Only give warning messsage when limit is exceeded
                        	**type**\:  bool
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.number_of_prefixes = None
                            self.threshold = None
                            self.warning_only = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:maximum-redistribute-prefix'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.number_of_prefixes is not None:
                                return True

                            if self.threshold is not None:
                                return True

                            if self.warning_only is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.MaximumRedistributePrefix']['meta_info']


                    class DefaultInformation(object):
                        """
                        Control distribution of default information
                        
                        .. attribute:: always_advertise
                        
                        	Always advertise default route
                        	**type**\:  bool
                        
                        	**default value**\: false
                        
                        .. attribute:: metric
                        
                        	OSPF metric
                        	**type**\:  int
                        
                        	**range:** 1..16777214
                        
                        	**default value**\: 1
                        
                        .. attribute:: metric_type
                        
                        	OSPF External metric type
                        	**type**\:   :py:class:`OspfLinkStateMetricEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetricEnum>`
                        
                        	**default value**\: type2
                        
                        .. attribute:: route_policy_name
                        
                        	Routing policy name
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.always_advertise = None
                            self.metric = None
                            self.metric_type = None
                            self.route_policy_name = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:default-information'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.always_advertise is not None:
                                return True

                            if self.metric is not None:
                                return True

                            if self.metric_type is not None:
                                return True

                            if self.route_policy_name is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.DefaultInformation']['meta_info']


                    class Af(object):
                        """
                        OSPF address family
                        
                        .. attribute:: af_name
                        
                        	Address family
                        	**type**\:   :py:class:`OspfAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAddressFamilyEnum>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: saf_name
                        
                        	Sub\-Address family
                        	**type**\:   :py:class:`OspfSubAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSubAddressFamilyEnum>`
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.af_name = None
                            self.saf_name = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:af'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.af_name is not None:
                                return True

                            if self.saf_name is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.Af']['meta_info']


                    class Queue(object):
                        """
                        Adjust OSPF input queue sizes and processing
                        quantums
                        
                        .. attribute:: dispatch_incoming
                        
                        	Maximum number of continuous incoming packet\-related events processed
                        	**type**\:  int
                        
                        	**range:** 30..3000
                        
                        	**default value**\: 300
                        
                        .. attribute:: dispatch_rate_limited
                        
                        	Maximum number of continuous rate\-limited LSAs processed
                        	**type**\:  int
                        
                        	**range:** 30..3000
                        
                        	**default value**\: 150
                        
                        .. attribute:: dispatch_rate_limited_flush
                        
                        	Maximum number of continuous rate\-limited LSAs processed for FLUSH
                        	**type**\:  int
                        
                        	**range:** 30..3000
                        
                        	**default value**\: 150
                        
                        .. attribute:: dispatch_spf_lsa_limit
                        
                        	Maximum number of continuous summary or external LSAs processed
                        	**type**\:  int
                        
                        	**range:** 30..3000
                        
                        	**default value**\: 150
                        
                        .. attribute:: limit_high
                        
                        	Hello events are dropped when incoming event queue exceeds this
                        	**type**\:  int
                        
                        	**range:** 1000..30000
                        
                        	**default value**\: 9500
                        
                        .. attribute:: limit_low
                        
                        	DBDs/Updates are dropped when incoming event queue exceeds this
                        	**type**\:  int
                        
                        	**range:** 1000..30000
                        
                        	**default value**\: 8000
                        
                        .. attribute:: limit_medium
                        
                        	LSA ACKs are dropped when incoming event queue exceeds this
                        	**type**\:  int
                        
                        	**range:** 1000..30000
                        
                        	**default value**\: 9000
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.dispatch_incoming = None
                            self.dispatch_rate_limited = None
                            self.dispatch_rate_limited_flush = None
                            self.dispatch_spf_lsa_limit = None
                            self.limit_high = None
                            self.limit_low = None
                            self.limit_medium = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:queue'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.dispatch_incoming is not None:
                                return True

                            if self.dispatch_rate_limited is not None:
                                return True

                            if self.dispatch_rate_limited_flush is not None:
                                return True

                            if self.dispatch_spf_lsa_limit is not None:
                                return True

                            if self.limit_high is not None:
                                return True

                            if self.limit_low is not None:
                                return True

                            if self.limit_medium is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.Queue']['meta_info']


                    class MaxMetric(object):
                        """
                        Set maximum metric configuration
                        
                        .. attribute:: max_metric_always
                        
                        	Set maximum metric always configuration
                        	**type**\:   :py:class:`MaxMetricAlways <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricAlways>`
                        
                        .. attribute:: max_metric_no_abr_off
                        
                        	Block ABR\-disable mode entry while in max\-metric mode
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: max_metric_on_proc_migration
                        
                        	Set maximum metric on\-proc\-migration configuration
                        	**type**\:   :py:class:`MaxMetricOnProcMigration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnProcMigration>`
                        
                        .. attribute:: max_metric_on_proc_restart
                        
                        	Set maximum metric on\-proc\-restart configuration
                        	**type**\:   :py:class:`MaxMetricOnProcRestart <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnProcRestart>`
                        
                        .. attribute:: max_metric_on_startup
                        
                        	Set maximum metric on\-startup configuration
                        	**type**\:   :py:class:`MaxMetricOnStartup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnStartup>`
                        
                        .. attribute:: max_metric_on_switchover
                        
                        	Set maximum metric on\-switchover configuration
                        	**type**\:   :py:class:`MaxMetricOnSwitchover <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnSwitchover>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.max_metric_always = Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricAlways()
                            self.max_metric_always.parent = self
                            self.max_metric_no_abr_off = None
                            self.max_metric_on_proc_migration = Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnProcMigration()
                            self.max_metric_on_proc_migration.parent = self
                            self.max_metric_on_proc_restart = Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnProcRestart()
                            self.max_metric_on_proc_restart.parent = self
                            self.max_metric_on_startup = Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnStartup()
                            self.max_metric_on_startup.parent = self
                            self.max_metric_on_switchover = Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnSwitchover()
                            self.max_metric_on_switchover.parent = self


                        class MaxMetricOnProcRestart(object):
                            """
                            Set maximum metric on\-proc\-restart
                            configuration
                            
                            .. attribute:: external_lsa
                            
                            	Override external\-lsa metric with max\-metric value
                            	**type**\:  bool
                            
                            .. attribute:: external_lsa_maximum_metric
                            
                            	Overriding metric in external\-LSAs (default 16711680)
                            	**type**\:  int
                            
                            	**range:** 1..16777215
                            
                            .. attribute:: include_stub
                            
                            	Set maximum metric for stub links in router\-LSAs
                            	**type**\:  bool
                            
                            .. attribute:: startup_max
                            
                            	Time in seconds to originate router\-LSA with max\-metric
                            	**type**\:  int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            .. attribute:: summary_lsa
                            
                            	Override summary\-lsa metric with max\-metric value
                            	**type**\:  bool
                            
                            .. attribute:: summary_lsa_maximum_metric
                            
                            	Overriding metric in summary\-LSAs (default 16711680)
                            	**type**\:  int
                            
                            	**range:** 1..16777215
                            
                            .. attribute:: wait_for_bgp
                            
                            	Let BGP decide when to originate router\-LSA with normal metric
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.external_lsa = None
                                self.external_lsa_maximum_metric = None
                                self.include_stub = None
                                self.startup_max = None
                                self.summary_lsa = None
                                self.summary_lsa_maximum_metric = None
                                self.wait_for_bgp = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:max-metric-on-proc-restart'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.external_lsa is not None:
                                    return True

                                if self.external_lsa_maximum_metric is not None:
                                    return True

                                if self.include_stub is not None:
                                    return True

                                if self.startup_max is not None:
                                    return True

                                if self.summary_lsa is not None:
                                    return True

                                if self.summary_lsa_maximum_metric is not None:
                                    return True

                                if self.wait_for_bgp is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnProcRestart']['meta_info']


                        class MaxMetricOnStartup(object):
                            """
                            Set maximum metric on\-startup configuration
                            
                            .. attribute:: external_lsa
                            
                            	Override external\-lsa metric with max\-metric value
                            	**type**\:  bool
                            
                            .. attribute:: external_lsa_maximum_metric
                            
                            	Overriding metric in external\-LSAs (default 16711680)
                            	**type**\:  int
                            
                            	**range:** 1..16777215
                            
                            .. attribute:: include_stub
                            
                            	Set maximum metric for stub links in router\-LSAs
                            	**type**\:  bool
                            
                            .. attribute:: startup_max
                            
                            	Time in seconds to originate router\-LSA with max\-metric
                            	**type**\:  int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            .. attribute:: summary_lsa
                            
                            	Override summary\-lsa metric with max\-metric value
                            	**type**\:  bool
                            
                            .. attribute:: summary_lsa_maximum_metric
                            
                            	Overriding metric in summary\-LSAs (default 16711680)
                            	**type**\:  int
                            
                            	**range:** 1..16777215
                            
                            .. attribute:: wait_for_bgp
                            
                            	Let BGP decide when to originate router\-LSA with normal metric
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.external_lsa = None
                                self.external_lsa_maximum_metric = None
                                self.include_stub = None
                                self.startup_max = None
                                self.summary_lsa = None
                                self.summary_lsa_maximum_metric = None
                                self.wait_for_bgp = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:max-metric-on-startup'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.external_lsa is not None:
                                    return True

                                if self.external_lsa_maximum_metric is not None:
                                    return True

                                if self.include_stub is not None:
                                    return True

                                if self.startup_max is not None:
                                    return True

                                if self.summary_lsa is not None:
                                    return True

                                if self.summary_lsa_maximum_metric is not None:
                                    return True

                                if self.wait_for_bgp is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnStartup']['meta_info']


                        class MaxMetricOnProcMigration(object):
                            """
                            Set maximum metric on\-proc\-migration
                            configuration
                            
                            .. attribute:: external_lsa
                            
                            	Override external\-lsa metric with max\-metric value
                            	**type**\:  bool
                            
                            .. attribute:: external_lsa_maximum_metric
                            
                            	Overriding metric in external\-LSAs (default 16711680)
                            	**type**\:  int
                            
                            	**range:** 1..16777215
                            
                            .. attribute:: include_stub
                            
                            	Set maximum metric for stub links in router\-LSAs
                            	**type**\:  bool
                            
                            .. attribute:: startup_max
                            
                            	Time in seconds to originate router\-LSA with max\-metric
                            	**type**\:  int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            .. attribute:: summary_lsa
                            
                            	Override summary\-lsa metric with max\-metric value
                            	**type**\:  bool
                            
                            .. attribute:: summary_lsa_maximum_metric
                            
                            	Overriding metric in summary\-LSAs (default 16711680)
                            	**type**\:  int
                            
                            	**range:** 1..16777215
                            
                            .. attribute:: wait_for_bgp
                            
                            	Let BGP decide when to originate router\-LSA with normal metric
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.external_lsa = None
                                self.external_lsa_maximum_metric = None
                                self.include_stub = None
                                self.startup_max = None
                                self.summary_lsa = None
                                self.summary_lsa_maximum_metric = None
                                self.wait_for_bgp = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:max-metric-on-proc-migration'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.external_lsa is not None:
                                    return True

                                if self.external_lsa_maximum_metric is not None:
                                    return True

                                if self.include_stub is not None:
                                    return True

                                if self.startup_max is not None:
                                    return True

                                if self.summary_lsa is not None:
                                    return True

                                if self.summary_lsa_maximum_metric is not None:
                                    return True

                                if self.wait_for_bgp is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnProcMigration']['meta_info']


                        class MaxMetricAlways(object):
                            """
                            Set maximum metric always configuration
                            
                            .. attribute:: external_lsa
                            
                            	Override external\-lsa metric with max\-metric value
                            	**type**\:  bool
                            
                            .. attribute:: external_lsa_maximum_metric
                            
                            	Overriding metric in external\-LSAs (default 16711680)
                            	**type**\:  int
                            
                            	**range:** 1..16777215
                            
                            .. attribute:: include_stub
                            
                            	Set maximum metric for stub links in router\-LSAs
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: summary_lsa
                            
                            	Override summary\-lsa metric with max\-metric value
                            	**type**\:  bool
                            
                            .. attribute:: summary_lsa_maximum_metric
                            
                            	Overriding metric in summary\-LSAs (default 16711680)
                            	**type**\:  int
                            
                            	**range:** 1..16777215
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.external_lsa = None
                                self.external_lsa_maximum_metric = None
                                self.include_stub = None
                                self.summary_lsa = None
                                self.summary_lsa_maximum_metric = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:max-metric-always'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.external_lsa is not None:
                                    return True

                                if self.external_lsa_maximum_metric is not None:
                                    return True

                                if self.include_stub is not None:
                                    return True

                                if self.summary_lsa is not None:
                                    return True

                                if self.summary_lsa_maximum_metric is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricAlways']['meta_info']


                        class MaxMetricOnSwitchover(object):
                            """
                            Set maximum metric on\-switchover configuration
                            
                            .. attribute:: external_lsa
                            
                            	Override external\-lsa metric with max\-metric value
                            	**type**\:  bool
                            
                            .. attribute:: external_lsa_maximum_metric
                            
                            	Overriding metric in external\-LSAs (default 16711680)
                            	**type**\:  int
                            
                            	**range:** 1..16777215
                            
                            .. attribute:: include_stub
                            
                            	Set maximum metric for stub links in router\-LSAs
                            	**type**\:  bool
                            
                            .. attribute:: startup_max
                            
                            	Time in seconds to originate router\-LSA with max\-metric
                            	**type**\:  int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            .. attribute:: summary_lsa
                            
                            	Override summary\-lsa metric with max\-metric value
                            	**type**\:  bool
                            
                            .. attribute:: summary_lsa_maximum_metric
                            
                            	Overriding metric in summary\-LSAs (default 16711680)
                            	**type**\:  int
                            
                            	**range:** 1..16777215
                            
                            .. attribute:: wait_for_bgp
                            
                            	Let BGP decide when to originate router\-LSA with normal metric
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.external_lsa = None
                                self.external_lsa_maximum_metric = None
                                self.include_stub = None
                                self.startup_max = None
                                self.summary_lsa = None
                                self.summary_lsa_maximum_metric = None
                                self.wait_for_bgp = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:max-metric-on-switchover'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.external_lsa is not None:
                                    return True

                                if self.external_lsa_maximum_metric is not None:
                                    return True

                                if self.include_stub is not None:
                                    return True

                                if self.startup_max is not None:
                                    return True

                                if self.summary_lsa is not None:
                                    return True

                                if self.summary_lsa_maximum_metric is not None:
                                    return True

                                if self.wait_for_bgp is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.MaxMetric.MaxMetricOnSwitchover']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:max-metric'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.max_metric_always is not None and self.max_metric_always._has_data():
                                return True

                            if self.max_metric_no_abr_off is not None:
                                return True

                            if self.max_metric_on_proc_migration is not None and self.max_metric_on_proc_migration._has_data():
                                return True

                            if self.max_metric_on_proc_restart is not None and self.max_metric_on_proc_restart._has_data():
                                return True

                            if self.max_metric_on_startup is not None and self.max_metric_on_startup._has_data():
                                return True

                            if self.max_metric_on_switchover is not None and self.max_metric_on_switchover._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.MaxMetric']['meta_info']


                    class Nsf(object):
                        """
                        Non Stop Forwarding configuration
                        
                        .. attribute:: cisco
                        
                        	Enable Cisco Non Stop Forwarding
                        	**type**\:   :py:class:`OspfCiscoNsfEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfCiscoNsfEnum>`
                        
                        .. attribute:: flush_delay_time
                        
                        	Maximum time allowed for external route learning (seconds)
                        	**type**\:  int
                        
                        	**range:** 1..3600
                        
                        	**units**\: second
                        
                        	**default value**\: 60
                        
                        .. attribute:: ietf
                        
                        	Enable IETF Non Stop Forwarding
                        	**type**\:   :py:class:`OspfIetfNsfEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfIetfNsfEnum>`
                        
                        .. attribute:: ietf_strict_lsa_checking
                        
                        	Enable Strict LSA checking of IETF NSF
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: ietf_support_role
                        
                        	Disable helper support role for IETF Non Stop Forwarding
                        	**type**\:   :py:class:`OspfIetfNsfSupportEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfIetfNsfSupportEnum>`
                        
                        .. attribute:: interval
                        
                        	Minimum interval between Non Stop Forwarding restarts in seconds
                        	**type**\:  int
                        
                        	**range:** 90..3600
                        
                        	**units**\: second
                        
                        	**default value**\: 90
                        
                        .. attribute:: lifetime
                        
                        	Maximum route lifetime following restart in seconds
                        	**type**\:  int
                        
                        	**range:** 90..1800
                        
                        	**units**\: second
                        
                        	**default value**\: 90
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.cisco = None
                            self.flush_delay_time = None
                            self.ietf = None
                            self.ietf_strict_lsa_checking = None
                            self.ietf_support_role = None
                            self.interval = None
                            self.lifetime = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:nsf'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.cisco is not None:
                                return True

                            if self.flush_delay_time is not None:
                                return True

                            if self.ietf is not None:
                                return True

                            if self.ietf_strict_lsa_checking is not None:
                                return True

                            if self.ietf_support_role is not None:
                                return True

                            if self.interval is not None:
                                return True

                            if self.lifetime is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.Nsf']['meta_info']


                    class ProcessScope(object):
                        """
                        Process scope configuration
                        
                        .. attribute:: authentication
                        
                        	Authentication
                        	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication>`
                        
                        .. attribute:: bfd
                        
                        	BFD configuration
                        	**type**\:   :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Bfd>`
                        
                        .. attribute:: cost
                        
                        	Interface cost
                        	**type**\:  int
                        
                        	**range:** 1..65535
                        
                        .. attribute:: cost_fallback
                        
                        	Interface fallback cost
                        	**type**\:   :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.CostFallback>`
                        
                        .. attribute:: database_filter
                        
                        	Filter OSPF LSA during synchronization and flooding
                        	**type**\:  bool
                        
                        	**default value**\: false
                        
                        .. attribute:: dead_interval_minimal
                        
                        	Interval after which a neighbor is declared dead
                        	**type**\:   :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.DeadIntervalMinimal>`
                        
                        .. attribute:: demand_circuit
                        
                        	Enable/Disable OSPF demand circuit
                        	**type**\:  bool
                        
                        	**default value**\: false
                        
                        .. attribute:: distribute_list
                        
                        	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                        	**type**\:   :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.DistributeList>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: external_out
                        
                        	Enable/Disable an OSPF area to advertise intra\-area prefixes out of this area as external
                        	**type**\:  bool
                        
                        .. attribute:: fast_reroute
                        
                        	Fast\-reroute configuration
                        	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute>`
                        
                        .. attribute:: flood_reduction
                        
                        	Enable/Disable OSPF flood reduction
                        	**type**\:  bool
                        
                        	**default value**\: false
                        
                        .. attribute:: hello_interval
                        
                        	Interval between HELLO packets in seconds
                        	**type**\:  int
                        
                        	**range:** 1..65535
                        
                        	**units**\: second
                        
                        .. attribute:: ldp_auto_config
                        
                        	Enable MPLS LDP Auto Config
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: ldp_sync
                        
                        	Enable/Disable MPLS LDP sync
                        	**type**\:  bool
                        
                        .. attribute:: ldp_sync_igp_shortcuts
                        
                        	Enable/Disable MPLS LDP sync for igp\-shortcuts
                        	**type**\:  bool
                        
                        .. attribute:: link_down_fast_detect
                        
                        	Enable/Disable registration for early interface down notifications
                        	**type**\:  bool
                        
                        	**default value**\: false
                        
                        .. attribute:: loopback_stub_network
                        
                        	Enable/Disable advertising loopback as a stub network
                        	**type**\:  bool
                        
                        	**default value**\: false
                        
                        .. attribute:: mtu_ignore
                        
                        	Enable/Disable ignoring of MTU in DBD packets
                        	**type**\:  bool
                        
                        	**default value**\: false
                        
                        .. attribute:: network_type
                        
                        	Type of attached network
                        	**type**\:   :py:class:`OspfNetworkEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfNetworkEnum>`
                        
                        .. attribute:: packet_size
                        
                        	Customize size of OSPF packets upto MTU
                        	**type**\:  int
                        
                        	**range:** 576..10000
                        
                        .. attribute:: passive
                        
                        	When enabled, prevent sending HELLO packets over link
                        	**type**\:  bool
                        
                        	**default value**\: false
                        
                        .. attribute:: prefix_suppression_primary
                        
                        	Enable/Disable prefix suppression for primary addresses
                        	**type**\:  bool
                        
                        	**default value**\: false
                        
                        .. attribute:: prefix_suppression_secondary
                        
                        	Enable/Disable prefix suppression for secondary addresses
                        	**type**\:  bool
                        
                        	**default value**\: false
                        
                        .. attribute:: priority
                        
                        	Router priority for DR and BDR election
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        	**default value**\: 1
                        
                        .. attribute:: retransmit_interval
                        
                        	Time in seconds between retransmitting lost link state advertisements
                        	**type**\:  int
                        
                        	**range:** 1..65535
                        
                        	**units**\: second
                        
                        	**default value**\: 5
                        
                        .. attribute:: security
                        
                        	Container class for security related configuration parameters
                        	**type**\:   :py:class:`Security <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Security>`
                        
                        .. attribute:: segment_routing
                        
                        	segment\-routing configuration Applicable only in Default VRF
                        	**type**\:   :py:class:`OspfSegmentRoutingEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRoutingEnum>`
                        
                        .. attribute:: segment_routing_forwarding
                        
                        	segment\-routing forwarding configuration Applicableonly in Default VRF
                        	**type**\:   :py:class:`OspfSegmentRoutingForwardingEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRoutingForwardingEnum>`
                        
                        .. attribute:: srgb
                        
                        	Segment Routing Global Block configuration
                        	**type**\:   :py:class:`Srgb <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Srgb>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: summary_in
                        
                        	Enable/Disable an OSPF area to advertise external prefixes into this area as summary
                        	**type**\:  bool
                        
                        .. attribute:: transmit_delay
                        
                        	Number of seconds to delay transmission of LSAs
                        	**type**\:  int
                        
                        	**range:** 1..65535
                        
                        	**units**\: second
                        
                        	**default value**\: 1
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.authentication = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication()
                            self.authentication.parent = self
                            self.bfd = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Bfd()
                            self.bfd.parent = self
                            self.cost = None
                            self.cost_fallback = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.CostFallback()
                            self.cost_fallback.parent = self
                            self.database_filter = None
                            self.dead_interval_minimal = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.DeadIntervalMinimal()
                            self.dead_interval_minimal.parent = self
                            self.demand_circuit = None
                            self.distribute_list = None
                            self.external_out = None
                            self.fast_reroute = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute()
                            self.fast_reroute.parent = self
                            self.flood_reduction = None
                            self.hello_interval = None
                            self.ldp_auto_config = None
                            self.ldp_sync = None
                            self.ldp_sync_igp_shortcuts = None
                            self.link_down_fast_detect = None
                            self.loopback_stub_network = None
                            self.mtu_ignore = None
                            self.network_type = None
                            self.packet_size = None
                            self.passive = None
                            self.prefix_suppression_primary = None
                            self.prefix_suppression_secondary = None
                            self.priority = None
                            self.retransmit_interval = None
                            self.security = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Security()
                            self.security.parent = self
                            self.segment_routing = None
                            self.segment_routing_forwarding = None
                            self.srgb = None
                            self.summary_in = None
                            self.transmit_delay = None


                        class Srgb(object):
                            """
                            Segment Routing Global Block configuration
                            
                            .. attribute:: lower_bound
                            
                            	The lower bound of the SRGB
                            	**type**\:  int
                            
                            	**range:** 16000..1048575
                            
                            	**mandatory**\: True
                            
                            .. attribute:: upper_bound
                            
                            	The upper bound of the SRGB
                            	**type**\:  int
                            
                            	**range:** 16000..1048575
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.lower_bound = None
                                self.upper_bound = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:srgb'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.lower_bound is not None:
                                    return True

                                if self.upper_bound is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Srgb']['meta_info']


                        class FastReroute(object):
                            """
                            Fast\-reroute configuration
                            
                            .. attribute:: fast_reroute_enable
                            
                            	Enable/Disable Fast\-reroute per\-link or per\-prefix
                            	**type**\:   :py:class:`OspfProcFastRerouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfProcFastRerouteEnum>`
                            
                            .. attribute:: per_link
                            
                            	Fast\-reroute per\-link configuration
                            	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink>`
                            
                            .. attribute:: per_prefix
                            
                            	Fast\-reroute per\-prefix configuration
                            	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.fast_reroute_enable = None
                                self.per_link = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink()
                                self.per_link.parent = self
                                self.per_prefix = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix()
                                self.per_prefix.parent = self


                            class PerLink(object):
                                """
                                Fast\-reroute per\-link configuration
                                
                                .. attribute:: candidate_interfaces
                                
                                	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces>`
                                
                                .. attribute:: exclude_interfaces
                                
                                	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces>`
                                
                                .. attribute:: fast_reroute_use_candidate_only
                                
                                	Use only interfaces on the candidate list as a backup path
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces()
                                    self.candidate_interfaces.parent = self
                                    self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces()
                                    self.exclude_interfaces.parent = self
                                    self.fast_reroute_use_candidate_only = None


                                class CandidateInterfaces(object):
                                    """
                                    Fast\-reroute per\-link/per\-prefix candidate
                                    interface configuration
                                    
                                    .. attribute:: candidate_interface
                                    
                                    	Candidate backup interface
                                    	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.candidate_interface = YList()
                                        self.candidate_interface.parent = self
                                        self.candidate_interface.name = 'candidate_interface'


                                    class CandidateInterface(object):
                                        """
                                        Candidate backup interface
                                        
                                        .. attribute:: interface_name  <key>
                                        
                                        	Interface
                                        	**type**\:  str
                                        
                                        	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.interface_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.interface_name is None:
                                                raise YPYModelError('Key property interface_name is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.interface_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.candidate_interface is not None:
                                            for child_ref in self.candidate_interface:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces']['meta_info']


                                class ExcludeInterfaces(object):
                                    """
                                    Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                    interface configuration
                                    
                                    .. attribute:: exclude_interface
                                    
                                    	Exclude an interface from becoming a backup or UCMP
                                    	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.exclude_interface = YList()
                                        self.exclude_interface.parent = self
                                        self.exclude_interface.name = 'exclude_interface'


                                    class ExcludeInterface(object):
                                        """
                                        Exclude an interface from becoming a backup or
                                        UCMP
                                        
                                        .. attribute:: interface_name  <key>
                                        
                                        	Interface
                                        	**type**\:  str
                                        
                                        	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.interface_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.interface_name is None:
                                                raise YPYModelError('Key property interface_name is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.interface_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.exclude_interface is not None:
                                            for child_ref in self.exclude_interface:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-link'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                        return True

                                    if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                        return True

                                    if self.fast_reroute_use_candidate_only is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink']['meta_info']


                            class PerPrefix(object):
                                """
                                Fast\-reroute per\-prefix configuration
                                
                                .. attribute:: candidate_interfaces
                                
                                	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                
                                .. attribute:: exclude_interfaces
                                
                                	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                
                                .. attribute:: fast_reroute_use_candidate_only
                                
                                	Use only interfaces on the candidate list as a backup path
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: remote_lfa
                                
                                	Remote LFA configuration
                                	**type**\:   :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.RemoteLfa>`
                                
                                .. attribute:: topology_independent_lfa
                                
                                	Topology Independet LFA configuration
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces()
                                    self.candidate_interfaces.parent = self
                                    self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                    self.exclude_interfaces.parent = self
                                    self.fast_reroute_use_candidate_only = None
                                    self.remote_lfa = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.RemoteLfa()
                                    self.remote_lfa.parent = self
                                    self.topology_independent_lfa = None


                                class RemoteLfa(object):
                                    """
                                    Remote LFA configuration
                                    
                                    .. attribute:: maximum_cost
                                    
                                    	Maximum path cost to remote LFA
                                    	**type**\:  int
                                    
                                    	**range:** 1..4294967295
                                    
                                    .. attribute:: tunnel
                                    
                                    	Enable/Disable remote LFA computation
                                    	**type**\:   :py:class:`OspfProcFrrRlfaTunnelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfProcFrrRlfaTunnelEnum>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.maximum_cost = None
                                        self.tunnel = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:remote-lfa'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.maximum_cost is not None:
                                            return True

                                        if self.tunnel is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.RemoteLfa']['meta_info']


                                class CandidateInterfaces(object):
                                    """
                                    Fast\-reroute per\-link/per\-prefix candidate
                                    interface configuration
                                    
                                    .. attribute:: candidate_interface
                                    
                                    	Candidate backup interface
                                    	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.candidate_interface = YList()
                                        self.candidate_interface.parent = self
                                        self.candidate_interface.name = 'candidate_interface'


                                    class CandidateInterface(object):
                                        """
                                        Candidate backup interface
                                        
                                        .. attribute:: interface_name  <key>
                                        
                                        	Interface
                                        	**type**\:  str
                                        
                                        	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.interface_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.interface_name is None:
                                                raise YPYModelError('Key property interface_name is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.interface_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.candidate_interface is not None:
                                            for child_ref in self.candidate_interface:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces']['meta_info']


                                class ExcludeInterfaces(object):
                                    """
                                    Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                    interface configuration
                                    
                                    .. attribute:: exclude_interface
                                    
                                    	Exclude an interface from becoming a backup or UCMP
                                    	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.exclude_interface = YList()
                                        self.exclude_interface.parent = self
                                        self.exclude_interface.name = 'exclude_interface'


                                    class ExcludeInterface(object):
                                        """
                                        Exclude an interface from becoming a backup or
                                        UCMP
                                        
                                        .. attribute:: interface_name  <key>
                                        
                                        	Interface
                                        	**type**\:  str
                                        
                                        	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.interface_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.interface_name is None:
                                                raise YPYModelError('Key property interface_name is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.interface_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.exclude_interface is not None:
                                            for child_ref in self.exclude_interface:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-prefix'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                        return True

                                    if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                        return True

                                    if self.fast_reroute_use_candidate_only is not None:
                                        return True

                                    if self.remote_lfa is not None and self.remote_lfa._has_data():
                                        return True

                                    if self.topology_independent_lfa is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:fast-reroute'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.fast_reroute_enable is not None:
                                    return True

                                if self.per_link is not None and self.per_link._has_data():
                                    return True

                                if self.per_prefix is not None and self.per_prefix._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute']['meta_info']


                        class DistributeList(object):
                            """
                            Filter networks intalled to RIB (disable as ACL
                            name means filtering is disabled)
                            
                            .. attribute:: access_list_name
                            
                            	Access Control List name
                            	**type**\:  str
                            
                            .. attribute:: route_policy_name
                            
                            	Route Policy name
                            	**type**\:  str
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.access_list_name = None
                                self.route_policy_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:distribute-list'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.access_list_name is not None:
                                    return True

                                if self.route_policy_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.DistributeList']['meta_info']


                        class Bfd(object):
                            """
                            BFD configuration
                            
                            .. attribute:: detection_multiplier
                            
                            	Detection multiplier for BFD sessions created by OSPF
                            	**type**\:  int
                            
                            	**range:** 2..50
                            
                            .. attribute:: fast_detect_mode
                            
                            	 use of Bidirectional Forwarding Detection
                            	**type**\:   :py:class:`BfdEnableModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.BfdEnableModeEnum>`
                            
                            .. attribute:: interval
                            
                            	Hello interval for BFD sessions created by OSPF
                            	**type**\:  int
                            
                            	**range:** 3..30000
                            
                            	**units**\: millisecond
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.detection_multiplier = None
                                self.fast_detect_mode = None
                                self.interval = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:bfd'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.detection_multiplier is not None:
                                    return True

                                if self.fast_detect_mode is not None:
                                    return True

                                if self.interval is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Bfd']['meta_info']


                        class Authentication(object):
                            """
                            Authentication
                            
                            .. attribute:: key
                            
                            	Authentication key configuration
                            	**type**\:  str
                            
                            	**pattern:** (!.+)\|([^!].+)
                            
                            .. attribute:: message_digest_keies
                            
                            	Message digest authentication password (key) configurations, first 16 chars used
                            	**type**\:   :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication.MessageDigestKeies>`
                            
                            .. attribute:: type
                            
                            	Authentication type
                            	**type**\:   :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication.Type>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.key = None
                                self.message_digest_keies = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication.MessageDigestKeies()
                                self.message_digest_keies.parent = self
                                self.type = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication.Type()
                                self.type.parent = self


                            class Type(object):
                                """
                                Authentication type
                                
                                .. attribute:: authen_type
                                
                                	Authentication type code 
                                	**type**\:   :py:class:`OspfAuthenticationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthenticationEnum>`
                                
                                .. attribute:: keychain_authen_type
                                
                                	Keychain authentication type
                                	**type**\:   :py:class:`OspfKeychainAuthEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuthEnum>`
                                
                                .. attribute:: keychain_name
                                
                                	Keychain name
                                	**type**\:  str
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.authen_type = None
                                    self.keychain_authen_type = None
                                    self.keychain_name = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:type'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.authen_type is not None:
                                        return True

                                    if self.keychain_authen_type is not None:
                                        return True

                                    if self.keychain_name is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication.Type']['meta_info']


                            class MessageDigestKeies(object):
                                """
                                Message digest authentication password (key)
                                configurations, first 16 chars used
                                
                                .. attribute:: message_digest_key
                                
                                	Message digest authentication password (key) configuration
                                	**type**\: list of    :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.message_digest_key = YList()
                                    self.message_digest_key.parent = self
                                    self.message_digest_key.name = 'message_digest_key'


                                class MessageDigestKey(object):
                                    """
                                    Message digest authentication password (key)
                                    configuration
                                    
                                    .. attribute:: key_id  <key>
                                    
                                    	Key ID
                                    	**type**\:  int
                                    
                                    	**range:** 1..255
                                    
                                    .. attribute:: password
                                    
                                    	Password
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    	**mandatory**\: True
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.key_id = None
                                        self.password = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.key_id is None:
                                            raise YPYModelError('Key property key_id is None')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-key[Cisco-IOS-XR-ipv4-ospf-cfg:key-id = ' + str(self.key_id) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.key_id is not None:
                                            return True

                                        if self.password is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication.MessageDigestKeies.MessageDigestKey']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-keies'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.message_digest_key is not None:
                                        for child_ref in self.message_digest_key:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication.MessageDigestKeies']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:authentication'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.key is not None:
                                    return True

                                if self.message_digest_keies is not None and self.message_digest_keies._has_data():
                                    return True

                                if self.type is not None and self.type._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Authentication']['meta_info']


                        class Security(object):
                            """
                            Container class for security related
                            configuration parameters
                            
                            .. attribute:: ttl
                            
                            	Enabling turns on TTL security
                            	**type**\:   :py:class:`Ttl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Security.Ttl>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.ttl = Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Security.Ttl()
                                self.ttl.parent = self


                            class Ttl(object):
                                """
                                Enabling turns on TTL security
                                
                                .. attribute:: enable
                                
                                	Enable TTL security
                                	**type**\:  bool
                                
                                .. attribute:: hop_count
                                
                                	Hop count
                                	**type**\:  int
                                
                                	**range:** 1..254
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.enable = None
                                    self.hop_count = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:ttl'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.enable is not None:
                                        return True

                                    if self.hop_count is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Security.Ttl']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:security'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ttl is not None and self.ttl._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.Security']['meta_info']


                        class DeadIntervalMinimal(object):
                            """
                            Interval after which a neighbor is declared dead
                            
                            .. attribute:: interval
                            
                            	Interval size in seconds after which a neighbor is declared dead
                            	**type**\:  int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            .. attribute:: multiplier
                            
                            	Number of Hellos in one second
                            	**type**\:  int
                            
                            	**range:** 3..20
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.interval = None
                                self.multiplier = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:dead-interval-minimal'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.interval is not None:
                                    return True

                                if self.multiplier is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.DeadIntervalMinimal']['meta_info']


                        class CostFallback(object):
                            """
                            Interface fallback cost
                            
                            .. attribute:: cost
                            
                            	Fallback cost of link
                            	**type**\:  int
                            
                            	**range:** 1..65535
                            
                            .. attribute:: threshold
                            
                            	Bandwidth threshold
                            	**type**\:  int
                            
                            	**range:** 1..4294967
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.cost = None
                                self.threshold = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:cost-fallback'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.cost is not None:
                                    return True

                                if self.threshold is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.ProcessScope.CostFallback']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:process-scope'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.authentication is not None and self.authentication._has_data():
                                return True

                            if self.bfd is not None and self.bfd._has_data():
                                return True

                            if self.cost is not None:
                                return True

                            if self.cost_fallback is not None and self.cost_fallback._has_data():
                                return True

                            if self.database_filter is not None:
                                return True

                            if self.dead_interval_minimal is not None and self.dead_interval_minimal._has_data():
                                return True

                            if self.demand_circuit is not None:
                                return True

                            if self.distribute_list is not None and self.distribute_list._has_data():
                                return True

                            if self.external_out is not None:
                                return True

                            if self.fast_reroute is not None and self.fast_reroute._has_data():
                                return True

                            if self.flood_reduction is not None:
                                return True

                            if self.hello_interval is not None:
                                return True

                            if self.ldp_auto_config is not None:
                                return True

                            if self.ldp_sync is not None:
                                return True

                            if self.ldp_sync_igp_shortcuts is not None:
                                return True

                            if self.link_down_fast_detect is not None:
                                return True

                            if self.loopback_stub_network is not None:
                                return True

                            if self.mtu_ignore is not None:
                                return True

                            if self.network_type is not None:
                                return True

                            if self.packet_size is not None:
                                return True

                            if self.passive is not None:
                                return True

                            if self.prefix_suppression_primary is not None:
                                return True

                            if self.prefix_suppression_secondary is not None:
                                return True

                            if self.priority is not None:
                                return True

                            if self.retransmit_interval is not None:
                                return True

                            if self.security is not None and self.security._has_data():
                                return True

                            if self.segment_routing is not None:
                                return True

                            if self.segment_routing_forwarding is not None:
                                return True

                            if self.srgb is not None and self.srgb._has_data():
                                return True

                            if self.summary_in is not None:
                                return True

                            if self.transmit_delay is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.ProcessScope']['meta_info']


                    class Redistribution(object):
                        """
                        Redistribute configurations
                        
                        .. attribute:: redistributes
                        
                        	Redistribute information from another routing protocol
                        	**type**\:   :py:class:`Redistributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.redistributes = Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes()
                            self.redistributes.parent = self


                        class Redistributes(object):
                            """
                            Redistribute information from another routing
                            protocol
                            
                            .. attribute:: redistribute
                            
                            	Redistribute information from another routing protocol
                            	**type**\: list of    :py:class:`Redistribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.redistribute = YList()
                                self.redistribute.parent = self
                                self.redistribute.name = 'redistribute'


                            class Redistribute(object):
                                """
                                Redistribute information from another routing
                                protocol
                                
                                .. attribute:: protocol_name  <key>
                                
                                	Distribute list protocol type
                                	**type**\:   :py:class:`OspfRedistProtocolEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRedistProtocolEnum>`
                                
                                .. attribute:: application_or_isis_or_ospf
                                
                                	application or isis or ospf
                                	**type**\: list of    :py:class:`ApplicationOrIsisOrOspf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute.ApplicationOrIsisOrOspf>`
                                
                                .. attribute:: bgp
                                
                                	bgp
                                	**type**\: list of    :py:class:`Bgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute.Bgp>`
                                
                                .. attribute:: connected_or_static_or_dagr_or_subscriber_or_mobile_or_rip
                                
                                	connected or static or dagr or subscriber or mobile or rip
                                	**type**\:   :py:class:`ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute.ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: eigrp
                                
                                	eigrp
                                	**type**\: list of    :py:class:`Eigrp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute.Eigrp>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.protocol_name = None
                                    self.application_or_isis_or_ospf = YList()
                                    self.application_or_isis_or_ospf.parent = self
                                    self.application_or_isis_or_ospf.name = 'application_or_isis_or_ospf'
                                    self.bgp = YList()
                                    self.bgp.parent = self
                                    self.bgp.name = 'bgp'
                                    self.connected_or_static_or_dagr_or_subscriber_or_mobile_or_rip = None
                                    self.eigrp = YList()
                                    self.eigrp.parent = self
                                    self.eigrp.name = 'eigrp'


                                class ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip(object):
                                    """
                                    connected or static or dagr or subscriber or
                                    mobile or rip
                                    
                                    .. attribute:: bgp_preserve_default_info
                                    
                                    	Preserve Metric and Metric Type of BGP Default Route
                                    	**type**\:  bool
                                    
                                    .. attribute:: bgp_preserve_med
                                    
                                    	Preserve MED of BGP routes
                                    	**type**\:  bool
                                    
                                    .. attribute:: classful
                                    
                                    	Disallow subnetting
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: default_redistributed_route_metric
                                    
                                    	Default metric for routes being redistributed into OSPF
                                    	**type**\:  int
                                    
                                    	**range:** 1..16777214
                                    
                                    .. attribute:: eigrp_route_type
                                    
                                    	EIGRP route type
                                    	**type**\:   :py:class:`OspfEigrpRouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfEigrpRouteEnum>`
                                    
                                    .. attribute:: isis_levels
                                    
                                    	Levels of ISIS routes
                                    	**type**\:   :py:class:`OspfRouteLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevelEnum>`
                                    
                                    .. attribute:: metric_type
                                    
                                    	Set OSPF External metric type
                                    	**type**\:   :py:class:`OspfLinkStateMetricEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetricEnum>`
                                    
                                    .. attribute:: ospf_external
                                    
                                    	OSPF external route types
                                    	**type**\:   :py:class:`OspfRouteLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevelEnum>`
                                    
                                    .. attribute:: ospf_internal
                                    
                                    	OSPF\_Internal route type
                                    	**type**\:  bool
                                    
                                    .. attribute:: ospf_nssa_level
                                    
                                    	OSPF NSSA external route types
                                    	**type**\:   :py:class:`OspfRouteLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevelEnum>`
                                    
                                    .. attribute:: ospf_redist_lsa_type
                                    
                                    	LSA type for redistributed routes
                                    	**type**\:   :py:class:`OspfRedistLsaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRedistLsaEnum>`
                                    
                                    	**default value**\: external
                                    
                                    .. attribute:: ospfnssa_only
                                    
                                    	Only redistribute to NSSA areas
                                    	**type**\:  bool
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Routing policy name
                                    	**type**\:  str
                                    
                                    .. attribute:: tag
                                    
                                    	Set tag for routes redistributed into OSPF
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.bgp_preserve_default_info = None
                                        self.bgp_preserve_med = None
                                        self.classful = None
                                        self.default_redistributed_route_metric = None
                                        self.eigrp_route_type = None
                                        self.isis_levels = None
                                        self.metric_type = None
                                        self.ospf_external = None
                                        self.ospf_internal = None
                                        self.ospf_nssa_level = None
                                        self.ospf_redist_lsa_type = None
                                        self.ospfnssa_only = None
                                        self.route_policy_name = None
                                        self.tag = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.bgp_preserve_default_info is not None:
                                            return True

                                        if self.bgp_preserve_med is not None:
                                            return True

                                        if self.classful is not None:
                                            return True

                                        if self.default_redistributed_route_metric is not None:
                                            return True

                                        if self.eigrp_route_type is not None:
                                            return True

                                        if self.isis_levels is not None:
                                            return True

                                        if self.metric_type is not None:
                                            return True

                                        if self.ospf_external is not None:
                                            return True

                                        if self.ospf_internal is not None:
                                            return True

                                        if self.ospf_nssa_level is not None:
                                            return True

                                        if self.ospf_redist_lsa_type is not None:
                                            return True

                                        if self.ospfnssa_only is not None:
                                            return True

                                        if self.route_policy_name is not None:
                                            return True

                                        if self.tag is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute.ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip']['meta_info']


                                class ApplicationOrIsisOrOspf(object):
                                    """
                                    application or isis or ospf
                                    
                                    .. attribute:: instance_name  <key>
                                    
                                    	OSPF or ISIS process name or protocol name\: bgp, eigrp, connected
                                    	**type**\:  str
                                    
                                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                    
                                    .. attribute:: bgp_preserve_default_info
                                    
                                    	Preserve Metric and Metric Type of BGP Default Route
                                    	**type**\:  bool
                                    
                                    .. attribute:: bgp_preserve_med
                                    
                                    	Preserve MED of BGP routes
                                    	**type**\:  bool
                                    
                                    .. attribute:: classful
                                    
                                    	Disallow subnetting
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: default_redistributed_route_metric
                                    
                                    	Default metric for routes being redistributed into OSPF
                                    	**type**\:  int
                                    
                                    	**range:** 1..16777214
                                    
                                    .. attribute:: eigrp_route_type
                                    
                                    	EIGRP route type
                                    	**type**\:   :py:class:`OspfEigrpRouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfEigrpRouteEnum>`
                                    
                                    .. attribute:: isis_levels
                                    
                                    	Levels of ISIS routes
                                    	**type**\:   :py:class:`OspfRouteLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevelEnum>`
                                    
                                    .. attribute:: metric_type
                                    
                                    	Set OSPF External metric type
                                    	**type**\:   :py:class:`OspfLinkStateMetricEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetricEnum>`
                                    
                                    .. attribute:: ospf_external
                                    
                                    	OSPF external route types
                                    	**type**\:   :py:class:`OspfRouteLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevelEnum>`
                                    
                                    .. attribute:: ospf_internal
                                    
                                    	OSPF\_Internal route type
                                    	**type**\:  bool
                                    
                                    .. attribute:: ospf_nssa_level
                                    
                                    	OSPF NSSA external route types
                                    	**type**\:   :py:class:`OspfRouteLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevelEnum>`
                                    
                                    .. attribute:: ospf_redist_lsa_type
                                    
                                    	LSA type for redistributed routes
                                    	**type**\:   :py:class:`OspfRedistLsaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRedistLsaEnum>`
                                    
                                    	**default value**\: external
                                    
                                    .. attribute:: ospfnssa_only
                                    
                                    	Only redistribute to NSSA areas
                                    	**type**\:  bool
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Routing policy name
                                    	**type**\:  str
                                    
                                    .. attribute:: tag
                                    
                                    	Set tag for routes redistributed into OSPF
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.instance_name = None
                                        self.bgp_preserve_default_info = None
                                        self.bgp_preserve_med = None
                                        self.classful = None
                                        self.default_redistributed_route_metric = None
                                        self.eigrp_route_type = None
                                        self.isis_levels = None
                                        self.metric_type = None
                                        self.ospf_external = None
                                        self.ospf_internal = None
                                        self.ospf_nssa_level = None
                                        self.ospf_redist_lsa_type = None
                                        self.ospfnssa_only = None
                                        self.route_policy_name = None
                                        self.tag = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.instance_name is None:
                                            raise YPYModelError('Key property instance_name is None')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:application-or-isis-or-ospf[Cisco-IOS-XR-ipv4-ospf-cfg:instance-name = ' + str(self.instance_name) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.instance_name is not None:
                                            return True

                                        if self.bgp_preserve_default_info is not None:
                                            return True

                                        if self.bgp_preserve_med is not None:
                                            return True

                                        if self.classful is not None:
                                            return True

                                        if self.default_redistributed_route_metric is not None:
                                            return True

                                        if self.eigrp_route_type is not None:
                                            return True

                                        if self.isis_levels is not None:
                                            return True

                                        if self.metric_type is not None:
                                            return True

                                        if self.ospf_external is not None:
                                            return True

                                        if self.ospf_internal is not None:
                                            return True

                                        if self.ospf_nssa_level is not None:
                                            return True

                                        if self.ospf_redist_lsa_type is not None:
                                            return True

                                        if self.ospfnssa_only is not None:
                                            return True

                                        if self.route_policy_name is not None:
                                            return True

                                        if self.tag is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute.ApplicationOrIsisOrOspf']['meta_info']


                                class Bgp(object):
                                    """
                                    bgp
                                    
                                    .. attribute:: as_xx  <key>
                                    
                                    	First half of BGP AS number in XX.YY format. Mandatory if Protocol is BGP and must not be specified otherwise. Must be a non\-zero value if second half is zero
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: as_yy  <key>
                                    
                                    	Second half of BGP AS number in XX.YY format . Mandatory if Protocol is BGP or EIGRP and must not be specified otherwise. Must be a non\-zero value if first half is zero
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: instance_name  <key>
                                    
                                    	OSPF or ISIS process name or protocol name\: bgp, eigrp, connected
                                    	**type**\:  str
                                    
                                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                    
                                    .. attribute:: bgp_preserve_default_info
                                    
                                    	Preserve Metric and Metric Type of BGP Default Route
                                    	**type**\:  bool
                                    
                                    .. attribute:: bgp_preserve_med
                                    
                                    	Preserve MED of BGP routes
                                    	**type**\:  bool
                                    
                                    .. attribute:: classful
                                    
                                    	Disallow subnetting
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: default_redistributed_route_metric
                                    
                                    	Default metric for routes being redistributed into OSPF
                                    	**type**\:  int
                                    
                                    	**range:** 1..16777214
                                    
                                    .. attribute:: eigrp_route_type
                                    
                                    	EIGRP route type
                                    	**type**\:   :py:class:`OspfEigrpRouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfEigrpRouteEnum>`
                                    
                                    .. attribute:: isis_levels
                                    
                                    	Levels of ISIS routes
                                    	**type**\:   :py:class:`OspfRouteLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevelEnum>`
                                    
                                    .. attribute:: metric_type
                                    
                                    	Set OSPF External metric type
                                    	**type**\:   :py:class:`OspfLinkStateMetricEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetricEnum>`
                                    
                                    .. attribute:: ospf_external
                                    
                                    	OSPF external route types
                                    	**type**\:   :py:class:`OspfRouteLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevelEnum>`
                                    
                                    .. attribute:: ospf_internal
                                    
                                    	OSPF\_Internal route type
                                    	**type**\:  bool
                                    
                                    .. attribute:: ospf_nssa_level
                                    
                                    	OSPF NSSA external route types
                                    	**type**\:   :py:class:`OspfRouteLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevelEnum>`
                                    
                                    .. attribute:: ospf_redist_lsa_type
                                    
                                    	LSA type for redistributed routes
                                    	**type**\:   :py:class:`OspfRedistLsaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRedistLsaEnum>`
                                    
                                    	**default value**\: external
                                    
                                    .. attribute:: ospfnssa_only
                                    
                                    	Only redistribute to NSSA areas
                                    	**type**\:  bool
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Routing policy name
                                    	**type**\:  str
                                    
                                    .. attribute:: tag
                                    
                                    	Set tag for routes redistributed into OSPF
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.as_xx = None
                                        self.as_yy = None
                                        self.instance_name = None
                                        self.bgp_preserve_default_info = None
                                        self.bgp_preserve_med = None
                                        self.classful = None
                                        self.default_redistributed_route_metric = None
                                        self.eigrp_route_type = None
                                        self.isis_levels = None
                                        self.metric_type = None
                                        self.ospf_external = None
                                        self.ospf_internal = None
                                        self.ospf_nssa_level = None
                                        self.ospf_redist_lsa_type = None
                                        self.ospfnssa_only = None
                                        self.route_policy_name = None
                                        self.tag = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.as_xx is None:
                                            raise YPYModelError('Key property as_xx is None')
                                        if self.as_yy is None:
                                            raise YPYModelError('Key property as_yy is None')
                                        if self.instance_name is None:
                                            raise YPYModelError('Key property instance_name is None')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:bgp[Cisco-IOS-XR-ipv4-ospf-cfg:as-xx = ' + str(self.as_xx) + '][Cisco-IOS-XR-ipv4-ospf-cfg:as-yy = ' + str(self.as_yy) + '][Cisco-IOS-XR-ipv4-ospf-cfg:instance-name = ' + str(self.instance_name) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.as_xx is not None:
                                            return True

                                        if self.as_yy is not None:
                                            return True

                                        if self.instance_name is not None:
                                            return True

                                        if self.bgp_preserve_default_info is not None:
                                            return True

                                        if self.bgp_preserve_med is not None:
                                            return True

                                        if self.classful is not None:
                                            return True

                                        if self.default_redistributed_route_metric is not None:
                                            return True

                                        if self.eigrp_route_type is not None:
                                            return True

                                        if self.isis_levels is not None:
                                            return True

                                        if self.metric_type is not None:
                                            return True

                                        if self.ospf_external is not None:
                                            return True

                                        if self.ospf_internal is not None:
                                            return True

                                        if self.ospf_nssa_level is not None:
                                            return True

                                        if self.ospf_redist_lsa_type is not None:
                                            return True

                                        if self.ospfnssa_only is not None:
                                            return True

                                        if self.route_policy_name is not None:
                                            return True

                                        if self.tag is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute.Bgp']['meta_info']


                                class Eigrp(object):
                                    """
                                    eigrp
                                    
                                    .. attribute:: as_xx  <key>
                                    
                                    	First half of BGP AS number in XX.YY format. Mandatory if Protocol is BGP and must not be specified otherwise. Must be a non\-zero value if second half is zero
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: instance_name  <key>
                                    
                                    	OSPF or ISIS process name or protocol name\: bgp, eigrp, connected
                                    	**type**\:  str
                                    
                                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                    
                                    .. attribute:: bgp_preserve_default_info
                                    
                                    	Preserve Metric and Metric Type of BGP Default Route
                                    	**type**\:  bool
                                    
                                    .. attribute:: bgp_preserve_med
                                    
                                    	Preserve MED of BGP routes
                                    	**type**\:  bool
                                    
                                    .. attribute:: classful
                                    
                                    	Disallow subnetting
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: default_redistributed_route_metric
                                    
                                    	Default metric for routes being redistributed into OSPF
                                    	**type**\:  int
                                    
                                    	**range:** 1..16777214
                                    
                                    .. attribute:: eigrp_route_type
                                    
                                    	EIGRP route type
                                    	**type**\:   :py:class:`OspfEigrpRouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfEigrpRouteEnum>`
                                    
                                    .. attribute:: isis_levels
                                    
                                    	Levels of ISIS routes
                                    	**type**\:   :py:class:`OspfRouteLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevelEnum>`
                                    
                                    .. attribute:: metric_type
                                    
                                    	Set OSPF External metric type
                                    	**type**\:   :py:class:`OspfLinkStateMetricEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetricEnum>`
                                    
                                    .. attribute:: ospf_external
                                    
                                    	OSPF external route types
                                    	**type**\:   :py:class:`OspfRouteLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevelEnum>`
                                    
                                    .. attribute:: ospf_internal
                                    
                                    	OSPF\_Internal route type
                                    	**type**\:  bool
                                    
                                    .. attribute:: ospf_nssa_level
                                    
                                    	OSPF NSSA external route types
                                    	**type**\:   :py:class:`OspfRouteLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevelEnum>`
                                    
                                    .. attribute:: ospf_redist_lsa_type
                                    
                                    	LSA type for redistributed routes
                                    	**type**\:   :py:class:`OspfRedistLsaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRedistLsaEnum>`
                                    
                                    	**default value**\: external
                                    
                                    .. attribute:: ospfnssa_only
                                    
                                    	Only redistribute to NSSA areas
                                    	**type**\:  bool
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Routing policy name
                                    	**type**\:  str
                                    
                                    .. attribute:: tag
                                    
                                    	Set tag for routes redistributed into OSPF
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.as_xx = None
                                        self.instance_name = None
                                        self.bgp_preserve_default_info = None
                                        self.bgp_preserve_med = None
                                        self.classful = None
                                        self.default_redistributed_route_metric = None
                                        self.eigrp_route_type = None
                                        self.isis_levels = None
                                        self.metric_type = None
                                        self.ospf_external = None
                                        self.ospf_internal = None
                                        self.ospf_nssa_level = None
                                        self.ospf_redist_lsa_type = None
                                        self.ospfnssa_only = None
                                        self.route_policy_name = None
                                        self.tag = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.as_xx is None:
                                            raise YPYModelError('Key property as_xx is None')
                                        if self.instance_name is None:
                                            raise YPYModelError('Key property instance_name is None')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:eigrp[Cisco-IOS-XR-ipv4-ospf-cfg:as-xx = ' + str(self.as_xx) + '][Cisco-IOS-XR-ipv4-ospf-cfg:instance-name = ' + str(self.instance_name) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.as_xx is not None:
                                            return True

                                        if self.instance_name is not None:
                                            return True

                                        if self.bgp_preserve_default_info is not None:
                                            return True

                                        if self.bgp_preserve_med is not None:
                                            return True

                                        if self.classful is not None:
                                            return True

                                        if self.default_redistributed_route_metric is not None:
                                            return True

                                        if self.eigrp_route_type is not None:
                                            return True

                                        if self.isis_levels is not None:
                                            return True

                                        if self.metric_type is not None:
                                            return True

                                        if self.ospf_external is not None:
                                            return True

                                        if self.ospf_internal is not None:
                                            return True

                                        if self.ospf_nssa_level is not None:
                                            return True

                                        if self.ospf_redist_lsa_type is not None:
                                            return True

                                        if self.ospfnssa_only is not None:
                                            return True

                                        if self.route_policy_name is not None:
                                            return True

                                        if self.tag is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute.Eigrp']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.protocol_name is None:
                                        raise YPYModelError('Key property protocol_name is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:redistribute[Cisco-IOS-XR-ipv4-ospf-cfg:protocol-name = ' + str(self.protocol_name) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.protocol_name is not None:
                                        return True

                                    if self.application_or_isis_or_ospf is not None:
                                        for child_ref in self.application_or_isis_or_ospf:
                                            if child_ref._has_data():
                                                return True

                                    if self.bgp is not None:
                                        for child_ref in self.bgp:
                                            if child_ref._has_data():
                                                return True

                                    if self.connected_or_static_or_dagr_or_subscriber_or_mobile_or_rip is not None and self.connected_or_static_or_dagr_or_subscriber_or_mobile_or_rip._has_data():
                                        return True

                                    if self.eigrp is not None:
                                        for child_ref in self.eigrp:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes.Redistribute']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:redistributes'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.redistribute is not None:
                                    for child_ref in self.redistribute:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.Redistribution.Redistributes']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:redistribution'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.redistributes is not None and self.redistributes._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.Redistribution']['meta_info']


                    class AdjacencyStagger(object):
                        """
                        Staggering OSPF adjacency bring up
                        
                        .. attribute:: disable
                        
                        	Disable OSPF adjacency stagger
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: initial_nbr
                        
                        	Adjacency Stagger\: Initial number of neighbors to bring up per area
                        	**type**\:  int
                        
                        	**range:** 1..65535
                        
                        	**default value**\: 2
                        
                        .. attribute:: max_nbr
                        
                        	Adjacency Stagger\: Subsequent simultaneous number of neighbors to bring up
                        	**type**\:  int
                        
                        	**range:** 1..65535
                        
                        	**default value**\: 64
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.disable = None
                            self.initial_nbr = None
                            self.max_nbr = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:adjacency-stagger'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.disable is not None:
                                return True

                            if self.initial_nbr is not None:
                                return True

                            if self.max_nbr is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AdjacencyStagger']['meta_info']


                    class MaxLsa(object):
                        """
                        Set max\-lsa configuration
                        
                        .. attribute:: max_lsa_ignore_count
                        
                        	Set count on how many times adjacencies can be suppressed
                        	**type**\:  int
                        
                        	**range:** 1..4294967294
                        
                        .. attribute:: max_lsa_ignore_time
                        
                        	Set time during which all adjacencies are suppressed
                        	**type**\:  int
                        
                        	**range:** 1..35791394
                        
                        .. attribute:: max_lsa_limit
                        
                        	Set maximum number of non self\-generated LSAs
                        	**type**\:  int
                        
                        	**range:** 1..4294967294
                        
                        	**mandatory**\: True
                        
                        .. attribute:: max_lsa_reset_time
                        
                        	Set number of minutes after which ignore\-count is reset to zero
                        	**type**\:  int
                        
                        	**range:** 2..71582788
                        
                        	**units**\: minute
                        
                        .. attribute:: max_lsa_threshold
                        
                        	Set max\-lsa threshold for generating a warning message
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: max_lsa_warning_only
                        
                        	Only give warning message when limit is exceeded
                        	**type**\:  bool
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.max_lsa_ignore_count = None
                            self.max_lsa_ignore_time = None
                            self.max_lsa_limit = None
                            self.max_lsa_reset_time = None
                            self.max_lsa_threshold = None
                            self.max_lsa_warning_only = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:max-lsa'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.max_lsa_ignore_count is not None:
                                return True

                            if self.max_lsa_ignore_time is not None:
                                return True

                            if self.max_lsa_limit is not None:
                                return True

                            if self.max_lsa_reset_time is not None:
                                return True

                            if self.max_lsa_threshold is not None:
                                return True

                            if self.max_lsa_warning_only is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.MaxLsa']['meta_info']


                    class AutoCost(object):
                        """
                        Controls automatic cost based on bandwidth
                        
                        .. attribute:: bandwidth
                        
                        	The reference bandwidth in terms of Mbits per second
                        	**type**\:  int
                        
                        	**range:** 1..4294967
                        
                        	**units**\: Mbit/s
                        
                        	**default value**\: 100
                        
                        .. attribute:: disable
                        
                        	Disabling auto costing
                        	**type**\:  bool
                        
                        	**default value**\: false
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.bandwidth = None
                            self.disable = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:auto-cost'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.bandwidth is not None:
                                return True

                            if self.disable is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AutoCost']['meta_info']


                    class Ucmp(object):
                        """
                        Unequal Cost Multi\-ptah configuration
                        
                        .. attribute:: delay_interval
                        
                        	Delay in msecs between primary SPF and UCMP computation
                        	**type**\:  int
                        
                        	**range:** 1..5000
                        
                        	**units**\: millisecond
                        
                        	**default value**\: 100
                        
                        .. attribute:: enable
                        
                        	UCMP feature enable configuration
                        	**type**\:   :py:class:`Enable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Ucmp.Enable>`
                        
                        .. attribute:: exclude_interfaces
                        
                        	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                        	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Ucmp.ExcludeInterfaces>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.delay_interval = None
                            self.enable = Ospf.Processes.Process.Vrfs.Vrf.Ucmp.Enable()
                            self.enable.parent = self
                            self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.Ucmp.ExcludeInterfaces()
                            self.exclude_interfaces.parent = self


                        class Enable(object):
                            """
                            UCMP feature enable configuration
                            
                            .. attribute:: prefix_list_name
                            
                            	Name of the Prefix List
                            	**type**\:  str
                            
                            .. attribute:: variance
                            
                            	Value of variance
                            	**type**\:  int
                            
                            	**range:** 101..10000
                            
                            	**default value**\: 200
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.prefix_list_name = None
                                self.variance = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:enable'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.prefix_list_name is not None:
                                    return True

                                if self.variance is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.Ucmp.Enable']['meta_info']


                        class ExcludeInterfaces(object):
                            """
                            Fast\-reroute per\-link/per\-prefix or UCMP exclude
                            interface configuration
                            
                            .. attribute:: exclude_interface
                            
                            	Exclude an interface from becoming a backup or UCMP
                            	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Ucmp.ExcludeInterfaces.ExcludeInterface>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.exclude_interface = YList()
                                self.exclude_interface.parent = self
                                self.exclude_interface.name = 'exclude_interface'


                            class ExcludeInterface(object):
                                """
                                Exclude an interface from becoming a backup or
                                UCMP
                                
                                .. attribute:: interface_name  <key>
                                
                                	Interface
                                	**type**\:  str
                                
                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.interface_name = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.interface_name is None:
                                        raise YPYModelError('Key property interface_name is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.interface_name is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.Ucmp.ExcludeInterfaces.ExcludeInterface']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.exclude_interface is not None:
                                    for child_ref in self.exclude_interface:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.Ucmp.ExcludeInterfaces']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:ucmp'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.delay_interval is not None:
                                return True

                            if self.enable is not None and self.enable._has_data():
                                return True

                            if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.Ucmp']['meta_info']


                    class FastReroute(object):
                        """
                        Fast\-reroute instance scoped parameters
                        
                        .. attribute:: per_link
                        
                        	Fast\-reroute per\-link global configuration
                        	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerLink>`
                        
                        .. attribute:: per_prefix
                        
                        	Fast\-reroute per\-prefix global configuration
                        	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.per_link = Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerLink()
                            self.per_link.parent = self
                            self.per_prefix = Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix()
                            self.per_prefix.parent = self


                        class PerLink(object):
                            """
                            Fast\-reroute per\-link global configuration
                            
                            .. attribute:: priority
                            
                            	Fast\-reroute per\-link/per\-prefix priority\-limit command
                            	**type**\:   :py:class:`OspfFastReroutePriorityEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastReroutePriorityEnum>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.priority = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-link'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.priority is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerLink']['meta_info']


                        class PerPrefix(object):
                            """
                            Fast\-reroute per\-prefix global configuration
                            
                            .. attribute:: load_sharing_disable
                            
                            	Disable load sharing between multiple backups
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: priority
                            
                            	Fast\-reroute per\-link/per\-prefix priority\-limit command
                            	**type**\:   :py:class:`OspfFastReroutePriorityEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastReroutePriorityEnum>`
                            
                            .. attribute:: tiebreakers
                            
                            	Fast\-reroute tiebreakers configurations
                            	**type**\:   :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.load_sharing_disable = None
                                self.priority = None
                                self.tiebreakers = Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers()
                                self.tiebreakers.parent = self


                            class Tiebreakers(object):
                                """
                                Fast\-reroute tiebreakers configurations
                                
                                .. attribute:: tiebreaker
                                
                                	Fast\-reroute tiebreakers configuration
                                	**type**\: list of    :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.tiebreaker = YList()
                                    self.tiebreaker.parent = self
                                    self.tiebreaker.name = 'tiebreaker'


                                class Tiebreaker(object):
                                    """
                                    Fast\-reroute tiebreakers configuration
                                    
                                    .. attribute:: tiebreaker_type  <key>
                                    
                                    	Tiebreaker type
                                    	**type**\:   :py:class:`OspfFastRerouteTiebreakersEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakersEnum>`
                                    
                                    .. attribute:: tiebreaker_index
                                    
                                    	Index value for a tiebreaker, 0 to disable
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    	**mandatory**\: True
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.tiebreaker_type = None
                                        self.tiebreaker_index = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.tiebreaker_type is None:
                                            raise YPYModelError('Key property tiebreaker_type is None')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker[Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker-type = ' + str(self.tiebreaker_type) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.tiebreaker_type is not None:
                                            return True

                                        if self.tiebreaker_index is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreakers'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.tiebreaker is not None:
                                        for child_ref in self.tiebreaker:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-prefix'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.load_sharing_disable is not None:
                                    return True

                                if self.priority is not None:
                                    return True

                                if self.tiebreakers is not None and self.tiebreakers._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:fast-reroute'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.per_link is not None and self.per_link._has_data():
                                return True

                            if self.per_prefix is not None and self.per_prefix._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.FastReroute']['meta_info']


                    class SummaryPrefixes(object):
                        """
                        Configure IP prefix summary
                        
                        .. attribute:: netmask
                        
                        	keys\: netmask
                        	**type**\: list of    :py:class:`Netmask <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes.Netmask>`
                        
                        .. attribute:: prefix
                        
                        	keys\: prefix
                        	**type**\: list of    :py:class:`Prefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes.Prefix>`
                        
                        .. attribute:: prefix_and_netmask
                        
                        	keys\: prefix, netmask
                        	**type**\: list of    :py:class:`PrefixAndNetmask <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes.PrefixAndNetmask>`
                        
                        .. attribute:: summary_prefix_data
                        
                        	Data container
                        	**type**\:   :py:class:`SummaryPrefixData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes.SummaryPrefixData>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.netmask = YList()
                            self.netmask.parent = self
                            self.netmask.name = 'netmask'
                            self.prefix = YList()
                            self.prefix.parent = self
                            self.prefix.name = 'prefix'
                            self.prefix_and_netmask = YList()
                            self.prefix_and_netmask.parent = self
                            self.prefix_and_netmask.name = 'prefix_and_netmask'
                            self.summary_prefix_data = Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes.SummaryPrefixData()
                            self.summary_prefix_data.parent = self


                        class SummaryPrefixData(object):
                            """
                            Data container.
                            
                            .. attribute:: not_advertise
                            
                            	Do not advertise when translating OSPF type\-7 LSA
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: tag
                            
                            	32\-bit tag value
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.not_advertise = None
                                self.tag = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:summary-prefix-data'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.not_advertise is not None:
                                    return True

                                if self.tag is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes.SummaryPrefixData']['meta_info']


                        class PrefixAndNetmask(object):
                            """
                            keys\: prefix, netmask
                            
                            .. attribute:: netmask  <key>
                            
                            	Summary netmask
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: prefix  <key>
                            
                            	IP summary prefix
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: not_advertise
                            
                            	Do not advertise when translating OSPF type\-7 LSA
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: tag
                            
                            	32\-bit tag value
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.netmask = None
                                self.prefix = None
                                self.not_advertise = None
                                self.tag = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.netmask is None:
                                    raise YPYModelError('Key property netmask is None')
                                if self.prefix is None:
                                    raise YPYModelError('Key property prefix is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:prefix-and-netmask[Cisco-IOS-XR-ipv4-ospf-cfg:netmask = ' + str(self.netmask) + '][Cisco-IOS-XR-ipv4-ospf-cfg:prefix = ' + str(self.prefix) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.netmask is not None:
                                    return True

                                if self.prefix is not None:
                                    return True

                                if self.not_advertise is not None:
                                    return True

                                if self.tag is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes.PrefixAndNetmask']['meta_info']


                        class Prefix(object):
                            """
                            keys\: prefix
                            
                            .. attribute:: prefix  <key>
                            
                            	IP summary prefix
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: not_advertise
                            
                            	Do not advertise when translating OSPF type\-7 LSA
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: tag
                            
                            	32\-bit tag value
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.prefix = None
                                self.not_advertise = None
                                self.tag = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.prefix is None:
                                    raise YPYModelError('Key property prefix is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:prefix[Cisco-IOS-XR-ipv4-ospf-cfg:prefix = ' + str(self.prefix) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.prefix is not None:
                                    return True

                                if self.not_advertise is not None:
                                    return True

                                if self.tag is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes.Prefix']['meta_info']


                        class Netmask(object):
                            """
                            keys\: netmask
                            
                            .. attribute:: netmask  <key>
                            
                            	Summary netmask
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: not_advertise
                            
                            	Do not advertise when translating OSPF type\-7 LSA
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: tag
                            
                            	32\-bit tag value
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.netmask = None
                                self.not_advertise = None
                                self.tag = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.netmask is None:
                                    raise YPYModelError('Key property netmask is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:netmask[Cisco-IOS-XR-ipv4-ospf-cfg:netmask = ' + str(self.netmask) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.netmask is not None:
                                    return True

                                if self.not_advertise is not None:
                                    return True

                                if self.tag is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes.Netmask']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:summary-prefixes'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.netmask is not None:
                                for child_ref in self.netmask:
                                    if child_ref._has_data():
                                        return True

                            if self.prefix is not None:
                                for child_ref in self.prefix:
                                    if child_ref._has_data():
                                        return True

                            if self.prefix_and_netmask is not None:
                                for child_ref in self.prefix_and_netmask:
                                    if child_ref._has_data():
                                        return True

                            if self.summary_prefix_data is not None and self.summary_prefix_data._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.SummaryPrefixes']['meta_info']


                    class OutgoingRouteUpdates(object):
                        """
                        Filter outgoing routing updates
                        
                        .. attribute:: outgoing_route_update
                        
                        	Filter outgoing routing updates for a particular protocol
                        	**type**\: list of    :py:class:`OutgoingRouteUpdate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.OutgoingRouteUpdates.OutgoingRouteUpdate>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.outgoing_route_update = YList()
                            self.outgoing_route_update.parent = self
                            self.outgoing_route_update.name = 'outgoing_route_update'


                        class OutgoingRouteUpdate(object):
                            """
                            Filter outgoing routing updates for a
                            particular protocol
                            
                            .. attribute:: protocol_name  <key>
                            
                            	Distribute list protocol type
                            	**type**\:   :py:class:`OspfDistListProtocolEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfDistListProtocolEnum>`
                            
                            .. attribute:: access_list_name
                            
                            	Access Control List name
                            	**type**\:  str
                            
                            .. attribute:: as_xx
                            
                            	First half of BGP AS number in XX.YY format.  Mandatory if Protocol is BGP and must not be specified otherwise. Must be a non\-zero value if second half is zero
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: as_yy
                            
                            	Second half of BGP AS number in XX.YY format. Mandatory if Protocol is BGP and must not be specified otherwise. Must be a non\-zero value if first half is zero
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: ospf_process_name
                            
                            	OSPF process name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.protocol_name = None
                                self.access_list_name = None
                                self.as_xx = None
                                self.as_yy = None
                                self.ospf_process_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.protocol_name is None:
                                    raise YPYModelError('Key property protocol_name is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:outgoing-route-update[Cisco-IOS-XR-ipv4-ospf-cfg:protocol-name = ' + str(self.protocol_name) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.protocol_name is not None:
                                    return True

                                if self.access_list_name is not None:
                                    return True

                                if self.as_xx is not None:
                                    return True

                                if self.as_yy is not None:
                                    return True

                                if self.ospf_process_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.OutgoingRouteUpdates.OutgoingRouteUpdate']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:outgoing-route-updates'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.outgoing_route_update is not None:
                                for child_ref in self.outgoing_route_update:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.OutgoingRouteUpdates']['meta_info']


                    class Distance(object):
                        """
                        Administrative distance configuration
                        
                        .. attribute:: admin_distance
                        
                        	Define an administrative distance
                        	**type**\:  int
                        
                        	**range:** 1..255
                        
                        	**default value**\: 110
                        
                        .. attribute:: ip_distances
                        
                        	IP specific administrative distance configuration
                        	**type**\:   :py:class:`IpDistances <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Distance.IpDistances>`
                        
                        .. attribute:: ospf_distance
                        
                        	OSPF distance configuration
                        	**type**\:   :py:class:`OspfDistance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Distance.OspfDistance>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.admin_distance = None
                            self.ip_distances = Ospf.Processes.Process.Vrfs.Vrf.Distance.IpDistances()
                            self.ip_distances.parent = self
                            self.ospf_distance = Ospf.Processes.Process.Vrfs.Vrf.Distance.OspfDistance()
                            self.ospf_distance.parent = self


                        class OspfDistance(object):
                            """
                            OSPF distance configuration
                            
                            .. attribute:: external_routes
                            
                            	Distance for external type 5 and type 7 routes
                            	**type**\:  int
                            
                            	**range:** 1..255
                            
                            	**default value**\: 110
                            
                            .. attribute:: inter_area
                            
                            	Distance for inter\-area routes
                            	**type**\:  int
                            
                            	**range:** 1..255
                            
                            	**default value**\: 110
                            
                            .. attribute:: intra_area
                            
                            	Distance for intra\-area routes
                            	**type**\:  int
                            
                            	**range:** 1..255
                            
                            	**default value**\: 110
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.external_routes = None
                                self.inter_area = None
                                self.intra_area = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:ospf-distance'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.external_routes is not None:
                                    return True

                                if self.inter_area is not None:
                                    return True

                                if self.intra_area is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.Distance.OspfDistance']['meta_info']


                        class IpDistances(object):
                            """
                            IP specific administrative distance
                            configuration
                            
                            .. attribute:: ip_distance
                            
                            	Administrative distance configuration for a particular IP address
                            	**type**\: list of    :py:class:`IpDistance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Distance.IpDistances.IpDistance>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.ip_distance = YList()
                                self.ip_distance.parent = self
                                self.ip_distance.name = 'ip_distance'


                            class IpDistance(object):
                                """
                                Administrative distance configuration for a
                                particular IP address
                                
                                .. attribute:: address  <key>
                                
                                	IP source address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: wildcard  <key>
                                
                                	IP wild card bits \-\- inverted mask
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: access_list_name
                                
                                	Access Control List name
                                	**type**\:  str
                                
                                .. attribute:: distance
                                
                                	Administrative distance
                                	**type**\:  int
                                
                                	**range:** 1..255
                                
                                	**default value**\: 110
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.address = None
                                    self.wildcard = None
                                    self.access_list_name = None
                                    self.distance = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.address is None:
                                        raise YPYModelError('Key property address is None')
                                    if self.wildcard is None:
                                        raise YPYModelError('Key property wildcard is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:ip-distance[Cisco-IOS-XR-ipv4-ospf-cfg:address = ' + str(self.address) + '][Cisco-IOS-XR-ipv4-ospf-cfg:wildcard = ' + str(self.wildcard) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.address is not None:
                                        return True

                                    if self.wildcard is not None:
                                        return True

                                    if self.access_list_name is not None:
                                        return True

                                    if self.distance is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.Distance.IpDistances.IpDistance']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:ip-distances'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ip_distance is not None:
                                    for child_ref in self.ip_distance:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.Distance.IpDistances']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:distance'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.admin_distance is not None:
                                return True

                            if self.ip_distances is not None and self.ip_distances._has_data():
                                return True

                            if self.ospf_distance is not None and self.ospf_distance._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.Distance']['meta_info']


                    class AreaAddresses(object):
                        """
                        Area configuration
                        
                        .. attribute:: area_address
                        
                        	Configuration for a particular area
                        	**type**\: list of    :py:class:`AreaAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress>`
                        
                        .. attribute:: area_area_id
                        
                        	Configuration for a particular area
                        	**type**\: list of    :py:class:`AreaAreaId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.area_address = YList()
                            self.area_address.parent = self
                            self.area_address.name = 'area_address'
                            self.area_area_id = YList()
                            self.area_area_id.parent = self
                            self.area_area_id.name = 'area_area_id'


                        class AreaAddress(object):
                            """
                            Configuration for a particular area
                            
                            .. attribute:: address  <key>
                            
                            	Area ID if in IP address format
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: area_ranges
                            
                            	Summarize routes matching address/mask (border routers only)
                            	**type**\:   :py:class:`AreaRanges <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaRanges>`
                            
                            .. attribute:: area_scope
                            
                            	Area scope configuration
                            	**type**\:   :py:class:`AreaScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope>`
                            
                            .. attribute:: default_cost
                            
                            	Set the summary default\-cost of a NSSA/stub area
                            	**type**\:  int
                            
                            	**range:** 1..16777215
                            
                            	**default value**\: 1
                            
                            .. attribute:: external_out
                            
                            	Enable/Disable an OSPF area to advertise intra\-area prefixes out of this area as external
                            	**type**\:  bool
                            
                            .. attribute:: mpls_traffic_eng
                            
                            	Configure an OSPF area to run MPLS Traffic Engineering
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: multi_area_interface_scopes
                            
                            	Multi Area Interface scope configurations
                            	**type**\:   :py:class:`MultiAreaInterfaceScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes>`
                            
                            .. attribute:: name_scopes
                            
                            	Name scope configurations
                            	**type**\:   :py:class:`NameScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes>`
                            
                            .. attribute:: nssa
                            
                            	Specify area as a NSSA area
                            	**type**\:   :py:class:`Nssa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Nssa>`
                            
                            .. attribute:: route_policy_in
                            
                            	Configure a route policy for inbound type\-3 lsa filtering
                            	**type**\:  str
                            
                            .. attribute:: route_policy_out
                            
                            	Configure a route policy for outbound type\-3 lsa filtering
                            	**type**\:  str
                            
                            .. attribute:: running
                            
                            	Enable routing on an IP network
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: segment_routing
                            
                            	segment\-routing configuration Applicable only in Default VRF
                            	**type**\:   :py:class:`OspfSegmentRoutingEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRoutingEnum>`
                            
                            .. attribute:: sham_link_scopes
                            
                            	Sham Link scope configurations
                            	**type**\:   :py:class:`ShamLinkScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes>`
                            
                            .. attribute:: stub
                            
                            	Specify the area as a stub area (send summary LSA stub area)
                            	**type**\:  bool
                            
                            .. attribute:: summary_in
                            
                            	Enable/Disable an OSPF area to advertise external prefixes into this area as summary
                            	**type**\:  bool
                            
                            .. attribute:: virtual_link_scopes
                            
                            	Virtual Link scope configurations
                            	**type**\:   :py:class:`VirtualLinkScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.address = None
                                self.area_ranges = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaRanges()
                                self.area_ranges.parent = self
                                self.area_scope = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope()
                                self.area_scope.parent = self
                                self.default_cost = None
                                self.external_out = None
                                self.mpls_traffic_eng = None
                                self.multi_area_interface_scopes = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes()
                                self.multi_area_interface_scopes.parent = self
                                self.name_scopes = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes()
                                self.name_scopes.parent = self
                                self.nssa = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Nssa()
                                self.nssa.parent = self
                                self.route_policy_in = None
                                self.route_policy_out = None
                                self.running = None
                                self.segment_routing = None
                                self.sham_link_scopes = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes()
                                self.sham_link_scopes.parent = self
                                self.stub = None
                                self.summary_in = None
                                self.virtual_link_scopes = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes()
                                self.virtual_link_scopes.parent = self


                            class VirtualLinkScopes(object):
                                """
                                Virtual Link scope configurations
                                
                                .. attribute:: virtual_link_scope
                                
                                	Virtual Link configuration
                                	**type**\: list of    :py:class:`VirtualLinkScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.virtual_link_scope = YList()
                                    self.virtual_link_scope.parent = self
                                    self.virtual_link_scope.name = 'virtual_link_scope'


                                class VirtualLinkScope(object):
                                    """
                                    Virtual Link configuration
                                    
                                    .. attribute:: address  <key>
                                    
                                    	Router ID of virtual link neighbor
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: authentication
                                    
                                    	Authentication
                                    	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication>`
                                    
                                    .. attribute:: dead_interval_minimal
                                    
                                    	Interval after which a neighbor is declared dead
                                    	**type**\:   :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal>`
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Interval between HELLO packets in seconds
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Time in seconds between retransmitting lost link state advertisements
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 5
                                    
                                    .. attribute:: running
                                    
                                    	Enable routing on an IP network
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Number of seconds to delay transmission of LSAs
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 1
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.address = None
                                        self.authentication = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication()
                                        self.authentication.parent = self
                                        self.dead_interval_minimal = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal()
                                        self.dead_interval_minimal.parent = self
                                        self.hello_interval = None
                                        self.retransmit_interval = None
                                        self.running = None
                                        self.transmit_delay = None


                                    class Authentication(object):
                                        """
                                        Authentication
                                        
                                        .. attribute:: key
                                        
                                        	Authentication key configuration
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: message_digest_keies
                                        
                                        	Message digest authentication password (key) configurations, first 16 chars used
                                        	**type**\:   :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies>`
                                        
                                        .. attribute:: type
                                        
                                        	Authentication type
                                        	**type**\:   :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.Type>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.key = None
                                            self.message_digest_keies = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies()
                                            self.message_digest_keies.parent = self
                                            self.type = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.Type()
                                            self.type.parent = self


                                        class Type(object):
                                            """
                                            Authentication type
                                            
                                            .. attribute:: authen_type
                                            
                                            	Authentication type code 
                                            	**type**\:   :py:class:`OspfAuthenticationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthenticationEnum>`
                                            
                                            .. attribute:: keychain_authen_type
                                            
                                            	Keychain authentication type
                                            	**type**\:   :py:class:`OspfKeychainAuthEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuthEnum>`
                                            
                                            .. attribute:: keychain_name
                                            
                                            	Keychain name
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.authen_type = None
                                                self.keychain_authen_type = None
                                                self.keychain_name = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:type'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.authen_type is not None:
                                                    return True

                                                if self.keychain_authen_type is not None:
                                                    return True

                                                if self.keychain_name is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.Type']['meta_info']


                                        class MessageDigestKeies(object):
                                            """
                                            Message digest authentication password (key)
                                            configurations, first 16 chars used
                                            
                                            .. attribute:: message_digest_key
                                            
                                            	Message digest authentication password (key) configuration
                                            	**type**\: list of    :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.message_digest_key = YList()
                                                self.message_digest_key.parent = self
                                                self.message_digest_key.name = 'message_digest_key'


                                            class MessageDigestKey(object):
                                                """
                                                Message digest authentication password (key)
                                                configuration
                                                
                                                .. attribute:: key_id  <key>
                                                
                                                	Key ID
                                                	**type**\:  int
                                                
                                                	**range:** 1..255
                                                
                                                .. attribute:: password
                                                
                                                	Password
                                                	**type**\:  str
                                                
                                                	**pattern:** (!.+)\|([^!].+)
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.key_id = None
                                                    self.password = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.key_id is None:
                                                        raise YPYModelError('Key property key_id is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-key[Cisco-IOS-XR-ipv4-ospf-cfg:key-id = ' + str(self.key_id) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.key_id is not None:
                                                        return True

                                                    if self.password is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies.MessageDigestKey']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-keies'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.message_digest_key is not None:
                                                    for child_ref in self.message_digest_key:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:authentication'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.key is not None:
                                                return True

                                            if self.message_digest_keies is not None and self.message_digest_keies._has_data():
                                                return True

                                            if self.type is not None and self.type._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication']['meta_info']


                                    class DeadIntervalMinimal(object):
                                        """
                                        Interval after which a neighbor is declared dead
                                        
                                        .. attribute:: interval
                                        
                                        	Interval size in seconds after which a neighbor is declared dead
                                        	**type**\:  int
                                        
                                        	**range:** 1..65535
                                        
                                        	**units**\: second
                                        
                                        .. attribute:: multiplier
                                        
                                        	Number of Hellos in one second
                                        	**type**\:  int
                                        
                                        	**range:** 3..20
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.interval = None
                                            self.multiplier = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:dead-interval-minimal'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.interval is not None:
                                                return True

                                            if self.multiplier is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.address is None:
                                            raise YPYModelError('Key property address is None')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:virtual-link-scope[Cisco-IOS-XR-ipv4-ospf-cfg:address = ' + str(self.address) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.address is not None:
                                            return True

                                        if self.authentication is not None and self.authentication._has_data():
                                            return True

                                        if self.dead_interval_minimal is not None and self.dead_interval_minimal._has_data():
                                            return True

                                        if self.hello_interval is not None:
                                            return True

                                        if self.retransmit_interval is not None:
                                            return True

                                        if self.running is not None:
                                            return True

                                        if self.transmit_delay is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:virtual-link-scopes'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.virtual_link_scope is not None:
                                        for child_ref in self.virtual_link_scope:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinkScopes']['meta_info']


                            class ShamLinkScopes(object):
                                """
                                Sham Link scope configurations
                                
                                .. attribute:: sham_link_scope
                                
                                	Sham Link configuration
                                	**type**\: list of    :py:class:`ShamLinkScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.sham_link_scope = YList()
                                    self.sham_link_scope.parent = self
                                    self.sham_link_scope.name = 'sham_link_scope'


                                class ShamLinkScope(object):
                                    """
                                    Sham Link configuration
                                    
                                    .. attribute:: destination_address  <key>
                                    
                                    	Address of the remote sham\-link endpoint
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: source_address  <key>
                                    
                                    	Address of the local sham\-link endpoint
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: authentication
                                    
                                    	Authentication
                                    	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication>`
                                    
                                    .. attribute:: cost
                                    
                                    	Interface cost
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: dead_interval_minimal
                                    
                                    	Interval after which a neighbor is declared dead
                                    	**type**\:   :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal>`
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Interval between HELLO packets in seconds
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Time in seconds between retransmitting lost link state advertisements
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 5
                                    
                                    .. attribute:: running
                                    
                                    	Enable routing on an IP network
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: source
                                    
                                    	Address of the local sham\-link endpoint. Enter an IP Address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Number of seconds to delay transmission of LSAs
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 1
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.destination_address = None
                                        self.source_address = None
                                        self.authentication = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication()
                                        self.authentication.parent = self
                                        self.cost = None
                                        self.dead_interval_minimal = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal()
                                        self.dead_interval_minimal.parent = self
                                        self.hello_interval = None
                                        self.retransmit_interval = None
                                        self.running = None
                                        self.source = None
                                        self.transmit_delay = None


                                    class Authentication(object):
                                        """
                                        Authentication
                                        
                                        .. attribute:: key
                                        
                                        	Authentication key configuration
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: message_digest_keies
                                        
                                        	Message digest authentication password (key) configurations, first 16 chars used
                                        	**type**\:   :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies>`
                                        
                                        .. attribute:: type
                                        
                                        	Authentication type
                                        	**type**\:   :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.Type>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.key = None
                                            self.message_digest_keies = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies()
                                            self.message_digest_keies.parent = self
                                            self.type = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.Type()
                                            self.type.parent = self


                                        class Type(object):
                                            """
                                            Authentication type
                                            
                                            .. attribute:: authen_type
                                            
                                            	Authentication type code 
                                            	**type**\:   :py:class:`OspfAuthenticationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthenticationEnum>`
                                            
                                            .. attribute:: keychain_authen_type
                                            
                                            	Keychain authentication type
                                            	**type**\:   :py:class:`OspfKeychainAuthEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuthEnum>`
                                            
                                            .. attribute:: keychain_name
                                            
                                            	Keychain name
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.authen_type = None
                                                self.keychain_authen_type = None
                                                self.keychain_name = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:type'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.authen_type is not None:
                                                    return True

                                                if self.keychain_authen_type is not None:
                                                    return True

                                                if self.keychain_name is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.Type']['meta_info']


                                        class MessageDigestKeies(object):
                                            """
                                            Message digest authentication password (key)
                                            configurations, first 16 chars used
                                            
                                            .. attribute:: message_digest_key
                                            
                                            	Message digest authentication password (key) configuration
                                            	**type**\: list of    :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.message_digest_key = YList()
                                                self.message_digest_key.parent = self
                                                self.message_digest_key.name = 'message_digest_key'


                                            class MessageDigestKey(object):
                                                """
                                                Message digest authentication password (key)
                                                configuration
                                                
                                                .. attribute:: key_id  <key>
                                                
                                                	Key ID
                                                	**type**\:  int
                                                
                                                	**range:** 1..255
                                                
                                                .. attribute:: password
                                                
                                                	Password
                                                	**type**\:  str
                                                
                                                	**pattern:** (!.+)\|([^!].+)
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.key_id = None
                                                    self.password = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.key_id is None:
                                                        raise YPYModelError('Key property key_id is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-key[Cisco-IOS-XR-ipv4-ospf-cfg:key-id = ' + str(self.key_id) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.key_id is not None:
                                                        return True

                                                    if self.password is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies.MessageDigestKey']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-keies'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.message_digest_key is not None:
                                                    for child_ref in self.message_digest_key:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:authentication'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.key is not None:
                                                return True

                                            if self.message_digest_keies is not None and self.message_digest_keies._has_data():
                                                return True

                                            if self.type is not None and self.type._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication']['meta_info']


                                    class DeadIntervalMinimal(object):
                                        """
                                        Interval after which a neighbor is declared dead
                                        
                                        .. attribute:: interval
                                        
                                        	Interval size in seconds after which a neighbor is declared dead
                                        	**type**\:  int
                                        
                                        	**range:** 1..65535
                                        
                                        	**units**\: second
                                        
                                        .. attribute:: multiplier
                                        
                                        	Number of Hellos in one second
                                        	**type**\:  int
                                        
                                        	**range:** 3..20
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.interval = None
                                            self.multiplier = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:dead-interval-minimal'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.interval is not None:
                                                return True

                                            if self.multiplier is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.destination_address is None:
                                            raise YPYModelError('Key property destination_address is None')
                                        if self.source_address is None:
                                            raise YPYModelError('Key property source_address is None')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:sham-link-scope[Cisco-IOS-XR-ipv4-ospf-cfg:destination-address = ' + str(self.destination_address) + '][Cisco-IOS-XR-ipv4-ospf-cfg:source-address = ' + str(self.source_address) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.destination_address is not None:
                                            return True

                                        if self.source_address is not None:
                                            return True

                                        if self.authentication is not None and self.authentication._has_data():
                                            return True

                                        if self.cost is not None:
                                            return True

                                        if self.dead_interval_minimal is not None and self.dead_interval_minimal._has_data():
                                            return True

                                        if self.hello_interval is not None:
                                            return True

                                        if self.retransmit_interval is not None:
                                            return True

                                        if self.running is not None:
                                            return True

                                        if self.source is not None:
                                            return True

                                        if self.transmit_delay is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:sham-link-scopes'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.sham_link_scope is not None:
                                        for child_ref in self.sham_link_scope:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinkScopes']['meta_info']


                            class AreaScope(object):
                                """
                                Area scope configuration
                                
                                .. attribute:: authentication
                                
                                	Authentication
                                	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication>`
                                
                                .. attribute:: bfd
                                
                                	BFD configuration
                                	**type**\:   :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Bfd>`
                                
                                .. attribute:: cost
                                
                                	Interface cost
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: cost_fallback
                                
                                	Interface fallback cost
                                	**type**\:   :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.CostFallback>`
                                
                                .. attribute:: database_filter
                                
                                	Filter OSPF LSA during synchronization and flooding
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: dead_interval_minimal
                                
                                	Interval after which a neighbor is declared dead
                                	**type**\:   :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.DeadIntervalMinimal>`
                                
                                .. attribute:: demand_circuit
                                
                                	Enable/Disable OSPF demand circuit
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: distribute_list
                                
                                	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                                	**type**\:   :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.DistributeList>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: fast_reroute
                                
                                	Fast\-reroute configuration
                                	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute>`
                                
                                .. attribute:: flood_reduction
                                
                                	Enable/Disable OSPF flood reduction
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: hello_interval
                                
                                	Interval between HELLO packets in seconds
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: ldp_auto_config
                                
                                	Enable MPLS LDP Auto Config
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: ldp_sync
                                
                                	Enable/Disable MPLS LDP sync
                                	**type**\:  bool
                                
                                .. attribute:: ldp_sync_igp_shortcuts
                                
                                	Enable/Disable MPLS LDP sync for igp\-shortcuts
                                	**type**\:  bool
                                
                                .. attribute:: link_down_fast_detect
                                
                                	Enable/Disable registration for early interface down notifications
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: loopback_stub_network
                                
                                	Enable/Disable advertising loopback as a stub network
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: mtu_ignore
                                
                                	Enable/Disable ignoring of MTU in DBD packets
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: network_type
                                
                                	Type of attached network
                                	**type**\:   :py:class:`OspfNetworkEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfNetworkEnum>`
                                
                                .. attribute:: packet_size
                                
                                	Customize size of OSPF packets upto MTU
                                	**type**\:  int
                                
                                	**range:** 576..10000
                                
                                .. attribute:: passive
                                
                                	When enabled, prevent sending HELLO packets over link
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: prefix_suppression_primary
                                
                                	Enable/Disable prefix suppression for primary addresses
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: prefix_suppression_secondary
                                
                                	Enable/Disable prefix suppression for secondary addresses
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: priority
                                
                                	Router priority for DR and BDR election
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                	**default value**\: 1
                                
                                .. attribute:: retransmit_interval
                                
                                	Time in seconds between retransmitting lost link state advertisements
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 5
                                
                                .. attribute:: security
                                
                                	Container class for security related configuration parameters
                                	**type**\:   :py:class:`Security <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Security>`
                                
                                .. attribute:: segment_routing_forwarding
                                
                                	segment\-routing forwarding configuration Applicableonly in Default VRF
                                	**type**\:   :py:class:`OspfSegmentRoutingForwardingEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRoutingForwardingEnum>`
                                
                                .. attribute:: transmit_delay
                                
                                	Number of seconds to delay transmission of LSAs
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 1
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.authentication = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication()
                                    self.authentication.parent = self
                                    self.bfd = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Bfd()
                                    self.bfd.parent = self
                                    self.cost = None
                                    self.cost_fallback = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.CostFallback()
                                    self.cost_fallback.parent = self
                                    self.database_filter = None
                                    self.dead_interval_minimal = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.DeadIntervalMinimal()
                                    self.dead_interval_minimal.parent = self
                                    self.demand_circuit = None
                                    self.distribute_list = None
                                    self.fast_reroute = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute()
                                    self.fast_reroute.parent = self
                                    self.flood_reduction = None
                                    self.hello_interval = None
                                    self.ldp_auto_config = None
                                    self.ldp_sync = None
                                    self.ldp_sync_igp_shortcuts = None
                                    self.link_down_fast_detect = None
                                    self.loopback_stub_network = None
                                    self.mtu_ignore = None
                                    self.network_type = None
                                    self.packet_size = None
                                    self.passive = None
                                    self.prefix_suppression_primary = None
                                    self.prefix_suppression_secondary = None
                                    self.priority = None
                                    self.retransmit_interval = None
                                    self.security = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Security()
                                    self.security.parent = self
                                    self.segment_routing_forwarding = None
                                    self.transmit_delay = None


                                class DistributeList(object):
                                    """
                                    Filter networks intalled to RIB (disable as ACL
                                    name means filtering is disabled)
                                    
                                    .. attribute:: access_list_name
                                    
                                    	Access Control List name
                                    	**type**\:  str
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route Policy name
                                    	**type**\:  str
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.access_list_name = None
                                        self.route_policy_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:distribute-list'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.access_list_name is not None:
                                            return True

                                        if self.route_policy_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.DistributeList']['meta_info']


                                class Bfd(object):
                                    """
                                    BFD configuration
                                    
                                    .. attribute:: detection_multiplier
                                    
                                    	Detection multiplier for BFD sessions created by OSPF
                                    	**type**\:  int
                                    
                                    	**range:** 2..50
                                    
                                    .. attribute:: fast_detect_mode
                                    
                                    	 use of Bidirectional Forwarding Detection
                                    	**type**\:   :py:class:`BfdEnableModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.BfdEnableModeEnum>`
                                    
                                    .. attribute:: interval
                                    
                                    	Hello interval for BFD sessions created by OSPF
                                    	**type**\:  int
                                    
                                    	**range:** 3..30000
                                    
                                    	**units**\: millisecond
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.detection_multiplier = None
                                        self.fast_detect_mode = None
                                        self.interval = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:bfd'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.detection_multiplier is not None:
                                            return True

                                        if self.fast_detect_mode is not None:
                                            return True

                                        if self.interval is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Bfd']['meta_info']


                                class Authentication(object):
                                    """
                                    Authentication
                                    
                                    .. attribute:: key
                                    
                                    	Authentication key configuration
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: message_digest_keies
                                    
                                    	Message digest authentication password (key) configurations, first 16 chars used
                                    	**type**\:   :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies>`
                                    
                                    .. attribute:: type
                                    
                                    	Authentication type
                                    	**type**\:   :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication.Type>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.key = None
                                        self.message_digest_keies = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies()
                                        self.message_digest_keies.parent = self
                                        self.type = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication.Type()
                                        self.type.parent = self


                                    class Type(object):
                                        """
                                        Authentication type
                                        
                                        .. attribute:: authen_type
                                        
                                        	Authentication type code 
                                        	**type**\:   :py:class:`OspfAuthenticationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthenticationEnum>`
                                        
                                        .. attribute:: keychain_authen_type
                                        
                                        	Keychain authentication type
                                        	**type**\:   :py:class:`OspfKeychainAuthEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuthEnum>`
                                        
                                        .. attribute:: keychain_name
                                        
                                        	Keychain name
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.authen_type = None
                                            self.keychain_authen_type = None
                                            self.keychain_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:type'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.authen_type is not None:
                                                return True

                                            if self.keychain_authen_type is not None:
                                                return True

                                            if self.keychain_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication.Type']['meta_info']


                                    class MessageDigestKeies(object):
                                        """
                                        Message digest authentication password (key)
                                        configurations, first 16 chars used
                                        
                                        .. attribute:: message_digest_key
                                        
                                        	Message digest authentication password (key) configuration
                                        	**type**\: list of    :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.message_digest_key = YList()
                                            self.message_digest_key.parent = self
                                            self.message_digest_key.name = 'message_digest_key'


                                        class MessageDigestKey(object):
                                            """
                                            Message digest authentication password (key)
                                            configuration
                                            
                                            .. attribute:: key_id  <key>
                                            
                                            	Key ID
                                            	**type**\:  int
                                            
                                            	**range:** 1..255
                                            
                                            .. attribute:: password
                                            
                                            	Password
                                            	**type**\:  str
                                            
                                            	**pattern:** (!.+)\|([^!].+)
                                            
                                            	**mandatory**\: True
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.key_id = None
                                                self.password = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.key_id is None:
                                                    raise YPYModelError('Key property key_id is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-key[Cisco-IOS-XR-ipv4-ospf-cfg:key-id = ' + str(self.key_id) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.key_id is not None:
                                                    return True

                                                if self.password is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies.MessageDigestKey']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-keies'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.message_digest_key is not None:
                                                for child_ref in self.message_digest_key:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:authentication'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.key is not None:
                                            return True

                                        if self.message_digest_keies is not None and self.message_digest_keies._has_data():
                                            return True

                                        if self.type is not None and self.type._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Authentication']['meta_info']


                                class Security(object):
                                    """
                                    Container class for security related
                                    configuration parameters
                                    
                                    .. attribute:: ttl
                                    
                                    	Enabling turns on TTL security
                                    	**type**\:   :py:class:`Ttl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Security.Ttl>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.ttl = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Security.Ttl()
                                        self.ttl.parent = self


                                    class Ttl(object):
                                        """
                                        Enabling turns on TTL security
                                        
                                        .. attribute:: enable
                                        
                                        	Enable TTL security
                                        	**type**\:  bool
                                        
                                        .. attribute:: hop_count
                                        
                                        	Hop count
                                        	**type**\:  int
                                        
                                        	**range:** 1..254
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.enable = None
                                            self.hop_count = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:ttl'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.enable is not None:
                                                return True

                                            if self.hop_count is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Security.Ttl']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:security'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.ttl is not None and self.ttl._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.Security']['meta_info']


                                class DeadIntervalMinimal(object):
                                    """
                                    Interval after which a neighbor is declared dead
                                    
                                    .. attribute:: interval
                                    
                                    	Interval size in seconds after which a neighbor is declared dead
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: multiplier
                                    
                                    	Number of Hellos in one second
                                    	**type**\:  int
                                    
                                    	**range:** 3..20
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.interval = None
                                        self.multiplier = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:dead-interval-minimal'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.interval is not None:
                                            return True

                                        if self.multiplier is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.DeadIntervalMinimal']['meta_info']


                                class FastReroute(object):
                                    """
                                    Fast\-reroute configuration
                                    
                                    .. attribute:: fast_reroute_enable
                                    
                                    	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                    	**type**\:   :py:class:`OspfFastRerouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteEnum>`
                                    
                                    .. attribute:: per_link
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink>`
                                    
                                    .. attribute:: per_prefix
                                    
                                    	Fast\-reroute per\-prefix global configuration
                                    	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.fast_reroute_enable = None
                                        self.per_link = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink()
                                        self.per_link.parent = self
                                        self.per_prefix = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix()
                                        self.per_prefix.parent = self


                                    class PerLink(object):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                        	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces>`
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self.fast_reroute_use_candidate_only = None


                                        class CandidateInterfaces(object):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.candidate_interface = YList()
                                                self.candidate_interface.parent = self
                                                self.candidate_interface.name = 'candidate_interface'


                                            class CandidateInterface(object):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.interface_name = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.interface_name is None:
                                                        raise YPYModelError('Key property interface_name is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.interface_name is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.candidate_interface is not None:
                                                    for child_ref in self.candidate_interface:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces']['meta_info']


                                        class ExcludeInterfaces(object):
                                            """
                                            Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup or UCMP
                                            	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.exclude_interface = YList()
                                                self.exclude_interface.parent = self
                                                self.exclude_interface.name = 'exclude_interface'


                                            class ExcludeInterface(object):
                                                """
                                                Exclude an interface from becoming a backup or
                                                UCMP
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.interface_name = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.interface_name is None:
                                                        raise YPYModelError('Key property interface_name is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.interface_name is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.exclude_interface is not None:
                                                    for child_ref in self.exclude_interface:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-link'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                                return True

                                            if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                                return True

                                            if self.fast_reroute_use_candidate_only is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink']['meta_info']


                                    class PerPrefix(object):
                                        """
                                        Fast\-reroute per\-prefix global configuration
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                        	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: remote_lfa
                                        
                                        	Remote LFA configuration
                                        	**type**\:   :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.RemoteLfa>`
                                        
                                        .. attribute:: tiebreakers
                                        
                                        	Fast\-reroute tiebreakers configurations
                                        	**type**\:   :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers>`
                                        
                                        .. attribute:: topology_independent_lfa
                                        
                                        	Topology Independet LFA configuration
                                        	**type**\:  bool
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self.fast_reroute_use_candidate_only = None
                                            self.remote_lfa = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.RemoteLfa()
                                            self.remote_lfa.parent = self
                                            self.tiebreakers = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers()
                                            self.tiebreakers.parent = self
                                            self.topology_independent_lfa = None


                                        class RemoteLfa(object):
                                            """
                                            Remote LFA configuration
                                            
                                            .. attribute:: maximum_cost
                                            
                                            	Maximum path cost to remote LFA
                                            	**type**\:  int
                                            
                                            	**range:** 1..4294967295
                                            
                                            .. attribute:: tunnel
                                            
                                            	Enable/Disable remote LFA computation
                                            	**type**\:   :py:class:`OspfFrrRlfaTunnelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFrrRlfaTunnelEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.maximum_cost = None
                                                self.tunnel = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:remote-lfa'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.maximum_cost is not None:
                                                    return True

                                                if self.tunnel is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.RemoteLfa']['meta_info']


                                        class Tiebreakers(object):
                                            """
                                            Fast\-reroute tiebreakers configurations
                                            
                                            .. attribute:: tiebreaker
                                            
                                            	Fast\-reroute tiebreakers configuration
                                            	**type**\: list of    :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.tiebreaker = YList()
                                                self.tiebreaker.parent = self
                                                self.tiebreaker.name = 'tiebreaker'


                                            class Tiebreaker(object):
                                                """
                                                Fast\-reroute tiebreakers configuration
                                                
                                                .. attribute:: tiebreaker_type  <key>
                                                
                                                	Tiebreaker type
                                                	**type**\:   :py:class:`OspfFastRerouteTiebreakersIntfEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakersIntfEnum>`
                                                
                                                .. attribute:: tiebreaker_index
                                                
                                                	Index value for a tiebreaker, 0 to disable
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.tiebreaker_type = None
                                                    self.tiebreaker_index = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.tiebreaker_type is None:
                                                        raise YPYModelError('Key property tiebreaker_type is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker[Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker-type = ' + str(self.tiebreaker_type) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.tiebreaker_type is not None:
                                                        return True

                                                    if self.tiebreaker_index is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreakers'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.tiebreaker is not None:
                                                    for child_ref in self.tiebreaker:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers']['meta_info']


                                        class CandidateInterfaces(object):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.candidate_interface = YList()
                                                self.candidate_interface.parent = self
                                                self.candidate_interface.name = 'candidate_interface'


                                            class CandidateInterface(object):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.interface_name = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.interface_name is None:
                                                        raise YPYModelError('Key property interface_name is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.interface_name is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.candidate_interface is not None:
                                                    for child_ref in self.candidate_interface:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces']['meta_info']


                                        class ExcludeInterfaces(object):
                                            """
                                            Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup or UCMP
                                            	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.exclude_interface = YList()
                                                self.exclude_interface.parent = self
                                                self.exclude_interface.name = 'exclude_interface'


                                            class ExcludeInterface(object):
                                                """
                                                Exclude an interface from becoming a backup or
                                                UCMP
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.interface_name = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.interface_name is None:
                                                        raise YPYModelError('Key property interface_name is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.interface_name is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.exclude_interface is not None:
                                                    for child_ref in self.exclude_interface:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-prefix'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                                return True

                                            if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                                return True

                                            if self.fast_reroute_use_candidate_only is not None:
                                                return True

                                            if self.remote_lfa is not None and self.remote_lfa._has_data():
                                                return True

                                            if self.tiebreakers is not None and self.tiebreakers._has_data():
                                                return True

                                            if self.topology_independent_lfa is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:fast-reroute'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.fast_reroute_enable is not None:
                                            return True

                                        if self.per_link is not None and self.per_link._has_data():
                                            return True

                                        if self.per_prefix is not None and self.per_prefix._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute']['meta_info']


                                class CostFallback(object):
                                    """
                                    Interface fallback cost
                                    
                                    .. attribute:: cost
                                    
                                    	Fallback cost of link
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: threshold
                                    
                                    	Bandwidth threshold
                                    	**type**\:  int
                                    
                                    	**range:** 1..4294967
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.cost = None
                                        self.threshold = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:cost-fallback'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.cost is not None:
                                            return True

                                        if self.threshold is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.CostFallback']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:area-scope'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.authentication is not None and self.authentication._has_data():
                                        return True

                                    if self.bfd is not None and self.bfd._has_data():
                                        return True

                                    if self.cost is not None:
                                        return True

                                    if self.cost_fallback is not None and self.cost_fallback._has_data():
                                        return True

                                    if self.database_filter is not None:
                                        return True

                                    if self.dead_interval_minimal is not None and self.dead_interval_minimal._has_data():
                                        return True

                                    if self.demand_circuit is not None:
                                        return True

                                    if self.distribute_list is not None and self.distribute_list._has_data():
                                        return True

                                    if self.fast_reroute is not None and self.fast_reroute._has_data():
                                        return True

                                    if self.flood_reduction is not None:
                                        return True

                                    if self.hello_interval is not None:
                                        return True

                                    if self.ldp_auto_config is not None:
                                        return True

                                    if self.ldp_sync is not None:
                                        return True

                                    if self.ldp_sync_igp_shortcuts is not None:
                                        return True

                                    if self.link_down_fast_detect is not None:
                                        return True

                                    if self.loopback_stub_network is not None:
                                        return True

                                    if self.mtu_ignore is not None:
                                        return True

                                    if self.network_type is not None:
                                        return True

                                    if self.packet_size is not None:
                                        return True

                                    if self.passive is not None:
                                        return True

                                    if self.prefix_suppression_primary is not None:
                                        return True

                                    if self.prefix_suppression_secondary is not None:
                                        return True

                                    if self.priority is not None:
                                        return True

                                    if self.retransmit_interval is not None:
                                        return True

                                    if self.security is not None and self.security._has_data():
                                        return True

                                    if self.segment_routing_forwarding is not None:
                                        return True

                                    if self.transmit_delay is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope']['meta_info']


                            class NameScopes(object):
                                """
                                Name scope configurations
                                
                                .. attribute:: name_scope
                                
                                	Name scope configuration
                                	**type**\: list of    :py:class:`NameScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.name_scope = YList()
                                    self.name_scope.parent = self
                                    self.name_scope.name = 'name_scope'


                                class NameScope(object):
                                    """
                                    Name scope configuration
                                    
                                    .. attribute:: interface_name  <key>
                                    
                                    	Name of Interface to configure
                                    	**type**\:  str
                                    
                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                    
                                    .. attribute:: authentication
                                    
                                    	Authentication
                                    	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication>`
                                    
                                    .. attribute:: bfd
                                    
                                    	BFD configuration
                                    	**type**\:   :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Bfd>`
                                    
                                    .. attribute:: cost
                                    
                                    	Interface cost
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: cost_fallback
                                    
                                    	Interface fallback cost
                                    	**type**\:   :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.CostFallback>`
                                    
                                    .. attribute:: database_filter
                                    
                                    	Filter OSPF LSA during synchronization and flooding
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: dead_interval_minimal
                                    
                                    	Interval after which a neighbor is declared dead
                                    	**type**\:   :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DeadIntervalMinimal>`
                                    
                                    .. attribute:: demand_circuit
                                    
                                    	Enable/Disable OSPF demand circuit
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: distribute_list
                                    
                                    	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                                    	**type**\:   :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DistributeList>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: fast_reroute
                                    
                                    	Fast\-reroute configuration
                                    	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute>`
                                    
                                    .. attribute:: flood_reduction
                                    
                                    	Enable/Disable OSPF flood reduction
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Interval between HELLO packets in seconds
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: ldp_auto_config
                                    
                                    	Enable MPLS LDP Auto Config
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: ldp_sync
                                    
                                    	Enable/Disable MPLS LDP sync
                                    	**type**\:  bool
                                    
                                    .. attribute:: ldp_sync_igp_shortcuts
                                    
                                    	Enable/Disable MPLS LDP sync for igp\-shortcuts
                                    	**type**\:  bool
                                    
                                    .. attribute:: link_down_fast_detect
                                    
                                    	Enable/Disable registration for early interface down notifications
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: loopback_stub_network
                                    
                                    	Enable/Disable advertising loopback as a stub network
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: mtu_ignore
                                    
                                    	Enable/Disable ignoring of MTU in DBD packets
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: neighbors
                                    
                                    	Neighbor router configuration information
                                    	**type**\:   :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors>`
                                    
                                    .. attribute:: network_type
                                    
                                    	Type of attached network
                                    	**type**\:   :py:class:`OspfNetworkEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfNetworkEnum>`
                                    
                                    .. attribute:: packet_size
                                    
                                    	Customize size of OSPF packets upto MTU
                                    	**type**\:  int
                                    
                                    	**range:** 576..10000
                                    
                                    .. attribute:: passive
                                    
                                    	When enabled, prevent sending HELLO packets over link
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: prefix_sid
                                    
                                    	Prefix SID
                                    	**type**\:   :py:class:`PrefixSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.PrefixSid>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: prefix_sid_strict
                                    
                                    	Strict Prefix SID
                                    	**type**\:   :py:class:`PrefixSidStrict <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.PrefixSidStrict>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: prefix_suppression_primary
                                    
                                    	Enable/Disable prefix suppression for primary addresses
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: prefix_suppression_secondary
                                    
                                    	Enable/Disable prefix suppression for secondary addresses
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: priority
                                    
                                    	Router priority for DR and BDR election
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    	**default value**\: 1
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Time in seconds between retransmitting lost link state advertisements
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 5
                                    
                                    .. attribute:: running
                                    
                                    	Enable routing on an IP network
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: security
                                    
                                    	Container class for security related configuration parameters
                                    	**type**\:   :py:class:`Security <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security>`
                                    
                                    .. attribute:: segment_routing_forwarding
                                    
                                    	segment\-routing forwarding configuration Applicableonly in Default VRF
                                    	**type**\:   :py:class:`OspfSegmentRoutingForwardingEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRoutingForwardingEnum>`
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Number of seconds to delay transmission of LSAs
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 1
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.interface_name = None
                                        self.authentication = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication()
                                        self.authentication.parent = self
                                        self.bfd = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Bfd()
                                        self.bfd.parent = self
                                        self.cost = None
                                        self.cost_fallback = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.CostFallback()
                                        self.cost_fallback.parent = self
                                        self.database_filter = None
                                        self.dead_interval_minimal = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DeadIntervalMinimal()
                                        self.dead_interval_minimal.parent = self
                                        self.demand_circuit = None
                                        self.distribute_list = None
                                        self.fast_reroute = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute()
                                        self.fast_reroute.parent = self
                                        self.flood_reduction = None
                                        self.hello_interval = None
                                        self.ldp_auto_config = None
                                        self.ldp_sync = None
                                        self.ldp_sync_igp_shortcuts = None
                                        self.link_down_fast_detect = None
                                        self.loopback_stub_network = None
                                        self.mtu_ignore = None
                                        self.neighbors = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors()
                                        self.neighbors.parent = self
                                        self.network_type = None
                                        self.packet_size = None
                                        self.passive = None
                                        self.prefix_sid = None
                                        self.prefix_sid_strict = None
                                        self.prefix_suppression_primary = None
                                        self.prefix_suppression_secondary = None
                                        self.priority = None
                                        self.retransmit_interval = None
                                        self.running = None
                                        self.security = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security()
                                        self.security.parent = self
                                        self.segment_routing_forwarding = None
                                        self.transmit_delay = None


                                    class PrefixSid(object):
                                        """
                                        Prefix SID
                                        
                                        .. attribute:: explicit_null
                                        
                                        	Force Penultimate Hop To Send Explicit\-Null Label
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: n_flag_clear
                                        
                                        	Not a node SID
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: sid_value
                                        
                                        	SID value
                                        	**type**\:  int
                                        
                                        	**range:** 0..1048575
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: type
                                        
                                        	OSPF SID Type
                                        	**type**\:   :py:class:`OspfSidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSidEnum>`
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: _is_presence
                                        
                                        	Is present if this instance represents presence container else not
                                        	**type**\: bool
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self._is_presence = True
                                            self.explicit_null = None
                                            self.n_flag_clear = None
                                            self.sid_value = None
                                            self.type = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:prefix-sid'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self._is_presence:
                                                return True
                                            if self.explicit_null is not None:
                                                return True

                                            if self.n_flag_clear is not None:
                                                return True

                                            if self.sid_value is not None:
                                                return True

                                            if self.type is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.PrefixSid']['meta_info']


                                    class PrefixSidStrict(object):
                                        """
                                        Strict Prefix SID
                                        
                                        .. attribute:: explicit_null
                                        
                                        	Force Penultimate Hop To Send Explicit\-Null Label
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: n_flag_clear
                                        
                                        	Not a node SID
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: sid_value
                                        
                                        	SID value
                                        	**type**\:  int
                                        
                                        	**range:** 0..1048575
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: type
                                        
                                        	OSPF SID Type
                                        	**type**\:   :py:class:`OspfSidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSidEnum>`
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: _is_presence
                                        
                                        	Is present if this instance represents presence container else not
                                        	**type**\: bool
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self._is_presence = True
                                            self.explicit_null = None
                                            self.n_flag_clear = None
                                            self.sid_value = None
                                            self.type = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:prefix-sid-strict'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self._is_presence:
                                                return True
                                            if self.explicit_null is not None:
                                                return True

                                            if self.n_flag_clear is not None:
                                                return True

                                            if self.sid_value is not None:
                                                return True

                                            if self.type is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.PrefixSidStrict']['meta_info']


                                    class DistributeList(object):
                                        """
                                        Filter networks intalled to RIB (disable as ACL
                                        name means filtering is disabled)
                                        
                                        .. attribute:: access_list_name
                                        
                                        	Access Control List name
                                        	**type**\:  str
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route Policy name
                                        	**type**\:  str
                                        
                                        .. attribute:: _is_presence
                                        
                                        	Is present if this instance represents presence container else not
                                        	**type**\: bool
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self._is_presence = True
                                            self.access_list_name = None
                                            self.route_policy_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:distribute-list'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self._is_presence:
                                                return True
                                            if self.access_list_name is not None:
                                                return True

                                            if self.route_policy_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DistributeList']['meta_info']


                                    class Bfd(object):
                                        """
                                        BFD configuration
                                        
                                        .. attribute:: detection_multiplier
                                        
                                        	Detection multiplier for BFD sessions created by OSPF
                                        	**type**\:  int
                                        
                                        	**range:** 2..50
                                        
                                        .. attribute:: fast_detect_mode
                                        
                                        	 use of Bidirectional Forwarding Detection
                                        	**type**\:   :py:class:`BfdEnableModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.BfdEnableModeEnum>`
                                        
                                        .. attribute:: interval
                                        
                                        	Hello interval for BFD sessions created by OSPF
                                        	**type**\:  int
                                        
                                        	**range:** 3..30000
                                        
                                        	**units**\: millisecond
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.detection_multiplier = None
                                            self.fast_detect_mode = None
                                            self.interval = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:bfd'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.detection_multiplier is not None:
                                                return True

                                            if self.fast_detect_mode is not None:
                                                return True

                                            if self.interval is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Bfd']['meta_info']


                                    class Authentication(object):
                                        """
                                        Authentication
                                        
                                        .. attribute:: key
                                        
                                        	Authentication key configuration
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: message_digest_keies
                                        
                                        	Message digest authentication password (key) configurations, first 16 chars used
                                        	**type**\:   :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies>`
                                        
                                        .. attribute:: type
                                        
                                        	Authentication type
                                        	**type**\:   :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.Type>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.key = None
                                            self.message_digest_keies = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies()
                                            self.message_digest_keies.parent = self
                                            self.type = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.Type()
                                            self.type.parent = self


                                        class Type(object):
                                            """
                                            Authentication type
                                            
                                            .. attribute:: authen_type
                                            
                                            	Authentication type code 
                                            	**type**\:   :py:class:`OspfAuthenticationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthenticationEnum>`
                                            
                                            .. attribute:: keychain_authen_type
                                            
                                            	Keychain authentication type
                                            	**type**\:   :py:class:`OspfKeychainAuthEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuthEnum>`
                                            
                                            .. attribute:: keychain_name
                                            
                                            	Keychain name
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.authen_type = None
                                                self.keychain_authen_type = None
                                                self.keychain_name = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:type'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.authen_type is not None:
                                                    return True

                                                if self.keychain_authen_type is not None:
                                                    return True

                                                if self.keychain_name is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.Type']['meta_info']


                                        class MessageDigestKeies(object):
                                            """
                                            Message digest authentication password (key)
                                            configurations, first 16 chars used
                                            
                                            .. attribute:: message_digest_key
                                            
                                            	Message digest authentication password (key) configuration
                                            	**type**\: list of    :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.message_digest_key = YList()
                                                self.message_digest_key.parent = self
                                                self.message_digest_key.name = 'message_digest_key'


                                            class MessageDigestKey(object):
                                                """
                                                Message digest authentication password (key)
                                                configuration
                                                
                                                .. attribute:: key_id  <key>
                                                
                                                	Key ID
                                                	**type**\:  int
                                                
                                                	**range:** 1..255
                                                
                                                .. attribute:: password
                                                
                                                	Password
                                                	**type**\:  str
                                                
                                                	**pattern:** (!.+)\|([^!].+)
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.key_id = None
                                                    self.password = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.key_id is None:
                                                        raise YPYModelError('Key property key_id is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-key[Cisco-IOS-XR-ipv4-ospf-cfg:key-id = ' + str(self.key_id) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.key_id is not None:
                                                        return True

                                                    if self.password is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies.MessageDigestKey']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-keies'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.message_digest_key is not None:
                                                    for child_ref in self.message_digest_key:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:authentication'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.key is not None:
                                                return True

                                            if self.message_digest_keies is not None and self.message_digest_keies._has_data():
                                                return True

                                            if self.type is not None and self.type._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication']['meta_info']


                                    class Security(object):
                                        """
                                        Container class for security related
                                        configuration parameters
                                        
                                        .. attribute:: ttl
                                        
                                        	Enabling turns on TTL security
                                        	**type**\:   :py:class:`Ttl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security.Ttl>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.ttl = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security.Ttl()
                                            self.ttl.parent = self


                                        class Ttl(object):
                                            """
                                            Enabling turns on TTL security
                                            
                                            .. attribute:: enable
                                            
                                            	Enable TTL security
                                            	**type**\:  bool
                                            
                                            .. attribute:: hop_count
                                            
                                            	Hop count
                                            	**type**\:  int
                                            
                                            	**range:** 1..254
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.enable = None
                                                self.hop_count = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:ttl'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.enable is not None:
                                                    return True

                                                if self.hop_count is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security.Ttl']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:security'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.ttl is not None and self.ttl._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security']['meta_info']


                                    class Neighbors(object):
                                        """
                                        Neighbor router configuration information
                                        
                                        .. attribute:: neighbor
                                        
                                        	Router configuration information for a particular neighbor
                                        	**type**\: list of    :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors.Neighbor>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.neighbor = YList()
                                            self.neighbor.parent = self
                                            self.neighbor.name = 'neighbor'


                                        class Neighbor(object):
                                            """
                                            Router configuration information for a
                                            particular neighbor
                                            
                                            .. attribute:: neighbor_address  <key>
                                            
                                            	Neighbor IP address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: cost
                                            
                                            	OSPF cost for point\-to\-multipoint neighbor
                                            	**type**\:  int
                                            
                                            	**range:** 1..65535
                                            
                                            	**default value**\: 1
                                            
                                            .. attribute:: database_filter
                                            
                                            	Database filter\: Filter OSPF LSA during synchronization and flooding for point\-to\-multipoint
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: poll_interval
                                            
                                            	OSPF dead router poll\-interval in seconds
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 40
                                            
                                            .. attribute:: priority
                                            
                                            	OSPF priority of non\-broadcast neighbor
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            	**default value**\: 0
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.neighbor_address = None
                                                self.cost = None
                                                self.database_filter = None
                                                self.poll_interval = None
                                                self.priority = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.neighbor_address is None:
                                                    raise YPYModelError('Key property neighbor_address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:neighbor[Cisco-IOS-XR-ipv4-ospf-cfg:neighbor-address = ' + str(self.neighbor_address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.cost is not None:
                                                    return True

                                                if self.database_filter is not None:
                                                    return True

                                                if self.poll_interval is not None:
                                                    return True

                                                if self.priority is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors.Neighbor']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:neighbors'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.neighbor is not None:
                                                for child_ref in self.neighbor:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors']['meta_info']


                                    class DeadIntervalMinimal(object):
                                        """
                                        Interval after which a neighbor is declared dead
                                        
                                        .. attribute:: interval
                                        
                                        	Interval size in seconds after which a neighbor is declared dead
                                        	**type**\:  int
                                        
                                        	**range:** 1..65535
                                        
                                        	**units**\: second
                                        
                                        .. attribute:: multiplier
                                        
                                        	Number of Hellos in one second
                                        	**type**\:  int
                                        
                                        	**range:** 3..20
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.interval = None
                                            self.multiplier = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:dead-interval-minimal'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.interval is not None:
                                                return True

                                            if self.multiplier is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DeadIntervalMinimal']['meta_info']


                                    class FastReroute(object):
                                        """
                                        Fast\-reroute configuration
                                        
                                        .. attribute:: fast_reroute_enable
                                        
                                        	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                        	**type**\:   :py:class:`OspfFastRerouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteEnum>`
                                        
                                        .. attribute:: per_link
                                        
                                        	Fast\-reroute per\-link configuration
                                        	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink>`
                                        
                                        .. attribute:: per_prefix
                                        
                                        	Fast\-reroute per\-prefix global configuration
                                        	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.fast_reroute_enable = None
                                            self.per_link = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink()
                                            self.per_link.parent = self
                                            self.per_prefix = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix()
                                            self.per_prefix.parent = self


                                        class PerLink(object):
                                            """
                                            Fast\-reroute per\-link configuration
                                            
                                            .. attribute:: candidate_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                            	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces>`
                                            
                                            .. attribute:: exclude_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                            	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces>`
                                            
                                            .. attribute:: fast_reroute_use_candidate_only
                                            
                                            	Use only interfaces on the candidate list as a backup path
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces()
                                                self.candidate_interfaces.parent = self
                                                self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces()
                                                self.exclude_interfaces.parent = self
                                                self.fast_reroute_use_candidate_only = None


                                            class CandidateInterfaces(object):
                                                """
                                                Fast\-reroute per\-link/per\-prefix candidate
                                                interface configuration
                                                
                                                .. attribute:: candidate_interface
                                                
                                                	Candidate backup interface
                                                	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.candidate_interface = YList()
                                                    self.candidate_interface.parent = self
                                                    self.candidate_interface.name = 'candidate_interface'


                                                class CandidateInterface(object):
                                                    """
                                                    Candidate backup interface
                                                    
                                                    .. attribute:: interface_name  <key>
                                                    
                                                    	Interface
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-01-02'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.interface_name = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                                        if self.interface_name is None:
                                                            raise YPYModelError('Key property interface_name is None')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.interface_name is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.candidate_interface is not None:
                                                        for child_ref in self.candidate_interface:
                                                            if child_ref._has_data():
                                                                return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces']['meta_info']


                                            class ExcludeInterfaces(object):
                                                """
                                                Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                                interface configuration
                                                
                                                .. attribute:: exclude_interface
                                                
                                                	Exclude an interface from becoming a backup or UCMP
                                                	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.exclude_interface = YList()
                                                    self.exclude_interface.parent = self
                                                    self.exclude_interface.name = 'exclude_interface'


                                                class ExcludeInterface(object):
                                                    """
                                                    Exclude an interface from becoming a backup or
                                                    UCMP
                                                    
                                                    .. attribute:: interface_name  <key>
                                                    
                                                    	Interface
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-01-02'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.interface_name = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                                        if self.interface_name is None:
                                                            raise YPYModelError('Key property interface_name is None')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.interface_name is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.exclude_interface is not None:
                                                        for child_ref in self.exclude_interface:
                                                            if child_ref._has_data():
                                                                return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-link'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                                    return True

                                                if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                                    return True

                                                if self.fast_reroute_use_candidate_only is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink']['meta_info']


                                        class PerPrefix(object):
                                            """
                                            Fast\-reroute per\-prefix global configuration
                                            
                                            .. attribute:: candidate_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                            	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                            
                                            .. attribute:: exclude_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                            	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                            
                                            .. attribute:: fast_reroute_use_candidate_only
                                            
                                            	Use only interfaces on the candidate list as a backup path
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: remote_lfa
                                            
                                            	Remote LFA configuration
                                            	**type**\:   :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa>`
                                            
                                            .. attribute:: tiebreakers
                                            
                                            	Fast\-reroute tiebreakers configurations
                                            	**type**\:   :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers>`
                                            
                                            .. attribute:: topology_independent_lfa
                                            
                                            	Topology Independet LFA configuration
                                            	**type**\:  bool
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces()
                                                self.candidate_interfaces.parent = self
                                                self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                                self.exclude_interfaces.parent = self
                                                self.fast_reroute_use_candidate_only = None
                                                self.remote_lfa = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa()
                                                self.remote_lfa.parent = self
                                                self.tiebreakers = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers()
                                                self.tiebreakers.parent = self
                                                self.topology_independent_lfa = None


                                            class RemoteLfa(object):
                                                """
                                                Remote LFA configuration
                                                
                                                .. attribute:: maximum_cost
                                                
                                                	Maximum path cost to remote LFA
                                                	**type**\:  int
                                                
                                                	**range:** 1..4294967295
                                                
                                                .. attribute:: tunnel
                                                
                                                	Enable/Disable remote LFA computation
                                                	**type**\:   :py:class:`OspfFrrRlfaTunnelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFrrRlfaTunnelEnum>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.maximum_cost = None
                                                    self.tunnel = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:remote-lfa'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.maximum_cost is not None:
                                                        return True

                                                    if self.tunnel is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa']['meta_info']


                                            class Tiebreakers(object):
                                                """
                                                Fast\-reroute tiebreakers configurations
                                                
                                                .. attribute:: tiebreaker
                                                
                                                	Fast\-reroute tiebreakers configuration
                                                	**type**\: list of    :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.tiebreaker = YList()
                                                    self.tiebreaker.parent = self
                                                    self.tiebreaker.name = 'tiebreaker'


                                                class Tiebreaker(object):
                                                    """
                                                    Fast\-reroute tiebreakers configuration
                                                    
                                                    .. attribute:: tiebreaker_type  <key>
                                                    
                                                    	Tiebreaker type
                                                    	**type**\:   :py:class:`OspfFastRerouteTiebreakersIntfEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakersIntfEnum>`
                                                    
                                                    .. attribute:: tiebreaker_index
                                                    
                                                    	Index value for a tiebreaker, 0 to disable
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..255
                                                    
                                                    	**mandatory**\: True
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-01-02'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.tiebreaker_type = None
                                                        self.tiebreaker_index = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                                        if self.tiebreaker_type is None:
                                                            raise YPYModelError('Key property tiebreaker_type is None')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker[Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker-type = ' + str(self.tiebreaker_type) + ']'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.tiebreaker_type is not None:
                                                            return True

                                                        if self.tiebreaker_index is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreakers'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.tiebreaker is not None:
                                                        for child_ref in self.tiebreaker:
                                                            if child_ref._has_data():
                                                                return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers']['meta_info']


                                            class CandidateInterfaces(object):
                                                """
                                                Fast\-reroute per\-link/per\-prefix candidate
                                                interface configuration
                                                
                                                .. attribute:: candidate_interface
                                                
                                                	Candidate backup interface
                                                	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.candidate_interface = YList()
                                                    self.candidate_interface.parent = self
                                                    self.candidate_interface.name = 'candidate_interface'


                                                class CandidateInterface(object):
                                                    """
                                                    Candidate backup interface
                                                    
                                                    .. attribute:: interface_name  <key>
                                                    
                                                    	Interface
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-01-02'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.interface_name = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                                        if self.interface_name is None:
                                                            raise YPYModelError('Key property interface_name is None')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.interface_name is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.candidate_interface is not None:
                                                        for child_ref in self.candidate_interface:
                                                            if child_ref._has_data():
                                                                return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces']['meta_info']


                                            class ExcludeInterfaces(object):
                                                """
                                                Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                                interface configuration
                                                
                                                .. attribute:: exclude_interface
                                                
                                                	Exclude an interface from becoming a backup or UCMP
                                                	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.exclude_interface = YList()
                                                    self.exclude_interface.parent = self
                                                    self.exclude_interface.name = 'exclude_interface'


                                                class ExcludeInterface(object):
                                                    """
                                                    Exclude an interface from becoming a backup or
                                                    UCMP
                                                    
                                                    .. attribute:: interface_name  <key>
                                                    
                                                    	Interface
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-01-02'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.interface_name = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                                        if self.interface_name is None:
                                                            raise YPYModelError('Key property interface_name is None')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.interface_name is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.exclude_interface is not None:
                                                        for child_ref in self.exclude_interface:
                                                            if child_ref._has_data():
                                                                return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-prefix'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                                    return True

                                                if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                                    return True

                                                if self.fast_reroute_use_candidate_only is not None:
                                                    return True

                                                if self.remote_lfa is not None and self.remote_lfa._has_data():
                                                    return True

                                                if self.tiebreakers is not None and self.tiebreakers._has_data():
                                                    return True

                                                if self.topology_independent_lfa is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:fast-reroute'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.fast_reroute_enable is not None:
                                                return True

                                            if self.per_link is not None and self.per_link._has_data():
                                                return True

                                            if self.per_prefix is not None and self.per_prefix._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute']['meta_info']


                                    class CostFallback(object):
                                        """
                                        Interface fallback cost
                                        
                                        .. attribute:: cost
                                        
                                        	Fallback cost of link
                                        	**type**\:  int
                                        
                                        	**range:** 1..65535
                                        
                                        .. attribute:: threshold
                                        
                                        	Bandwidth threshold
                                        	**type**\:  int
                                        
                                        	**range:** 1..4294967
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.cost = None
                                            self.threshold = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:cost-fallback'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.cost is not None:
                                                return True

                                            if self.threshold is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope.CostFallback']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.interface_name is None:
                                            raise YPYModelError('Key property interface_name is None')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:name-scope[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.interface_name is not None:
                                            return True

                                        if self.authentication is not None and self.authentication._has_data():
                                            return True

                                        if self.bfd is not None and self.bfd._has_data():
                                            return True

                                        if self.cost is not None:
                                            return True

                                        if self.cost_fallback is not None and self.cost_fallback._has_data():
                                            return True

                                        if self.database_filter is not None:
                                            return True

                                        if self.dead_interval_minimal is not None and self.dead_interval_minimal._has_data():
                                            return True

                                        if self.demand_circuit is not None:
                                            return True

                                        if self.distribute_list is not None and self.distribute_list._has_data():
                                            return True

                                        if self.fast_reroute is not None and self.fast_reroute._has_data():
                                            return True

                                        if self.flood_reduction is not None:
                                            return True

                                        if self.hello_interval is not None:
                                            return True

                                        if self.ldp_auto_config is not None:
                                            return True

                                        if self.ldp_sync is not None:
                                            return True

                                        if self.ldp_sync_igp_shortcuts is not None:
                                            return True

                                        if self.link_down_fast_detect is not None:
                                            return True

                                        if self.loopback_stub_network is not None:
                                            return True

                                        if self.mtu_ignore is not None:
                                            return True

                                        if self.neighbors is not None and self.neighbors._has_data():
                                            return True

                                        if self.network_type is not None:
                                            return True

                                        if self.packet_size is not None:
                                            return True

                                        if self.passive is not None:
                                            return True

                                        if self.prefix_sid is not None and self.prefix_sid._has_data():
                                            return True

                                        if self.prefix_sid_strict is not None and self.prefix_sid_strict._has_data():
                                            return True

                                        if self.prefix_suppression_primary is not None:
                                            return True

                                        if self.prefix_suppression_secondary is not None:
                                            return True

                                        if self.priority is not None:
                                            return True

                                        if self.retransmit_interval is not None:
                                            return True

                                        if self.running is not None:
                                            return True

                                        if self.security is not None and self.security._has_data():
                                            return True

                                        if self.segment_routing_forwarding is not None:
                                            return True

                                        if self.transmit_delay is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes.NameScope']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:name-scopes'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.name_scope is not None:
                                        for child_ref in self.name_scope:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.NameScopes']['meta_info']


                            class MultiAreaInterfaceScopes(object):
                                """
                                Multi Area Interface scope configurations
                                
                                .. attribute:: multi_area_interface_scope
                                
                                	Multi Area Interface configuration
                                	**type**\: list of    :py:class:`MultiAreaInterfaceScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.multi_area_interface_scope = YList()
                                    self.multi_area_interface_scope.parent = self
                                    self.multi_area_interface_scope.name = 'multi_area_interface_scope'


                                class MultiAreaInterfaceScope(object):
                                    """
                                    Multi Area Interface configuration
                                    
                                    .. attribute:: interface_name  <key>
                                    
                                    	Name of Multi Area Interface to configure
                                    	**type**\:  str
                                    
                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                    
                                    .. attribute:: authentication
                                    
                                    	Authentication
                                    	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication>`
                                    
                                    .. attribute:: cost
                                    
                                    	Interface cost
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: cost_fallback
                                    
                                    	Interface fallback cost
                                    	**type**\:   :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback>`
                                    
                                    .. attribute:: database_filter
                                    
                                    	Filter OSPF LSA during synchronization and flooding
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: dead_interval_minimal
                                    
                                    	Interval after which a neighbor is declared dead
                                    	**type**\:   :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal>`
                                    
                                    .. attribute:: distribute_list
                                    
                                    	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                                    	**type**\:   :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DistributeList>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: fast_reroute
                                    
                                    	Fast\-reroute configuration
                                    	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute>`
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Interval between HELLO packets in seconds
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: mtu_ignore
                                    
                                    	Enable/Disable ignoring of MTU in DBD packets
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: neighbors
                                    
                                    	Neighbor router configuration information
                                    	**type**\:   :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors>`
                                    
                                    .. attribute:: packet_size
                                    
                                    	Customize size of OSPF packets upto MTU
                                    	**type**\:  int
                                    
                                    	**range:** 576..10000
                                    
                                    .. attribute:: passive
                                    
                                    	When enabled, prevent sending HELLO packets over link
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Time in seconds between retransmitting lost link state advertisements
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 5
                                    
                                    .. attribute:: running
                                    
                                    	Enable routing on an IP network
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Number of seconds to delay transmission of LSAs
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 1
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.interface_name = None
                                        self.authentication = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication()
                                        self.authentication.parent = self
                                        self.cost = None
                                        self.cost_fallback = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback()
                                        self.cost_fallback.parent = self
                                        self.database_filter = None
                                        self.dead_interval_minimal = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal()
                                        self.dead_interval_minimal.parent = self
                                        self.distribute_list = None
                                        self.fast_reroute = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute()
                                        self.fast_reroute.parent = self
                                        self.hello_interval = None
                                        self.mtu_ignore = None
                                        self.neighbors = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors()
                                        self.neighbors.parent = self
                                        self.packet_size = None
                                        self.passive = None
                                        self.retransmit_interval = None
                                        self.running = None
                                        self.transmit_delay = None


                                    class DistributeList(object):
                                        """
                                        Filter networks intalled to RIB (disable as ACL
                                        name means filtering is disabled)
                                        
                                        .. attribute:: access_list_name
                                        
                                        	Access Control List name
                                        	**type**\:  str
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route Policy name
                                        	**type**\:  str
                                        
                                        .. attribute:: _is_presence
                                        
                                        	Is present if this instance represents presence container else not
                                        	**type**\: bool
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self._is_presence = True
                                            self.access_list_name = None
                                            self.route_policy_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:distribute-list'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self._is_presence:
                                                return True
                                            if self.access_list_name is not None:
                                                return True

                                            if self.route_policy_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DistributeList']['meta_info']


                                    class Authentication(object):
                                        """
                                        Authentication
                                        
                                        .. attribute:: key
                                        
                                        	Authentication key configuration
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: message_digest_keies
                                        
                                        	Message digest authentication password (key) configurations, first 16 chars used
                                        	**type**\:   :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies>`
                                        
                                        .. attribute:: type
                                        
                                        	Authentication type
                                        	**type**\:   :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.key = None
                                            self.message_digest_keies = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies()
                                            self.message_digest_keies.parent = self
                                            self.type = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type()
                                            self.type.parent = self


                                        class Type(object):
                                            """
                                            Authentication type
                                            
                                            .. attribute:: authen_type
                                            
                                            	Authentication type code 
                                            	**type**\:   :py:class:`OspfAuthenticationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthenticationEnum>`
                                            
                                            .. attribute:: keychain_authen_type
                                            
                                            	Keychain authentication type
                                            	**type**\:   :py:class:`OspfKeychainAuthEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuthEnum>`
                                            
                                            .. attribute:: keychain_name
                                            
                                            	Keychain name
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.authen_type = None
                                                self.keychain_authen_type = None
                                                self.keychain_name = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:type'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.authen_type is not None:
                                                    return True

                                                if self.keychain_authen_type is not None:
                                                    return True

                                                if self.keychain_name is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type']['meta_info']


                                        class MessageDigestKeies(object):
                                            """
                                            Message digest authentication password (key)
                                            configurations, first 16 chars used
                                            
                                            .. attribute:: message_digest_key
                                            
                                            	Message digest authentication password (key) configuration
                                            	**type**\: list of    :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.message_digest_key = YList()
                                                self.message_digest_key.parent = self
                                                self.message_digest_key.name = 'message_digest_key'


                                            class MessageDigestKey(object):
                                                """
                                                Message digest authentication password (key)
                                                configuration
                                                
                                                .. attribute:: key_id  <key>
                                                
                                                	Key ID
                                                	**type**\:  int
                                                
                                                	**range:** 1..255
                                                
                                                .. attribute:: password
                                                
                                                	Password
                                                	**type**\:  str
                                                
                                                	**pattern:** (!.+)\|([^!].+)
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.key_id = None
                                                    self.password = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.key_id is None:
                                                        raise YPYModelError('Key property key_id is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-key[Cisco-IOS-XR-ipv4-ospf-cfg:key-id = ' + str(self.key_id) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.key_id is not None:
                                                        return True

                                                    if self.password is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies.MessageDigestKey']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-keies'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.message_digest_key is not None:
                                                    for child_ref in self.message_digest_key:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:authentication'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.key is not None:
                                                return True

                                            if self.message_digest_keies is not None and self.message_digest_keies._has_data():
                                                return True

                                            if self.type is not None and self.type._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication']['meta_info']


                                    class Neighbors(object):
                                        """
                                        Neighbor router configuration information
                                        
                                        .. attribute:: neighbor
                                        
                                        	Router configuration information for a particular neighbor
                                        	**type**\: list of    :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors.Neighbor>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.neighbor = YList()
                                            self.neighbor.parent = self
                                            self.neighbor.name = 'neighbor'


                                        class Neighbor(object):
                                            """
                                            Router configuration information for a
                                            particular neighbor
                                            
                                            .. attribute:: neighbor_address  <key>
                                            
                                            	Neighbor IP address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: cost
                                            
                                            	OSPF cost for point\-to\-multipoint neighbor
                                            	**type**\:  int
                                            
                                            	**range:** 1..65535
                                            
                                            	**default value**\: 1
                                            
                                            .. attribute:: database_filter
                                            
                                            	Database filter\: Filter OSPF LSA during synchronization and flooding for point\-to\-multipoint
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: poll_interval
                                            
                                            	OSPF dead router poll\-interval in seconds
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 40
                                            
                                            .. attribute:: priority
                                            
                                            	OSPF priority of non\-broadcast neighbor
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            	**default value**\: 0
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.neighbor_address = None
                                                self.cost = None
                                                self.database_filter = None
                                                self.poll_interval = None
                                                self.priority = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.neighbor_address is None:
                                                    raise YPYModelError('Key property neighbor_address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:neighbor[Cisco-IOS-XR-ipv4-ospf-cfg:neighbor-address = ' + str(self.neighbor_address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.cost is not None:
                                                    return True

                                                if self.database_filter is not None:
                                                    return True

                                                if self.poll_interval is not None:
                                                    return True

                                                if self.priority is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors.Neighbor']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:neighbors'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.neighbor is not None:
                                                for child_ref in self.neighbor:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors']['meta_info']


                                    class DeadIntervalMinimal(object):
                                        """
                                        Interval after which a neighbor is declared dead
                                        
                                        .. attribute:: interval
                                        
                                        	Interval size in seconds after which a neighbor is declared dead
                                        	**type**\:  int
                                        
                                        	**range:** 1..65535
                                        
                                        	**units**\: second
                                        
                                        .. attribute:: multiplier
                                        
                                        	Number of Hellos in one second
                                        	**type**\:  int
                                        
                                        	**range:** 3..20
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.interval = None
                                            self.multiplier = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:dead-interval-minimal'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.interval is not None:
                                                return True

                                            if self.multiplier is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal']['meta_info']


                                    class FastReroute(object):
                                        """
                                        Fast\-reroute configuration
                                        
                                        .. attribute:: fast_reroute_enable
                                        
                                        	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                        	**type**\:   :py:class:`OspfFastRerouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteEnum>`
                                        
                                        .. attribute:: per_link
                                        
                                        	Fast\-reroute per\-link configuration
                                        	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink>`
                                        
                                        .. attribute:: per_prefix
                                        
                                        	Fast\-reroute per\-prefix global configuration
                                        	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.fast_reroute_enable = None
                                            self.per_link = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink()
                                            self.per_link.parent = self
                                            self.per_prefix = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix()
                                            self.per_prefix.parent = self


                                        class PerLink(object):
                                            """
                                            Fast\-reroute per\-link configuration
                                            
                                            .. attribute:: candidate_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                            	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces>`
                                            
                                            .. attribute:: exclude_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                            	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces>`
                                            
                                            .. attribute:: fast_reroute_use_candidate_only
                                            
                                            	Use only interfaces on the candidate list as a backup path
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces()
                                                self.candidate_interfaces.parent = self
                                                self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces()
                                                self.exclude_interfaces.parent = self
                                                self.fast_reroute_use_candidate_only = None


                                            class CandidateInterfaces(object):
                                                """
                                                Fast\-reroute per\-link/per\-prefix candidate
                                                interface configuration
                                                
                                                .. attribute:: candidate_interface
                                                
                                                	Candidate backup interface
                                                	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.candidate_interface = YList()
                                                    self.candidate_interface.parent = self
                                                    self.candidate_interface.name = 'candidate_interface'


                                                class CandidateInterface(object):
                                                    """
                                                    Candidate backup interface
                                                    
                                                    .. attribute:: interface_name  <key>
                                                    
                                                    	Interface
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-01-02'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.interface_name = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                                        if self.interface_name is None:
                                                            raise YPYModelError('Key property interface_name is None')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.interface_name is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.candidate_interface is not None:
                                                        for child_ref in self.candidate_interface:
                                                            if child_ref._has_data():
                                                                return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces']['meta_info']


                                            class ExcludeInterfaces(object):
                                                """
                                                Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                                interface configuration
                                                
                                                .. attribute:: exclude_interface
                                                
                                                	Exclude an interface from becoming a backup or UCMP
                                                	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.exclude_interface = YList()
                                                    self.exclude_interface.parent = self
                                                    self.exclude_interface.name = 'exclude_interface'


                                                class ExcludeInterface(object):
                                                    """
                                                    Exclude an interface from becoming a backup or
                                                    UCMP
                                                    
                                                    .. attribute:: interface_name  <key>
                                                    
                                                    	Interface
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-01-02'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.interface_name = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                                        if self.interface_name is None:
                                                            raise YPYModelError('Key property interface_name is None')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.interface_name is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.exclude_interface is not None:
                                                        for child_ref in self.exclude_interface:
                                                            if child_ref._has_data():
                                                                return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-link'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                                    return True

                                                if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                                    return True

                                                if self.fast_reroute_use_candidate_only is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink']['meta_info']


                                        class PerPrefix(object):
                                            """
                                            Fast\-reroute per\-prefix global configuration
                                            
                                            .. attribute:: candidate_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                            	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                            
                                            .. attribute:: exclude_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                            	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                            
                                            .. attribute:: fast_reroute_use_candidate_only
                                            
                                            	Use only interfaces on the candidate list as a backup path
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: remote_lfa
                                            
                                            	Remote LFA configuration
                                            	**type**\:   :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa>`
                                            
                                            .. attribute:: tiebreakers
                                            
                                            	Fast\-reroute tiebreakers configurations
                                            	**type**\:   :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers>`
                                            
                                            .. attribute:: topology_independent_lfa
                                            
                                            	Topology Independet LFA configuration
                                            	**type**\:  bool
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces()
                                                self.candidate_interfaces.parent = self
                                                self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                                self.exclude_interfaces.parent = self
                                                self.fast_reroute_use_candidate_only = None
                                                self.remote_lfa = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa()
                                                self.remote_lfa.parent = self
                                                self.tiebreakers = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers()
                                                self.tiebreakers.parent = self
                                                self.topology_independent_lfa = None


                                            class RemoteLfa(object):
                                                """
                                                Remote LFA configuration
                                                
                                                .. attribute:: maximum_cost
                                                
                                                	Maximum path cost to remote LFA
                                                	**type**\:  int
                                                
                                                	**range:** 1..4294967295
                                                
                                                .. attribute:: tunnel
                                                
                                                	Enable/Disable remote LFA computation
                                                	**type**\:   :py:class:`OspfFrrRlfaTunnelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFrrRlfaTunnelEnum>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.maximum_cost = None
                                                    self.tunnel = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:remote-lfa'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.maximum_cost is not None:
                                                        return True

                                                    if self.tunnel is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa']['meta_info']


                                            class Tiebreakers(object):
                                                """
                                                Fast\-reroute tiebreakers configurations
                                                
                                                .. attribute:: tiebreaker
                                                
                                                	Fast\-reroute tiebreakers configuration
                                                	**type**\: list of    :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.tiebreaker = YList()
                                                    self.tiebreaker.parent = self
                                                    self.tiebreaker.name = 'tiebreaker'


                                                class Tiebreaker(object):
                                                    """
                                                    Fast\-reroute tiebreakers configuration
                                                    
                                                    .. attribute:: tiebreaker_type  <key>
                                                    
                                                    	Tiebreaker type
                                                    	**type**\:   :py:class:`OspfFastRerouteTiebreakersIntfEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakersIntfEnum>`
                                                    
                                                    .. attribute:: tiebreaker_index
                                                    
                                                    	Index value for a tiebreaker, 0 to disable
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..255
                                                    
                                                    	**mandatory**\: True
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-01-02'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.tiebreaker_type = None
                                                        self.tiebreaker_index = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                                        if self.tiebreaker_type is None:
                                                            raise YPYModelError('Key property tiebreaker_type is None')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker[Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker-type = ' + str(self.tiebreaker_type) + ']'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.tiebreaker_type is not None:
                                                            return True

                                                        if self.tiebreaker_index is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreakers'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.tiebreaker is not None:
                                                        for child_ref in self.tiebreaker:
                                                            if child_ref._has_data():
                                                                return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers']['meta_info']


                                            class CandidateInterfaces(object):
                                                """
                                                Fast\-reroute per\-link/per\-prefix candidate
                                                interface configuration
                                                
                                                .. attribute:: candidate_interface
                                                
                                                	Candidate backup interface
                                                	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.candidate_interface = YList()
                                                    self.candidate_interface.parent = self
                                                    self.candidate_interface.name = 'candidate_interface'


                                                class CandidateInterface(object):
                                                    """
                                                    Candidate backup interface
                                                    
                                                    .. attribute:: interface_name  <key>
                                                    
                                                    	Interface
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-01-02'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.interface_name = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                                        if self.interface_name is None:
                                                            raise YPYModelError('Key property interface_name is None')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.interface_name is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.candidate_interface is not None:
                                                        for child_ref in self.candidate_interface:
                                                            if child_ref._has_data():
                                                                return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces']['meta_info']


                                            class ExcludeInterfaces(object):
                                                """
                                                Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                                interface configuration
                                                
                                                .. attribute:: exclude_interface
                                                
                                                	Exclude an interface from becoming a backup or UCMP
                                                	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.exclude_interface = YList()
                                                    self.exclude_interface.parent = self
                                                    self.exclude_interface.name = 'exclude_interface'


                                                class ExcludeInterface(object):
                                                    """
                                                    Exclude an interface from becoming a backup or
                                                    UCMP
                                                    
                                                    .. attribute:: interface_name  <key>
                                                    
                                                    	Interface
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-01-02'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.interface_name = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                                        if self.interface_name is None:
                                                            raise YPYModelError('Key property interface_name is None')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.interface_name is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.exclude_interface is not None:
                                                        for child_ref in self.exclude_interface:
                                                            if child_ref._has_data():
                                                                return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-prefix'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                                    return True

                                                if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                                    return True

                                                if self.fast_reroute_use_candidate_only is not None:
                                                    return True

                                                if self.remote_lfa is not None and self.remote_lfa._has_data():
                                                    return True

                                                if self.tiebreakers is not None and self.tiebreakers._has_data():
                                                    return True

                                                if self.topology_independent_lfa is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:fast-reroute'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.fast_reroute_enable is not None:
                                                return True

                                            if self.per_link is not None and self.per_link._has_data():
                                                return True

                                            if self.per_prefix is not None and self.per_prefix._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute']['meta_info']


                                    class CostFallback(object):
                                        """
                                        Interface fallback cost
                                        
                                        .. attribute:: cost
                                        
                                        	Fallback cost of link
                                        	**type**\:  int
                                        
                                        	**range:** 1..65535
                                        
                                        .. attribute:: threshold
                                        
                                        	Bandwidth threshold
                                        	**type**\:  int
                                        
                                        	**range:** 1..4294967
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.cost = None
                                            self.threshold = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:cost-fallback'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.cost is not None:
                                                return True

                                            if self.threshold is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.interface_name is None:
                                            raise YPYModelError('Key property interface_name is None')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:multi-area-interface-scope[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.interface_name is not None:
                                            return True

                                        if self.authentication is not None and self.authentication._has_data():
                                            return True

                                        if self.cost is not None:
                                            return True

                                        if self.cost_fallback is not None and self.cost_fallback._has_data():
                                            return True

                                        if self.database_filter is not None:
                                            return True

                                        if self.dead_interval_minimal is not None and self.dead_interval_minimal._has_data():
                                            return True

                                        if self.distribute_list is not None and self.distribute_list._has_data():
                                            return True

                                        if self.fast_reroute is not None and self.fast_reroute._has_data():
                                            return True

                                        if self.hello_interval is not None:
                                            return True

                                        if self.mtu_ignore is not None:
                                            return True

                                        if self.neighbors is not None and self.neighbors._has_data():
                                            return True

                                        if self.packet_size is not None:
                                            return True

                                        if self.passive is not None:
                                            return True

                                        if self.retransmit_interval is not None:
                                            return True

                                        if self.running is not None:
                                            return True

                                        if self.transmit_delay is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:multi-area-interface-scopes'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.multi_area_interface_scope is not None:
                                        for child_ref in self.multi_area_interface_scope:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes']['meta_info']


                            class AreaRanges(object):
                                """
                                Summarize routes matching address/mask (border
                                routers only)
                                
                                .. attribute:: area_range
                                
                                	Ordering index
                                	**type**\: list of    :py:class:`AreaRange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaRanges.AreaRange>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.area_range = YList()
                                    self.area_range.parent = self
                                    self.area_range.name = 'area_range'


                                class AreaRange(object):
                                    """
                                    Ordering index
                                    
                                    .. attribute:: address  <key>
                                    
                                    	IP address to match
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: netmask  <key>
                                    
                                    	IP netmask for address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: not_advertise
                                    
                                    	Do not advertise this range
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.address = None
                                        self.netmask = None
                                        self.not_advertise = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.address is None:
                                            raise YPYModelError('Key property address is None')
                                        if self.netmask is None:
                                            raise YPYModelError('Key property netmask is None')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:area-range[Cisco-IOS-XR-ipv4-ospf-cfg:address = ' + str(self.address) + '][Cisco-IOS-XR-ipv4-ospf-cfg:netmask = ' + str(self.netmask) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.address is not None:
                                            return True

                                        if self.netmask is not None:
                                            return True

                                        if self.not_advertise is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaRanges.AreaRange']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:area-ranges'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.area_range is not None:
                                        for child_ref in self.area_range:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaRanges']['meta_info']


                            class Nssa(object):
                                """
                                Specify area as a NSSA area
                                
                                .. attribute:: default_info_originate
                                
                                	Originate Type 7 default into NSSA area
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: metric_type
                                
                                	OSPF External metric type
                                	**type**\:   :py:class:`OspfLinkStateMetricEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetricEnum>`
                                
                                	**default value**\: type2
                                
                                .. attribute:: no_redistribution
                                
                                	No redistribution into this NSSA area
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: no_summary
                                
                                	Do not send summary LSA into NSSA
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: nssa_def_metric
                                
                                	OSPF default metric
                                	**type**\:  int
                                
                                	**range:** 1..16777214
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.default_info_originate = None
                                    self.metric_type = None
                                    self.no_redistribution = None
                                    self.no_summary = None
                                    self.nssa_def_metric = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:nssa'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.default_info_originate is not None:
                                        return True

                                    if self.metric_type is not None:
                                        return True

                                    if self.no_redistribution is not None:
                                        return True

                                    if self.no_summary is not None:
                                        return True

                                    if self.nssa_def_metric is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Nssa']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.address is None:
                                    raise YPYModelError('Key property address is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:area-address[Cisco-IOS-XR-ipv4-ospf-cfg:address = ' + str(self.address) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.address is not None:
                                    return True

                                if self.area_ranges is not None and self.area_ranges._has_data():
                                    return True

                                if self.area_scope is not None and self.area_scope._has_data():
                                    return True

                                if self.default_cost is not None:
                                    return True

                                if self.external_out is not None:
                                    return True

                                if self.mpls_traffic_eng is not None:
                                    return True

                                if self.multi_area_interface_scopes is not None and self.multi_area_interface_scopes._has_data():
                                    return True

                                if self.name_scopes is not None and self.name_scopes._has_data():
                                    return True

                                if self.nssa is not None and self.nssa._has_data():
                                    return True

                                if self.route_policy_in is not None:
                                    return True

                                if self.route_policy_out is not None:
                                    return True

                                if self.running is not None:
                                    return True

                                if self.segment_routing is not None:
                                    return True

                                if self.sham_link_scopes is not None and self.sham_link_scopes._has_data():
                                    return True

                                if self.stub is not None:
                                    return True

                                if self.summary_in is not None:
                                    return True

                                if self.virtual_link_scopes is not None and self.virtual_link_scopes._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress']['meta_info']


                        class AreaAreaId(object):
                            """
                            Configuration for a particular area
                            
                            .. attribute:: area_id  <key>
                            
                            	Area ID if in integer format
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: area_ranges
                            
                            	Summarize routes matching address/mask (border routers only)
                            	**type**\:   :py:class:`AreaRanges <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaRanges>`
                            
                            .. attribute:: area_scope
                            
                            	Area scope configuration
                            	**type**\:   :py:class:`AreaScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope>`
                            
                            .. attribute:: default_cost
                            
                            	Set the summary default\-cost of a NSSA/stub area
                            	**type**\:  int
                            
                            	**range:** 1..16777215
                            
                            	**default value**\: 1
                            
                            .. attribute:: external_out
                            
                            	Enable/Disable an OSPF area to advertise intra\-area prefixes out of this area as external
                            	**type**\:  bool
                            
                            .. attribute:: mpls_traffic_eng
                            
                            	Configure an OSPF area to run MPLS Traffic Engineering
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: multi_area_interface_scopes
                            
                            	Multi Area Interface scope configurations
                            	**type**\:   :py:class:`MultiAreaInterfaceScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes>`
                            
                            .. attribute:: name_scopes
                            
                            	Name scope configurations
                            	**type**\:   :py:class:`NameScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes>`
                            
                            .. attribute:: nssa
                            
                            	Specify area as a NSSA area
                            	**type**\:   :py:class:`Nssa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Nssa>`
                            
                            .. attribute:: route_policy_in
                            
                            	Configure a route policy for inbound type\-3 lsa filtering
                            	**type**\:  str
                            
                            .. attribute:: route_policy_out
                            
                            	Configure a route policy for outbound type\-3 lsa filtering
                            	**type**\:  str
                            
                            .. attribute:: running
                            
                            	Enable routing on an IP network
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: segment_routing
                            
                            	segment\-routing configuration Applicable only in Default VRF
                            	**type**\:   :py:class:`OspfSegmentRoutingEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRoutingEnum>`
                            
                            .. attribute:: sham_link_scopes
                            
                            	Sham Link scope configurations
                            	**type**\:   :py:class:`ShamLinkScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes>`
                            
                            .. attribute:: stub
                            
                            	Specify the area as a stub area (send summary LSA stub area)
                            	**type**\:  bool
                            
                            .. attribute:: summary_in
                            
                            	Enable/Disable an OSPF area to advertise external prefixes into this area as summary
                            	**type**\:  bool
                            
                            .. attribute:: virtual_link_scopes
                            
                            	Virtual Link scope configurations
                            	**type**\:   :py:class:`VirtualLinkScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.area_id = None
                                self.area_ranges = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaRanges()
                                self.area_ranges.parent = self
                                self.area_scope = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope()
                                self.area_scope.parent = self
                                self.default_cost = None
                                self.external_out = None
                                self.mpls_traffic_eng = None
                                self.multi_area_interface_scopes = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes()
                                self.multi_area_interface_scopes.parent = self
                                self.name_scopes = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes()
                                self.name_scopes.parent = self
                                self.nssa = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Nssa()
                                self.nssa.parent = self
                                self.route_policy_in = None
                                self.route_policy_out = None
                                self.running = None
                                self.segment_routing = None
                                self.sham_link_scopes = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes()
                                self.sham_link_scopes.parent = self
                                self.stub = None
                                self.summary_in = None
                                self.virtual_link_scopes = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes()
                                self.virtual_link_scopes.parent = self


                            class VirtualLinkScopes(object):
                                """
                                Virtual Link scope configurations
                                
                                .. attribute:: virtual_link_scope
                                
                                	Virtual Link configuration
                                	**type**\: list of    :py:class:`VirtualLinkScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.virtual_link_scope = YList()
                                    self.virtual_link_scope.parent = self
                                    self.virtual_link_scope.name = 'virtual_link_scope'


                                class VirtualLinkScope(object):
                                    """
                                    Virtual Link configuration
                                    
                                    .. attribute:: address  <key>
                                    
                                    	Router ID of virtual link neighbor
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: authentication
                                    
                                    	Authentication
                                    	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication>`
                                    
                                    .. attribute:: dead_interval_minimal
                                    
                                    	Interval after which a neighbor is declared dead
                                    	**type**\:   :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal>`
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Interval between HELLO packets in seconds
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Time in seconds between retransmitting lost link state advertisements
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 5
                                    
                                    .. attribute:: running
                                    
                                    	Enable routing on an IP network
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Number of seconds to delay transmission of LSAs
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 1
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.address = None
                                        self.authentication = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication()
                                        self.authentication.parent = self
                                        self.dead_interval_minimal = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal()
                                        self.dead_interval_minimal.parent = self
                                        self.hello_interval = None
                                        self.retransmit_interval = None
                                        self.running = None
                                        self.transmit_delay = None


                                    class Authentication(object):
                                        """
                                        Authentication
                                        
                                        .. attribute:: key
                                        
                                        	Authentication key configuration
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: message_digest_keies
                                        
                                        	Message digest authentication password (key) configurations, first 16 chars used
                                        	**type**\:   :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies>`
                                        
                                        .. attribute:: type
                                        
                                        	Authentication type
                                        	**type**\:   :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.Type>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.key = None
                                            self.message_digest_keies = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies()
                                            self.message_digest_keies.parent = self
                                            self.type = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.Type()
                                            self.type.parent = self


                                        class Type(object):
                                            """
                                            Authentication type
                                            
                                            .. attribute:: authen_type
                                            
                                            	Authentication type code 
                                            	**type**\:   :py:class:`OspfAuthenticationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthenticationEnum>`
                                            
                                            .. attribute:: keychain_authen_type
                                            
                                            	Keychain authentication type
                                            	**type**\:   :py:class:`OspfKeychainAuthEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuthEnum>`
                                            
                                            .. attribute:: keychain_name
                                            
                                            	Keychain name
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.authen_type = None
                                                self.keychain_authen_type = None
                                                self.keychain_name = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:type'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.authen_type is not None:
                                                    return True

                                                if self.keychain_authen_type is not None:
                                                    return True

                                                if self.keychain_name is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.Type']['meta_info']


                                        class MessageDigestKeies(object):
                                            """
                                            Message digest authentication password (key)
                                            configurations, first 16 chars used
                                            
                                            .. attribute:: message_digest_key
                                            
                                            	Message digest authentication password (key) configuration
                                            	**type**\: list of    :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.message_digest_key = YList()
                                                self.message_digest_key.parent = self
                                                self.message_digest_key.name = 'message_digest_key'


                                            class MessageDigestKey(object):
                                                """
                                                Message digest authentication password (key)
                                                configuration
                                                
                                                .. attribute:: key_id  <key>
                                                
                                                	Key ID
                                                	**type**\:  int
                                                
                                                	**range:** 1..255
                                                
                                                .. attribute:: password
                                                
                                                	Password
                                                	**type**\:  str
                                                
                                                	**pattern:** (!.+)\|([^!].+)
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.key_id = None
                                                    self.password = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.key_id is None:
                                                        raise YPYModelError('Key property key_id is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-key[Cisco-IOS-XR-ipv4-ospf-cfg:key-id = ' + str(self.key_id) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.key_id is not None:
                                                        return True

                                                    if self.password is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies.MessageDigestKey']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-keies'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.message_digest_key is not None:
                                                    for child_ref in self.message_digest_key:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:authentication'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.key is not None:
                                                return True

                                            if self.message_digest_keies is not None and self.message_digest_keies._has_data():
                                                return True

                                            if self.type is not None and self.type._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication']['meta_info']


                                    class DeadIntervalMinimal(object):
                                        """
                                        Interval after which a neighbor is declared dead
                                        
                                        .. attribute:: interval
                                        
                                        	Interval size in seconds after which a neighbor is declared dead
                                        	**type**\:  int
                                        
                                        	**range:** 1..65535
                                        
                                        	**units**\: second
                                        
                                        .. attribute:: multiplier
                                        
                                        	Number of Hellos in one second
                                        	**type**\:  int
                                        
                                        	**range:** 3..20
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.interval = None
                                            self.multiplier = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:dead-interval-minimal'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.interval is not None:
                                                return True

                                            if self.multiplier is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.address is None:
                                            raise YPYModelError('Key property address is None')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:virtual-link-scope[Cisco-IOS-XR-ipv4-ospf-cfg:address = ' + str(self.address) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.address is not None:
                                            return True

                                        if self.authentication is not None and self.authentication._has_data():
                                            return True

                                        if self.dead_interval_minimal is not None and self.dead_interval_minimal._has_data():
                                            return True

                                        if self.hello_interval is not None:
                                            return True

                                        if self.retransmit_interval is not None:
                                            return True

                                        if self.running is not None:
                                            return True

                                        if self.transmit_delay is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:virtual-link-scopes'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.virtual_link_scope is not None:
                                        for child_ref in self.virtual_link_scope:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinkScopes']['meta_info']


                            class ShamLinkScopes(object):
                                """
                                Sham Link scope configurations
                                
                                .. attribute:: sham_link_scope
                                
                                	Sham Link configuration
                                	**type**\: list of    :py:class:`ShamLinkScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.sham_link_scope = YList()
                                    self.sham_link_scope.parent = self
                                    self.sham_link_scope.name = 'sham_link_scope'


                                class ShamLinkScope(object):
                                    """
                                    Sham Link configuration
                                    
                                    .. attribute:: destination_address  <key>
                                    
                                    	Address of the remote sham\-link endpoint
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: source_address  <key>
                                    
                                    	Address of the local sham\-link endpoint
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: authentication
                                    
                                    	Authentication
                                    	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication>`
                                    
                                    .. attribute:: cost
                                    
                                    	Interface cost
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: dead_interval_minimal
                                    
                                    	Interval after which a neighbor is declared dead
                                    	**type**\:   :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal>`
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Interval between HELLO packets in seconds
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Time in seconds between retransmitting lost link state advertisements
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 5
                                    
                                    .. attribute:: running
                                    
                                    	Enable routing on an IP network
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: source
                                    
                                    	Address of the local sham\-link endpoint. Enter an IP Address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Number of seconds to delay transmission of LSAs
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 1
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.destination_address = None
                                        self.source_address = None
                                        self.authentication = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication()
                                        self.authentication.parent = self
                                        self.cost = None
                                        self.dead_interval_minimal = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal()
                                        self.dead_interval_minimal.parent = self
                                        self.hello_interval = None
                                        self.retransmit_interval = None
                                        self.running = None
                                        self.source = None
                                        self.transmit_delay = None


                                    class Authentication(object):
                                        """
                                        Authentication
                                        
                                        .. attribute:: key
                                        
                                        	Authentication key configuration
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: message_digest_keies
                                        
                                        	Message digest authentication password (key) configurations, first 16 chars used
                                        	**type**\:   :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies>`
                                        
                                        .. attribute:: type
                                        
                                        	Authentication type
                                        	**type**\:   :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.Type>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.key = None
                                            self.message_digest_keies = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies()
                                            self.message_digest_keies.parent = self
                                            self.type = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.Type()
                                            self.type.parent = self


                                        class Type(object):
                                            """
                                            Authentication type
                                            
                                            .. attribute:: authen_type
                                            
                                            	Authentication type code 
                                            	**type**\:   :py:class:`OspfAuthenticationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthenticationEnum>`
                                            
                                            .. attribute:: keychain_authen_type
                                            
                                            	Keychain authentication type
                                            	**type**\:   :py:class:`OspfKeychainAuthEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuthEnum>`
                                            
                                            .. attribute:: keychain_name
                                            
                                            	Keychain name
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.authen_type = None
                                                self.keychain_authen_type = None
                                                self.keychain_name = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:type'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.authen_type is not None:
                                                    return True

                                                if self.keychain_authen_type is not None:
                                                    return True

                                                if self.keychain_name is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.Type']['meta_info']


                                        class MessageDigestKeies(object):
                                            """
                                            Message digest authentication password (key)
                                            configurations, first 16 chars used
                                            
                                            .. attribute:: message_digest_key
                                            
                                            	Message digest authentication password (key) configuration
                                            	**type**\: list of    :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.message_digest_key = YList()
                                                self.message_digest_key.parent = self
                                                self.message_digest_key.name = 'message_digest_key'


                                            class MessageDigestKey(object):
                                                """
                                                Message digest authentication password (key)
                                                configuration
                                                
                                                .. attribute:: key_id  <key>
                                                
                                                	Key ID
                                                	**type**\:  int
                                                
                                                	**range:** 1..255
                                                
                                                .. attribute:: password
                                                
                                                	Password
                                                	**type**\:  str
                                                
                                                	**pattern:** (!.+)\|([^!].+)
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.key_id = None
                                                    self.password = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.key_id is None:
                                                        raise YPYModelError('Key property key_id is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-key[Cisco-IOS-XR-ipv4-ospf-cfg:key-id = ' + str(self.key_id) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.key_id is not None:
                                                        return True

                                                    if self.password is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies.MessageDigestKey']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-keies'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.message_digest_key is not None:
                                                    for child_ref in self.message_digest_key:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:authentication'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.key is not None:
                                                return True

                                            if self.message_digest_keies is not None and self.message_digest_keies._has_data():
                                                return True

                                            if self.type is not None and self.type._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication']['meta_info']


                                    class DeadIntervalMinimal(object):
                                        """
                                        Interval after which a neighbor is declared dead
                                        
                                        .. attribute:: interval
                                        
                                        	Interval size in seconds after which a neighbor is declared dead
                                        	**type**\:  int
                                        
                                        	**range:** 1..65535
                                        
                                        	**units**\: second
                                        
                                        .. attribute:: multiplier
                                        
                                        	Number of Hellos in one second
                                        	**type**\:  int
                                        
                                        	**range:** 3..20
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.interval = None
                                            self.multiplier = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:dead-interval-minimal'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.interval is not None:
                                                return True

                                            if self.multiplier is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.destination_address is None:
                                            raise YPYModelError('Key property destination_address is None')
                                        if self.source_address is None:
                                            raise YPYModelError('Key property source_address is None')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:sham-link-scope[Cisco-IOS-XR-ipv4-ospf-cfg:destination-address = ' + str(self.destination_address) + '][Cisco-IOS-XR-ipv4-ospf-cfg:source-address = ' + str(self.source_address) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.destination_address is not None:
                                            return True

                                        if self.source_address is not None:
                                            return True

                                        if self.authentication is not None and self.authentication._has_data():
                                            return True

                                        if self.cost is not None:
                                            return True

                                        if self.dead_interval_minimal is not None and self.dead_interval_minimal._has_data():
                                            return True

                                        if self.hello_interval is not None:
                                            return True

                                        if self.retransmit_interval is not None:
                                            return True

                                        if self.running is not None:
                                            return True

                                        if self.source is not None:
                                            return True

                                        if self.transmit_delay is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:sham-link-scopes'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.sham_link_scope is not None:
                                        for child_ref in self.sham_link_scope:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinkScopes']['meta_info']


                            class AreaScope(object):
                                """
                                Area scope configuration
                                
                                .. attribute:: authentication
                                
                                	Authentication
                                	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication>`
                                
                                .. attribute:: bfd
                                
                                	BFD configuration
                                	**type**\:   :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Bfd>`
                                
                                .. attribute:: cost
                                
                                	Interface cost
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: cost_fallback
                                
                                	Interface fallback cost
                                	**type**\:   :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.CostFallback>`
                                
                                .. attribute:: database_filter
                                
                                	Filter OSPF LSA during synchronization and flooding
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: dead_interval_minimal
                                
                                	Interval after which a neighbor is declared dead
                                	**type**\:   :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.DeadIntervalMinimal>`
                                
                                .. attribute:: demand_circuit
                                
                                	Enable/Disable OSPF demand circuit
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: distribute_list
                                
                                	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                                	**type**\:   :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.DistributeList>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: fast_reroute
                                
                                	Fast\-reroute configuration
                                	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute>`
                                
                                .. attribute:: flood_reduction
                                
                                	Enable/Disable OSPF flood reduction
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: hello_interval
                                
                                	Interval between HELLO packets in seconds
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: ldp_auto_config
                                
                                	Enable MPLS LDP Auto Config
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: ldp_sync
                                
                                	Enable/Disable MPLS LDP sync
                                	**type**\:  bool
                                
                                .. attribute:: ldp_sync_igp_shortcuts
                                
                                	Enable/Disable MPLS LDP sync for igp\-shortcuts
                                	**type**\:  bool
                                
                                .. attribute:: link_down_fast_detect
                                
                                	Enable/Disable registration for early interface down notifications
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: loopback_stub_network
                                
                                	Enable/Disable advertising loopback as a stub network
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: mtu_ignore
                                
                                	Enable/Disable ignoring of MTU in DBD packets
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: network_type
                                
                                	Type of attached network
                                	**type**\:   :py:class:`OspfNetworkEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfNetworkEnum>`
                                
                                .. attribute:: packet_size
                                
                                	Customize size of OSPF packets upto MTU
                                	**type**\:  int
                                
                                	**range:** 576..10000
                                
                                .. attribute:: passive
                                
                                	When enabled, prevent sending HELLO packets over link
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: prefix_suppression_primary
                                
                                	Enable/Disable prefix suppression for primary addresses
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: prefix_suppression_secondary
                                
                                	Enable/Disable prefix suppression for secondary addresses
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: priority
                                
                                	Router priority for DR and BDR election
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                	**default value**\: 1
                                
                                .. attribute:: retransmit_interval
                                
                                	Time in seconds between retransmitting lost link state advertisements
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 5
                                
                                .. attribute:: security
                                
                                	Container class for security related configuration parameters
                                	**type**\:   :py:class:`Security <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Security>`
                                
                                .. attribute:: segment_routing_forwarding
                                
                                	segment\-routing forwarding configuration Applicableonly in Default VRF
                                	**type**\:   :py:class:`OspfSegmentRoutingForwardingEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRoutingForwardingEnum>`
                                
                                .. attribute:: transmit_delay
                                
                                	Number of seconds to delay transmission of LSAs
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 1
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.authentication = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication()
                                    self.authentication.parent = self
                                    self.bfd = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Bfd()
                                    self.bfd.parent = self
                                    self.cost = None
                                    self.cost_fallback = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.CostFallback()
                                    self.cost_fallback.parent = self
                                    self.database_filter = None
                                    self.dead_interval_minimal = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.DeadIntervalMinimal()
                                    self.dead_interval_minimal.parent = self
                                    self.demand_circuit = None
                                    self.distribute_list = None
                                    self.fast_reroute = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute()
                                    self.fast_reroute.parent = self
                                    self.flood_reduction = None
                                    self.hello_interval = None
                                    self.ldp_auto_config = None
                                    self.ldp_sync = None
                                    self.ldp_sync_igp_shortcuts = None
                                    self.link_down_fast_detect = None
                                    self.loopback_stub_network = None
                                    self.mtu_ignore = None
                                    self.network_type = None
                                    self.packet_size = None
                                    self.passive = None
                                    self.prefix_suppression_primary = None
                                    self.prefix_suppression_secondary = None
                                    self.priority = None
                                    self.retransmit_interval = None
                                    self.security = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Security()
                                    self.security.parent = self
                                    self.segment_routing_forwarding = None
                                    self.transmit_delay = None


                                class DistributeList(object):
                                    """
                                    Filter networks intalled to RIB (disable as ACL
                                    name means filtering is disabled)
                                    
                                    .. attribute:: access_list_name
                                    
                                    	Access Control List name
                                    	**type**\:  str
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route Policy name
                                    	**type**\:  str
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.access_list_name = None
                                        self.route_policy_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:distribute-list'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.access_list_name is not None:
                                            return True

                                        if self.route_policy_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.DistributeList']['meta_info']


                                class Bfd(object):
                                    """
                                    BFD configuration
                                    
                                    .. attribute:: detection_multiplier
                                    
                                    	Detection multiplier for BFD sessions created by OSPF
                                    	**type**\:  int
                                    
                                    	**range:** 2..50
                                    
                                    .. attribute:: fast_detect_mode
                                    
                                    	 use of Bidirectional Forwarding Detection
                                    	**type**\:   :py:class:`BfdEnableModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.BfdEnableModeEnum>`
                                    
                                    .. attribute:: interval
                                    
                                    	Hello interval for BFD sessions created by OSPF
                                    	**type**\:  int
                                    
                                    	**range:** 3..30000
                                    
                                    	**units**\: millisecond
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.detection_multiplier = None
                                        self.fast_detect_mode = None
                                        self.interval = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:bfd'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.detection_multiplier is not None:
                                            return True

                                        if self.fast_detect_mode is not None:
                                            return True

                                        if self.interval is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Bfd']['meta_info']


                                class Authentication(object):
                                    """
                                    Authentication
                                    
                                    .. attribute:: key
                                    
                                    	Authentication key configuration
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: message_digest_keies
                                    
                                    	Message digest authentication password (key) configurations, first 16 chars used
                                    	**type**\:   :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies>`
                                    
                                    .. attribute:: type
                                    
                                    	Authentication type
                                    	**type**\:   :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.Type>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.key = None
                                        self.message_digest_keies = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies()
                                        self.message_digest_keies.parent = self
                                        self.type = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.Type()
                                        self.type.parent = self


                                    class Type(object):
                                        """
                                        Authentication type
                                        
                                        .. attribute:: authen_type
                                        
                                        	Authentication type code 
                                        	**type**\:   :py:class:`OspfAuthenticationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthenticationEnum>`
                                        
                                        .. attribute:: keychain_authen_type
                                        
                                        	Keychain authentication type
                                        	**type**\:   :py:class:`OspfKeychainAuthEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuthEnum>`
                                        
                                        .. attribute:: keychain_name
                                        
                                        	Keychain name
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.authen_type = None
                                            self.keychain_authen_type = None
                                            self.keychain_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:type'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.authen_type is not None:
                                                return True

                                            if self.keychain_authen_type is not None:
                                                return True

                                            if self.keychain_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.Type']['meta_info']


                                    class MessageDigestKeies(object):
                                        """
                                        Message digest authentication password (key)
                                        configurations, first 16 chars used
                                        
                                        .. attribute:: message_digest_key
                                        
                                        	Message digest authentication password (key) configuration
                                        	**type**\: list of    :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.message_digest_key = YList()
                                            self.message_digest_key.parent = self
                                            self.message_digest_key.name = 'message_digest_key'


                                        class MessageDigestKey(object):
                                            """
                                            Message digest authentication password (key)
                                            configuration
                                            
                                            .. attribute:: key_id  <key>
                                            
                                            	Key ID
                                            	**type**\:  int
                                            
                                            	**range:** 1..255
                                            
                                            .. attribute:: password
                                            
                                            	Password
                                            	**type**\:  str
                                            
                                            	**pattern:** (!.+)\|([^!].+)
                                            
                                            	**mandatory**\: True
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.key_id = None
                                                self.password = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.key_id is None:
                                                    raise YPYModelError('Key property key_id is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-key[Cisco-IOS-XR-ipv4-ospf-cfg:key-id = ' + str(self.key_id) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.key_id is not None:
                                                    return True

                                                if self.password is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies.MessageDigestKey']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-keies'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.message_digest_key is not None:
                                                for child_ref in self.message_digest_key:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:authentication'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.key is not None:
                                            return True

                                        if self.message_digest_keies is not None and self.message_digest_keies._has_data():
                                            return True

                                        if self.type is not None and self.type._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Authentication']['meta_info']


                                class Security(object):
                                    """
                                    Container class for security related
                                    configuration parameters
                                    
                                    .. attribute:: ttl
                                    
                                    	Enabling turns on TTL security
                                    	**type**\:   :py:class:`Ttl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Security.Ttl>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.ttl = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Security.Ttl()
                                        self.ttl.parent = self


                                    class Ttl(object):
                                        """
                                        Enabling turns on TTL security
                                        
                                        .. attribute:: enable
                                        
                                        	Enable TTL security
                                        	**type**\:  bool
                                        
                                        .. attribute:: hop_count
                                        
                                        	Hop count
                                        	**type**\:  int
                                        
                                        	**range:** 1..254
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.enable = None
                                            self.hop_count = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:ttl'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.enable is not None:
                                                return True

                                            if self.hop_count is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Security.Ttl']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:security'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.ttl is not None and self.ttl._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.Security']['meta_info']


                                class DeadIntervalMinimal(object):
                                    """
                                    Interval after which a neighbor is declared dead
                                    
                                    .. attribute:: interval
                                    
                                    	Interval size in seconds after which a neighbor is declared dead
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: multiplier
                                    
                                    	Number of Hellos in one second
                                    	**type**\:  int
                                    
                                    	**range:** 3..20
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.interval = None
                                        self.multiplier = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:dead-interval-minimal'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.interval is not None:
                                            return True

                                        if self.multiplier is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.DeadIntervalMinimal']['meta_info']


                                class FastReroute(object):
                                    """
                                    Fast\-reroute configuration
                                    
                                    .. attribute:: fast_reroute_enable
                                    
                                    	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                    	**type**\:   :py:class:`OspfFastRerouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteEnum>`
                                    
                                    .. attribute:: per_link
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink>`
                                    
                                    .. attribute:: per_prefix
                                    
                                    	Fast\-reroute per\-prefix global configuration
                                    	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.fast_reroute_enable = None
                                        self.per_link = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink()
                                        self.per_link.parent = self
                                        self.per_prefix = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix()
                                        self.per_prefix.parent = self


                                    class PerLink(object):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                        	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces>`
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self.fast_reroute_use_candidate_only = None


                                        class CandidateInterfaces(object):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.candidate_interface = YList()
                                                self.candidate_interface.parent = self
                                                self.candidate_interface.name = 'candidate_interface'


                                            class CandidateInterface(object):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.interface_name = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.interface_name is None:
                                                        raise YPYModelError('Key property interface_name is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.interface_name is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.candidate_interface is not None:
                                                    for child_ref in self.candidate_interface:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces']['meta_info']


                                        class ExcludeInterfaces(object):
                                            """
                                            Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup or UCMP
                                            	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.exclude_interface = YList()
                                                self.exclude_interface.parent = self
                                                self.exclude_interface.name = 'exclude_interface'


                                            class ExcludeInterface(object):
                                                """
                                                Exclude an interface from becoming a backup or
                                                UCMP
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.interface_name = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.interface_name is None:
                                                        raise YPYModelError('Key property interface_name is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.interface_name is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.exclude_interface is not None:
                                                    for child_ref in self.exclude_interface:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-link'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                                return True

                                            if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                                return True

                                            if self.fast_reroute_use_candidate_only is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink']['meta_info']


                                    class PerPrefix(object):
                                        """
                                        Fast\-reroute per\-prefix global configuration
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                        	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: remote_lfa
                                        
                                        	Remote LFA configuration
                                        	**type**\:   :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.RemoteLfa>`
                                        
                                        .. attribute:: tiebreakers
                                        
                                        	Fast\-reroute tiebreakers configurations
                                        	**type**\:   :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers>`
                                        
                                        .. attribute:: topology_independent_lfa
                                        
                                        	Topology Independet LFA configuration
                                        	**type**\:  bool
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self.fast_reroute_use_candidate_only = None
                                            self.remote_lfa = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.RemoteLfa()
                                            self.remote_lfa.parent = self
                                            self.tiebreakers = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers()
                                            self.tiebreakers.parent = self
                                            self.topology_independent_lfa = None


                                        class RemoteLfa(object):
                                            """
                                            Remote LFA configuration
                                            
                                            .. attribute:: maximum_cost
                                            
                                            	Maximum path cost to remote LFA
                                            	**type**\:  int
                                            
                                            	**range:** 1..4294967295
                                            
                                            .. attribute:: tunnel
                                            
                                            	Enable/Disable remote LFA computation
                                            	**type**\:   :py:class:`OspfFrrRlfaTunnelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFrrRlfaTunnelEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.maximum_cost = None
                                                self.tunnel = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:remote-lfa'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.maximum_cost is not None:
                                                    return True

                                                if self.tunnel is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.RemoteLfa']['meta_info']


                                        class Tiebreakers(object):
                                            """
                                            Fast\-reroute tiebreakers configurations
                                            
                                            .. attribute:: tiebreaker
                                            
                                            	Fast\-reroute tiebreakers configuration
                                            	**type**\: list of    :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.tiebreaker = YList()
                                                self.tiebreaker.parent = self
                                                self.tiebreaker.name = 'tiebreaker'


                                            class Tiebreaker(object):
                                                """
                                                Fast\-reroute tiebreakers configuration
                                                
                                                .. attribute:: tiebreaker_type  <key>
                                                
                                                	Tiebreaker type
                                                	**type**\:   :py:class:`OspfFastRerouteTiebreakersIntfEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakersIntfEnum>`
                                                
                                                .. attribute:: tiebreaker_index
                                                
                                                	Index value for a tiebreaker, 0 to disable
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.tiebreaker_type = None
                                                    self.tiebreaker_index = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.tiebreaker_type is None:
                                                        raise YPYModelError('Key property tiebreaker_type is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker[Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker-type = ' + str(self.tiebreaker_type) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.tiebreaker_type is not None:
                                                        return True

                                                    if self.tiebreaker_index is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreakers'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.tiebreaker is not None:
                                                    for child_ref in self.tiebreaker:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers']['meta_info']


                                        class CandidateInterfaces(object):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.candidate_interface = YList()
                                                self.candidate_interface.parent = self
                                                self.candidate_interface.name = 'candidate_interface'


                                            class CandidateInterface(object):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.interface_name = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.interface_name is None:
                                                        raise YPYModelError('Key property interface_name is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.interface_name is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.candidate_interface is not None:
                                                    for child_ref in self.candidate_interface:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces']['meta_info']


                                        class ExcludeInterfaces(object):
                                            """
                                            Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup or UCMP
                                            	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.exclude_interface = YList()
                                                self.exclude_interface.parent = self
                                                self.exclude_interface.name = 'exclude_interface'


                                            class ExcludeInterface(object):
                                                """
                                                Exclude an interface from becoming a backup or
                                                UCMP
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.interface_name = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.interface_name is None:
                                                        raise YPYModelError('Key property interface_name is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.interface_name is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.exclude_interface is not None:
                                                    for child_ref in self.exclude_interface:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-prefix'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                                return True

                                            if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                                return True

                                            if self.fast_reroute_use_candidate_only is not None:
                                                return True

                                            if self.remote_lfa is not None and self.remote_lfa._has_data():
                                                return True

                                            if self.tiebreakers is not None and self.tiebreakers._has_data():
                                                return True

                                            if self.topology_independent_lfa is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:fast-reroute'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.fast_reroute_enable is not None:
                                            return True

                                        if self.per_link is not None and self.per_link._has_data():
                                            return True

                                        if self.per_prefix is not None and self.per_prefix._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute']['meta_info']


                                class CostFallback(object):
                                    """
                                    Interface fallback cost
                                    
                                    .. attribute:: cost
                                    
                                    	Fallback cost of link
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: threshold
                                    
                                    	Bandwidth threshold
                                    	**type**\:  int
                                    
                                    	**range:** 1..4294967
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.cost = None
                                        self.threshold = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:cost-fallback'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.cost is not None:
                                            return True

                                        if self.threshold is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.CostFallback']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:area-scope'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.authentication is not None and self.authentication._has_data():
                                        return True

                                    if self.bfd is not None and self.bfd._has_data():
                                        return True

                                    if self.cost is not None:
                                        return True

                                    if self.cost_fallback is not None and self.cost_fallback._has_data():
                                        return True

                                    if self.database_filter is not None:
                                        return True

                                    if self.dead_interval_minimal is not None and self.dead_interval_minimal._has_data():
                                        return True

                                    if self.demand_circuit is not None:
                                        return True

                                    if self.distribute_list is not None and self.distribute_list._has_data():
                                        return True

                                    if self.fast_reroute is not None and self.fast_reroute._has_data():
                                        return True

                                    if self.flood_reduction is not None:
                                        return True

                                    if self.hello_interval is not None:
                                        return True

                                    if self.ldp_auto_config is not None:
                                        return True

                                    if self.ldp_sync is not None:
                                        return True

                                    if self.ldp_sync_igp_shortcuts is not None:
                                        return True

                                    if self.link_down_fast_detect is not None:
                                        return True

                                    if self.loopback_stub_network is not None:
                                        return True

                                    if self.mtu_ignore is not None:
                                        return True

                                    if self.network_type is not None:
                                        return True

                                    if self.packet_size is not None:
                                        return True

                                    if self.passive is not None:
                                        return True

                                    if self.prefix_suppression_primary is not None:
                                        return True

                                    if self.prefix_suppression_secondary is not None:
                                        return True

                                    if self.priority is not None:
                                        return True

                                    if self.retransmit_interval is not None:
                                        return True

                                    if self.security is not None and self.security._has_data():
                                        return True

                                    if self.segment_routing_forwarding is not None:
                                        return True

                                    if self.transmit_delay is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope']['meta_info']


                            class NameScopes(object):
                                """
                                Name scope configurations
                                
                                .. attribute:: name_scope
                                
                                	Name scope configuration
                                	**type**\: list of    :py:class:`NameScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.name_scope = YList()
                                    self.name_scope.parent = self
                                    self.name_scope.name = 'name_scope'


                                class NameScope(object):
                                    """
                                    Name scope configuration
                                    
                                    .. attribute:: interface_name  <key>
                                    
                                    	Name of Interface to configure
                                    	**type**\:  str
                                    
                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                    
                                    .. attribute:: authentication
                                    
                                    	Authentication
                                    	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication>`
                                    
                                    .. attribute:: bfd
                                    
                                    	BFD configuration
                                    	**type**\:   :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Bfd>`
                                    
                                    .. attribute:: cost
                                    
                                    	Interface cost
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: cost_fallback
                                    
                                    	Interface fallback cost
                                    	**type**\:   :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.CostFallback>`
                                    
                                    .. attribute:: database_filter
                                    
                                    	Filter OSPF LSA during synchronization and flooding
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: dead_interval_minimal
                                    
                                    	Interval after which a neighbor is declared dead
                                    	**type**\:   :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DeadIntervalMinimal>`
                                    
                                    .. attribute:: demand_circuit
                                    
                                    	Enable/Disable OSPF demand circuit
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: distribute_list
                                    
                                    	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                                    	**type**\:   :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DistributeList>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: fast_reroute
                                    
                                    	Fast\-reroute configuration
                                    	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute>`
                                    
                                    .. attribute:: flood_reduction
                                    
                                    	Enable/Disable OSPF flood reduction
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Interval between HELLO packets in seconds
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: ldp_auto_config
                                    
                                    	Enable MPLS LDP Auto Config
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: ldp_sync
                                    
                                    	Enable/Disable MPLS LDP sync
                                    	**type**\:  bool
                                    
                                    .. attribute:: ldp_sync_igp_shortcuts
                                    
                                    	Enable/Disable MPLS LDP sync for igp\-shortcuts
                                    	**type**\:  bool
                                    
                                    .. attribute:: link_down_fast_detect
                                    
                                    	Enable/Disable registration for early interface down notifications
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: loopback_stub_network
                                    
                                    	Enable/Disable advertising loopback as a stub network
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: mtu_ignore
                                    
                                    	Enable/Disable ignoring of MTU in DBD packets
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: neighbors
                                    
                                    	Neighbor router configuration information
                                    	**type**\:   :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors>`
                                    
                                    .. attribute:: network_type
                                    
                                    	Type of attached network
                                    	**type**\:   :py:class:`OspfNetworkEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfNetworkEnum>`
                                    
                                    .. attribute:: packet_size
                                    
                                    	Customize size of OSPF packets upto MTU
                                    	**type**\:  int
                                    
                                    	**range:** 576..10000
                                    
                                    .. attribute:: passive
                                    
                                    	When enabled, prevent sending HELLO packets over link
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: prefix_sid
                                    
                                    	Prefix SID
                                    	**type**\:   :py:class:`PrefixSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.PrefixSid>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: prefix_sid_strict
                                    
                                    	Strict Prefix SID
                                    	**type**\:   :py:class:`PrefixSidStrict <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.PrefixSidStrict>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: prefix_suppression_primary
                                    
                                    	Enable/Disable prefix suppression for primary addresses
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: prefix_suppression_secondary
                                    
                                    	Enable/Disable prefix suppression for secondary addresses
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: priority
                                    
                                    	Router priority for DR and BDR election
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    	**default value**\: 1
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Time in seconds between retransmitting lost link state advertisements
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 5
                                    
                                    .. attribute:: running
                                    
                                    	Enable routing on an IP network
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: security
                                    
                                    	Container class for security related configuration parameters
                                    	**type**\:   :py:class:`Security <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security>`
                                    
                                    .. attribute:: segment_routing_forwarding
                                    
                                    	segment\-routing forwarding configuration Applicableonly in Default VRF
                                    	**type**\:   :py:class:`OspfSegmentRoutingForwardingEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRoutingForwardingEnum>`
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Number of seconds to delay transmission of LSAs
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 1
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.interface_name = None
                                        self.authentication = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication()
                                        self.authentication.parent = self
                                        self.bfd = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Bfd()
                                        self.bfd.parent = self
                                        self.cost = None
                                        self.cost_fallback = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.CostFallback()
                                        self.cost_fallback.parent = self
                                        self.database_filter = None
                                        self.dead_interval_minimal = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DeadIntervalMinimal()
                                        self.dead_interval_minimal.parent = self
                                        self.demand_circuit = None
                                        self.distribute_list = None
                                        self.fast_reroute = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute()
                                        self.fast_reroute.parent = self
                                        self.flood_reduction = None
                                        self.hello_interval = None
                                        self.ldp_auto_config = None
                                        self.ldp_sync = None
                                        self.ldp_sync_igp_shortcuts = None
                                        self.link_down_fast_detect = None
                                        self.loopback_stub_network = None
                                        self.mtu_ignore = None
                                        self.neighbors = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors()
                                        self.neighbors.parent = self
                                        self.network_type = None
                                        self.packet_size = None
                                        self.passive = None
                                        self.prefix_sid = None
                                        self.prefix_sid_strict = None
                                        self.prefix_suppression_primary = None
                                        self.prefix_suppression_secondary = None
                                        self.priority = None
                                        self.retransmit_interval = None
                                        self.running = None
                                        self.security = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security()
                                        self.security.parent = self
                                        self.segment_routing_forwarding = None
                                        self.transmit_delay = None


                                    class PrefixSid(object):
                                        """
                                        Prefix SID
                                        
                                        .. attribute:: explicit_null
                                        
                                        	Force Penultimate Hop To Send Explicit\-Null Label
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: n_flag_clear
                                        
                                        	Not a node SID
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: sid_value
                                        
                                        	SID value
                                        	**type**\:  int
                                        
                                        	**range:** 0..1048575
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: type
                                        
                                        	OSPF SID Type
                                        	**type**\:   :py:class:`OspfSidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSidEnum>`
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: _is_presence
                                        
                                        	Is present if this instance represents presence container else not
                                        	**type**\: bool
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self._is_presence = True
                                            self.explicit_null = None
                                            self.n_flag_clear = None
                                            self.sid_value = None
                                            self.type = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:prefix-sid'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self._is_presence:
                                                return True
                                            if self.explicit_null is not None:
                                                return True

                                            if self.n_flag_clear is not None:
                                                return True

                                            if self.sid_value is not None:
                                                return True

                                            if self.type is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.PrefixSid']['meta_info']


                                    class PrefixSidStrict(object):
                                        """
                                        Strict Prefix SID
                                        
                                        .. attribute:: explicit_null
                                        
                                        	Force Penultimate Hop To Send Explicit\-Null Label
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: n_flag_clear
                                        
                                        	Not a node SID
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: sid_value
                                        
                                        	SID value
                                        	**type**\:  int
                                        
                                        	**range:** 0..1048575
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: type
                                        
                                        	OSPF SID Type
                                        	**type**\:   :py:class:`OspfSidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSidEnum>`
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: _is_presence
                                        
                                        	Is present if this instance represents presence container else not
                                        	**type**\: bool
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self._is_presence = True
                                            self.explicit_null = None
                                            self.n_flag_clear = None
                                            self.sid_value = None
                                            self.type = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:prefix-sid-strict'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self._is_presence:
                                                return True
                                            if self.explicit_null is not None:
                                                return True

                                            if self.n_flag_clear is not None:
                                                return True

                                            if self.sid_value is not None:
                                                return True

                                            if self.type is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.PrefixSidStrict']['meta_info']


                                    class DistributeList(object):
                                        """
                                        Filter networks intalled to RIB (disable as ACL
                                        name means filtering is disabled)
                                        
                                        .. attribute:: access_list_name
                                        
                                        	Access Control List name
                                        	**type**\:  str
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route Policy name
                                        	**type**\:  str
                                        
                                        .. attribute:: _is_presence
                                        
                                        	Is present if this instance represents presence container else not
                                        	**type**\: bool
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self._is_presence = True
                                            self.access_list_name = None
                                            self.route_policy_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:distribute-list'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self._is_presence:
                                                return True
                                            if self.access_list_name is not None:
                                                return True

                                            if self.route_policy_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DistributeList']['meta_info']


                                    class Bfd(object):
                                        """
                                        BFD configuration
                                        
                                        .. attribute:: detection_multiplier
                                        
                                        	Detection multiplier for BFD sessions created by OSPF
                                        	**type**\:  int
                                        
                                        	**range:** 2..50
                                        
                                        .. attribute:: fast_detect_mode
                                        
                                        	 use of Bidirectional Forwarding Detection
                                        	**type**\:   :py:class:`BfdEnableModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.BfdEnableModeEnum>`
                                        
                                        .. attribute:: interval
                                        
                                        	Hello interval for BFD sessions created by OSPF
                                        	**type**\:  int
                                        
                                        	**range:** 3..30000
                                        
                                        	**units**\: millisecond
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.detection_multiplier = None
                                            self.fast_detect_mode = None
                                            self.interval = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:bfd'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.detection_multiplier is not None:
                                                return True

                                            if self.fast_detect_mode is not None:
                                                return True

                                            if self.interval is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Bfd']['meta_info']


                                    class Authentication(object):
                                        """
                                        Authentication
                                        
                                        .. attribute:: key
                                        
                                        	Authentication key configuration
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: message_digest_keies
                                        
                                        	Message digest authentication password (key) configurations, first 16 chars used
                                        	**type**\:   :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies>`
                                        
                                        .. attribute:: type
                                        
                                        	Authentication type
                                        	**type**\:   :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.Type>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.key = None
                                            self.message_digest_keies = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies()
                                            self.message_digest_keies.parent = self
                                            self.type = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.Type()
                                            self.type.parent = self


                                        class Type(object):
                                            """
                                            Authentication type
                                            
                                            .. attribute:: authen_type
                                            
                                            	Authentication type code 
                                            	**type**\:   :py:class:`OspfAuthenticationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthenticationEnum>`
                                            
                                            .. attribute:: keychain_authen_type
                                            
                                            	Keychain authentication type
                                            	**type**\:   :py:class:`OspfKeychainAuthEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuthEnum>`
                                            
                                            .. attribute:: keychain_name
                                            
                                            	Keychain name
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.authen_type = None
                                                self.keychain_authen_type = None
                                                self.keychain_name = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:type'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.authen_type is not None:
                                                    return True

                                                if self.keychain_authen_type is not None:
                                                    return True

                                                if self.keychain_name is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.Type']['meta_info']


                                        class MessageDigestKeies(object):
                                            """
                                            Message digest authentication password (key)
                                            configurations, first 16 chars used
                                            
                                            .. attribute:: message_digest_key
                                            
                                            	Message digest authentication password (key) configuration
                                            	**type**\: list of    :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.message_digest_key = YList()
                                                self.message_digest_key.parent = self
                                                self.message_digest_key.name = 'message_digest_key'


                                            class MessageDigestKey(object):
                                                """
                                                Message digest authentication password (key)
                                                configuration
                                                
                                                .. attribute:: key_id  <key>
                                                
                                                	Key ID
                                                	**type**\:  int
                                                
                                                	**range:** 1..255
                                                
                                                .. attribute:: password
                                                
                                                	Password
                                                	**type**\:  str
                                                
                                                	**pattern:** (!.+)\|([^!].+)
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.key_id = None
                                                    self.password = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.key_id is None:
                                                        raise YPYModelError('Key property key_id is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-key[Cisco-IOS-XR-ipv4-ospf-cfg:key-id = ' + str(self.key_id) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.key_id is not None:
                                                        return True

                                                    if self.password is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies.MessageDigestKey']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-keies'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.message_digest_key is not None:
                                                    for child_ref in self.message_digest_key:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:authentication'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.key is not None:
                                                return True

                                            if self.message_digest_keies is not None and self.message_digest_keies._has_data():
                                                return True

                                            if self.type is not None and self.type._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication']['meta_info']


                                    class Security(object):
                                        """
                                        Container class for security related
                                        configuration parameters
                                        
                                        .. attribute:: ttl
                                        
                                        	Enabling turns on TTL security
                                        	**type**\:   :py:class:`Ttl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security.Ttl>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.ttl = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security.Ttl()
                                            self.ttl.parent = self


                                        class Ttl(object):
                                            """
                                            Enabling turns on TTL security
                                            
                                            .. attribute:: enable
                                            
                                            	Enable TTL security
                                            	**type**\:  bool
                                            
                                            .. attribute:: hop_count
                                            
                                            	Hop count
                                            	**type**\:  int
                                            
                                            	**range:** 1..254
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.enable = None
                                                self.hop_count = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:ttl'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.enable is not None:
                                                    return True

                                                if self.hop_count is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security.Ttl']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:security'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.ttl is not None and self.ttl._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security']['meta_info']


                                    class Neighbors(object):
                                        """
                                        Neighbor router configuration information
                                        
                                        .. attribute:: neighbor
                                        
                                        	Router configuration information for a particular neighbor
                                        	**type**\: list of    :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors.Neighbor>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.neighbor = YList()
                                            self.neighbor.parent = self
                                            self.neighbor.name = 'neighbor'


                                        class Neighbor(object):
                                            """
                                            Router configuration information for a
                                            particular neighbor
                                            
                                            .. attribute:: neighbor_address  <key>
                                            
                                            	Neighbor IP address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: cost
                                            
                                            	OSPF cost for point\-to\-multipoint neighbor
                                            	**type**\:  int
                                            
                                            	**range:** 1..65535
                                            
                                            	**default value**\: 1
                                            
                                            .. attribute:: database_filter
                                            
                                            	Database filter\: Filter OSPF LSA during synchronization and flooding for point\-to\-multipoint
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: poll_interval
                                            
                                            	OSPF dead router poll\-interval in seconds
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 40
                                            
                                            .. attribute:: priority
                                            
                                            	OSPF priority of non\-broadcast neighbor
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            	**default value**\: 0
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.neighbor_address = None
                                                self.cost = None
                                                self.database_filter = None
                                                self.poll_interval = None
                                                self.priority = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.neighbor_address is None:
                                                    raise YPYModelError('Key property neighbor_address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:neighbor[Cisco-IOS-XR-ipv4-ospf-cfg:neighbor-address = ' + str(self.neighbor_address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.cost is not None:
                                                    return True

                                                if self.database_filter is not None:
                                                    return True

                                                if self.poll_interval is not None:
                                                    return True

                                                if self.priority is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors.Neighbor']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:neighbors'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.neighbor is not None:
                                                for child_ref in self.neighbor:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors']['meta_info']


                                    class DeadIntervalMinimal(object):
                                        """
                                        Interval after which a neighbor is declared dead
                                        
                                        .. attribute:: interval
                                        
                                        	Interval size in seconds after which a neighbor is declared dead
                                        	**type**\:  int
                                        
                                        	**range:** 1..65535
                                        
                                        	**units**\: second
                                        
                                        .. attribute:: multiplier
                                        
                                        	Number of Hellos in one second
                                        	**type**\:  int
                                        
                                        	**range:** 3..20
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.interval = None
                                            self.multiplier = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:dead-interval-minimal'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.interval is not None:
                                                return True

                                            if self.multiplier is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DeadIntervalMinimal']['meta_info']


                                    class FastReroute(object):
                                        """
                                        Fast\-reroute configuration
                                        
                                        .. attribute:: fast_reroute_enable
                                        
                                        	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                        	**type**\:   :py:class:`OspfFastRerouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteEnum>`
                                        
                                        .. attribute:: per_link
                                        
                                        	Fast\-reroute per\-link configuration
                                        	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink>`
                                        
                                        .. attribute:: per_prefix
                                        
                                        	Fast\-reroute per\-prefix global configuration
                                        	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.fast_reroute_enable = None
                                            self.per_link = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink()
                                            self.per_link.parent = self
                                            self.per_prefix = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix()
                                            self.per_prefix.parent = self


                                        class PerLink(object):
                                            """
                                            Fast\-reroute per\-link configuration
                                            
                                            .. attribute:: candidate_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                            	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces>`
                                            
                                            .. attribute:: exclude_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                            	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces>`
                                            
                                            .. attribute:: fast_reroute_use_candidate_only
                                            
                                            	Use only interfaces on the candidate list as a backup path
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces()
                                                self.candidate_interfaces.parent = self
                                                self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces()
                                                self.exclude_interfaces.parent = self
                                                self.fast_reroute_use_candidate_only = None


                                            class CandidateInterfaces(object):
                                                """
                                                Fast\-reroute per\-link/per\-prefix candidate
                                                interface configuration
                                                
                                                .. attribute:: candidate_interface
                                                
                                                	Candidate backup interface
                                                	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.candidate_interface = YList()
                                                    self.candidate_interface.parent = self
                                                    self.candidate_interface.name = 'candidate_interface'


                                                class CandidateInterface(object):
                                                    """
                                                    Candidate backup interface
                                                    
                                                    .. attribute:: interface_name  <key>
                                                    
                                                    	Interface
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-01-02'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.interface_name = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                                        if self.interface_name is None:
                                                            raise YPYModelError('Key property interface_name is None')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.interface_name is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.candidate_interface is not None:
                                                        for child_ref in self.candidate_interface:
                                                            if child_ref._has_data():
                                                                return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces']['meta_info']


                                            class ExcludeInterfaces(object):
                                                """
                                                Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                                interface configuration
                                                
                                                .. attribute:: exclude_interface
                                                
                                                	Exclude an interface from becoming a backup or UCMP
                                                	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.exclude_interface = YList()
                                                    self.exclude_interface.parent = self
                                                    self.exclude_interface.name = 'exclude_interface'


                                                class ExcludeInterface(object):
                                                    """
                                                    Exclude an interface from becoming a backup or
                                                    UCMP
                                                    
                                                    .. attribute:: interface_name  <key>
                                                    
                                                    	Interface
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-01-02'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.interface_name = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                                        if self.interface_name is None:
                                                            raise YPYModelError('Key property interface_name is None')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.interface_name is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.exclude_interface is not None:
                                                        for child_ref in self.exclude_interface:
                                                            if child_ref._has_data():
                                                                return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-link'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                                    return True

                                                if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                                    return True

                                                if self.fast_reroute_use_candidate_only is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink']['meta_info']


                                        class PerPrefix(object):
                                            """
                                            Fast\-reroute per\-prefix global configuration
                                            
                                            .. attribute:: candidate_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                            	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                            
                                            .. attribute:: exclude_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                            	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                            
                                            .. attribute:: fast_reroute_use_candidate_only
                                            
                                            	Use only interfaces on the candidate list as a backup path
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: remote_lfa
                                            
                                            	Remote LFA configuration
                                            	**type**\:   :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa>`
                                            
                                            .. attribute:: tiebreakers
                                            
                                            	Fast\-reroute tiebreakers configurations
                                            	**type**\:   :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers>`
                                            
                                            .. attribute:: topology_independent_lfa
                                            
                                            	Topology Independet LFA configuration
                                            	**type**\:  bool
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces()
                                                self.candidate_interfaces.parent = self
                                                self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                                self.exclude_interfaces.parent = self
                                                self.fast_reroute_use_candidate_only = None
                                                self.remote_lfa = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa()
                                                self.remote_lfa.parent = self
                                                self.tiebreakers = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers()
                                                self.tiebreakers.parent = self
                                                self.topology_independent_lfa = None


                                            class RemoteLfa(object):
                                                """
                                                Remote LFA configuration
                                                
                                                .. attribute:: maximum_cost
                                                
                                                	Maximum path cost to remote LFA
                                                	**type**\:  int
                                                
                                                	**range:** 1..4294967295
                                                
                                                .. attribute:: tunnel
                                                
                                                	Enable/Disable remote LFA computation
                                                	**type**\:   :py:class:`OspfFrrRlfaTunnelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFrrRlfaTunnelEnum>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.maximum_cost = None
                                                    self.tunnel = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:remote-lfa'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.maximum_cost is not None:
                                                        return True

                                                    if self.tunnel is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa']['meta_info']


                                            class Tiebreakers(object):
                                                """
                                                Fast\-reroute tiebreakers configurations
                                                
                                                .. attribute:: tiebreaker
                                                
                                                	Fast\-reroute tiebreakers configuration
                                                	**type**\: list of    :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.tiebreaker = YList()
                                                    self.tiebreaker.parent = self
                                                    self.tiebreaker.name = 'tiebreaker'


                                                class Tiebreaker(object):
                                                    """
                                                    Fast\-reroute tiebreakers configuration
                                                    
                                                    .. attribute:: tiebreaker_type  <key>
                                                    
                                                    	Tiebreaker type
                                                    	**type**\:   :py:class:`OspfFastRerouteTiebreakersIntfEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakersIntfEnum>`
                                                    
                                                    .. attribute:: tiebreaker_index
                                                    
                                                    	Index value for a tiebreaker, 0 to disable
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..255
                                                    
                                                    	**mandatory**\: True
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-01-02'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.tiebreaker_type = None
                                                        self.tiebreaker_index = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                                        if self.tiebreaker_type is None:
                                                            raise YPYModelError('Key property tiebreaker_type is None')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker[Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker-type = ' + str(self.tiebreaker_type) + ']'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.tiebreaker_type is not None:
                                                            return True

                                                        if self.tiebreaker_index is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreakers'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.tiebreaker is not None:
                                                        for child_ref in self.tiebreaker:
                                                            if child_ref._has_data():
                                                                return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers']['meta_info']


                                            class CandidateInterfaces(object):
                                                """
                                                Fast\-reroute per\-link/per\-prefix candidate
                                                interface configuration
                                                
                                                .. attribute:: candidate_interface
                                                
                                                	Candidate backup interface
                                                	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.candidate_interface = YList()
                                                    self.candidate_interface.parent = self
                                                    self.candidate_interface.name = 'candidate_interface'


                                                class CandidateInterface(object):
                                                    """
                                                    Candidate backup interface
                                                    
                                                    .. attribute:: interface_name  <key>
                                                    
                                                    	Interface
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-01-02'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.interface_name = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                                        if self.interface_name is None:
                                                            raise YPYModelError('Key property interface_name is None')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.interface_name is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.candidate_interface is not None:
                                                        for child_ref in self.candidate_interface:
                                                            if child_ref._has_data():
                                                                return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces']['meta_info']


                                            class ExcludeInterfaces(object):
                                                """
                                                Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                                interface configuration
                                                
                                                .. attribute:: exclude_interface
                                                
                                                	Exclude an interface from becoming a backup or UCMP
                                                	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.exclude_interface = YList()
                                                    self.exclude_interface.parent = self
                                                    self.exclude_interface.name = 'exclude_interface'


                                                class ExcludeInterface(object):
                                                    """
                                                    Exclude an interface from becoming a backup or
                                                    UCMP
                                                    
                                                    .. attribute:: interface_name  <key>
                                                    
                                                    	Interface
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-01-02'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.interface_name = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                                        if self.interface_name is None:
                                                            raise YPYModelError('Key property interface_name is None')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.interface_name is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.exclude_interface is not None:
                                                        for child_ref in self.exclude_interface:
                                                            if child_ref._has_data():
                                                                return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-prefix'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                                    return True

                                                if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                                    return True

                                                if self.fast_reroute_use_candidate_only is not None:
                                                    return True

                                                if self.remote_lfa is not None and self.remote_lfa._has_data():
                                                    return True

                                                if self.tiebreakers is not None and self.tiebreakers._has_data():
                                                    return True

                                                if self.topology_independent_lfa is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:fast-reroute'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.fast_reroute_enable is not None:
                                                return True

                                            if self.per_link is not None and self.per_link._has_data():
                                                return True

                                            if self.per_prefix is not None and self.per_prefix._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute']['meta_info']


                                    class CostFallback(object):
                                        """
                                        Interface fallback cost
                                        
                                        .. attribute:: cost
                                        
                                        	Fallback cost of link
                                        	**type**\:  int
                                        
                                        	**range:** 1..65535
                                        
                                        .. attribute:: threshold
                                        
                                        	Bandwidth threshold
                                        	**type**\:  int
                                        
                                        	**range:** 1..4294967
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.cost = None
                                            self.threshold = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:cost-fallback'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.cost is not None:
                                                return True

                                            if self.threshold is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.CostFallback']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.interface_name is None:
                                            raise YPYModelError('Key property interface_name is None')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:name-scope[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.interface_name is not None:
                                            return True

                                        if self.authentication is not None and self.authentication._has_data():
                                            return True

                                        if self.bfd is not None and self.bfd._has_data():
                                            return True

                                        if self.cost is not None:
                                            return True

                                        if self.cost_fallback is not None and self.cost_fallback._has_data():
                                            return True

                                        if self.database_filter is not None:
                                            return True

                                        if self.dead_interval_minimal is not None and self.dead_interval_minimal._has_data():
                                            return True

                                        if self.demand_circuit is not None:
                                            return True

                                        if self.distribute_list is not None and self.distribute_list._has_data():
                                            return True

                                        if self.fast_reroute is not None and self.fast_reroute._has_data():
                                            return True

                                        if self.flood_reduction is not None:
                                            return True

                                        if self.hello_interval is not None:
                                            return True

                                        if self.ldp_auto_config is not None:
                                            return True

                                        if self.ldp_sync is not None:
                                            return True

                                        if self.ldp_sync_igp_shortcuts is not None:
                                            return True

                                        if self.link_down_fast_detect is not None:
                                            return True

                                        if self.loopback_stub_network is not None:
                                            return True

                                        if self.mtu_ignore is not None:
                                            return True

                                        if self.neighbors is not None and self.neighbors._has_data():
                                            return True

                                        if self.network_type is not None:
                                            return True

                                        if self.packet_size is not None:
                                            return True

                                        if self.passive is not None:
                                            return True

                                        if self.prefix_sid is not None and self.prefix_sid._has_data():
                                            return True

                                        if self.prefix_sid_strict is not None and self.prefix_sid_strict._has_data():
                                            return True

                                        if self.prefix_suppression_primary is not None:
                                            return True

                                        if self.prefix_suppression_secondary is not None:
                                            return True

                                        if self.priority is not None:
                                            return True

                                        if self.retransmit_interval is not None:
                                            return True

                                        if self.running is not None:
                                            return True

                                        if self.security is not None and self.security._has_data():
                                            return True

                                        if self.segment_routing_forwarding is not None:
                                            return True

                                        if self.transmit_delay is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes.NameScope']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:name-scopes'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.name_scope is not None:
                                        for child_ref in self.name_scope:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.NameScopes']['meta_info']


                            class MultiAreaInterfaceScopes(object):
                                """
                                Multi Area Interface scope configurations
                                
                                .. attribute:: multi_area_interface_scope
                                
                                	Multi Area Interface configuration
                                	**type**\: list of    :py:class:`MultiAreaInterfaceScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.multi_area_interface_scope = YList()
                                    self.multi_area_interface_scope.parent = self
                                    self.multi_area_interface_scope.name = 'multi_area_interface_scope'


                                class MultiAreaInterfaceScope(object):
                                    """
                                    Multi Area Interface configuration
                                    
                                    .. attribute:: interface_name  <key>
                                    
                                    	Name of Multi Area Interface to configure
                                    	**type**\:  str
                                    
                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                    
                                    .. attribute:: authentication
                                    
                                    	Authentication
                                    	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication>`
                                    
                                    .. attribute:: cost
                                    
                                    	Interface cost
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: cost_fallback
                                    
                                    	Interface fallback cost
                                    	**type**\:   :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback>`
                                    
                                    .. attribute:: database_filter
                                    
                                    	Filter OSPF LSA during synchronization and flooding
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: dead_interval_minimal
                                    
                                    	Interval after which a neighbor is declared dead
                                    	**type**\:   :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal>`
                                    
                                    .. attribute:: distribute_list
                                    
                                    	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                                    	**type**\:   :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DistributeList>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: fast_reroute
                                    
                                    	Fast\-reroute configuration
                                    	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute>`
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Interval between HELLO packets in seconds
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: mtu_ignore
                                    
                                    	Enable/Disable ignoring of MTU in DBD packets
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: neighbors
                                    
                                    	Neighbor router configuration information
                                    	**type**\:   :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors>`
                                    
                                    .. attribute:: packet_size
                                    
                                    	Customize size of OSPF packets upto MTU
                                    	**type**\:  int
                                    
                                    	**range:** 576..10000
                                    
                                    .. attribute:: passive
                                    
                                    	When enabled, prevent sending HELLO packets over link
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Time in seconds between retransmitting lost link state advertisements
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 5
                                    
                                    .. attribute:: running
                                    
                                    	Enable routing on an IP network
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Number of seconds to delay transmission of LSAs
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    	**default value**\: 1
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.interface_name = None
                                        self.authentication = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication()
                                        self.authentication.parent = self
                                        self.cost = None
                                        self.cost_fallback = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback()
                                        self.cost_fallback.parent = self
                                        self.database_filter = None
                                        self.dead_interval_minimal = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal()
                                        self.dead_interval_minimal.parent = self
                                        self.distribute_list = None
                                        self.fast_reroute = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute()
                                        self.fast_reroute.parent = self
                                        self.hello_interval = None
                                        self.mtu_ignore = None
                                        self.neighbors = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors()
                                        self.neighbors.parent = self
                                        self.packet_size = None
                                        self.passive = None
                                        self.retransmit_interval = None
                                        self.running = None
                                        self.transmit_delay = None


                                    class DistributeList(object):
                                        """
                                        Filter networks intalled to RIB (disable as ACL
                                        name means filtering is disabled)
                                        
                                        .. attribute:: access_list_name
                                        
                                        	Access Control List name
                                        	**type**\:  str
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route Policy name
                                        	**type**\:  str
                                        
                                        .. attribute:: _is_presence
                                        
                                        	Is present if this instance represents presence container else not
                                        	**type**\: bool
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self._is_presence = True
                                            self.access_list_name = None
                                            self.route_policy_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:distribute-list'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self._is_presence:
                                                return True
                                            if self.access_list_name is not None:
                                                return True

                                            if self.route_policy_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DistributeList']['meta_info']


                                    class Authentication(object):
                                        """
                                        Authentication
                                        
                                        .. attribute:: key
                                        
                                        	Authentication key configuration
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: message_digest_keies
                                        
                                        	Message digest authentication password (key) configurations, first 16 chars used
                                        	**type**\:   :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies>`
                                        
                                        .. attribute:: type
                                        
                                        	Authentication type
                                        	**type**\:   :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.key = None
                                            self.message_digest_keies = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies()
                                            self.message_digest_keies.parent = self
                                            self.type = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type()
                                            self.type.parent = self


                                        class Type(object):
                                            """
                                            Authentication type
                                            
                                            .. attribute:: authen_type
                                            
                                            	Authentication type code 
                                            	**type**\:   :py:class:`OspfAuthenticationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthenticationEnum>`
                                            
                                            .. attribute:: keychain_authen_type
                                            
                                            	Keychain authentication type
                                            	**type**\:   :py:class:`OspfKeychainAuthEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuthEnum>`
                                            
                                            .. attribute:: keychain_name
                                            
                                            	Keychain name
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.authen_type = None
                                                self.keychain_authen_type = None
                                                self.keychain_name = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:type'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.authen_type is not None:
                                                    return True

                                                if self.keychain_authen_type is not None:
                                                    return True

                                                if self.keychain_name is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type']['meta_info']


                                        class MessageDigestKeies(object):
                                            """
                                            Message digest authentication password (key)
                                            configurations, first 16 chars used
                                            
                                            .. attribute:: message_digest_key
                                            
                                            	Message digest authentication password (key) configuration
                                            	**type**\: list of    :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.message_digest_key = YList()
                                                self.message_digest_key.parent = self
                                                self.message_digest_key.name = 'message_digest_key'


                                            class MessageDigestKey(object):
                                                """
                                                Message digest authentication password (key)
                                                configuration
                                                
                                                .. attribute:: key_id  <key>
                                                
                                                	Key ID
                                                	**type**\:  int
                                                
                                                	**range:** 1..255
                                                
                                                .. attribute:: password
                                                
                                                	Password
                                                	**type**\:  str
                                                
                                                	**pattern:** (!.+)\|([^!].+)
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.key_id = None
                                                    self.password = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.key_id is None:
                                                        raise YPYModelError('Key property key_id is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-key[Cisco-IOS-XR-ipv4-ospf-cfg:key-id = ' + str(self.key_id) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.key_id is not None:
                                                        return True

                                                    if self.password is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies.MessageDigestKey']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-keies'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.message_digest_key is not None:
                                                    for child_ref in self.message_digest_key:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:authentication'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.key is not None:
                                                return True

                                            if self.message_digest_keies is not None and self.message_digest_keies._has_data():
                                                return True

                                            if self.type is not None and self.type._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication']['meta_info']


                                    class Neighbors(object):
                                        """
                                        Neighbor router configuration information
                                        
                                        .. attribute:: neighbor
                                        
                                        	Router configuration information for a particular neighbor
                                        	**type**\: list of    :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors.Neighbor>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.neighbor = YList()
                                            self.neighbor.parent = self
                                            self.neighbor.name = 'neighbor'


                                        class Neighbor(object):
                                            """
                                            Router configuration information for a
                                            particular neighbor
                                            
                                            .. attribute:: neighbor_address  <key>
                                            
                                            	Neighbor IP address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: cost
                                            
                                            	OSPF cost for point\-to\-multipoint neighbor
                                            	**type**\:  int
                                            
                                            	**range:** 1..65535
                                            
                                            	**default value**\: 1
                                            
                                            .. attribute:: database_filter
                                            
                                            	Database filter\: Filter OSPF LSA during synchronization and flooding for point\-to\-multipoint
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: poll_interval
                                            
                                            	OSPF dead router poll\-interval in seconds
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 40
                                            
                                            .. attribute:: priority
                                            
                                            	OSPF priority of non\-broadcast neighbor
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            	**default value**\: 0
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.neighbor_address = None
                                                self.cost = None
                                                self.database_filter = None
                                                self.poll_interval = None
                                                self.priority = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.neighbor_address is None:
                                                    raise YPYModelError('Key property neighbor_address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:neighbor[Cisco-IOS-XR-ipv4-ospf-cfg:neighbor-address = ' + str(self.neighbor_address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.neighbor_address is not None:
                                                    return True

                                                if self.cost is not None:
                                                    return True

                                                if self.database_filter is not None:
                                                    return True

                                                if self.poll_interval is not None:
                                                    return True

                                                if self.priority is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors.Neighbor']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:neighbors'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.neighbor is not None:
                                                for child_ref in self.neighbor:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors']['meta_info']


                                    class DeadIntervalMinimal(object):
                                        """
                                        Interval after which a neighbor is declared dead
                                        
                                        .. attribute:: interval
                                        
                                        	Interval size in seconds after which a neighbor is declared dead
                                        	**type**\:  int
                                        
                                        	**range:** 1..65535
                                        
                                        	**units**\: second
                                        
                                        .. attribute:: multiplier
                                        
                                        	Number of Hellos in one second
                                        	**type**\:  int
                                        
                                        	**range:** 3..20
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.interval = None
                                            self.multiplier = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:dead-interval-minimal'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.interval is not None:
                                                return True

                                            if self.multiplier is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal']['meta_info']


                                    class FastReroute(object):
                                        """
                                        Fast\-reroute configuration
                                        
                                        .. attribute:: fast_reroute_enable
                                        
                                        	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                        	**type**\:   :py:class:`OspfFastRerouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteEnum>`
                                        
                                        .. attribute:: per_link
                                        
                                        	Fast\-reroute per\-link configuration
                                        	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink>`
                                        
                                        .. attribute:: per_prefix
                                        
                                        	Fast\-reroute per\-prefix global configuration
                                        	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.fast_reroute_enable = None
                                            self.per_link = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink()
                                            self.per_link.parent = self
                                            self.per_prefix = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix()
                                            self.per_prefix.parent = self


                                        class PerLink(object):
                                            """
                                            Fast\-reroute per\-link configuration
                                            
                                            .. attribute:: candidate_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                            	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces>`
                                            
                                            .. attribute:: exclude_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                            	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces>`
                                            
                                            .. attribute:: fast_reroute_use_candidate_only
                                            
                                            	Use only interfaces on the candidate list as a backup path
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces()
                                                self.candidate_interfaces.parent = self
                                                self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces()
                                                self.exclude_interfaces.parent = self
                                                self.fast_reroute_use_candidate_only = None


                                            class CandidateInterfaces(object):
                                                """
                                                Fast\-reroute per\-link/per\-prefix candidate
                                                interface configuration
                                                
                                                .. attribute:: candidate_interface
                                                
                                                	Candidate backup interface
                                                	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.candidate_interface = YList()
                                                    self.candidate_interface.parent = self
                                                    self.candidate_interface.name = 'candidate_interface'


                                                class CandidateInterface(object):
                                                    """
                                                    Candidate backup interface
                                                    
                                                    .. attribute:: interface_name  <key>
                                                    
                                                    	Interface
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-01-02'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.interface_name = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                                        if self.interface_name is None:
                                                            raise YPYModelError('Key property interface_name is None')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.interface_name is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.candidate_interface is not None:
                                                        for child_ref in self.candidate_interface:
                                                            if child_ref._has_data():
                                                                return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces']['meta_info']


                                            class ExcludeInterfaces(object):
                                                """
                                                Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                                interface configuration
                                                
                                                .. attribute:: exclude_interface
                                                
                                                	Exclude an interface from becoming a backup or UCMP
                                                	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.exclude_interface = YList()
                                                    self.exclude_interface.parent = self
                                                    self.exclude_interface.name = 'exclude_interface'


                                                class ExcludeInterface(object):
                                                    """
                                                    Exclude an interface from becoming a backup or
                                                    UCMP
                                                    
                                                    .. attribute:: interface_name  <key>
                                                    
                                                    	Interface
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-01-02'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.interface_name = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                                        if self.interface_name is None:
                                                            raise YPYModelError('Key property interface_name is None')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.interface_name is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.exclude_interface is not None:
                                                        for child_ref in self.exclude_interface:
                                                            if child_ref._has_data():
                                                                return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-link'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                                    return True

                                                if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                                    return True

                                                if self.fast_reroute_use_candidate_only is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink']['meta_info']


                                        class PerPrefix(object):
                                            """
                                            Fast\-reroute per\-prefix global configuration
                                            
                                            .. attribute:: candidate_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                            	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                            
                                            .. attribute:: exclude_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                            	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                            
                                            .. attribute:: fast_reroute_use_candidate_only
                                            
                                            	Use only interfaces on the candidate list as a backup path
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: remote_lfa
                                            
                                            	Remote LFA configuration
                                            	**type**\:   :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa>`
                                            
                                            .. attribute:: tiebreakers
                                            
                                            	Fast\-reroute tiebreakers configurations
                                            	**type**\:   :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers>`
                                            
                                            .. attribute:: topology_independent_lfa
                                            
                                            	Topology Independet LFA configuration
                                            	**type**\:  bool
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.candidate_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces()
                                                self.candidate_interfaces.parent = self
                                                self.exclude_interfaces = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                                self.exclude_interfaces.parent = self
                                                self.fast_reroute_use_candidate_only = None
                                                self.remote_lfa = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa()
                                                self.remote_lfa.parent = self
                                                self.tiebreakers = Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers()
                                                self.tiebreakers.parent = self
                                                self.topology_independent_lfa = None


                                            class RemoteLfa(object):
                                                """
                                                Remote LFA configuration
                                                
                                                .. attribute:: maximum_cost
                                                
                                                	Maximum path cost to remote LFA
                                                	**type**\:  int
                                                
                                                	**range:** 1..4294967295
                                                
                                                .. attribute:: tunnel
                                                
                                                	Enable/Disable remote LFA computation
                                                	**type**\:   :py:class:`OspfFrrRlfaTunnelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFrrRlfaTunnelEnum>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.maximum_cost = None
                                                    self.tunnel = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:remote-lfa'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.maximum_cost is not None:
                                                        return True

                                                    if self.tunnel is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa']['meta_info']


                                            class Tiebreakers(object):
                                                """
                                                Fast\-reroute tiebreakers configurations
                                                
                                                .. attribute:: tiebreaker
                                                
                                                	Fast\-reroute tiebreakers configuration
                                                	**type**\: list of    :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.tiebreaker = YList()
                                                    self.tiebreaker.parent = self
                                                    self.tiebreaker.name = 'tiebreaker'


                                                class Tiebreaker(object):
                                                    """
                                                    Fast\-reroute tiebreakers configuration
                                                    
                                                    .. attribute:: tiebreaker_type  <key>
                                                    
                                                    	Tiebreaker type
                                                    	**type**\:   :py:class:`OspfFastRerouteTiebreakersIntfEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakersIntfEnum>`
                                                    
                                                    .. attribute:: tiebreaker_index
                                                    
                                                    	Index value for a tiebreaker, 0 to disable
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..255
                                                    
                                                    	**mandatory**\: True
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-01-02'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.tiebreaker_type = None
                                                        self.tiebreaker_index = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                                        if self.tiebreaker_type is None:
                                                            raise YPYModelError('Key property tiebreaker_type is None')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker[Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker-type = ' + str(self.tiebreaker_type) + ']'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.tiebreaker_type is not None:
                                                            return True

                                                        if self.tiebreaker_index is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreakers'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.tiebreaker is not None:
                                                        for child_ref in self.tiebreaker:
                                                            if child_ref._has_data():
                                                                return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers']['meta_info']


                                            class CandidateInterfaces(object):
                                                """
                                                Fast\-reroute per\-link/per\-prefix candidate
                                                interface configuration
                                                
                                                .. attribute:: candidate_interface
                                                
                                                	Candidate backup interface
                                                	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.candidate_interface = YList()
                                                    self.candidate_interface.parent = self
                                                    self.candidate_interface.name = 'candidate_interface'


                                                class CandidateInterface(object):
                                                    """
                                                    Candidate backup interface
                                                    
                                                    .. attribute:: interface_name  <key>
                                                    
                                                    	Interface
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-01-02'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.interface_name = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                                        if self.interface_name is None:
                                                            raise YPYModelError('Key property interface_name is None')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.interface_name is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.candidate_interface is not None:
                                                        for child_ref in self.candidate_interface:
                                                            if child_ref._has_data():
                                                                return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces']['meta_info']


                                            class ExcludeInterfaces(object):
                                                """
                                                Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                                interface configuration
                                                
                                                .. attribute:: exclude_interface
                                                
                                                	Exclude an interface from becoming a backup or UCMP
                                                	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.exclude_interface = YList()
                                                    self.exclude_interface.parent = self
                                                    self.exclude_interface.name = 'exclude_interface'


                                                class ExcludeInterface(object):
                                                    """
                                                    Exclude an interface from becoming a backup or
                                                    UCMP
                                                    
                                                    .. attribute:: interface_name  <key>
                                                    
                                                    	Interface
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv4-ospf-cfg'
                                                    _revision = '2017-01-02'

                                                    def __init__(self):
                                                        self.parent = None
                                                        self.interface_name = None

                                                    @property
                                                    def _common_path(self):
                                                        if self.parent is None:
                                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                                        if self.interface_name is None:
                                                            raise YPYModelError('Key property interface_name is None')

                                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                    def is_config(self):
                                                        ''' Returns True if this instance represents config data else returns False '''
                                                        return True

                                                    def _has_data(self):
                                                        if not self.is_config():
                                                            return False
                                                        if self.interface_name is not None:
                                                            return True

                                                        return False

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.exclude_interface is not None:
                                                        for child_ref in self.exclude_interface:
                                                            if child_ref._has_data():
                                                                return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-prefix'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                                    return True

                                                if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                                    return True

                                                if self.fast_reroute_use_candidate_only is not None:
                                                    return True

                                                if self.remote_lfa is not None and self.remote_lfa._has_data():
                                                    return True

                                                if self.tiebreakers is not None and self.tiebreakers._has_data():
                                                    return True

                                                if self.topology_independent_lfa is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:fast-reroute'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.fast_reroute_enable is not None:
                                                return True

                                            if self.per_link is not None and self.per_link._has_data():
                                                return True

                                            if self.per_prefix is not None and self.per_prefix._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute']['meta_info']


                                    class CostFallback(object):
                                        """
                                        Interface fallback cost
                                        
                                        .. attribute:: cost
                                        
                                        	Fallback cost of link
                                        	**type**\:  int
                                        
                                        	**range:** 1..65535
                                        
                                        .. attribute:: threshold
                                        
                                        	Bandwidth threshold
                                        	**type**\:  int
                                        
                                        	**range:** 1..4294967
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.cost = None
                                            self.threshold = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:cost-fallback'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.cost is not None:
                                                return True

                                            if self.threshold is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.interface_name is None:
                                            raise YPYModelError('Key property interface_name is None')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:multi-area-interface-scope[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.interface_name is not None:
                                            return True

                                        if self.authentication is not None and self.authentication._has_data():
                                            return True

                                        if self.cost is not None:
                                            return True

                                        if self.cost_fallback is not None and self.cost_fallback._has_data():
                                            return True

                                        if self.database_filter is not None:
                                            return True

                                        if self.dead_interval_minimal is not None and self.dead_interval_minimal._has_data():
                                            return True

                                        if self.distribute_list is not None and self.distribute_list._has_data():
                                            return True

                                        if self.fast_reroute is not None and self.fast_reroute._has_data():
                                            return True

                                        if self.hello_interval is not None:
                                            return True

                                        if self.mtu_ignore is not None:
                                            return True

                                        if self.neighbors is not None and self.neighbors._has_data():
                                            return True

                                        if self.packet_size is not None:
                                            return True

                                        if self.passive is not None:
                                            return True

                                        if self.retransmit_interval is not None:
                                            return True

                                        if self.running is not None:
                                            return True

                                        if self.transmit_delay is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:multi-area-interface-scopes'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.multi_area_interface_scope is not None:
                                        for child_ref in self.multi_area_interface_scope:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes']['meta_info']


                            class AreaRanges(object):
                                """
                                Summarize routes matching address/mask (border
                                routers only)
                                
                                .. attribute:: area_range
                                
                                	Ordering index
                                	**type**\: list of    :py:class:`AreaRange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaRanges.AreaRange>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.area_range = YList()
                                    self.area_range.parent = self
                                    self.area_range.name = 'area_range'


                                class AreaRange(object):
                                    """
                                    Ordering index
                                    
                                    .. attribute:: address  <key>
                                    
                                    	IP address to match
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: netmask  <key>
                                    
                                    	IP netmask for address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: not_advertise
                                    
                                    	Do not advertise this range
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.address = None
                                        self.netmask = None
                                        self.not_advertise = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.address is None:
                                            raise YPYModelError('Key property address is None')
                                        if self.netmask is None:
                                            raise YPYModelError('Key property netmask is None')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:area-range[Cisco-IOS-XR-ipv4-ospf-cfg:address = ' + str(self.address) + '][Cisco-IOS-XR-ipv4-ospf-cfg:netmask = ' + str(self.netmask) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.address is not None:
                                            return True

                                        if self.netmask is not None:
                                            return True

                                        if self.not_advertise is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaRanges.AreaRange']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:area-ranges'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.area_range is not None:
                                        for child_ref in self.area_range:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaRanges']['meta_info']


                            class Nssa(object):
                                """
                                Specify area as a NSSA area
                                
                                .. attribute:: default_info_originate
                                
                                	Originate Type 7 default into NSSA area
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: metric_type
                                
                                	OSPF External metric type
                                	**type**\:   :py:class:`OspfLinkStateMetricEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetricEnum>`
                                
                                	**default value**\: type2
                                
                                .. attribute:: no_redistribution
                                
                                	No redistribution into this NSSA area
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: no_summary
                                
                                	Do not send summary LSA into NSSA
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: nssa_def_metric
                                
                                	OSPF default metric
                                	**type**\:  int
                                
                                	**range:** 1..16777214
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.default_info_originate = None
                                    self.metric_type = None
                                    self.no_redistribution = None
                                    self.no_summary = None
                                    self.nssa_def_metric = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:nssa'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.default_info_originate is not None:
                                        return True

                                    if self.metric_type is not None:
                                        return True

                                    if self.no_redistribution is not None:
                                        return True

                                    if self.no_summary is not None:
                                        return True

                                    if self.nssa_def_metric is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Nssa']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.area_id is None:
                                    raise YPYModelError('Key property area_id is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:area-area-id[Cisco-IOS-XR-ipv4-ospf-cfg:area-id = ' + str(self.area_id) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.area_id is not None:
                                    return True

                                if self.area_ranges is not None and self.area_ranges._has_data():
                                    return True

                                if self.area_scope is not None and self.area_scope._has_data():
                                    return True

                                if self.default_cost is not None:
                                    return True

                                if self.external_out is not None:
                                    return True

                                if self.mpls_traffic_eng is not None:
                                    return True

                                if self.multi_area_interface_scopes is not None and self.multi_area_interface_scopes._has_data():
                                    return True

                                if self.name_scopes is not None and self.name_scopes._has_data():
                                    return True

                                if self.nssa is not None and self.nssa._has_data():
                                    return True

                                if self.route_policy_in is not None:
                                    return True

                                if self.route_policy_out is not None:
                                    return True

                                if self.running is not None:
                                    return True

                                if self.segment_routing is not None:
                                    return True

                                if self.sham_link_scopes is not None and self.sham_link_scopes._has_data():
                                    return True

                                if self.stub is not None:
                                    return True

                                if self.summary_in is not None:
                                    return True

                                if self.virtual_link_scopes is not None and self.virtual_link_scopes._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:area-addresses'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.area_address is not None:
                                for child_ref in self.area_address:
                                    if child_ref._has_data():
                                        return True

                            if self.area_area_id is not None:
                                for child_ref in self.area_area_id:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.AreaAddresses']['meta_info']


                    class Timers(object):
                        """
                        Adjust routing timers
                        
                        .. attribute:: fast_reroute_timer
                        
                        	Number of ms between end of SPF and start of IPFRR computation
                        	**type**\:  int
                        
                        	**range:** 50..600000
                        
                        	**units**\: millisecond
                        
                        	**default value**\: 500
                        
                        .. attribute:: lsa_generation_timer
                        
                        	OSPF LSA timers (in milliseconds)
                        	**type**\:   :py:class:`LsaGenerationTimer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Timers.LsaGenerationTimer>`
                        
                        .. attribute:: lsa_group_pacing
                        
                        	LSA group pacing timer (Seconds between group of LSAs being refreshed or maxaged)
                        	**type**\:  int
                        
                        	**range:** 10..1800
                        
                        	**units**\: second
                        
                        	**default value**\: 240
                        
                        .. attribute:: lsa_min_arrival
                        
                        	MinLSArrival timer (minimum interval in milliseconds between accepting the same LSA)
                        	**type**\:  int
                        
                        	**range:** 0..600000
                        
                        	**units**\: millisecond
                        
                        	**default value**\: 100
                        
                        .. attribute:: lsa_pacing_flood
                        
                        	Seconds between group of LSAs being refreshed or maxaged
                        	**type**\:  int
                        
                        	**range:** 5..100
                        
                        	**units**\: second
                        
                        .. attribute:: lsa_refresh
                        
                        	How often self\-originated LSAs should be refreshed
                        	**type**\:  int
                        
                        	**range:** 1800..2700
                        
                        	**units**\: second
                        
                        	**default value**\: 1800
                        
                        .. attribute:: spf_timer
                        
                        	OSPF SPF timers (in milliseconds)
                        	**type**\:   :py:class:`SpfTimer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.Vrfs.Vrf.Timers.SpfTimer>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.fast_reroute_timer = None
                            self.lsa_generation_timer = Ospf.Processes.Process.Vrfs.Vrf.Timers.LsaGenerationTimer()
                            self.lsa_generation_timer.parent = self
                            self.lsa_group_pacing = None
                            self.lsa_min_arrival = None
                            self.lsa_pacing_flood = None
                            self.lsa_refresh = None
                            self.spf_timer = Ospf.Processes.Process.Vrfs.Vrf.Timers.SpfTimer()
                            self.spf_timer.parent = self


                        class SpfTimer(object):
                            """
                            OSPF SPF timers (in milliseconds)
                            
                            .. attribute:: backoff_increment
                            
                            	Number of milliseconds delay between successive SPF runs
                            	**type**\:  int
                            
                            	**range:** 1..600000
                            
                            	**units**\: millisecond
                            
                            	**default value**\: 10000
                            
                            .. attribute:: initial_delay
                            
                            	Number of milliseconds before first SPF run
                            	**type**\:  int
                            
                            	**range:** 1..600000
                            
                            	**units**\: millisecond
                            
                            	**default value**\: 5000
                            
                            .. attribute:: max_delay
                            
                            	Max number of milliseconds between consecutive SPF calculations
                            	**type**\:  int
                            
                            	**range:** 1..600000
                            
                            	**units**\: millisecond
                            
                            	**default value**\: 10000
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.backoff_increment = None
                                self.initial_delay = None
                                self.max_delay = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:spf-timer'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.backoff_increment is not None:
                                    return True

                                if self.initial_delay is not None:
                                    return True

                                if self.max_delay is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.Timers.SpfTimer']['meta_info']


                        class LsaGenerationTimer(object):
                            """
                            OSPF LSA timers (in milliseconds)
                            
                            .. attribute:: backoff_increment
                            
                            	Number of milliseconds delay between successive LSA builds
                            	**type**\:  int
                            
                            	**range:** 1..600000
                            
                            	**units**\: millisecond
                            
                            	**default value**\: 200
                            
                            .. attribute:: initial_delay
                            
                            	Number of milliseconds before generating first LSA
                            	**type**\:  int
                            
                            	**range:** 0..600000
                            
                            	**units**\: millisecond
                            
                            	**default value**\: 50
                            
                            .. attribute:: max_delay
                            
                            	Max number of milliseconds between consecutive LSA builds 
                            	**type**\:  int
                            
                            	**range:** 1..600000
                            
                            	**units**\: millisecond
                            
                            	**default value**\: 200
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.backoff_increment = None
                                self.initial_delay = None
                                self.max_delay = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:lsa-generation-timer'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.backoff_increment is not None:
                                    return True

                                if self.initial_delay is not None:
                                    return True

                                if self.max_delay is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.Timers.LsaGenerationTimer']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:timers'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.fast_reroute_timer is not None:
                                return True

                            if self.lsa_generation_timer is not None and self.lsa_generation_timer._has_data():
                                return True

                            if self.lsa_group_pacing is not None:
                                return True

                            if self.lsa_min_arrival is not None:
                                return True

                            if self.lsa_pacing_flood is not None:
                                return True

                            if self.lsa_refresh is not None:
                                return True

                            if self.spf_timer is not None and self.spf_timer._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf.Timers']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.vrf_name is None:
                            raise YPYModelError('Key property vrf_name is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:vrf[Cisco-IOS-XR-ipv4-ospf-cfg:vrf-name = ' + str(self.vrf_name) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.vrf_name is not None:
                            return True

                        if self.adjacency_changes is not None:
                            return True

                        if self.adjacency_stagger is not None and self.adjacency_stagger._has_data():
                            return True

                        if self.af is not None and self.af._has_data():
                            return True

                        if self.area_addresses is not None and self.area_addresses._has_data():
                            return True

                        if self.auto_cost is not None and self.auto_cost._has_data():
                            return True

                        if self.default_information is not None and self.default_information._has_data():
                            return True

                        if self.default_metric is not None:
                            return True

                        if self.disable_dn_bit_check is not None:
                            return True

                        if self.distance is not None and self.distance._has_data():
                            return True

                        if self.domain_id is not None and self.domain_id._has_data():
                            return True

                        if self.domain_tag is not None:
                            return True

                        if self.fast_reroute is not None and self.fast_reroute._has_data():
                            return True

                        if self.ignore_mospf is not None:
                            return True

                        if self.max_lsa is not None and self.max_lsa._has_data():
                            return True

                        if self.max_metric is not None and self.max_metric._has_data():
                            return True

                        if self.maximum_interfaces is not None:
                            return True

                        if self.maximum_paths is not None:
                            return True

                        if self.maximum_redistribute_prefix is not None and self.maximum_redistribute_prefix._has_data():
                            return True

                        if self.microloop is not None and self.microloop._has_data():
                            return True

                        if self.no_opaque is not None:
                            return True

                        if self.nsf is not None and self.nsf._has_data():
                            return True

                        if self.outgoing_route_updates is not None and self.outgoing_route_updates._has_data():
                            return True

                        if self.process_scope is not None and self.process_scope._has_data():
                            return True

                        if self.queue is not None and self.queue._has_data():
                            return True

                        if self.redistribution is not None and self.redistribution._has_data():
                            return True

                        if self.router_id is not None:
                            return True

                        if self.snmp_context is not None:
                            return True

                        if self.snmp_trap_enabled is not None:
                            return True

                        if self.spf_prefix_priority is not None:
                            return True

                        if self.summary_prefixes is not None and self.summary_prefixes._has_data():
                            return True

                        if self.timers is not None and self.timers._has_data():
                            return True

                        if self.type7 is not None:
                            return True

                        if self.ucmp is not None and self.ucmp._has_data():
                            return True

                        if self.vrf_lite is not None:
                            return True

                        if self.vrf_start is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                        return meta._meta_table['Ospf.Processes.Process.Vrfs.Vrf']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:vrfs'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.vrf is not None:
                        for child_ref in self.vrf:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                    return meta._meta_table['Ospf.Processes.Process.Vrfs']['meta_info']


            class GracefulShutdownTimers(object):
                """
                Adjust routing timers
                
                .. attribute:: graceful_shutdown_initial_delay
                
                	Number of seconds to delay before beginning graceful shutdown
                	**type**\:  int
                
                	**range:** 0..90
                
                	**units**\: second
                
                	**default value**\: 5
                
                .. attribute:: graceful_shutdown_retain_routes
                
                	Time to keep OSPF routes active after graceful shutdown(in seconds)
                	**type**\:  int
                
                	**range:** 0..90
                
                	**units**\: second
                
                	**default value**\: 5
                
                

                """

                _prefix = 'ipv4-ospf-cfg'
                _revision = '2017-01-02'

                def __init__(self):
                    self.parent = None
                    self.graceful_shutdown_initial_delay = None
                    self.graceful_shutdown_retain_routes = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:graceful-shutdown-timers'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.graceful_shutdown_initial_delay is not None:
                        return True

                    if self.graceful_shutdown_retain_routes is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                    return meta._meta_table['Ospf.Processes.Process.GracefulShutdownTimers']['meta_info']


            class DefaultVrf(object):
                """
                Default VRF related configuration
                
                .. attribute:: adjacency_changes
                
                	Log changes in adjacency state
                	**type**\:   :py:class:`OspfLogAdjEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLogAdjEnum>`
                
                .. attribute:: adjacency_stagger
                
                	Staggering OSPF adjacency bring up
                	**type**\:   :py:class:`AdjacencyStagger <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AdjacencyStagger>`
                
                .. attribute:: af
                
                	OSPF address family
                	**type**\:   :py:class:`Af <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Af>`
                
                	**presence node**\: True
                
                .. attribute:: area_addresses
                
                	Area configuration
                	**type**\:   :py:class:`AreaAddresses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses>`
                
                .. attribute:: auto_cost
                
                	Controls automatic cost based on bandwidth
                	**type**\:   :py:class:`AutoCost <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AutoCost>`
                
                .. attribute:: default_information
                
                	Control distribution of default information
                	**type**\:   :py:class:`DefaultInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.DefaultInformation>`
                
                .. attribute:: default_metric
                
                	Set default metric of redistributed routes
                	**type**\:  int
                
                	**range:** 1..16777214
                
                	**default value**\: 1
                
                .. attribute:: distance
                
                	Administrative distance configuration
                	**type**\:   :py:class:`Distance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Distance>`
                
                .. attribute:: fast_reroute
                
                	Fast\-reroute instance scoped parameters
                	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.FastReroute>`
                
                .. attribute:: ignore_mospf
                
                	Ignore MOSPF (Type 6) LSAs
                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: max_lsa
                
                	Set max\-lsa configuration
                	**type**\:   :py:class:`MaxLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.MaxLsa>`
                
                	**presence node**\: True
                
                .. attribute:: max_metric
                
                	Set maximum metric configuration
                	**type**\:   :py:class:`MaxMetric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.MaxMetric>`
                
                .. attribute:: maximum_interfaces
                
                	Max number of interfaces allowed to be configured
                	**type**\:  int
                
                	**range:** 1..4294967295
                
                	**default value**\: 1024
                
                .. attribute:: maximum_paths
                
                	Forward packets over multiple paths (number of paths)
                	**type**\:  int
                
                	**range:** 1..64
                
                .. attribute:: maximum_redistribute_prefix
                
                	Maximum number of prefixes redistributed into OSPF
                	**type**\:   :py:class:`MaximumRedistributePrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.MaximumRedistributePrefix>`
                
                .. attribute:: microloop
                
                	Microloop configuration
                	**type**\:   :py:class:`Microloop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Microloop>`
                
                .. attribute:: monitor_convergence
                
                	Enable convergence monitoring
                	**type**\:   :py:class:`MonitorConvergence <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.MonitorConvergence>`
                
                .. attribute:: mpls
                
                	Configure MPLS routing protocol parameters
                	**type**\:   :py:class:`Mpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Mpls>`
                
                .. attribute:: no_opaque
                
                	Disable opaque LSAs
                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: nsf
                
                	Non Stop Forwarding configuration
                	**type**\:   :py:class:`Nsf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Nsf>`
                
                .. attribute:: outgoing_route_updates
                
                	Filter outgoing routing updates
                	**type**\:   :py:class:`OutgoingRouteUpdates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.OutgoingRouteUpdates>`
                
                .. attribute:: process_scope
                
                	Process scope configuration
                	**type**\:   :py:class:`ProcessScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope>`
                
                .. attribute:: queue
                
                	Adjust OSPF input queue sizes and processing quantums
                	**type**\:   :py:class:`Queue <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Queue>`
                
                .. attribute:: redistribution
                
                	Redistribute configurations
                	**type**\:   :py:class:`Redistribution <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Redistribution>`
                
                .. attribute:: router_id
                
                	Router ID for this OSPF process. Enter an IP Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: segment_routing
                
                	Segment Routing instance scoped parameters
                	**type**\:   :py:class:`SegmentRouting <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.SegmentRouting>`
                
                .. attribute:: snmp_context
                
                	OSPF SNMP context configuration
                	**type**\:  str
                
                .. attribute:: spf_prefix_priority
                
                	Configure a route\-policy for prioritizing RIB route install
                	**type**\:  str
                
                .. attribute:: summary_prefixes
                
                	Configure IP prefix summary
                	**type**\:   :py:class:`SummaryPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.SummaryPrefixes>`
                
                .. attribute:: timers
                
                	Adjust routing timers
                	**type**\:   :py:class:`Timers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Timers>`
                
                .. attribute:: type7
                
                	Prefer type7 externals over type5
                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: ucmp
                
                	Unequal Cost Multi\-ptah configuration
                	**type**\:   :py:class:`Ucmp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Ucmp>`
                
                

                """

                _prefix = 'ipv4-ospf-cfg'
                _revision = '2017-01-02'

                def __init__(self):
                    self.parent = None
                    self.adjacency_changes = None
                    self.adjacency_stagger = Ospf.Processes.Process.DefaultVrf.AdjacencyStagger()
                    self.adjacency_stagger.parent = self
                    self.af = None
                    self.area_addresses = Ospf.Processes.Process.DefaultVrf.AreaAddresses()
                    self.area_addresses.parent = self
                    self.auto_cost = Ospf.Processes.Process.DefaultVrf.AutoCost()
                    self.auto_cost.parent = self
                    self.default_information = Ospf.Processes.Process.DefaultVrf.DefaultInformation()
                    self.default_information.parent = self
                    self.default_metric = None
                    self.distance = Ospf.Processes.Process.DefaultVrf.Distance()
                    self.distance.parent = self
                    self.fast_reroute = Ospf.Processes.Process.DefaultVrf.FastReroute()
                    self.fast_reroute.parent = self
                    self.ignore_mospf = None
                    self.max_lsa = None
                    self.max_metric = Ospf.Processes.Process.DefaultVrf.MaxMetric()
                    self.max_metric.parent = self
                    self.maximum_interfaces = None
                    self.maximum_paths = None
                    self.maximum_redistribute_prefix = Ospf.Processes.Process.DefaultVrf.MaximumRedistributePrefix()
                    self.maximum_redistribute_prefix.parent = self
                    self.microloop = Ospf.Processes.Process.DefaultVrf.Microloop()
                    self.microloop.parent = self
                    self.monitor_convergence = Ospf.Processes.Process.DefaultVrf.MonitorConvergence()
                    self.monitor_convergence.parent = self
                    self.mpls = Ospf.Processes.Process.DefaultVrf.Mpls()
                    self.mpls.parent = self
                    self.no_opaque = None
                    self.nsf = Ospf.Processes.Process.DefaultVrf.Nsf()
                    self.nsf.parent = self
                    self.outgoing_route_updates = Ospf.Processes.Process.DefaultVrf.OutgoingRouteUpdates()
                    self.outgoing_route_updates.parent = self
                    self.process_scope = Ospf.Processes.Process.DefaultVrf.ProcessScope()
                    self.process_scope.parent = self
                    self.queue = Ospf.Processes.Process.DefaultVrf.Queue()
                    self.queue.parent = self
                    self.redistribution = Ospf.Processes.Process.DefaultVrf.Redistribution()
                    self.redistribution.parent = self
                    self.router_id = None
                    self.segment_routing = Ospf.Processes.Process.DefaultVrf.SegmentRouting()
                    self.segment_routing.parent = self
                    self.snmp_context = None
                    self.spf_prefix_priority = None
                    self.summary_prefixes = Ospf.Processes.Process.DefaultVrf.SummaryPrefixes()
                    self.summary_prefixes.parent = self
                    self.timers = Ospf.Processes.Process.DefaultVrf.Timers()
                    self.timers.parent = self
                    self.type7 = None
                    self.ucmp = Ospf.Processes.Process.DefaultVrf.Ucmp()
                    self.ucmp.parent = self


                class MonitorConvergence(object):
                    """
                    Enable convergence monitoring
                    
                    .. attribute:: enable
                    
                    	Enable convergence monitoring
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: prefix_list
                    
                    	Enable the monitoring of individual prefixes (prefix list name)
                    	**type**\:  str
                    
                    .. attribute:: track_external_routes
                    
                    	Enable the monitoring of External routes
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: track_ip_frr
                    
                    	Enable the Tracking of IP\-Frr Convergence
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: track_summary_routes
                    
                    	Enable the monitoring of Summary routes
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-01-02'

                    def __init__(self):
                        self.parent = None
                        self.enable = None
                        self.prefix_list = None
                        self.track_external_routes = None
                        self.track_ip_frr = None
                        self.track_summary_routes = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:monitor-convergence'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.enable is not None:
                            return True

                        if self.prefix_list is not None:
                            return True

                        if self.track_external_routes is not None:
                            return True

                        if self.track_ip_frr is not None:
                            return True

                        if self.track_summary_routes is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.MonitorConvergence']['meta_info']


                class SegmentRouting(object):
                    """
                    Segment Routing instance scoped parameters
                    
                    .. attribute:: prefix_sid_map_advertise_local
                    
                    	Enable advertisement of local SRMS entries
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: prefix_sid_map_receive_disable
                    
                    	Disable prefix\-SID mapping client
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: sr_prefer
                    
                    	Prefer segment routing labels over LDP labels
                    	**type**\:   :py:class:`SrPrefer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.SegmentRouting.SrPrefer>`
                    
                    .. attribute:: strict_spf_disable
                    
                    	Strict\-SPF support and SID advertisement
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-01-02'

                    def __init__(self):
                        self.parent = None
                        self.prefix_sid_map_advertise_local = None
                        self.prefix_sid_map_receive_disable = None
                        self.sr_prefer = Ospf.Processes.Process.DefaultVrf.SegmentRouting.SrPrefer()
                        self.sr_prefer.parent = self
                        self.strict_spf_disable = None


                    class SrPrefer(object):
                        """
                        Prefer segment routing labels over LDP
                        labels
                        
                        .. attribute:: enable
                        
                        	Enable SR labels to be preferred over LDP labels
                        	**type**\:  bool
                        
                        .. attribute:: prefix_list_name
                        
                        	Name of the Prefix List
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.enable = None
                            self.prefix_list_name = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:sr-prefer'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.enable is not None:
                                return True

                            if self.prefix_list_name is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.SegmentRouting.SrPrefer']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:segment-routing'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.prefix_sid_map_advertise_local is not None:
                            return True

                        if self.prefix_sid_map_receive_disable is not None:
                            return True

                        if self.sr_prefer is not None and self.sr_prefer._has_data():
                            return True

                        if self.strict_spf_disable is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.SegmentRouting']['meta_info']


                class Mpls(object):
                    """
                    Configure MPLS routing protocol parameters
                    
                    .. attribute:: autoroute_exclude
                    
                    	Exclude IP destinations from using TE tunnels
                    	**type**\:  str
                    
                    .. attribute:: igp_intact
                    
                    	Enable igp\-intact mode in OSPF
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: ldp_sync_update
                    
                    	Enable LDP sync induced metric propagation
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: mpls_router_id
                    
                    	MPLS\-TE stable loopback address for this OSPF process.Enter either as IP Address or Interface name, but not both. Unused field must be nil
                    	**type**\:   :py:class:`MplsRouterId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Mpls.MplsRouterId>`
                    
                    .. attribute:: multicast_intact
                    
                    	Enable multicast\-intact mode in OSPF
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-01-02'

                    def __init__(self):
                        self.parent = None
                        self.autoroute_exclude = None
                        self.igp_intact = None
                        self.ldp_sync_update = None
                        self.mpls_router_id = Ospf.Processes.Process.DefaultVrf.Mpls.MplsRouterId()
                        self.mpls_router_id.parent = self
                        self.multicast_intact = None


                    class MplsRouterId(object):
                        """
                        MPLS\-TE stable loopback address for this
                        OSPF process.Enter either as IP Address or
                        Interface name, but not both. Unused field
                        must be nil
                        
                        .. attribute:: address
                        
                        	MPLS\-TE stable IP address for this OSPF process
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: interface_name
                        
                        	MPLS\-TE stable loopback interface for this OSPF process
                        	**type**\:  str
                        
                        	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.address = None
                            self.interface_name = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:mpls-router-id'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.address is not None:
                                return True

                            if self.interface_name is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.Mpls.MplsRouterId']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:mpls'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.autoroute_exclude is not None:
                            return True

                        if self.igp_intact is not None:
                            return True

                        if self.ldp_sync_update is not None:
                            return True

                        if self.mpls_router_id is not None and self.mpls_router_id._has_data():
                            return True

                        if self.multicast_intact is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.Mpls']['meta_info']


                class Microloop(object):
                    """
                    Microloop configuration
                    
                    .. attribute:: avoidance
                    
                    	Microloop avoidance configuration
                    	**type**\:   :py:class:`Avoidance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Microloop.Avoidance>`
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-01-02'

                    def __init__(self):
                        self.parent = None
                        self.avoidance = Ospf.Processes.Process.DefaultVrf.Microloop.Avoidance()
                        self.avoidance.parent = self


                    class Avoidance(object):
                        """
                        Microloop avoidance configuration
                        
                        .. attribute:: enable
                        
                        	MicroLoop avoidance feature enable configuration
                        	**type**\:   :py:class:`OspfUloopAvoidanceEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfUloopAvoidanceEnum>`
                        
                        	**default value**\: all
                        
                        .. attribute:: rib_update_delay
                        
                        	Delay to introduce between SPF and RIB update in msecs
                        	**type**\:  int
                        
                        	**range:** 1..600000
                        
                        	**units**\: millisecond
                        
                        	**default value**\: 5000
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.enable = None
                            self.rib_update_delay = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:avoidance'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.enable is not None:
                                return True

                            if self.rib_update_delay is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.Microloop.Avoidance']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:microloop'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.avoidance is not None and self.avoidance._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.Microloop']['meta_info']


                class MaximumRedistributePrefix(object):
                    """
                    Maximum number of prefixes redistributed into
                    OSPF
                    
                    .. attribute:: number_of_prefixes
                    
                    	Maximum number of prefixes redistributed
                    	**type**\:  int
                    
                    	**range:** 1..4294967295
                    
                    .. attribute:: threshold
                    
                    	Threshold value (%) at which to generate a warning msg
                    	**type**\:  int
                    
                    	**range:** 1..100
                    
                    .. attribute:: warning_only
                    
                    	Only give warning messsage when limit is exceeded
                    	**type**\:  bool
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-01-02'

                    def __init__(self):
                        self.parent = None
                        self.number_of_prefixes = None
                        self.threshold = None
                        self.warning_only = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:maximum-redistribute-prefix'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.number_of_prefixes is not None:
                            return True

                        if self.threshold is not None:
                            return True

                        if self.warning_only is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.MaximumRedistributePrefix']['meta_info']


                class DefaultInformation(object):
                    """
                    Control distribution of default information
                    
                    .. attribute:: always_advertise
                    
                    	Always advertise default route
                    	**type**\:  bool
                    
                    	**default value**\: false
                    
                    .. attribute:: metric
                    
                    	OSPF metric
                    	**type**\:  int
                    
                    	**range:** 1..16777214
                    
                    	**default value**\: 1
                    
                    .. attribute:: metric_type
                    
                    	OSPF External metric type
                    	**type**\:   :py:class:`OspfLinkStateMetricEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetricEnum>`
                    
                    	**default value**\: type2
                    
                    .. attribute:: route_policy_name
                    
                    	Routing policy name
                    	**type**\:  str
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-01-02'

                    def __init__(self):
                        self.parent = None
                        self.always_advertise = None
                        self.metric = None
                        self.metric_type = None
                        self.route_policy_name = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:default-information'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.always_advertise is not None:
                            return True

                        if self.metric is not None:
                            return True

                        if self.metric_type is not None:
                            return True

                        if self.route_policy_name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.DefaultInformation']['meta_info']


                class Af(object):
                    """
                    OSPF address family
                    
                    .. attribute:: af_name
                    
                    	Address family
                    	**type**\:   :py:class:`OspfAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAddressFamilyEnum>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: saf_name
                    
                    	Sub\-Address family
                    	**type**\:   :py:class:`OspfSubAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSubAddressFamilyEnum>`
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-01-02'

                    def __init__(self):
                        self.parent = None
                        self._is_presence = True
                        self.af_name = None
                        self.saf_name = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:af'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self._is_presence:
                            return True
                        if self.af_name is not None:
                            return True

                        if self.saf_name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.Af']['meta_info']


                class Queue(object):
                    """
                    Adjust OSPF input queue sizes and processing
                    quantums
                    
                    .. attribute:: dispatch_incoming
                    
                    	Maximum number of continuous incoming packet\-related events processed
                    	**type**\:  int
                    
                    	**range:** 30..3000
                    
                    	**default value**\: 300
                    
                    .. attribute:: dispatch_rate_limited
                    
                    	Maximum number of continuous rate\-limited LSAs processed
                    	**type**\:  int
                    
                    	**range:** 30..3000
                    
                    	**default value**\: 150
                    
                    .. attribute:: dispatch_rate_limited_flush
                    
                    	Maximum number of continuous rate\-limited LSAs processed for FLUSH
                    	**type**\:  int
                    
                    	**range:** 30..3000
                    
                    	**default value**\: 150
                    
                    .. attribute:: dispatch_spf_lsa_limit
                    
                    	Maximum number of continuous summary or external LSAs processed
                    	**type**\:  int
                    
                    	**range:** 30..3000
                    
                    	**default value**\: 150
                    
                    .. attribute:: limit_high
                    
                    	Hello events are dropped when incoming event queue exceeds this
                    	**type**\:  int
                    
                    	**range:** 1000..30000
                    
                    	**default value**\: 9500
                    
                    .. attribute:: limit_low
                    
                    	DBDs/Updates are dropped when incoming event queue exceeds this
                    	**type**\:  int
                    
                    	**range:** 1000..30000
                    
                    	**default value**\: 8000
                    
                    .. attribute:: limit_medium
                    
                    	LSA ACKs are dropped when incoming event queue exceeds this
                    	**type**\:  int
                    
                    	**range:** 1000..30000
                    
                    	**default value**\: 9000
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-01-02'

                    def __init__(self):
                        self.parent = None
                        self.dispatch_incoming = None
                        self.dispatch_rate_limited = None
                        self.dispatch_rate_limited_flush = None
                        self.dispatch_spf_lsa_limit = None
                        self.limit_high = None
                        self.limit_low = None
                        self.limit_medium = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:queue'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.dispatch_incoming is not None:
                            return True

                        if self.dispatch_rate_limited is not None:
                            return True

                        if self.dispatch_rate_limited_flush is not None:
                            return True

                        if self.dispatch_spf_lsa_limit is not None:
                            return True

                        if self.limit_high is not None:
                            return True

                        if self.limit_low is not None:
                            return True

                        if self.limit_medium is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.Queue']['meta_info']


                class MaxMetric(object):
                    """
                    Set maximum metric configuration
                    
                    .. attribute:: max_metric_always
                    
                    	Set maximum metric always configuration
                    	**type**\:   :py:class:`MaxMetricAlways <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricAlways>`
                    
                    .. attribute:: max_metric_no_abr_off
                    
                    	Block ABR\-disable mode entry while in max\-metric mode
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: max_metric_on_proc_migration
                    
                    	Set maximum metric on\-proc\-migration configuration
                    	**type**\:   :py:class:`MaxMetricOnProcMigration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnProcMigration>`
                    
                    .. attribute:: max_metric_on_proc_restart
                    
                    	Set maximum metric on\-proc\-restart configuration
                    	**type**\:   :py:class:`MaxMetricOnProcRestart <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnProcRestart>`
                    
                    .. attribute:: max_metric_on_startup
                    
                    	Set maximum metric on\-startup configuration
                    	**type**\:   :py:class:`MaxMetricOnStartup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnStartup>`
                    
                    .. attribute:: max_metric_on_switchover
                    
                    	Set maximum metric on\-switchover configuration
                    	**type**\:   :py:class:`MaxMetricOnSwitchover <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnSwitchover>`
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-01-02'

                    def __init__(self):
                        self.parent = None
                        self.max_metric_always = Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricAlways()
                        self.max_metric_always.parent = self
                        self.max_metric_no_abr_off = None
                        self.max_metric_on_proc_migration = Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnProcMigration()
                        self.max_metric_on_proc_migration.parent = self
                        self.max_metric_on_proc_restart = Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnProcRestart()
                        self.max_metric_on_proc_restart.parent = self
                        self.max_metric_on_startup = Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnStartup()
                        self.max_metric_on_startup.parent = self
                        self.max_metric_on_switchover = Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnSwitchover()
                        self.max_metric_on_switchover.parent = self


                    class MaxMetricOnProcRestart(object):
                        """
                        Set maximum metric on\-proc\-restart
                        configuration
                        
                        .. attribute:: external_lsa
                        
                        	Override external\-lsa metric with max\-metric value
                        	**type**\:  bool
                        
                        .. attribute:: external_lsa_maximum_metric
                        
                        	Overriding metric in external\-LSAs (default 16711680)
                        	**type**\:  int
                        
                        	**range:** 1..16777215
                        
                        .. attribute:: include_stub
                        
                        	Set maximum metric for stub links in router\-LSAs
                        	**type**\:  bool
                        
                        .. attribute:: startup_max
                        
                        	Time in seconds to originate router\-LSA with max\-metric
                        	**type**\:  int
                        
                        	**range:** 5..86400
                        
                        	**units**\: second
                        
                        .. attribute:: summary_lsa
                        
                        	Override summary\-lsa metric with max\-metric value
                        	**type**\:  bool
                        
                        .. attribute:: summary_lsa_maximum_metric
                        
                        	Overriding metric in summary\-LSAs (default 16711680)
                        	**type**\:  int
                        
                        	**range:** 1..16777215
                        
                        .. attribute:: wait_for_bgp
                        
                        	Let BGP decide when to originate router\-LSA with normal metric
                        	**type**\:  bool
                        
                        	**default value**\: false
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.external_lsa = None
                            self.external_lsa_maximum_metric = None
                            self.include_stub = None
                            self.startup_max = None
                            self.summary_lsa = None
                            self.summary_lsa_maximum_metric = None
                            self.wait_for_bgp = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:max-metric-on-proc-restart'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.external_lsa is not None:
                                return True

                            if self.external_lsa_maximum_metric is not None:
                                return True

                            if self.include_stub is not None:
                                return True

                            if self.startup_max is not None:
                                return True

                            if self.summary_lsa is not None:
                                return True

                            if self.summary_lsa_maximum_metric is not None:
                                return True

                            if self.wait_for_bgp is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnProcRestart']['meta_info']


                    class MaxMetricOnStartup(object):
                        """
                        Set maximum metric on\-startup configuration
                        
                        .. attribute:: external_lsa
                        
                        	Override external\-lsa metric with max\-metric value
                        	**type**\:  bool
                        
                        .. attribute:: external_lsa_maximum_metric
                        
                        	Overriding metric in external\-LSAs (default 16711680)
                        	**type**\:  int
                        
                        	**range:** 1..16777215
                        
                        .. attribute:: include_stub
                        
                        	Set maximum metric for stub links in router\-LSAs
                        	**type**\:  bool
                        
                        .. attribute:: startup_max
                        
                        	Time in seconds to originate router\-LSA with max\-metric
                        	**type**\:  int
                        
                        	**range:** 5..86400
                        
                        	**units**\: second
                        
                        .. attribute:: summary_lsa
                        
                        	Override summary\-lsa metric with max\-metric value
                        	**type**\:  bool
                        
                        .. attribute:: summary_lsa_maximum_metric
                        
                        	Overriding metric in summary\-LSAs (default 16711680)
                        	**type**\:  int
                        
                        	**range:** 1..16777215
                        
                        .. attribute:: wait_for_bgp
                        
                        	Let BGP decide when to originate router\-LSA with normal metric
                        	**type**\:  bool
                        
                        	**default value**\: false
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.external_lsa = None
                            self.external_lsa_maximum_metric = None
                            self.include_stub = None
                            self.startup_max = None
                            self.summary_lsa = None
                            self.summary_lsa_maximum_metric = None
                            self.wait_for_bgp = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:max-metric-on-startup'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.external_lsa is not None:
                                return True

                            if self.external_lsa_maximum_metric is not None:
                                return True

                            if self.include_stub is not None:
                                return True

                            if self.startup_max is not None:
                                return True

                            if self.summary_lsa is not None:
                                return True

                            if self.summary_lsa_maximum_metric is not None:
                                return True

                            if self.wait_for_bgp is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnStartup']['meta_info']


                    class MaxMetricOnProcMigration(object):
                        """
                        Set maximum metric on\-proc\-migration
                        configuration
                        
                        .. attribute:: external_lsa
                        
                        	Override external\-lsa metric with max\-metric value
                        	**type**\:  bool
                        
                        .. attribute:: external_lsa_maximum_metric
                        
                        	Overriding metric in external\-LSAs (default 16711680)
                        	**type**\:  int
                        
                        	**range:** 1..16777215
                        
                        .. attribute:: include_stub
                        
                        	Set maximum metric for stub links in router\-LSAs
                        	**type**\:  bool
                        
                        .. attribute:: startup_max
                        
                        	Time in seconds to originate router\-LSA with max\-metric
                        	**type**\:  int
                        
                        	**range:** 5..86400
                        
                        	**units**\: second
                        
                        .. attribute:: summary_lsa
                        
                        	Override summary\-lsa metric with max\-metric value
                        	**type**\:  bool
                        
                        .. attribute:: summary_lsa_maximum_metric
                        
                        	Overriding metric in summary\-LSAs (default 16711680)
                        	**type**\:  int
                        
                        	**range:** 1..16777215
                        
                        .. attribute:: wait_for_bgp
                        
                        	Let BGP decide when to originate router\-LSA with normal metric
                        	**type**\:  bool
                        
                        	**default value**\: false
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.external_lsa = None
                            self.external_lsa_maximum_metric = None
                            self.include_stub = None
                            self.startup_max = None
                            self.summary_lsa = None
                            self.summary_lsa_maximum_metric = None
                            self.wait_for_bgp = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:max-metric-on-proc-migration'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.external_lsa is not None:
                                return True

                            if self.external_lsa_maximum_metric is not None:
                                return True

                            if self.include_stub is not None:
                                return True

                            if self.startup_max is not None:
                                return True

                            if self.summary_lsa is not None:
                                return True

                            if self.summary_lsa_maximum_metric is not None:
                                return True

                            if self.wait_for_bgp is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnProcMigration']['meta_info']


                    class MaxMetricAlways(object):
                        """
                        Set maximum metric always configuration
                        
                        .. attribute:: external_lsa
                        
                        	Override external\-lsa metric with max\-metric value
                        	**type**\:  bool
                        
                        .. attribute:: external_lsa_maximum_metric
                        
                        	Overriding metric in external\-LSAs (default 16711680)
                        	**type**\:  int
                        
                        	**range:** 1..16777215
                        
                        .. attribute:: include_stub
                        
                        	Set maximum metric for stub links in router\-LSAs
                        	**type**\:  bool
                        
                        	**default value**\: false
                        
                        .. attribute:: summary_lsa
                        
                        	Override summary\-lsa metric with max\-metric value
                        	**type**\:  bool
                        
                        .. attribute:: summary_lsa_maximum_metric
                        
                        	Overriding metric in summary\-LSAs (default 16711680)
                        	**type**\:  int
                        
                        	**range:** 1..16777215
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.external_lsa = None
                            self.external_lsa_maximum_metric = None
                            self.include_stub = None
                            self.summary_lsa = None
                            self.summary_lsa_maximum_metric = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:max-metric-always'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.external_lsa is not None:
                                return True

                            if self.external_lsa_maximum_metric is not None:
                                return True

                            if self.include_stub is not None:
                                return True

                            if self.summary_lsa is not None:
                                return True

                            if self.summary_lsa_maximum_metric is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricAlways']['meta_info']


                    class MaxMetricOnSwitchover(object):
                        """
                        Set maximum metric on\-switchover configuration
                        
                        .. attribute:: external_lsa
                        
                        	Override external\-lsa metric with max\-metric value
                        	**type**\:  bool
                        
                        .. attribute:: external_lsa_maximum_metric
                        
                        	Overriding metric in external\-LSAs (default 16711680)
                        	**type**\:  int
                        
                        	**range:** 1..16777215
                        
                        .. attribute:: include_stub
                        
                        	Set maximum metric for stub links in router\-LSAs
                        	**type**\:  bool
                        
                        .. attribute:: startup_max
                        
                        	Time in seconds to originate router\-LSA with max\-metric
                        	**type**\:  int
                        
                        	**range:** 5..86400
                        
                        	**units**\: second
                        
                        .. attribute:: summary_lsa
                        
                        	Override summary\-lsa metric with max\-metric value
                        	**type**\:  bool
                        
                        .. attribute:: summary_lsa_maximum_metric
                        
                        	Overriding metric in summary\-LSAs (default 16711680)
                        	**type**\:  int
                        
                        	**range:** 1..16777215
                        
                        .. attribute:: wait_for_bgp
                        
                        	Let BGP decide when to originate router\-LSA with normal metric
                        	**type**\:  bool
                        
                        	**default value**\: false
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.external_lsa = None
                            self.external_lsa_maximum_metric = None
                            self.include_stub = None
                            self.startup_max = None
                            self.summary_lsa = None
                            self.summary_lsa_maximum_metric = None
                            self.wait_for_bgp = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:max-metric-on-switchover'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.external_lsa is not None:
                                return True

                            if self.external_lsa_maximum_metric is not None:
                                return True

                            if self.include_stub is not None:
                                return True

                            if self.startup_max is not None:
                                return True

                            if self.summary_lsa is not None:
                                return True

                            if self.summary_lsa_maximum_metric is not None:
                                return True

                            if self.wait_for_bgp is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.MaxMetric.MaxMetricOnSwitchover']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:max-metric'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.max_metric_always is not None and self.max_metric_always._has_data():
                            return True

                        if self.max_metric_no_abr_off is not None:
                            return True

                        if self.max_metric_on_proc_migration is not None and self.max_metric_on_proc_migration._has_data():
                            return True

                        if self.max_metric_on_proc_restart is not None and self.max_metric_on_proc_restart._has_data():
                            return True

                        if self.max_metric_on_startup is not None and self.max_metric_on_startup._has_data():
                            return True

                        if self.max_metric_on_switchover is not None and self.max_metric_on_switchover._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.MaxMetric']['meta_info']


                class Nsf(object):
                    """
                    Non Stop Forwarding configuration
                    
                    .. attribute:: cisco
                    
                    	Enable Cisco Non Stop Forwarding
                    	**type**\:   :py:class:`OspfCiscoNsfEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfCiscoNsfEnum>`
                    
                    .. attribute:: flush_delay_time
                    
                    	Maximum time allowed for external route learning (seconds)
                    	**type**\:  int
                    
                    	**range:** 1..3600
                    
                    	**units**\: second
                    
                    	**default value**\: 60
                    
                    .. attribute:: ietf
                    
                    	Enable IETF Non Stop Forwarding
                    	**type**\:   :py:class:`OspfIetfNsfEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfIetfNsfEnum>`
                    
                    .. attribute:: ietf_strict_lsa_checking
                    
                    	Enable Strict LSA checking of IETF NSF
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: ietf_support_role
                    
                    	Disable helper support role for IETF Non Stop Forwarding
                    	**type**\:   :py:class:`OspfIetfNsfSupportEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfIetfNsfSupportEnum>`
                    
                    .. attribute:: interval
                    
                    	Minimum interval between Non Stop Forwarding restarts in seconds
                    	**type**\:  int
                    
                    	**range:** 90..3600
                    
                    	**units**\: second
                    
                    	**default value**\: 90
                    
                    .. attribute:: lifetime
                    
                    	Maximum route lifetime following restart in seconds
                    	**type**\:  int
                    
                    	**range:** 90..1800
                    
                    	**units**\: second
                    
                    	**default value**\: 90
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-01-02'

                    def __init__(self):
                        self.parent = None
                        self.cisco = None
                        self.flush_delay_time = None
                        self.ietf = None
                        self.ietf_strict_lsa_checking = None
                        self.ietf_support_role = None
                        self.interval = None
                        self.lifetime = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:nsf'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.cisco is not None:
                            return True

                        if self.flush_delay_time is not None:
                            return True

                        if self.ietf is not None:
                            return True

                        if self.ietf_strict_lsa_checking is not None:
                            return True

                        if self.ietf_support_role is not None:
                            return True

                        if self.interval is not None:
                            return True

                        if self.lifetime is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.Nsf']['meta_info']


                class ProcessScope(object):
                    """
                    Process scope configuration
                    
                    .. attribute:: authentication
                    
                    	Authentication
                    	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication>`
                    
                    .. attribute:: bfd
                    
                    	BFD configuration
                    	**type**\:   :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.Bfd>`
                    
                    .. attribute:: cost
                    
                    	Interface cost
                    	**type**\:  int
                    
                    	**range:** 1..65535
                    
                    .. attribute:: cost_fallback
                    
                    	Interface fallback cost
                    	**type**\:   :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.CostFallback>`
                    
                    .. attribute:: database_filter
                    
                    	Filter OSPF LSA during synchronization and flooding
                    	**type**\:  bool
                    
                    	**default value**\: false
                    
                    .. attribute:: dead_interval_minimal
                    
                    	Interval after which a neighbor is declared dead
                    	**type**\:   :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.DeadIntervalMinimal>`
                    
                    .. attribute:: demand_circuit
                    
                    	Enable/Disable OSPF demand circuit
                    	**type**\:  bool
                    
                    	**default value**\: false
                    
                    .. attribute:: distribute_list
                    
                    	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                    	**type**\:   :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.DistributeList>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: external_out
                    
                    	Enable/Disable an OSPF area to advertise intra\-area prefixes out of this area as external
                    	**type**\:  bool
                    
                    .. attribute:: fast_reroute
                    
                    	Fast\-reroute configuration
                    	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute>`
                    
                    .. attribute:: flood_reduction
                    
                    	Enable/Disable OSPF flood reduction
                    	**type**\:  bool
                    
                    	**default value**\: false
                    
                    .. attribute:: hello_interval
                    
                    	Interval between HELLO packets in seconds
                    	**type**\:  int
                    
                    	**range:** 1..65535
                    
                    	**units**\: second
                    
                    .. attribute:: ldp_auto_config
                    
                    	Enable MPLS LDP Auto Config
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: ldp_sync
                    
                    	Enable/Disable MPLS LDP sync
                    	**type**\:  bool
                    
                    .. attribute:: ldp_sync_igp_shortcuts
                    
                    	Enable/Disable MPLS LDP sync for igp\-shortcuts
                    	**type**\:  bool
                    
                    .. attribute:: link_down_fast_detect
                    
                    	Enable/Disable registration for early interface down notifications
                    	**type**\:  bool
                    
                    	**default value**\: false
                    
                    .. attribute:: loopback_stub_network
                    
                    	Enable/Disable advertising loopback as a stub network
                    	**type**\:  bool
                    
                    	**default value**\: false
                    
                    .. attribute:: mtu_ignore
                    
                    	Enable/Disable ignoring of MTU in DBD packets
                    	**type**\:  bool
                    
                    	**default value**\: false
                    
                    .. attribute:: network_type
                    
                    	Type of attached network
                    	**type**\:   :py:class:`OspfNetworkEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfNetworkEnum>`
                    
                    .. attribute:: packet_size
                    
                    	Customize size of OSPF packets upto MTU
                    	**type**\:  int
                    
                    	**range:** 576..10000
                    
                    .. attribute:: passive
                    
                    	When enabled, prevent sending HELLO packets over link
                    	**type**\:  bool
                    
                    	**default value**\: false
                    
                    .. attribute:: prefix_suppression_primary
                    
                    	Enable/Disable prefix suppression for primary addresses
                    	**type**\:  bool
                    
                    	**default value**\: false
                    
                    .. attribute:: prefix_suppression_secondary
                    
                    	Enable/Disable prefix suppression for secondary addresses
                    	**type**\:  bool
                    
                    	**default value**\: false
                    
                    .. attribute:: priority
                    
                    	Router priority for DR and BDR election
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**default value**\: 1
                    
                    .. attribute:: retransmit_interval
                    
                    	Time in seconds between retransmitting lost link state advertisements
                    	**type**\:  int
                    
                    	**range:** 1..65535
                    
                    	**units**\: second
                    
                    	**default value**\: 5
                    
                    .. attribute:: security
                    
                    	Container class for security related configuration parameters
                    	**type**\:   :py:class:`Security <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.Security>`
                    
                    .. attribute:: segment_routing
                    
                    	segment\-routing configuration Applicable only in Default VRF
                    	**type**\:   :py:class:`OspfSegmentRoutingEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRoutingEnum>`
                    
                    .. attribute:: segment_routing_forwarding
                    
                    	segment\-routing forwarding configuration Applicableonly in Default VRF
                    	**type**\:   :py:class:`OspfSegmentRoutingForwardingEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRoutingForwardingEnum>`
                    
                    .. attribute:: srgb
                    
                    	Segment Routing Global Block configuration
                    	**type**\:   :py:class:`Srgb <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.Srgb>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: summary_in
                    
                    	Enable/Disable an OSPF area to advertise external prefixes into this area as summary
                    	**type**\:  bool
                    
                    .. attribute:: transmit_delay
                    
                    	Number of seconds to delay transmission of LSAs
                    	**type**\:  int
                    
                    	**range:** 1..65535
                    
                    	**units**\: second
                    
                    	**default value**\: 1
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-01-02'

                    def __init__(self):
                        self.parent = None
                        self.authentication = Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication()
                        self.authentication.parent = self
                        self.bfd = Ospf.Processes.Process.DefaultVrf.ProcessScope.Bfd()
                        self.bfd.parent = self
                        self.cost = None
                        self.cost_fallback = Ospf.Processes.Process.DefaultVrf.ProcessScope.CostFallback()
                        self.cost_fallback.parent = self
                        self.database_filter = None
                        self.dead_interval_minimal = Ospf.Processes.Process.DefaultVrf.ProcessScope.DeadIntervalMinimal()
                        self.dead_interval_minimal.parent = self
                        self.demand_circuit = None
                        self.distribute_list = None
                        self.external_out = None
                        self.fast_reroute = Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute()
                        self.fast_reroute.parent = self
                        self.flood_reduction = None
                        self.hello_interval = None
                        self.ldp_auto_config = None
                        self.ldp_sync = None
                        self.ldp_sync_igp_shortcuts = None
                        self.link_down_fast_detect = None
                        self.loopback_stub_network = None
                        self.mtu_ignore = None
                        self.network_type = None
                        self.packet_size = None
                        self.passive = None
                        self.prefix_suppression_primary = None
                        self.prefix_suppression_secondary = None
                        self.priority = None
                        self.retransmit_interval = None
                        self.security = Ospf.Processes.Process.DefaultVrf.ProcessScope.Security()
                        self.security.parent = self
                        self.segment_routing = None
                        self.segment_routing_forwarding = None
                        self.srgb = None
                        self.summary_in = None
                        self.transmit_delay = None


                    class Srgb(object):
                        """
                        Segment Routing Global Block configuration
                        
                        .. attribute:: lower_bound
                        
                        	The lower bound of the SRGB
                        	**type**\:  int
                        
                        	**range:** 16000..1048575
                        
                        	**mandatory**\: True
                        
                        .. attribute:: upper_bound
                        
                        	The upper bound of the SRGB
                        	**type**\:  int
                        
                        	**range:** 16000..1048575
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.lower_bound = None
                            self.upper_bound = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:srgb'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.lower_bound is not None:
                                return True

                            if self.upper_bound is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.ProcessScope.Srgb']['meta_info']


                    class FastReroute(object):
                        """
                        Fast\-reroute configuration
                        
                        .. attribute:: fast_reroute_enable
                        
                        	Enable/Disable Fast\-reroute per\-link or per\-prefix
                        	**type**\:   :py:class:`OspfProcFastRerouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfProcFastRerouteEnum>`
                        
                        .. attribute:: per_link
                        
                        	Fast\-reroute per\-link configuration
                        	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink>`
                        
                        .. attribute:: per_prefix
                        
                        	Fast\-reroute per\-prefix configuration
                        	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.fast_reroute_enable = None
                            self.per_link = Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink()
                            self.per_link.parent = self
                            self.per_prefix = Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix()
                            self.per_prefix.parent = self


                        class PerLink(object):
                            """
                            Fast\-reroute per\-link configuration
                            
                            .. attribute:: candidate_interfaces
                            
                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                            	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces>`
                            
                            .. attribute:: exclude_interfaces
                            
                            	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                            	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces>`
                            
                            .. attribute:: fast_reroute_use_candidate_only
                            
                            	Use only interfaces on the candidate list as a backup path
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces()
                                self.candidate_interfaces.parent = self
                                self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces()
                                self.exclude_interfaces.parent = self
                                self.fast_reroute_use_candidate_only = None


                            class CandidateInterfaces(object):
                                """
                                Fast\-reroute per\-link/per\-prefix candidate
                                interface configuration
                                
                                .. attribute:: candidate_interface
                                
                                	Candidate backup interface
                                	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.candidate_interface = YList()
                                    self.candidate_interface.parent = self
                                    self.candidate_interface.name = 'candidate_interface'


                                class CandidateInterface(object):
                                    """
                                    Candidate backup interface
                                    
                                    .. attribute:: interface_name  <key>
                                    
                                    	Interface
                                    	**type**\:  str
                                    
                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.interface_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.interface_name is None:
                                            raise YPYModelError('Key property interface_name is None')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.interface_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.candidate_interface is not None:
                                        for child_ref in self.candidate_interface:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces']['meta_info']


                            class ExcludeInterfaces(object):
                                """
                                Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                interface configuration
                                
                                .. attribute:: exclude_interface
                                
                                	Exclude an interface from becoming a backup or UCMP
                                	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.exclude_interface = YList()
                                    self.exclude_interface.parent = self
                                    self.exclude_interface.name = 'exclude_interface'


                                class ExcludeInterface(object):
                                    """
                                    Exclude an interface from becoming a backup or
                                    UCMP
                                    
                                    .. attribute:: interface_name  <key>
                                    
                                    	Interface
                                    	**type**\:  str
                                    
                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.interface_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.interface_name is None:
                                            raise YPYModelError('Key property interface_name is None')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.interface_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.exclude_interface is not None:
                                        for child_ref in self.exclude_interface:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-link'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                    return True

                                if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                    return True

                                if self.fast_reroute_use_candidate_only is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink']['meta_info']


                        class PerPrefix(object):
                            """
                            Fast\-reroute per\-prefix configuration
                            
                            .. attribute:: candidate_interfaces
                            
                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                            	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces>`
                            
                            .. attribute:: exclude_interfaces
                            
                            	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                            	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                            
                            .. attribute:: fast_reroute_use_candidate_only
                            
                            	Use only interfaces on the candidate list as a backup path
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: remote_lfa
                            
                            	Remote LFA configuration
                            	**type**\:   :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.RemoteLfa>`
                            
                            .. attribute:: topology_independent_lfa
                            
                            	Topology Independet LFA configuration
                            	**type**\:  bool
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces()
                                self.candidate_interfaces.parent = self
                                self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                self.exclude_interfaces.parent = self
                                self.fast_reroute_use_candidate_only = None
                                self.remote_lfa = Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.RemoteLfa()
                                self.remote_lfa.parent = self
                                self.topology_independent_lfa = None


                            class RemoteLfa(object):
                                """
                                Remote LFA configuration
                                
                                .. attribute:: maximum_cost
                                
                                	Maximum path cost to remote LFA
                                	**type**\:  int
                                
                                	**range:** 1..4294967295
                                
                                .. attribute:: tunnel
                                
                                	Enable/Disable remote LFA computation
                                	**type**\:   :py:class:`OspfProcFrrRlfaTunnelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfProcFrrRlfaTunnelEnum>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.maximum_cost = None
                                    self.tunnel = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:remote-lfa'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.maximum_cost is not None:
                                        return True

                                    if self.tunnel is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.RemoteLfa']['meta_info']


                            class CandidateInterfaces(object):
                                """
                                Fast\-reroute per\-link/per\-prefix candidate
                                interface configuration
                                
                                .. attribute:: candidate_interface
                                
                                	Candidate backup interface
                                	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.candidate_interface = YList()
                                    self.candidate_interface.parent = self
                                    self.candidate_interface.name = 'candidate_interface'


                                class CandidateInterface(object):
                                    """
                                    Candidate backup interface
                                    
                                    .. attribute:: interface_name  <key>
                                    
                                    	Interface
                                    	**type**\:  str
                                    
                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.interface_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.interface_name is None:
                                            raise YPYModelError('Key property interface_name is None')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.interface_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.candidate_interface is not None:
                                        for child_ref in self.candidate_interface:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces']['meta_info']


                            class ExcludeInterfaces(object):
                                """
                                Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                interface configuration
                                
                                .. attribute:: exclude_interface
                                
                                	Exclude an interface from becoming a backup or UCMP
                                	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.exclude_interface = YList()
                                    self.exclude_interface.parent = self
                                    self.exclude_interface.name = 'exclude_interface'


                                class ExcludeInterface(object):
                                    """
                                    Exclude an interface from becoming a backup or
                                    UCMP
                                    
                                    .. attribute:: interface_name  <key>
                                    
                                    	Interface
                                    	**type**\:  str
                                    
                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.interface_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.interface_name is None:
                                            raise YPYModelError('Key property interface_name is None')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.interface_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.exclude_interface is not None:
                                        for child_ref in self.exclude_interface:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-prefix'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                    return True

                                if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                    return True

                                if self.fast_reroute_use_candidate_only is not None:
                                    return True

                                if self.remote_lfa is not None and self.remote_lfa._has_data():
                                    return True

                                if self.topology_independent_lfa is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:fast-reroute'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.fast_reroute_enable is not None:
                                return True

                            if self.per_link is not None and self.per_link._has_data():
                                return True

                            if self.per_prefix is not None and self.per_prefix._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.ProcessScope.FastReroute']['meta_info']


                    class DistributeList(object):
                        """
                        Filter networks intalled to RIB (disable as ACL
                        name means filtering is disabled)
                        
                        .. attribute:: access_list_name
                        
                        	Access Control List name
                        	**type**\:  str
                        
                        .. attribute:: route_policy_name
                        
                        	Route Policy name
                        	**type**\:  str
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.access_list_name = None
                            self.route_policy_name = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:distribute-list'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.access_list_name is not None:
                                return True

                            if self.route_policy_name is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.ProcessScope.DistributeList']['meta_info']


                    class Bfd(object):
                        """
                        BFD configuration
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection multiplier for BFD sessions created by OSPF
                        	**type**\:  int
                        
                        	**range:** 2..50
                        
                        .. attribute:: fast_detect_mode
                        
                        	 use of Bidirectional Forwarding Detection
                        	**type**\:   :py:class:`BfdEnableModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.BfdEnableModeEnum>`
                        
                        .. attribute:: interval
                        
                        	Hello interval for BFD sessions created by OSPF
                        	**type**\:  int
                        
                        	**range:** 3..30000
                        
                        	**units**\: millisecond
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.detection_multiplier = None
                            self.fast_detect_mode = None
                            self.interval = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:bfd'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.detection_multiplier is not None:
                                return True

                            if self.fast_detect_mode is not None:
                                return True

                            if self.interval is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.ProcessScope.Bfd']['meta_info']


                    class Authentication(object):
                        """
                        Authentication
                        
                        .. attribute:: key
                        
                        	Authentication key configuration
                        	**type**\:  str
                        
                        	**pattern:** (!.+)\|([^!].+)
                        
                        .. attribute:: message_digest_keies
                        
                        	Message digest authentication password (key) configurations, first 16 chars used
                        	**type**\:   :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication.MessageDigestKeies>`
                        
                        .. attribute:: type
                        
                        	Authentication type
                        	**type**\:   :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication.Type>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.key = None
                            self.message_digest_keies = Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication.MessageDigestKeies()
                            self.message_digest_keies.parent = self
                            self.type = Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication.Type()
                            self.type.parent = self


                        class Type(object):
                            """
                            Authentication type
                            
                            .. attribute:: authen_type
                            
                            	Authentication type code 
                            	**type**\:   :py:class:`OspfAuthenticationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthenticationEnum>`
                            
                            .. attribute:: keychain_authen_type
                            
                            	Keychain authentication type
                            	**type**\:   :py:class:`OspfKeychainAuthEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuthEnum>`
                            
                            .. attribute:: keychain_name
                            
                            	Keychain name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.authen_type = None
                                self.keychain_authen_type = None
                                self.keychain_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:type'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.authen_type is not None:
                                    return True

                                if self.keychain_authen_type is not None:
                                    return True

                                if self.keychain_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication.Type']['meta_info']


                        class MessageDigestKeies(object):
                            """
                            Message digest authentication password (key)
                            configurations, first 16 chars used
                            
                            .. attribute:: message_digest_key
                            
                            	Message digest authentication password (key) configuration
                            	**type**\: list of    :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.message_digest_key = YList()
                                self.message_digest_key.parent = self
                                self.message_digest_key.name = 'message_digest_key'


                            class MessageDigestKey(object):
                                """
                                Message digest authentication password (key)
                                configuration
                                
                                .. attribute:: key_id  <key>
                                
                                	Key ID
                                	**type**\:  int
                                
                                	**range:** 1..255
                                
                                .. attribute:: password
                                
                                	Password
                                	**type**\:  str
                                
                                	**pattern:** (!.+)\|([^!].+)
                                
                                	**mandatory**\: True
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.key_id = None
                                    self.password = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.key_id is None:
                                        raise YPYModelError('Key property key_id is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-key[Cisco-IOS-XR-ipv4-ospf-cfg:key-id = ' + str(self.key_id) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.key_id is not None:
                                        return True

                                    if self.password is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication.MessageDigestKeies.MessageDigestKey']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-keies'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.message_digest_key is not None:
                                    for child_ref in self.message_digest_key:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication.MessageDigestKeies']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:authentication'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.key is not None:
                                return True

                            if self.message_digest_keies is not None and self.message_digest_keies._has_data():
                                return True

                            if self.type is not None and self.type._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.ProcessScope.Authentication']['meta_info']


                    class Security(object):
                        """
                        Container class for security related
                        configuration parameters
                        
                        .. attribute:: ttl
                        
                        	Enabling turns on TTL security
                        	**type**\:   :py:class:`Ttl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.ProcessScope.Security.Ttl>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.ttl = Ospf.Processes.Process.DefaultVrf.ProcessScope.Security.Ttl()
                            self.ttl.parent = self


                        class Ttl(object):
                            """
                            Enabling turns on TTL security
                            
                            .. attribute:: enable
                            
                            	Enable TTL security
                            	**type**\:  bool
                            
                            .. attribute:: hop_count
                            
                            	Hop count
                            	**type**\:  int
                            
                            	**range:** 1..254
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.enable = None
                                self.hop_count = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:ttl'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.enable is not None:
                                    return True

                                if self.hop_count is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.ProcessScope.Security.Ttl']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:security'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ttl is not None and self.ttl._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.ProcessScope.Security']['meta_info']


                    class DeadIntervalMinimal(object):
                        """
                        Interval after which a neighbor is declared dead
                        
                        .. attribute:: interval
                        
                        	Interval size in seconds after which a neighbor is declared dead
                        	**type**\:  int
                        
                        	**range:** 1..65535
                        
                        	**units**\: second
                        
                        .. attribute:: multiplier
                        
                        	Number of Hellos in one second
                        	**type**\:  int
                        
                        	**range:** 3..20
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.interval = None
                            self.multiplier = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:dead-interval-minimal'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.interval is not None:
                                return True

                            if self.multiplier is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.ProcessScope.DeadIntervalMinimal']['meta_info']


                    class CostFallback(object):
                        """
                        Interface fallback cost
                        
                        .. attribute:: cost
                        
                        	Fallback cost of link
                        	**type**\:  int
                        
                        	**range:** 1..65535
                        
                        .. attribute:: threshold
                        
                        	Bandwidth threshold
                        	**type**\:  int
                        
                        	**range:** 1..4294967
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.cost = None
                            self.threshold = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:cost-fallback'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.cost is not None:
                                return True

                            if self.threshold is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.ProcessScope.CostFallback']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:process-scope'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.authentication is not None and self.authentication._has_data():
                            return True

                        if self.bfd is not None and self.bfd._has_data():
                            return True

                        if self.cost is not None:
                            return True

                        if self.cost_fallback is not None and self.cost_fallback._has_data():
                            return True

                        if self.database_filter is not None:
                            return True

                        if self.dead_interval_minimal is not None and self.dead_interval_minimal._has_data():
                            return True

                        if self.demand_circuit is not None:
                            return True

                        if self.distribute_list is not None and self.distribute_list._has_data():
                            return True

                        if self.external_out is not None:
                            return True

                        if self.fast_reroute is not None and self.fast_reroute._has_data():
                            return True

                        if self.flood_reduction is not None:
                            return True

                        if self.hello_interval is not None:
                            return True

                        if self.ldp_auto_config is not None:
                            return True

                        if self.ldp_sync is not None:
                            return True

                        if self.ldp_sync_igp_shortcuts is not None:
                            return True

                        if self.link_down_fast_detect is not None:
                            return True

                        if self.loopback_stub_network is not None:
                            return True

                        if self.mtu_ignore is not None:
                            return True

                        if self.network_type is not None:
                            return True

                        if self.packet_size is not None:
                            return True

                        if self.passive is not None:
                            return True

                        if self.prefix_suppression_primary is not None:
                            return True

                        if self.prefix_suppression_secondary is not None:
                            return True

                        if self.priority is not None:
                            return True

                        if self.retransmit_interval is not None:
                            return True

                        if self.security is not None and self.security._has_data():
                            return True

                        if self.segment_routing is not None:
                            return True

                        if self.segment_routing_forwarding is not None:
                            return True

                        if self.srgb is not None and self.srgb._has_data():
                            return True

                        if self.summary_in is not None:
                            return True

                        if self.transmit_delay is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.ProcessScope']['meta_info']


                class Redistribution(object):
                    """
                    Redistribute configurations
                    
                    .. attribute:: redistributes
                    
                    	Redistribute information from another routing protocol
                    	**type**\:   :py:class:`Redistributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes>`
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-01-02'

                    def __init__(self):
                        self.parent = None
                        self.redistributes = Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes()
                        self.redistributes.parent = self


                    class Redistributes(object):
                        """
                        Redistribute information from another routing
                        protocol
                        
                        .. attribute:: redistribute
                        
                        	Redistribute information from another routing protocol
                        	**type**\: list of    :py:class:`Redistribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.redistribute = YList()
                            self.redistribute.parent = self
                            self.redistribute.name = 'redistribute'


                        class Redistribute(object):
                            """
                            Redistribute information from another routing
                            protocol
                            
                            .. attribute:: protocol_name  <key>
                            
                            	Distribute list protocol type
                            	**type**\:   :py:class:`OspfRedistProtocolEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRedistProtocolEnum>`
                            
                            .. attribute:: application_or_isis_or_ospf
                            
                            	application or isis or ospf
                            	**type**\: list of    :py:class:`ApplicationOrIsisOrOspf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute.ApplicationOrIsisOrOspf>`
                            
                            .. attribute:: bgp
                            
                            	bgp
                            	**type**\: list of    :py:class:`Bgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute.Bgp>`
                            
                            .. attribute:: connected_or_static_or_dagr_or_subscriber_or_mobile_or_rip
                            
                            	connected or static or dagr or subscriber or mobile or rip
                            	**type**\:   :py:class:`ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute.ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: eigrp
                            
                            	eigrp
                            	**type**\: list of    :py:class:`Eigrp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute.Eigrp>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.protocol_name = None
                                self.application_or_isis_or_ospf = YList()
                                self.application_or_isis_or_ospf.parent = self
                                self.application_or_isis_or_ospf.name = 'application_or_isis_or_ospf'
                                self.bgp = YList()
                                self.bgp.parent = self
                                self.bgp.name = 'bgp'
                                self.connected_or_static_or_dagr_or_subscriber_or_mobile_or_rip = None
                                self.eigrp = YList()
                                self.eigrp.parent = self
                                self.eigrp.name = 'eigrp'


                            class ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip(object):
                                """
                                connected or static or dagr or subscriber or
                                mobile or rip
                                
                                .. attribute:: bgp_preserve_default_info
                                
                                	Preserve Metric and Metric Type of BGP Default Route
                                	**type**\:  bool
                                
                                .. attribute:: bgp_preserve_med
                                
                                	Preserve MED of BGP routes
                                	**type**\:  bool
                                
                                .. attribute:: classful
                                
                                	Disallow subnetting
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: default_redistributed_route_metric
                                
                                	Default metric for routes being redistributed into OSPF
                                	**type**\:  int
                                
                                	**range:** 1..16777214
                                
                                .. attribute:: eigrp_route_type
                                
                                	EIGRP route type
                                	**type**\:   :py:class:`OspfEigrpRouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfEigrpRouteEnum>`
                                
                                .. attribute:: isis_levels
                                
                                	Levels of ISIS routes
                                	**type**\:   :py:class:`OspfRouteLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevelEnum>`
                                
                                .. attribute:: metric_type
                                
                                	Set OSPF External metric type
                                	**type**\:   :py:class:`OspfLinkStateMetricEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetricEnum>`
                                
                                .. attribute:: ospf_external
                                
                                	OSPF external route types
                                	**type**\:   :py:class:`OspfRouteLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevelEnum>`
                                
                                .. attribute:: ospf_internal
                                
                                	OSPF\_Internal route type
                                	**type**\:  bool
                                
                                .. attribute:: ospf_nssa_level
                                
                                	OSPF NSSA external route types
                                	**type**\:   :py:class:`OspfRouteLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevelEnum>`
                                
                                .. attribute:: ospf_redist_lsa_type
                                
                                	LSA type for redistributed routes
                                	**type**\:   :py:class:`OspfRedistLsaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRedistLsaEnum>`
                                
                                	**default value**\: external
                                
                                .. attribute:: ospfnssa_only
                                
                                	Only redistribute to NSSA areas
                                	**type**\:  bool
                                
                                .. attribute:: route_policy_name
                                
                                	Routing policy name
                                	**type**\:  str
                                
                                .. attribute:: tag
                                
                                	Set tag for routes redistributed into OSPF
                                	**type**\:  int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.bgp_preserve_default_info = None
                                    self.bgp_preserve_med = None
                                    self.classful = None
                                    self.default_redistributed_route_metric = None
                                    self.eigrp_route_type = None
                                    self.isis_levels = None
                                    self.metric_type = None
                                    self.ospf_external = None
                                    self.ospf_internal = None
                                    self.ospf_nssa_level = None
                                    self.ospf_redist_lsa_type = None
                                    self.ospfnssa_only = None
                                    self.route_policy_name = None
                                    self.tag = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.bgp_preserve_default_info is not None:
                                        return True

                                    if self.bgp_preserve_med is not None:
                                        return True

                                    if self.classful is not None:
                                        return True

                                    if self.default_redistributed_route_metric is not None:
                                        return True

                                    if self.eigrp_route_type is not None:
                                        return True

                                    if self.isis_levels is not None:
                                        return True

                                    if self.metric_type is not None:
                                        return True

                                    if self.ospf_external is not None:
                                        return True

                                    if self.ospf_internal is not None:
                                        return True

                                    if self.ospf_nssa_level is not None:
                                        return True

                                    if self.ospf_redist_lsa_type is not None:
                                        return True

                                    if self.ospfnssa_only is not None:
                                        return True

                                    if self.route_policy_name is not None:
                                        return True

                                    if self.tag is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute.ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip']['meta_info']


                            class ApplicationOrIsisOrOspf(object):
                                """
                                application or isis or ospf
                                
                                .. attribute:: instance_name  <key>
                                
                                	OSPF or ISIS process name or protocol name\: bgp, eigrp, connected
                                	**type**\:  str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: bgp_preserve_default_info
                                
                                	Preserve Metric and Metric Type of BGP Default Route
                                	**type**\:  bool
                                
                                .. attribute:: bgp_preserve_med
                                
                                	Preserve MED of BGP routes
                                	**type**\:  bool
                                
                                .. attribute:: classful
                                
                                	Disallow subnetting
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: default_redistributed_route_metric
                                
                                	Default metric for routes being redistributed into OSPF
                                	**type**\:  int
                                
                                	**range:** 1..16777214
                                
                                .. attribute:: eigrp_route_type
                                
                                	EIGRP route type
                                	**type**\:   :py:class:`OspfEigrpRouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfEigrpRouteEnum>`
                                
                                .. attribute:: isis_levels
                                
                                	Levels of ISIS routes
                                	**type**\:   :py:class:`OspfRouteLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevelEnum>`
                                
                                .. attribute:: metric_type
                                
                                	Set OSPF External metric type
                                	**type**\:   :py:class:`OspfLinkStateMetricEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetricEnum>`
                                
                                .. attribute:: ospf_external
                                
                                	OSPF external route types
                                	**type**\:   :py:class:`OspfRouteLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevelEnum>`
                                
                                .. attribute:: ospf_internal
                                
                                	OSPF\_Internal route type
                                	**type**\:  bool
                                
                                .. attribute:: ospf_nssa_level
                                
                                	OSPF NSSA external route types
                                	**type**\:   :py:class:`OspfRouteLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevelEnum>`
                                
                                .. attribute:: ospf_redist_lsa_type
                                
                                	LSA type for redistributed routes
                                	**type**\:   :py:class:`OspfRedistLsaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRedistLsaEnum>`
                                
                                	**default value**\: external
                                
                                .. attribute:: ospfnssa_only
                                
                                	Only redistribute to NSSA areas
                                	**type**\:  bool
                                
                                .. attribute:: route_policy_name
                                
                                	Routing policy name
                                	**type**\:  str
                                
                                .. attribute:: tag
                                
                                	Set tag for routes redistributed into OSPF
                                	**type**\:  int
                                
                                	**range:** \-2147483648..2147483647
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.instance_name = None
                                    self.bgp_preserve_default_info = None
                                    self.bgp_preserve_med = None
                                    self.classful = None
                                    self.default_redistributed_route_metric = None
                                    self.eigrp_route_type = None
                                    self.isis_levels = None
                                    self.metric_type = None
                                    self.ospf_external = None
                                    self.ospf_internal = None
                                    self.ospf_nssa_level = None
                                    self.ospf_redist_lsa_type = None
                                    self.ospfnssa_only = None
                                    self.route_policy_name = None
                                    self.tag = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.instance_name is None:
                                        raise YPYModelError('Key property instance_name is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:application-or-isis-or-ospf[Cisco-IOS-XR-ipv4-ospf-cfg:instance-name = ' + str(self.instance_name) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.instance_name is not None:
                                        return True

                                    if self.bgp_preserve_default_info is not None:
                                        return True

                                    if self.bgp_preserve_med is not None:
                                        return True

                                    if self.classful is not None:
                                        return True

                                    if self.default_redistributed_route_metric is not None:
                                        return True

                                    if self.eigrp_route_type is not None:
                                        return True

                                    if self.isis_levels is not None:
                                        return True

                                    if self.metric_type is not None:
                                        return True

                                    if self.ospf_external is not None:
                                        return True

                                    if self.ospf_internal is not None:
                                        return True

                                    if self.ospf_nssa_level is not None:
                                        return True

                                    if self.ospf_redist_lsa_type is not None:
                                        return True

                                    if self.ospfnssa_only is not None:
                                        return True

                                    if self.route_policy_name is not None:
                                        return True

                                    if self.tag is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute.ApplicationOrIsisOrOspf']['meta_info']


                            class Bgp(object):
                                """
                                bgp
                                
                                .. attribute:: as_xx  <key>
                                
                                	First half of BGP AS number in XX.YY format. Mandatory if Protocol is BGP and must not be specified otherwise. Must be a non\-zero value if second half is zero
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: as_yy  <key>
                                
                                	Second half of BGP AS number in XX.YY format . Mandatory if Protocol is BGP or EIGRP and must not be specified otherwise. Must be a non\-zero value if first half is zero
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: instance_name  <key>
                                
                                	OSPF or ISIS process name or protocol name\: bgp, eigrp, connected
                                	**type**\:  str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: bgp_preserve_default_info
                                
                                	Preserve Metric and Metric Type of BGP Default Route
                                	**type**\:  bool
                                
                                .. attribute:: bgp_preserve_med
                                
                                	Preserve MED of BGP routes
                                	**type**\:  bool
                                
                                .. attribute:: classful
                                
                                	Disallow subnetting
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: default_redistributed_route_metric
                                
                                	Default metric for routes being redistributed into OSPF
                                	**type**\:  int
                                
                                	**range:** 1..16777214
                                
                                .. attribute:: eigrp_route_type
                                
                                	EIGRP route type
                                	**type**\:   :py:class:`OspfEigrpRouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfEigrpRouteEnum>`
                                
                                .. attribute:: isis_levels
                                
                                	Levels of ISIS routes
                                	**type**\:   :py:class:`OspfRouteLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevelEnum>`
                                
                                .. attribute:: metric_type
                                
                                	Set OSPF External metric type
                                	**type**\:   :py:class:`OspfLinkStateMetricEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetricEnum>`
                                
                                .. attribute:: ospf_external
                                
                                	OSPF external route types
                                	**type**\:   :py:class:`OspfRouteLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevelEnum>`
                                
                                .. attribute:: ospf_internal
                                
                                	OSPF\_Internal route type
                                	**type**\:  bool
                                
                                .. attribute:: ospf_nssa_level
                                
                                	OSPF NSSA external route types
                                	**type**\:   :py:class:`OspfRouteLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevelEnum>`
                                
                                .. attribute:: ospf_redist_lsa_type
                                
                                	LSA type for redistributed routes
                                	**type**\:   :py:class:`OspfRedistLsaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRedistLsaEnum>`
                                
                                	**default value**\: external
                                
                                .. attribute:: ospfnssa_only
                                
                                	Only redistribute to NSSA areas
                                	**type**\:  bool
                                
                                .. attribute:: route_policy_name
                                
                                	Routing policy name
                                	**type**\:  str
                                
                                .. attribute:: tag
                                
                                	Set tag for routes redistributed into OSPF
                                	**type**\:  int
                                
                                	**range:** \-2147483648..2147483647
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.as_xx = None
                                    self.as_yy = None
                                    self.instance_name = None
                                    self.bgp_preserve_default_info = None
                                    self.bgp_preserve_med = None
                                    self.classful = None
                                    self.default_redistributed_route_metric = None
                                    self.eigrp_route_type = None
                                    self.isis_levels = None
                                    self.metric_type = None
                                    self.ospf_external = None
                                    self.ospf_internal = None
                                    self.ospf_nssa_level = None
                                    self.ospf_redist_lsa_type = None
                                    self.ospfnssa_only = None
                                    self.route_policy_name = None
                                    self.tag = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.as_xx is None:
                                        raise YPYModelError('Key property as_xx is None')
                                    if self.as_yy is None:
                                        raise YPYModelError('Key property as_yy is None')
                                    if self.instance_name is None:
                                        raise YPYModelError('Key property instance_name is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:bgp[Cisco-IOS-XR-ipv4-ospf-cfg:as-xx = ' + str(self.as_xx) + '][Cisco-IOS-XR-ipv4-ospf-cfg:as-yy = ' + str(self.as_yy) + '][Cisco-IOS-XR-ipv4-ospf-cfg:instance-name = ' + str(self.instance_name) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.as_xx is not None:
                                        return True

                                    if self.as_yy is not None:
                                        return True

                                    if self.instance_name is not None:
                                        return True

                                    if self.bgp_preserve_default_info is not None:
                                        return True

                                    if self.bgp_preserve_med is not None:
                                        return True

                                    if self.classful is not None:
                                        return True

                                    if self.default_redistributed_route_metric is not None:
                                        return True

                                    if self.eigrp_route_type is not None:
                                        return True

                                    if self.isis_levels is not None:
                                        return True

                                    if self.metric_type is not None:
                                        return True

                                    if self.ospf_external is not None:
                                        return True

                                    if self.ospf_internal is not None:
                                        return True

                                    if self.ospf_nssa_level is not None:
                                        return True

                                    if self.ospf_redist_lsa_type is not None:
                                        return True

                                    if self.ospfnssa_only is not None:
                                        return True

                                    if self.route_policy_name is not None:
                                        return True

                                    if self.tag is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute.Bgp']['meta_info']


                            class Eigrp(object):
                                """
                                eigrp
                                
                                .. attribute:: as_xx  <key>
                                
                                	First half of BGP AS number in XX.YY format. Mandatory if Protocol is BGP and must not be specified otherwise. Must be a non\-zero value if second half is zero
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: instance_name  <key>
                                
                                	OSPF or ISIS process name or protocol name\: bgp, eigrp, connected
                                	**type**\:  str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: bgp_preserve_default_info
                                
                                	Preserve Metric and Metric Type of BGP Default Route
                                	**type**\:  bool
                                
                                .. attribute:: bgp_preserve_med
                                
                                	Preserve MED of BGP routes
                                	**type**\:  bool
                                
                                .. attribute:: classful
                                
                                	Disallow subnetting
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: default_redistributed_route_metric
                                
                                	Default metric for routes being redistributed into OSPF
                                	**type**\:  int
                                
                                	**range:** 1..16777214
                                
                                .. attribute:: eigrp_route_type
                                
                                	EIGRP route type
                                	**type**\:   :py:class:`OspfEigrpRouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfEigrpRouteEnum>`
                                
                                .. attribute:: isis_levels
                                
                                	Levels of ISIS routes
                                	**type**\:   :py:class:`OspfRouteLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevelEnum>`
                                
                                .. attribute:: metric_type
                                
                                	Set OSPF External metric type
                                	**type**\:   :py:class:`OspfLinkStateMetricEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetricEnum>`
                                
                                .. attribute:: ospf_external
                                
                                	OSPF external route types
                                	**type**\:   :py:class:`OspfRouteLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevelEnum>`
                                
                                .. attribute:: ospf_internal
                                
                                	OSPF\_Internal route type
                                	**type**\:  bool
                                
                                .. attribute:: ospf_nssa_level
                                
                                	OSPF NSSA external route types
                                	**type**\:   :py:class:`OspfRouteLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRouteLevelEnum>`
                                
                                .. attribute:: ospf_redist_lsa_type
                                
                                	LSA type for redistributed routes
                                	**type**\:   :py:class:`OspfRedistLsaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfRedistLsaEnum>`
                                
                                	**default value**\: external
                                
                                .. attribute:: ospfnssa_only
                                
                                	Only redistribute to NSSA areas
                                	**type**\:  bool
                                
                                .. attribute:: route_policy_name
                                
                                	Routing policy name
                                	**type**\:  str
                                
                                .. attribute:: tag
                                
                                	Set tag for routes redistributed into OSPF
                                	**type**\:  int
                                
                                	**range:** \-2147483648..2147483647
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.as_xx = None
                                    self.instance_name = None
                                    self.bgp_preserve_default_info = None
                                    self.bgp_preserve_med = None
                                    self.classful = None
                                    self.default_redistributed_route_metric = None
                                    self.eigrp_route_type = None
                                    self.isis_levels = None
                                    self.metric_type = None
                                    self.ospf_external = None
                                    self.ospf_internal = None
                                    self.ospf_nssa_level = None
                                    self.ospf_redist_lsa_type = None
                                    self.ospfnssa_only = None
                                    self.route_policy_name = None
                                    self.tag = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.as_xx is None:
                                        raise YPYModelError('Key property as_xx is None')
                                    if self.instance_name is None:
                                        raise YPYModelError('Key property instance_name is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:eigrp[Cisco-IOS-XR-ipv4-ospf-cfg:as-xx = ' + str(self.as_xx) + '][Cisco-IOS-XR-ipv4-ospf-cfg:instance-name = ' + str(self.instance_name) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.as_xx is not None:
                                        return True

                                    if self.instance_name is not None:
                                        return True

                                    if self.bgp_preserve_default_info is not None:
                                        return True

                                    if self.bgp_preserve_med is not None:
                                        return True

                                    if self.classful is not None:
                                        return True

                                    if self.default_redistributed_route_metric is not None:
                                        return True

                                    if self.eigrp_route_type is not None:
                                        return True

                                    if self.isis_levels is not None:
                                        return True

                                    if self.metric_type is not None:
                                        return True

                                    if self.ospf_external is not None:
                                        return True

                                    if self.ospf_internal is not None:
                                        return True

                                    if self.ospf_nssa_level is not None:
                                        return True

                                    if self.ospf_redist_lsa_type is not None:
                                        return True

                                    if self.ospfnssa_only is not None:
                                        return True

                                    if self.route_policy_name is not None:
                                        return True

                                    if self.tag is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute.Eigrp']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.protocol_name is None:
                                    raise YPYModelError('Key property protocol_name is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:redistribute[Cisco-IOS-XR-ipv4-ospf-cfg:protocol-name = ' + str(self.protocol_name) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.protocol_name is not None:
                                    return True

                                if self.application_or_isis_or_ospf is not None:
                                    for child_ref in self.application_or_isis_or_ospf:
                                        if child_ref._has_data():
                                            return True

                                if self.bgp is not None:
                                    for child_ref in self.bgp:
                                        if child_ref._has_data():
                                            return True

                                if self.connected_or_static_or_dagr_or_subscriber_or_mobile_or_rip is not None and self.connected_or_static_or_dagr_or_subscriber_or_mobile_or_rip._has_data():
                                    return True

                                if self.eigrp is not None:
                                    for child_ref in self.eigrp:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes.Redistribute']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:redistributes'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.redistribute is not None:
                                for child_ref in self.redistribute:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.Redistribution.Redistributes']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:redistribution'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.redistributes is not None and self.redistributes._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.Redistribution']['meta_info']


                class AdjacencyStagger(object):
                    """
                    Staggering OSPF adjacency bring up
                    
                    .. attribute:: disable
                    
                    	Disable OSPF adjacency stagger
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: initial_nbr
                    
                    	Adjacency Stagger\: Initial number of neighbors to bring up per area
                    	**type**\:  int
                    
                    	**range:** 1..65535
                    
                    	**default value**\: 2
                    
                    .. attribute:: max_nbr
                    
                    	Adjacency Stagger\: Subsequent simultaneous number of neighbors to bring up
                    	**type**\:  int
                    
                    	**range:** 1..65535
                    
                    	**default value**\: 64
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-01-02'

                    def __init__(self):
                        self.parent = None
                        self.disable = None
                        self.initial_nbr = None
                        self.max_nbr = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:adjacency-stagger'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.disable is not None:
                            return True

                        if self.initial_nbr is not None:
                            return True

                        if self.max_nbr is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AdjacencyStagger']['meta_info']


                class MaxLsa(object):
                    """
                    Set max\-lsa configuration
                    
                    .. attribute:: max_lsa_ignore_count
                    
                    	Set count on how many times adjacencies can be suppressed
                    	**type**\:  int
                    
                    	**range:** 1..4294967294
                    
                    .. attribute:: max_lsa_ignore_time
                    
                    	Set time during which all adjacencies are suppressed
                    	**type**\:  int
                    
                    	**range:** 1..35791394
                    
                    .. attribute:: max_lsa_limit
                    
                    	Set maximum number of non self\-generated LSAs
                    	**type**\:  int
                    
                    	**range:** 1..4294967294
                    
                    	**mandatory**\: True
                    
                    .. attribute:: max_lsa_reset_time
                    
                    	Set number of minutes after which ignore\-count is reset to zero
                    	**type**\:  int
                    
                    	**range:** 2..71582788
                    
                    	**units**\: minute
                    
                    .. attribute:: max_lsa_threshold
                    
                    	Set max\-lsa threshold for generating a warning message
                    	**type**\:  int
                    
                    	**range:** 1..100
                    
                    .. attribute:: max_lsa_warning_only
                    
                    	Only give warning message when limit is exceeded
                    	**type**\:  bool
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-01-02'

                    def __init__(self):
                        self.parent = None
                        self._is_presence = True
                        self.max_lsa_ignore_count = None
                        self.max_lsa_ignore_time = None
                        self.max_lsa_limit = None
                        self.max_lsa_reset_time = None
                        self.max_lsa_threshold = None
                        self.max_lsa_warning_only = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:max-lsa'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self._is_presence:
                            return True
                        if self.max_lsa_ignore_count is not None:
                            return True

                        if self.max_lsa_ignore_time is not None:
                            return True

                        if self.max_lsa_limit is not None:
                            return True

                        if self.max_lsa_reset_time is not None:
                            return True

                        if self.max_lsa_threshold is not None:
                            return True

                        if self.max_lsa_warning_only is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.MaxLsa']['meta_info']


                class AutoCost(object):
                    """
                    Controls automatic cost based on bandwidth
                    
                    .. attribute:: bandwidth
                    
                    	The reference bandwidth in terms of Mbits per second
                    	**type**\:  int
                    
                    	**range:** 1..4294967
                    
                    	**units**\: Mbit/s
                    
                    	**default value**\: 100
                    
                    .. attribute:: disable
                    
                    	Disabling auto costing
                    	**type**\:  bool
                    
                    	**default value**\: false
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-01-02'

                    def __init__(self):
                        self.parent = None
                        self.bandwidth = None
                        self.disable = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:auto-cost'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.bandwidth is not None:
                            return True

                        if self.disable is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AutoCost']['meta_info']


                class Ucmp(object):
                    """
                    Unequal Cost Multi\-ptah configuration
                    
                    .. attribute:: delay_interval
                    
                    	Delay in msecs between primary SPF and UCMP computation
                    	**type**\:  int
                    
                    	**range:** 1..5000
                    
                    	**units**\: millisecond
                    
                    	**default value**\: 100
                    
                    .. attribute:: enable
                    
                    	UCMP feature enable configuration
                    	**type**\:   :py:class:`Enable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Ucmp.Enable>`
                    
                    .. attribute:: exclude_interfaces
                    
                    	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                    	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Ucmp.ExcludeInterfaces>`
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-01-02'

                    def __init__(self):
                        self.parent = None
                        self.delay_interval = None
                        self.enable = Ospf.Processes.Process.DefaultVrf.Ucmp.Enable()
                        self.enable.parent = self
                        self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.Ucmp.ExcludeInterfaces()
                        self.exclude_interfaces.parent = self


                    class Enable(object):
                        """
                        UCMP feature enable configuration
                        
                        .. attribute:: prefix_list_name
                        
                        	Name of the Prefix List
                        	**type**\:  str
                        
                        .. attribute:: variance
                        
                        	Value of variance
                        	**type**\:  int
                        
                        	**range:** 101..10000
                        
                        	**default value**\: 200
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.prefix_list_name = None
                            self.variance = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:enable'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.prefix_list_name is not None:
                                return True

                            if self.variance is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.Ucmp.Enable']['meta_info']


                    class ExcludeInterfaces(object):
                        """
                        Fast\-reroute per\-link/per\-prefix or UCMP exclude
                        interface configuration
                        
                        .. attribute:: exclude_interface
                        
                        	Exclude an interface from becoming a backup or UCMP
                        	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Ucmp.ExcludeInterfaces.ExcludeInterface>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.exclude_interface = YList()
                            self.exclude_interface.parent = self
                            self.exclude_interface.name = 'exclude_interface'


                        class ExcludeInterface(object):
                            """
                            Exclude an interface from becoming a backup or
                            UCMP
                            
                            .. attribute:: interface_name  <key>
                            
                            	Interface
                            	**type**\:  str
                            
                            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.interface_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.interface_name is None:
                                    raise YPYModelError('Key property interface_name is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.interface_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.Ucmp.ExcludeInterfaces.ExcludeInterface']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.exclude_interface is not None:
                                for child_ref in self.exclude_interface:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.Ucmp.ExcludeInterfaces']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:ucmp'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.delay_interval is not None:
                            return True

                        if self.enable is not None and self.enable._has_data():
                            return True

                        if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.Ucmp']['meta_info']


                class FastReroute(object):
                    """
                    Fast\-reroute instance scoped parameters
                    
                    .. attribute:: per_link
                    
                    	Fast\-reroute per\-link global configuration
                    	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.FastReroute.PerLink>`
                    
                    .. attribute:: per_prefix
                    
                    	Fast\-reroute per\-prefix global configuration
                    	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.FastReroute.PerPrefix>`
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-01-02'

                    def __init__(self):
                        self.parent = None
                        self.per_link = Ospf.Processes.Process.DefaultVrf.FastReroute.PerLink()
                        self.per_link.parent = self
                        self.per_prefix = Ospf.Processes.Process.DefaultVrf.FastReroute.PerPrefix()
                        self.per_prefix.parent = self


                    class PerLink(object):
                        """
                        Fast\-reroute per\-link global configuration
                        
                        .. attribute:: priority
                        
                        	Fast\-reroute per\-link/per\-prefix priority\-limit command
                        	**type**\:   :py:class:`OspfFastReroutePriorityEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastReroutePriorityEnum>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.priority = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-link'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.priority is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.FastReroute.PerLink']['meta_info']


                    class PerPrefix(object):
                        """
                        Fast\-reroute per\-prefix global configuration
                        
                        .. attribute:: load_sharing_disable
                        
                        	Disable load sharing between multiple backups
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: priority
                        
                        	Fast\-reroute per\-link/per\-prefix priority\-limit command
                        	**type**\:   :py:class:`OspfFastReroutePriorityEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastReroutePriorityEnum>`
                        
                        .. attribute:: tiebreakers
                        
                        	Fast\-reroute tiebreakers configurations
                        	**type**\:   :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.load_sharing_disable = None
                            self.priority = None
                            self.tiebreakers = Ospf.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers()
                            self.tiebreakers.parent = self


                        class Tiebreakers(object):
                            """
                            Fast\-reroute tiebreakers configurations
                            
                            .. attribute:: tiebreaker
                            
                            	Fast\-reroute tiebreakers configuration
                            	**type**\: list of    :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.tiebreaker = YList()
                                self.tiebreaker.parent = self
                                self.tiebreaker.name = 'tiebreaker'


                            class Tiebreaker(object):
                                """
                                Fast\-reroute tiebreakers configuration
                                
                                .. attribute:: tiebreaker_type  <key>
                                
                                	Tiebreaker type
                                	**type**\:   :py:class:`OspfFastRerouteTiebreakersEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakersEnum>`
                                
                                .. attribute:: tiebreaker_index
                                
                                	Index value for a tiebreaker, 0 to disable
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                	**mandatory**\: True
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.tiebreaker_type = None
                                    self.tiebreaker_index = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.tiebreaker_type is None:
                                        raise YPYModelError('Key property tiebreaker_type is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker[Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker-type = ' + str(self.tiebreaker_type) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.tiebreaker_type is not None:
                                        return True

                                    if self.tiebreaker_index is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreakers'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.tiebreaker is not None:
                                    for child_ref in self.tiebreaker:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-prefix'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.load_sharing_disable is not None:
                                return True

                            if self.priority is not None:
                                return True

                            if self.tiebreakers is not None and self.tiebreakers._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.FastReroute.PerPrefix']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:fast-reroute'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.per_link is not None and self.per_link._has_data():
                            return True

                        if self.per_prefix is not None and self.per_prefix._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.FastReroute']['meta_info']


                class SummaryPrefixes(object):
                    """
                    Configure IP prefix summary
                    
                    .. attribute:: netmask
                    
                    	keys\: netmask
                    	**type**\: list of    :py:class:`Netmask <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.SummaryPrefixes.Netmask>`
                    
                    .. attribute:: prefix
                    
                    	keys\: prefix
                    	**type**\: list of    :py:class:`Prefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.SummaryPrefixes.Prefix>`
                    
                    .. attribute:: prefix_and_netmask
                    
                    	keys\: prefix, netmask
                    	**type**\: list of    :py:class:`PrefixAndNetmask <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.SummaryPrefixes.PrefixAndNetmask>`
                    
                    .. attribute:: summary_prefix_data
                    
                    	Data container
                    	**type**\:   :py:class:`SummaryPrefixData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.SummaryPrefixes.SummaryPrefixData>`
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-01-02'

                    def __init__(self):
                        self.parent = None
                        self.netmask = YList()
                        self.netmask.parent = self
                        self.netmask.name = 'netmask'
                        self.prefix = YList()
                        self.prefix.parent = self
                        self.prefix.name = 'prefix'
                        self.prefix_and_netmask = YList()
                        self.prefix_and_netmask.parent = self
                        self.prefix_and_netmask.name = 'prefix_and_netmask'
                        self.summary_prefix_data = Ospf.Processes.Process.DefaultVrf.SummaryPrefixes.SummaryPrefixData()
                        self.summary_prefix_data.parent = self


                    class SummaryPrefixData(object):
                        """
                        Data container.
                        
                        .. attribute:: not_advertise
                        
                        	Do not advertise when translating OSPF type\-7 LSA
                        	**type**\:  bool
                        
                        	**default value**\: false
                        
                        .. attribute:: tag
                        
                        	32\-bit tag value
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.not_advertise = None
                            self.tag = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:summary-prefix-data'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.not_advertise is not None:
                                return True

                            if self.tag is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.SummaryPrefixes.SummaryPrefixData']['meta_info']


                    class PrefixAndNetmask(object):
                        """
                        keys\: prefix, netmask
                        
                        .. attribute:: netmask  <key>
                        
                        	Summary netmask
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: prefix  <key>
                        
                        	IP summary prefix
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: not_advertise
                        
                        	Do not advertise when translating OSPF type\-7 LSA
                        	**type**\:  bool
                        
                        	**default value**\: false
                        
                        .. attribute:: tag
                        
                        	32\-bit tag value
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.netmask = None
                            self.prefix = None
                            self.not_advertise = None
                            self.tag = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.netmask is None:
                                raise YPYModelError('Key property netmask is None')
                            if self.prefix is None:
                                raise YPYModelError('Key property prefix is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:prefix-and-netmask[Cisco-IOS-XR-ipv4-ospf-cfg:netmask = ' + str(self.netmask) + '][Cisco-IOS-XR-ipv4-ospf-cfg:prefix = ' + str(self.prefix) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.netmask is not None:
                                return True

                            if self.prefix is not None:
                                return True

                            if self.not_advertise is not None:
                                return True

                            if self.tag is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.SummaryPrefixes.PrefixAndNetmask']['meta_info']


                    class Prefix(object):
                        """
                        keys\: prefix
                        
                        .. attribute:: prefix  <key>
                        
                        	IP summary prefix
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: not_advertise
                        
                        	Do not advertise when translating OSPF type\-7 LSA
                        	**type**\:  bool
                        
                        	**default value**\: false
                        
                        .. attribute:: tag
                        
                        	32\-bit tag value
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.prefix = None
                            self.not_advertise = None
                            self.tag = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.prefix is None:
                                raise YPYModelError('Key property prefix is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:prefix[Cisco-IOS-XR-ipv4-ospf-cfg:prefix = ' + str(self.prefix) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.prefix is not None:
                                return True

                            if self.not_advertise is not None:
                                return True

                            if self.tag is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.SummaryPrefixes.Prefix']['meta_info']


                    class Netmask(object):
                        """
                        keys\: netmask
                        
                        .. attribute:: netmask  <key>
                        
                        	Summary netmask
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: not_advertise
                        
                        	Do not advertise when translating OSPF type\-7 LSA
                        	**type**\:  bool
                        
                        	**default value**\: false
                        
                        .. attribute:: tag
                        
                        	32\-bit tag value
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.netmask = None
                            self.not_advertise = None
                            self.tag = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.netmask is None:
                                raise YPYModelError('Key property netmask is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:netmask[Cisco-IOS-XR-ipv4-ospf-cfg:netmask = ' + str(self.netmask) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.netmask is not None:
                                return True

                            if self.not_advertise is not None:
                                return True

                            if self.tag is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.SummaryPrefixes.Netmask']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:summary-prefixes'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.netmask is not None:
                            for child_ref in self.netmask:
                                if child_ref._has_data():
                                    return True

                        if self.prefix is not None:
                            for child_ref in self.prefix:
                                if child_ref._has_data():
                                    return True

                        if self.prefix_and_netmask is not None:
                            for child_ref in self.prefix_and_netmask:
                                if child_ref._has_data():
                                    return True

                        if self.summary_prefix_data is not None and self.summary_prefix_data._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.SummaryPrefixes']['meta_info']


                class OutgoingRouteUpdates(object):
                    """
                    Filter outgoing routing updates
                    
                    .. attribute:: outgoing_route_update
                    
                    	Filter outgoing routing updates for a particular protocol
                    	**type**\: list of    :py:class:`OutgoingRouteUpdate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.OutgoingRouteUpdates.OutgoingRouteUpdate>`
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-01-02'

                    def __init__(self):
                        self.parent = None
                        self.outgoing_route_update = YList()
                        self.outgoing_route_update.parent = self
                        self.outgoing_route_update.name = 'outgoing_route_update'


                    class OutgoingRouteUpdate(object):
                        """
                        Filter outgoing routing updates for a
                        particular protocol
                        
                        .. attribute:: protocol_name  <key>
                        
                        	Distribute list protocol type
                        	**type**\:   :py:class:`OspfDistListProtocolEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfDistListProtocolEnum>`
                        
                        .. attribute:: access_list_name
                        
                        	Access Control List name
                        	**type**\:  str
                        
                        .. attribute:: as_xx
                        
                        	First half of BGP AS number in XX.YY format.  Mandatory if Protocol is BGP and must not be specified otherwise. Must be a non\-zero value if second half is zero
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: as_yy
                        
                        	Second half of BGP AS number in XX.YY format. Mandatory if Protocol is BGP and must not be specified otherwise. Must be a non\-zero value if first half is zero
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ospf_process_name
                        
                        	OSPF process name
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.protocol_name = None
                            self.access_list_name = None
                            self.as_xx = None
                            self.as_yy = None
                            self.ospf_process_name = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.protocol_name is None:
                                raise YPYModelError('Key property protocol_name is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:outgoing-route-update[Cisco-IOS-XR-ipv4-ospf-cfg:protocol-name = ' + str(self.protocol_name) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.protocol_name is not None:
                                return True

                            if self.access_list_name is not None:
                                return True

                            if self.as_xx is not None:
                                return True

                            if self.as_yy is not None:
                                return True

                            if self.ospf_process_name is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.OutgoingRouteUpdates.OutgoingRouteUpdate']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:outgoing-route-updates'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.outgoing_route_update is not None:
                            for child_ref in self.outgoing_route_update:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.OutgoingRouteUpdates']['meta_info']


                class Distance(object):
                    """
                    Administrative distance configuration
                    
                    .. attribute:: admin_distance
                    
                    	Define an administrative distance
                    	**type**\:  int
                    
                    	**range:** 1..255
                    
                    	**default value**\: 110
                    
                    .. attribute:: ip_distances
                    
                    	IP specific administrative distance configuration
                    	**type**\:   :py:class:`IpDistances <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Distance.IpDistances>`
                    
                    .. attribute:: ospf_distance
                    
                    	OSPF distance configuration
                    	**type**\:   :py:class:`OspfDistance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Distance.OspfDistance>`
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-01-02'

                    def __init__(self):
                        self.parent = None
                        self.admin_distance = None
                        self.ip_distances = Ospf.Processes.Process.DefaultVrf.Distance.IpDistances()
                        self.ip_distances.parent = self
                        self.ospf_distance = Ospf.Processes.Process.DefaultVrf.Distance.OspfDistance()
                        self.ospf_distance.parent = self


                    class OspfDistance(object):
                        """
                        OSPF distance configuration
                        
                        .. attribute:: external_routes
                        
                        	Distance for external type 5 and type 7 routes
                        	**type**\:  int
                        
                        	**range:** 1..255
                        
                        	**default value**\: 110
                        
                        .. attribute:: inter_area
                        
                        	Distance for inter\-area routes
                        	**type**\:  int
                        
                        	**range:** 1..255
                        
                        	**default value**\: 110
                        
                        .. attribute:: intra_area
                        
                        	Distance for intra\-area routes
                        	**type**\:  int
                        
                        	**range:** 1..255
                        
                        	**default value**\: 110
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.external_routes = None
                            self.inter_area = None
                            self.intra_area = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:ospf-distance'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.external_routes is not None:
                                return True

                            if self.inter_area is not None:
                                return True

                            if self.intra_area is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.Distance.OspfDistance']['meta_info']


                    class IpDistances(object):
                        """
                        IP specific administrative distance
                        configuration
                        
                        .. attribute:: ip_distance
                        
                        	Administrative distance configuration for a particular IP address
                        	**type**\: list of    :py:class:`IpDistance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Distance.IpDistances.IpDistance>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.ip_distance = YList()
                            self.ip_distance.parent = self
                            self.ip_distance.name = 'ip_distance'


                        class IpDistance(object):
                            """
                            Administrative distance configuration for a
                            particular IP address
                            
                            .. attribute:: address  <key>
                            
                            	IP source address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: wildcard  <key>
                            
                            	IP wild card bits \-\- inverted mask
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: access_list_name
                            
                            	Access Control List name
                            	**type**\:  str
                            
                            .. attribute:: distance
                            
                            	Administrative distance
                            	**type**\:  int
                            
                            	**range:** 1..255
                            
                            	**default value**\: 110
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.address = None
                                self.wildcard = None
                                self.access_list_name = None
                                self.distance = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.address is None:
                                    raise YPYModelError('Key property address is None')
                                if self.wildcard is None:
                                    raise YPYModelError('Key property wildcard is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:ip-distance[Cisco-IOS-XR-ipv4-ospf-cfg:address = ' + str(self.address) + '][Cisco-IOS-XR-ipv4-ospf-cfg:wildcard = ' + str(self.wildcard) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.address is not None:
                                    return True

                                if self.wildcard is not None:
                                    return True

                                if self.access_list_name is not None:
                                    return True

                                if self.distance is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.Distance.IpDistances.IpDistance']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:ip-distances'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ip_distance is not None:
                                for child_ref in self.ip_distance:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.Distance.IpDistances']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:distance'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.admin_distance is not None:
                            return True

                        if self.ip_distances is not None and self.ip_distances._has_data():
                            return True

                        if self.ospf_distance is not None and self.ospf_distance._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.Distance']['meta_info']


                class AreaAddresses(object):
                    """
                    Area configuration
                    
                    .. attribute:: area_address
                    
                    	Configuration for a particular area
                    	**type**\: list of    :py:class:`AreaAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress>`
                    
                    .. attribute:: area_area_id
                    
                    	Configuration for a particular area
                    	**type**\: list of    :py:class:`AreaAreaId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId>`
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-01-02'

                    def __init__(self):
                        self.parent = None
                        self.area_address = YList()
                        self.area_address.parent = self
                        self.area_address.name = 'area_address'
                        self.area_area_id = YList()
                        self.area_area_id.parent = self
                        self.area_area_id.name = 'area_area_id'


                    class AreaAddress(object):
                        """
                        Configuration for a particular area
                        
                        .. attribute:: address  <key>
                        
                        	Area ID if in IP address format
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: area_ranges
                        
                        	Summarize routes matching address/mask (border routers only)
                        	**type**\:   :py:class:`AreaRanges <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaRanges>`
                        
                        .. attribute:: area_scope
                        
                        	Area scope configuration
                        	**type**\:   :py:class:`AreaScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope>`
                        
                        .. attribute:: default_cost
                        
                        	Set the summary default\-cost of a NSSA/stub area
                        	**type**\:  int
                        
                        	**range:** 1..16777215
                        
                        	**default value**\: 1
                        
                        .. attribute:: external_out
                        
                        	Enable/Disable an OSPF area to advertise intra\-area prefixes out of this area as external
                        	**type**\:  bool
                        
                        .. attribute:: mpls_traffic_eng
                        
                        	Configure an OSPF area to run MPLS Traffic Engineering
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: multi_area_interface_scopes
                        
                        	Multi Area Interface scope configurations
                        	**type**\:   :py:class:`MultiAreaInterfaceScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes>`
                        
                        .. attribute:: name_scopes
                        
                        	Name scope configurations
                        	**type**\:   :py:class:`NameScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes>`
                        
                        .. attribute:: nssa
                        
                        	Specify area as a NSSA area
                        	**type**\:   :py:class:`Nssa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Nssa>`
                        
                        .. attribute:: route_policy_in
                        
                        	Configure a route policy for inbound type\-3 lsa filtering
                        	**type**\:  str
                        
                        .. attribute:: route_policy_out
                        
                        	Configure a route policy for outbound type\-3 lsa filtering
                        	**type**\:  str
                        
                        .. attribute:: running
                        
                        	Enable routing on an IP network
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: segment_routing
                        
                        	segment\-routing configuration Applicable only in Default VRF
                        	**type**\:   :py:class:`OspfSegmentRoutingEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRoutingEnum>`
                        
                        .. attribute:: sham_link_scopes
                        
                        	Sham Link scope configurations
                        	**type**\:   :py:class:`ShamLinkScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes>`
                        
                        .. attribute:: stub
                        
                        	Specify the area as a stub area (send summary LSA stub area)
                        	**type**\:  bool
                        
                        .. attribute:: summary_in
                        
                        	Enable/Disable an OSPF area to advertise external prefixes into this area as summary
                        	**type**\:  bool
                        
                        .. attribute:: virtual_link_scopes
                        
                        	Virtual Link scope configurations
                        	**type**\:   :py:class:`VirtualLinkScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.address = None
                            self.area_ranges = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaRanges()
                            self.area_ranges.parent = self
                            self.area_scope = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope()
                            self.area_scope.parent = self
                            self.default_cost = None
                            self.external_out = None
                            self.mpls_traffic_eng = None
                            self.multi_area_interface_scopes = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes()
                            self.multi_area_interface_scopes.parent = self
                            self.name_scopes = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes()
                            self.name_scopes.parent = self
                            self.nssa = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Nssa()
                            self.nssa.parent = self
                            self.route_policy_in = None
                            self.route_policy_out = None
                            self.running = None
                            self.segment_routing = None
                            self.sham_link_scopes = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes()
                            self.sham_link_scopes.parent = self
                            self.stub = None
                            self.summary_in = None
                            self.virtual_link_scopes = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes()
                            self.virtual_link_scopes.parent = self


                        class VirtualLinkScopes(object):
                            """
                            Virtual Link scope configurations
                            
                            .. attribute:: virtual_link_scope
                            
                            	Virtual Link configuration
                            	**type**\: list of    :py:class:`VirtualLinkScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.virtual_link_scope = YList()
                                self.virtual_link_scope.parent = self
                                self.virtual_link_scope.name = 'virtual_link_scope'


                            class VirtualLinkScope(object):
                                """
                                Virtual Link configuration
                                
                                .. attribute:: address  <key>
                                
                                	Router ID of virtual link neighbor
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: authentication
                                
                                	Authentication
                                	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication>`
                                
                                .. attribute:: dead_interval_minimal
                                
                                	Interval after which a neighbor is declared dead
                                	**type**\:   :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal>`
                                
                                .. attribute:: hello_interval
                                
                                	Interval between HELLO packets in seconds
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: retransmit_interval
                                
                                	Time in seconds between retransmitting lost link state advertisements
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 5
                                
                                .. attribute:: running
                                
                                	Enable routing on an IP network
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: transmit_delay
                                
                                	Number of seconds to delay transmission of LSAs
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 1
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.address = None
                                    self.authentication = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication()
                                    self.authentication.parent = self
                                    self.dead_interval_minimal = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal()
                                    self.dead_interval_minimal.parent = self
                                    self.hello_interval = None
                                    self.retransmit_interval = None
                                    self.running = None
                                    self.transmit_delay = None


                                class Authentication(object):
                                    """
                                    Authentication
                                    
                                    .. attribute:: key
                                    
                                    	Authentication key configuration
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: message_digest_keies
                                    
                                    	Message digest authentication password (key) configurations, first 16 chars used
                                    	**type**\:   :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies>`
                                    
                                    .. attribute:: type
                                    
                                    	Authentication type
                                    	**type**\:   :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.Type>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.key = None
                                        self.message_digest_keies = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies()
                                        self.message_digest_keies.parent = self
                                        self.type = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.Type()
                                        self.type.parent = self


                                    class Type(object):
                                        """
                                        Authentication type
                                        
                                        .. attribute:: authen_type
                                        
                                        	Authentication type code 
                                        	**type**\:   :py:class:`OspfAuthenticationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthenticationEnum>`
                                        
                                        .. attribute:: keychain_authen_type
                                        
                                        	Keychain authentication type
                                        	**type**\:   :py:class:`OspfKeychainAuthEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuthEnum>`
                                        
                                        .. attribute:: keychain_name
                                        
                                        	Keychain name
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.authen_type = None
                                            self.keychain_authen_type = None
                                            self.keychain_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:type'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.authen_type is not None:
                                                return True

                                            if self.keychain_authen_type is not None:
                                                return True

                                            if self.keychain_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.Type']['meta_info']


                                    class MessageDigestKeies(object):
                                        """
                                        Message digest authentication password (key)
                                        configurations, first 16 chars used
                                        
                                        .. attribute:: message_digest_key
                                        
                                        	Message digest authentication password (key) configuration
                                        	**type**\: list of    :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.message_digest_key = YList()
                                            self.message_digest_key.parent = self
                                            self.message_digest_key.name = 'message_digest_key'


                                        class MessageDigestKey(object):
                                            """
                                            Message digest authentication password (key)
                                            configuration
                                            
                                            .. attribute:: key_id  <key>
                                            
                                            	Key ID
                                            	**type**\:  int
                                            
                                            	**range:** 1..255
                                            
                                            .. attribute:: password
                                            
                                            	Password
                                            	**type**\:  str
                                            
                                            	**pattern:** (!.+)\|([^!].+)
                                            
                                            	**mandatory**\: True
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.key_id = None
                                                self.password = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.key_id is None:
                                                    raise YPYModelError('Key property key_id is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-key[Cisco-IOS-XR-ipv4-ospf-cfg:key-id = ' + str(self.key_id) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.key_id is not None:
                                                    return True

                                                if self.password is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies.MessageDigestKey']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-keies'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.message_digest_key is not None:
                                                for child_ref in self.message_digest_key:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:authentication'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.key is not None:
                                            return True

                                        if self.message_digest_keies is not None and self.message_digest_keies._has_data():
                                            return True

                                        if self.type is not None and self.type._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.Authentication']['meta_info']


                                class DeadIntervalMinimal(object):
                                    """
                                    Interval after which a neighbor is declared dead
                                    
                                    .. attribute:: interval
                                    
                                    	Interval size in seconds after which a neighbor is declared dead
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: multiplier
                                    
                                    	Number of Hellos in one second
                                    	**type**\:  int
                                    
                                    	**range:** 3..20
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.interval = None
                                        self.multiplier = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:dead-interval-minimal'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.interval is not None:
                                            return True

                                        if self.multiplier is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.address is None:
                                        raise YPYModelError('Key property address is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:virtual-link-scope[Cisco-IOS-XR-ipv4-ospf-cfg:address = ' + str(self.address) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.address is not None:
                                        return True

                                    if self.authentication is not None and self.authentication._has_data():
                                        return True

                                    if self.dead_interval_minimal is not None and self.dead_interval_minimal._has_data():
                                        return True

                                    if self.hello_interval is not None:
                                        return True

                                    if self.retransmit_interval is not None:
                                        return True

                                    if self.running is not None:
                                        return True

                                    if self.transmit_delay is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes.VirtualLinkScope']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:virtual-link-scopes'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.virtual_link_scope is not None:
                                    for child_ref in self.virtual_link_scope:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinkScopes']['meta_info']


                        class ShamLinkScopes(object):
                            """
                            Sham Link scope configurations
                            
                            .. attribute:: sham_link_scope
                            
                            	Sham Link configuration
                            	**type**\: list of    :py:class:`ShamLinkScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.sham_link_scope = YList()
                                self.sham_link_scope.parent = self
                                self.sham_link_scope.name = 'sham_link_scope'


                            class ShamLinkScope(object):
                                """
                                Sham Link configuration
                                
                                .. attribute:: destination_address  <key>
                                
                                	Address of the remote sham\-link endpoint
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: source_address  <key>
                                
                                	Address of the local sham\-link endpoint
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: authentication
                                
                                	Authentication
                                	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication>`
                                
                                .. attribute:: cost
                                
                                	Interface cost
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: dead_interval_minimal
                                
                                	Interval after which a neighbor is declared dead
                                	**type**\:   :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal>`
                                
                                .. attribute:: hello_interval
                                
                                	Interval between HELLO packets in seconds
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: retransmit_interval
                                
                                	Time in seconds between retransmitting lost link state advertisements
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 5
                                
                                .. attribute:: running
                                
                                	Enable routing on an IP network
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: source
                                
                                	Address of the local sham\-link endpoint. Enter an IP Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: transmit_delay
                                
                                	Number of seconds to delay transmission of LSAs
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 1
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.destination_address = None
                                    self.source_address = None
                                    self.authentication = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication()
                                    self.authentication.parent = self
                                    self.cost = None
                                    self.dead_interval_minimal = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal()
                                    self.dead_interval_minimal.parent = self
                                    self.hello_interval = None
                                    self.retransmit_interval = None
                                    self.running = None
                                    self.source = None
                                    self.transmit_delay = None


                                class Authentication(object):
                                    """
                                    Authentication
                                    
                                    .. attribute:: key
                                    
                                    	Authentication key configuration
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: message_digest_keies
                                    
                                    	Message digest authentication password (key) configurations, first 16 chars used
                                    	**type**\:   :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies>`
                                    
                                    .. attribute:: type
                                    
                                    	Authentication type
                                    	**type**\:   :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.Type>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.key = None
                                        self.message_digest_keies = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies()
                                        self.message_digest_keies.parent = self
                                        self.type = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.Type()
                                        self.type.parent = self


                                    class Type(object):
                                        """
                                        Authentication type
                                        
                                        .. attribute:: authen_type
                                        
                                        	Authentication type code 
                                        	**type**\:   :py:class:`OspfAuthenticationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthenticationEnum>`
                                        
                                        .. attribute:: keychain_authen_type
                                        
                                        	Keychain authentication type
                                        	**type**\:   :py:class:`OspfKeychainAuthEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuthEnum>`
                                        
                                        .. attribute:: keychain_name
                                        
                                        	Keychain name
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.authen_type = None
                                            self.keychain_authen_type = None
                                            self.keychain_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:type'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.authen_type is not None:
                                                return True

                                            if self.keychain_authen_type is not None:
                                                return True

                                            if self.keychain_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.Type']['meta_info']


                                    class MessageDigestKeies(object):
                                        """
                                        Message digest authentication password (key)
                                        configurations, first 16 chars used
                                        
                                        .. attribute:: message_digest_key
                                        
                                        	Message digest authentication password (key) configuration
                                        	**type**\: list of    :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.message_digest_key = YList()
                                            self.message_digest_key.parent = self
                                            self.message_digest_key.name = 'message_digest_key'


                                        class MessageDigestKey(object):
                                            """
                                            Message digest authentication password (key)
                                            configuration
                                            
                                            .. attribute:: key_id  <key>
                                            
                                            	Key ID
                                            	**type**\:  int
                                            
                                            	**range:** 1..255
                                            
                                            .. attribute:: password
                                            
                                            	Password
                                            	**type**\:  str
                                            
                                            	**pattern:** (!.+)\|([^!].+)
                                            
                                            	**mandatory**\: True
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.key_id = None
                                                self.password = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.key_id is None:
                                                    raise YPYModelError('Key property key_id is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-key[Cisco-IOS-XR-ipv4-ospf-cfg:key-id = ' + str(self.key_id) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.key_id is not None:
                                                    return True

                                                if self.password is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies.MessageDigestKey']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-keies'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.message_digest_key is not None:
                                                for child_ref in self.message_digest_key:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:authentication'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.key is not None:
                                            return True

                                        if self.message_digest_keies is not None and self.message_digest_keies._has_data():
                                            return True

                                        if self.type is not None and self.type._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.Authentication']['meta_info']


                                class DeadIntervalMinimal(object):
                                    """
                                    Interval after which a neighbor is declared dead
                                    
                                    .. attribute:: interval
                                    
                                    	Interval size in seconds after which a neighbor is declared dead
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: multiplier
                                    
                                    	Number of Hellos in one second
                                    	**type**\:  int
                                    
                                    	**range:** 3..20
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.interval = None
                                        self.multiplier = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:dead-interval-minimal'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.interval is not None:
                                            return True

                                        if self.multiplier is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.destination_address is None:
                                        raise YPYModelError('Key property destination_address is None')
                                    if self.source_address is None:
                                        raise YPYModelError('Key property source_address is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:sham-link-scope[Cisco-IOS-XR-ipv4-ospf-cfg:destination-address = ' + str(self.destination_address) + '][Cisco-IOS-XR-ipv4-ospf-cfg:source-address = ' + str(self.source_address) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.destination_address is not None:
                                        return True

                                    if self.source_address is not None:
                                        return True

                                    if self.authentication is not None and self.authentication._has_data():
                                        return True

                                    if self.cost is not None:
                                        return True

                                    if self.dead_interval_minimal is not None and self.dead_interval_minimal._has_data():
                                        return True

                                    if self.hello_interval is not None:
                                        return True

                                    if self.retransmit_interval is not None:
                                        return True

                                    if self.running is not None:
                                        return True

                                    if self.source is not None:
                                        return True

                                    if self.transmit_delay is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes.ShamLinkScope']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:sham-link-scopes'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.sham_link_scope is not None:
                                    for child_ref in self.sham_link_scope:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinkScopes']['meta_info']


                        class AreaScope(object):
                            """
                            Area scope configuration
                            
                            .. attribute:: authentication
                            
                            	Authentication
                            	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication>`
                            
                            .. attribute:: bfd
                            
                            	BFD configuration
                            	**type**\:   :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Bfd>`
                            
                            .. attribute:: cost
                            
                            	Interface cost
                            	**type**\:  int
                            
                            	**range:** 1..65535
                            
                            .. attribute:: cost_fallback
                            
                            	Interface fallback cost
                            	**type**\:   :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.CostFallback>`
                            
                            .. attribute:: database_filter
                            
                            	Filter OSPF LSA during synchronization and flooding
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: dead_interval_minimal
                            
                            	Interval after which a neighbor is declared dead
                            	**type**\:   :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.DeadIntervalMinimal>`
                            
                            .. attribute:: demand_circuit
                            
                            	Enable/Disable OSPF demand circuit
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: distribute_list
                            
                            	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                            	**type**\:   :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.DistributeList>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: fast_reroute
                            
                            	Fast\-reroute configuration
                            	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute>`
                            
                            .. attribute:: flood_reduction
                            
                            	Enable/Disable OSPF flood reduction
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: hello_interval
                            
                            	Interval between HELLO packets in seconds
                            	**type**\:  int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            .. attribute:: ldp_auto_config
                            
                            	Enable MPLS LDP Auto Config
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: ldp_sync
                            
                            	Enable/Disable MPLS LDP sync
                            	**type**\:  bool
                            
                            .. attribute:: ldp_sync_igp_shortcuts
                            
                            	Enable/Disable MPLS LDP sync for igp\-shortcuts
                            	**type**\:  bool
                            
                            .. attribute:: link_down_fast_detect
                            
                            	Enable/Disable registration for early interface down notifications
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: loopback_stub_network
                            
                            	Enable/Disable advertising loopback as a stub network
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: mtu_ignore
                            
                            	Enable/Disable ignoring of MTU in DBD packets
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: network_type
                            
                            	Type of attached network
                            	**type**\:   :py:class:`OspfNetworkEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfNetworkEnum>`
                            
                            .. attribute:: packet_size
                            
                            	Customize size of OSPF packets upto MTU
                            	**type**\:  int
                            
                            	**range:** 576..10000
                            
                            .. attribute:: passive
                            
                            	When enabled, prevent sending HELLO packets over link
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: prefix_suppression_primary
                            
                            	Enable/Disable prefix suppression for primary addresses
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: prefix_suppression_secondary
                            
                            	Enable/Disable prefix suppression for secondary addresses
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: priority
                            
                            	Router priority for DR and BDR election
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**default value**\: 1
                            
                            .. attribute:: retransmit_interval
                            
                            	Time in seconds between retransmitting lost link state advertisements
                            	**type**\:  int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            	**default value**\: 5
                            
                            .. attribute:: security
                            
                            	Container class for security related configuration parameters
                            	**type**\:   :py:class:`Security <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Security>`
                            
                            .. attribute:: segment_routing_forwarding
                            
                            	segment\-routing forwarding configuration Applicableonly in Default VRF
                            	**type**\:   :py:class:`OspfSegmentRoutingForwardingEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRoutingForwardingEnum>`
                            
                            .. attribute:: transmit_delay
                            
                            	Number of seconds to delay transmission of LSAs
                            	**type**\:  int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            	**default value**\: 1
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.authentication = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication()
                                self.authentication.parent = self
                                self.bfd = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Bfd()
                                self.bfd.parent = self
                                self.cost = None
                                self.cost_fallback = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.CostFallback()
                                self.cost_fallback.parent = self
                                self.database_filter = None
                                self.dead_interval_minimal = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.DeadIntervalMinimal()
                                self.dead_interval_minimal.parent = self
                                self.demand_circuit = None
                                self.distribute_list = None
                                self.fast_reroute = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute()
                                self.fast_reroute.parent = self
                                self.flood_reduction = None
                                self.hello_interval = None
                                self.ldp_auto_config = None
                                self.ldp_sync = None
                                self.ldp_sync_igp_shortcuts = None
                                self.link_down_fast_detect = None
                                self.loopback_stub_network = None
                                self.mtu_ignore = None
                                self.network_type = None
                                self.packet_size = None
                                self.passive = None
                                self.prefix_suppression_primary = None
                                self.prefix_suppression_secondary = None
                                self.priority = None
                                self.retransmit_interval = None
                                self.security = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Security()
                                self.security.parent = self
                                self.segment_routing_forwarding = None
                                self.transmit_delay = None


                            class DistributeList(object):
                                """
                                Filter networks intalled to RIB (disable as ACL
                                name means filtering is disabled)
                                
                                .. attribute:: access_list_name
                                
                                	Access Control List name
                                	**type**\:  str
                                
                                .. attribute:: route_policy_name
                                
                                	Route Policy name
                                	**type**\:  str
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.access_list_name = None
                                    self.route_policy_name = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:distribute-list'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.access_list_name is not None:
                                        return True

                                    if self.route_policy_name is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.DistributeList']['meta_info']


                            class Bfd(object):
                                """
                                BFD configuration
                                
                                .. attribute:: detection_multiplier
                                
                                	Detection multiplier for BFD sessions created by OSPF
                                	**type**\:  int
                                
                                	**range:** 2..50
                                
                                .. attribute:: fast_detect_mode
                                
                                	 use of Bidirectional Forwarding Detection
                                	**type**\:   :py:class:`BfdEnableModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.BfdEnableModeEnum>`
                                
                                .. attribute:: interval
                                
                                	Hello interval for BFD sessions created by OSPF
                                	**type**\:  int
                                
                                	**range:** 3..30000
                                
                                	**units**\: millisecond
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.detection_multiplier = None
                                    self.fast_detect_mode = None
                                    self.interval = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:bfd'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.detection_multiplier is not None:
                                        return True

                                    if self.fast_detect_mode is not None:
                                        return True

                                    if self.interval is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Bfd']['meta_info']


                            class Authentication(object):
                                """
                                Authentication
                                
                                .. attribute:: key
                                
                                	Authentication key configuration
                                	**type**\:  str
                                
                                	**pattern:** (!.+)\|([^!].+)
                                
                                .. attribute:: message_digest_keies
                                
                                	Message digest authentication password (key) configurations, first 16 chars used
                                	**type**\:   :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies>`
                                
                                .. attribute:: type
                                
                                	Authentication type
                                	**type**\:   :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication.Type>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.key = None
                                    self.message_digest_keies = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies()
                                    self.message_digest_keies.parent = self
                                    self.type = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication.Type()
                                    self.type.parent = self


                                class Type(object):
                                    """
                                    Authentication type
                                    
                                    .. attribute:: authen_type
                                    
                                    	Authentication type code 
                                    	**type**\:   :py:class:`OspfAuthenticationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthenticationEnum>`
                                    
                                    .. attribute:: keychain_authen_type
                                    
                                    	Keychain authentication type
                                    	**type**\:   :py:class:`OspfKeychainAuthEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuthEnum>`
                                    
                                    .. attribute:: keychain_name
                                    
                                    	Keychain name
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.authen_type = None
                                        self.keychain_authen_type = None
                                        self.keychain_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:type'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.authen_type is not None:
                                            return True

                                        if self.keychain_authen_type is not None:
                                            return True

                                        if self.keychain_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication.Type']['meta_info']


                                class MessageDigestKeies(object):
                                    """
                                    Message digest authentication password (key)
                                    configurations, first 16 chars used
                                    
                                    .. attribute:: message_digest_key
                                    
                                    	Message digest authentication password (key) configuration
                                    	**type**\: list of    :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.message_digest_key = YList()
                                        self.message_digest_key.parent = self
                                        self.message_digest_key.name = 'message_digest_key'


                                    class MessageDigestKey(object):
                                        """
                                        Message digest authentication password (key)
                                        configuration
                                        
                                        .. attribute:: key_id  <key>
                                        
                                        	Key ID
                                        	**type**\:  int
                                        
                                        	**range:** 1..255
                                        
                                        .. attribute:: password
                                        
                                        	Password
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        	**mandatory**\: True
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.key_id = None
                                            self.password = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.key_id is None:
                                                raise YPYModelError('Key property key_id is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-key[Cisco-IOS-XR-ipv4-ospf-cfg:key-id = ' + str(self.key_id) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.key_id is not None:
                                                return True

                                            if self.password is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies.MessageDigestKey']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-keies'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.message_digest_key is not None:
                                            for child_ref in self.message_digest_key:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication.MessageDigestKeies']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:authentication'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.key is not None:
                                        return True

                                    if self.message_digest_keies is not None and self.message_digest_keies._has_data():
                                        return True

                                    if self.type is not None and self.type._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Authentication']['meta_info']


                            class Security(object):
                                """
                                Container class for security related
                                configuration parameters
                                
                                .. attribute:: ttl
                                
                                	Enabling turns on TTL security
                                	**type**\:   :py:class:`Ttl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Security.Ttl>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.ttl = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Security.Ttl()
                                    self.ttl.parent = self


                                class Ttl(object):
                                    """
                                    Enabling turns on TTL security
                                    
                                    .. attribute:: enable
                                    
                                    	Enable TTL security
                                    	**type**\:  bool
                                    
                                    .. attribute:: hop_count
                                    
                                    	Hop count
                                    	**type**\:  int
                                    
                                    	**range:** 1..254
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.enable = None
                                        self.hop_count = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:ttl'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.enable is not None:
                                            return True

                                        if self.hop_count is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Security.Ttl']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:security'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.ttl is not None and self.ttl._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.Security']['meta_info']


                            class DeadIntervalMinimal(object):
                                """
                                Interval after which a neighbor is declared dead
                                
                                .. attribute:: interval
                                
                                	Interval size in seconds after which a neighbor is declared dead
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: multiplier
                                
                                	Number of Hellos in one second
                                	**type**\:  int
                                
                                	**range:** 3..20
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.interval = None
                                    self.multiplier = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:dead-interval-minimal'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.interval is not None:
                                        return True

                                    if self.multiplier is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.DeadIntervalMinimal']['meta_info']


                            class FastReroute(object):
                                """
                                Fast\-reroute configuration
                                
                                .. attribute:: fast_reroute_enable
                                
                                	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                	**type**\:   :py:class:`OspfFastRerouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteEnum>`
                                
                                .. attribute:: per_link
                                
                                	Fast\-reroute per\-link configuration
                                	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink>`
                                
                                .. attribute:: per_prefix
                                
                                	Fast\-reroute per\-prefix global configuration
                                	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.fast_reroute_enable = None
                                    self.per_link = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink()
                                    self.per_link.parent = self
                                    self.per_prefix = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix()
                                    self.per_prefix.parent = self


                                class PerLink(object):
                                    """
                                    Fast\-reroute per\-link configuration
                                    
                                    .. attribute:: candidate_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                    	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces>`
                                    
                                    .. attribute:: exclude_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                    	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces>`
                                    
                                    .. attribute:: fast_reroute_use_candidate_only
                                    
                                    	Use only interfaces on the candidate list as a backup path
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces()
                                        self.candidate_interfaces.parent = self
                                        self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces()
                                        self.exclude_interfaces.parent = self
                                        self.fast_reroute_use_candidate_only = None


                                    class CandidateInterfaces(object):
                                        """
                                        Fast\-reroute per\-link/per\-prefix candidate
                                        interface configuration
                                        
                                        .. attribute:: candidate_interface
                                        
                                        	Candidate backup interface
                                        	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.candidate_interface = YList()
                                            self.candidate_interface.parent = self
                                            self.candidate_interface.name = 'candidate_interface'


                                        class CandidateInterface(object):
                                            """
                                            Candidate backup interface
                                            
                                            .. attribute:: interface_name  <key>
                                            
                                            	Interface
                                            	**type**\:  str
                                            
                                            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.interface_name = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.interface_name is None:
                                                    raise YPYModelError('Key property interface_name is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.interface_name is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.candidate_interface is not None:
                                                for child_ref in self.candidate_interface:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces']['meta_info']


                                    class ExcludeInterfaces(object):
                                        """
                                        Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                        interface configuration
                                        
                                        .. attribute:: exclude_interface
                                        
                                        	Exclude an interface from becoming a backup or UCMP
                                        	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.exclude_interface = YList()
                                            self.exclude_interface.parent = self
                                            self.exclude_interface.name = 'exclude_interface'


                                        class ExcludeInterface(object):
                                            """
                                            Exclude an interface from becoming a backup or
                                            UCMP
                                            
                                            .. attribute:: interface_name  <key>
                                            
                                            	Interface
                                            	**type**\:  str
                                            
                                            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.interface_name = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.interface_name is None:
                                                    raise YPYModelError('Key property interface_name is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.interface_name is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.exclude_interface is not None:
                                                for child_ref in self.exclude_interface:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-link'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                            return True

                                        if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                            return True

                                        if self.fast_reroute_use_candidate_only is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink']['meta_info']


                                class PerPrefix(object):
                                    """
                                    Fast\-reroute per\-prefix global configuration
                                    
                                    .. attribute:: candidate_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                    	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                    
                                    .. attribute:: exclude_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                    	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                    
                                    .. attribute:: fast_reroute_use_candidate_only
                                    
                                    	Use only interfaces on the candidate list as a backup path
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: remote_lfa
                                    
                                    	Remote LFA configuration
                                    	**type**\:   :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.RemoteLfa>`
                                    
                                    .. attribute:: tiebreakers
                                    
                                    	Fast\-reroute tiebreakers configurations
                                    	**type**\:   :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers>`
                                    
                                    .. attribute:: topology_independent_lfa
                                    
                                    	Topology Independet LFA configuration
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces()
                                        self.candidate_interfaces.parent = self
                                        self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                        self.exclude_interfaces.parent = self
                                        self.fast_reroute_use_candidate_only = None
                                        self.remote_lfa = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.RemoteLfa()
                                        self.remote_lfa.parent = self
                                        self.tiebreakers = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers()
                                        self.tiebreakers.parent = self
                                        self.topology_independent_lfa = None


                                    class RemoteLfa(object):
                                        """
                                        Remote LFA configuration
                                        
                                        .. attribute:: maximum_cost
                                        
                                        	Maximum path cost to remote LFA
                                        	**type**\:  int
                                        
                                        	**range:** 1..4294967295
                                        
                                        .. attribute:: tunnel
                                        
                                        	Enable/Disable remote LFA computation
                                        	**type**\:   :py:class:`OspfFrrRlfaTunnelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFrrRlfaTunnelEnum>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.maximum_cost = None
                                            self.tunnel = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:remote-lfa'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.maximum_cost is not None:
                                                return True

                                            if self.tunnel is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.RemoteLfa']['meta_info']


                                    class Tiebreakers(object):
                                        """
                                        Fast\-reroute tiebreakers configurations
                                        
                                        .. attribute:: tiebreaker
                                        
                                        	Fast\-reroute tiebreakers configuration
                                        	**type**\: list of    :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.tiebreaker = YList()
                                            self.tiebreaker.parent = self
                                            self.tiebreaker.name = 'tiebreaker'


                                        class Tiebreaker(object):
                                            """
                                            Fast\-reroute tiebreakers configuration
                                            
                                            .. attribute:: tiebreaker_type  <key>
                                            
                                            	Tiebreaker type
                                            	**type**\:   :py:class:`OspfFastRerouteTiebreakersIntfEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakersIntfEnum>`
                                            
                                            .. attribute:: tiebreaker_index
                                            
                                            	Index value for a tiebreaker, 0 to disable
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            	**mandatory**\: True
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.tiebreaker_type = None
                                                self.tiebreaker_index = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.tiebreaker_type is None:
                                                    raise YPYModelError('Key property tiebreaker_type is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker[Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker-type = ' + str(self.tiebreaker_type) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.tiebreaker_type is not None:
                                                    return True

                                                if self.tiebreaker_index is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreakers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.tiebreaker is not None:
                                                for child_ref in self.tiebreaker:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.Tiebreakers']['meta_info']


                                    class CandidateInterfaces(object):
                                        """
                                        Fast\-reroute per\-link/per\-prefix candidate
                                        interface configuration
                                        
                                        .. attribute:: candidate_interface
                                        
                                        	Candidate backup interface
                                        	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.candidate_interface = YList()
                                            self.candidate_interface.parent = self
                                            self.candidate_interface.name = 'candidate_interface'


                                        class CandidateInterface(object):
                                            """
                                            Candidate backup interface
                                            
                                            .. attribute:: interface_name  <key>
                                            
                                            	Interface
                                            	**type**\:  str
                                            
                                            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.interface_name = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.interface_name is None:
                                                    raise YPYModelError('Key property interface_name is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.interface_name is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.candidate_interface is not None:
                                                for child_ref in self.candidate_interface:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces']['meta_info']


                                    class ExcludeInterfaces(object):
                                        """
                                        Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                        interface configuration
                                        
                                        .. attribute:: exclude_interface
                                        
                                        	Exclude an interface from becoming a backup or UCMP
                                        	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.exclude_interface = YList()
                                            self.exclude_interface.parent = self
                                            self.exclude_interface.name = 'exclude_interface'


                                        class ExcludeInterface(object):
                                            """
                                            Exclude an interface from becoming a backup or
                                            UCMP
                                            
                                            .. attribute:: interface_name  <key>
                                            
                                            	Interface
                                            	**type**\:  str
                                            
                                            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.interface_name = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.interface_name is None:
                                                    raise YPYModelError('Key property interface_name is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.interface_name is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.exclude_interface is not None:
                                                for child_ref in self.exclude_interface:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-prefix'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                            return True

                                        if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                            return True

                                        if self.fast_reroute_use_candidate_only is not None:
                                            return True

                                        if self.remote_lfa is not None and self.remote_lfa._has_data():
                                            return True

                                        if self.tiebreakers is not None and self.tiebreakers._has_data():
                                            return True

                                        if self.topology_independent_lfa is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:fast-reroute'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.fast_reroute_enable is not None:
                                        return True

                                    if self.per_link is not None and self.per_link._has_data():
                                        return True

                                    if self.per_prefix is not None and self.per_prefix._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute']['meta_info']


                            class CostFallback(object):
                                """
                                Interface fallback cost
                                
                                .. attribute:: cost
                                
                                	Fallback cost of link
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: threshold
                                
                                	Bandwidth threshold
                                	**type**\:  int
                                
                                	**range:** 1..4294967
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.cost = None
                                    self.threshold = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:cost-fallback'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.cost is not None:
                                        return True

                                    if self.threshold is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.CostFallback']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:area-scope'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.authentication is not None and self.authentication._has_data():
                                    return True

                                if self.bfd is not None and self.bfd._has_data():
                                    return True

                                if self.cost is not None:
                                    return True

                                if self.cost_fallback is not None and self.cost_fallback._has_data():
                                    return True

                                if self.database_filter is not None:
                                    return True

                                if self.dead_interval_minimal is not None and self.dead_interval_minimal._has_data():
                                    return True

                                if self.demand_circuit is not None:
                                    return True

                                if self.distribute_list is not None and self.distribute_list._has_data():
                                    return True

                                if self.fast_reroute is not None and self.fast_reroute._has_data():
                                    return True

                                if self.flood_reduction is not None:
                                    return True

                                if self.hello_interval is not None:
                                    return True

                                if self.ldp_auto_config is not None:
                                    return True

                                if self.ldp_sync is not None:
                                    return True

                                if self.ldp_sync_igp_shortcuts is not None:
                                    return True

                                if self.link_down_fast_detect is not None:
                                    return True

                                if self.loopback_stub_network is not None:
                                    return True

                                if self.mtu_ignore is not None:
                                    return True

                                if self.network_type is not None:
                                    return True

                                if self.packet_size is not None:
                                    return True

                                if self.passive is not None:
                                    return True

                                if self.prefix_suppression_primary is not None:
                                    return True

                                if self.prefix_suppression_secondary is not None:
                                    return True

                                if self.priority is not None:
                                    return True

                                if self.retransmit_interval is not None:
                                    return True

                                if self.security is not None and self.security._has_data():
                                    return True

                                if self.segment_routing_forwarding is not None:
                                    return True

                                if self.transmit_delay is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope']['meta_info']


                        class NameScopes(object):
                            """
                            Name scope configurations
                            
                            .. attribute:: name_scope
                            
                            	Name scope configuration
                            	**type**\: list of    :py:class:`NameScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.name_scope = YList()
                                self.name_scope.parent = self
                                self.name_scope.name = 'name_scope'


                            class NameScope(object):
                                """
                                Name scope configuration
                                
                                .. attribute:: interface_name  <key>
                                
                                	Name of Interface to configure
                                	**type**\:  str
                                
                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                
                                .. attribute:: authentication
                                
                                	Authentication
                                	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication>`
                                
                                .. attribute:: bfd
                                
                                	BFD configuration
                                	**type**\:   :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Bfd>`
                                
                                .. attribute:: cost
                                
                                	Interface cost
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: cost_fallback
                                
                                	Interface fallback cost
                                	**type**\:   :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.CostFallback>`
                                
                                .. attribute:: database_filter
                                
                                	Filter OSPF LSA during synchronization and flooding
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: dead_interval_minimal
                                
                                	Interval after which a neighbor is declared dead
                                	**type**\:   :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DeadIntervalMinimal>`
                                
                                .. attribute:: demand_circuit
                                
                                	Enable/Disable OSPF demand circuit
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: distribute_list
                                
                                	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                                	**type**\:   :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DistributeList>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: fast_reroute
                                
                                	Fast\-reroute configuration
                                	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute>`
                                
                                .. attribute:: flood_reduction
                                
                                	Enable/Disable OSPF flood reduction
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: hello_interval
                                
                                	Interval between HELLO packets in seconds
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: ldp_auto_config
                                
                                	Enable MPLS LDP Auto Config
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: ldp_sync
                                
                                	Enable/Disable MPLS LDP sync
                                	**type**\:  bool
                                
                                .. attribute:: ldp_sync_igp_shortcuts
                                
                                	Enable/Disable MPLS LDP sync for igp\-shortcuts
                                	**type**\:  bool
                                
                                .. attribute:: link_down_fast_detect
                                
                                	Enable/Disable registration for early interface down notifications
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: loopback_stub_network
                                
                                	Enable/Disable advertising loopback as a stub network
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: mtu_ignore
                                
                                	Enable/Disable ignoring of MTU in DBD packets
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: neighbors
                                
                                	Neighbor router configuration information
                                	**type**\:   :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors>`
                                
                                .. attribute:: network_type
                                
                                	Type of attached network
                                	**type**\:   :py:class:`OspfNetworkEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfNetworkEnum>`
                                
                                .. attribute:: packet_size
                                
                                	Customize size of OSPF packets upto MTU
                                	**type**\:  int
                                
                                	**range:** 576..10000
                                
                                .. attribute:: passive
                                
                                	When enabled, prevent sending HELLO packets over link
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: prefix_sid
                                
                                	Prefix SID
                                	**type**\:   :py:class:`PrefixSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.PrefixSid>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: prefix_sid_strict
                                
                                	Strict Prefix SID
                                	**type**\:   :py:class:`PrefixSidStrict <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.PrefixSidStrict>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: prefix_suppression_primary
                                
                                	Enable/Disable prefix suppression for primary addresses
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: prefix_suppression_secondary
                                
                                	Enable/Disable prefix suppression for secondary addresses
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: priority
                                
                                	Router priority for DR and BDR election
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                	**default value**\: 1
                                
                                .. attribute:: retransmit_interval
                                
                                	Time in seconds between retransmitting lost link state advertisements
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 5
                                
                                .. attribute:: running
                                
                                	Enable routing on an IP network
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: security
                                
                                	Container class for security related configuration parameters
                                	**type**\:   :py:class:`Security <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security>`
                                
                                .. attribute:: segment_routing_forwarding
                                
                                	segment\-routing forwarding configuration Applicableonly in Default VRF
                                	**type**\:   :py:class:`OspfSegmentRoutingForwardingEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRoutingForwardingEnum>`
                                
                                .. attribute:: transmit_delay
                                
                                	Number of seconds to delay transmission of LSAs
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 1
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.interface_name = None
                                    self.authentication = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication()
                                    self.authentication.parent = self
                                    self.bfd = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Bfd()
                                    self.bfd.parent = self
                                    self.cost = None
                                    self.cost_fallback = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.CostFallback()
                                    self.cost_fallback.parent = self
                                    self.database_filter = None
                                    self.dead_interval_minimal = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DeadIntervalMinimal()
                                    self.dead_interval_minimal.parent = self
                                    self.demand_circuit = None
                                    self.distribute_list = None
                                    self.fast_reroute = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute()
                                    self.fast_reroute.parent = self
                                    self.flood_reduction = None
                                    self.hello_interval = None
                                    self.ldp_auto_config = None
                                    self.ldp_sync = None
                                    self.ldp_sync_igp_shortcuts = None
                                    self.link_down_fast_detect = None
                                    self.loopback_stub_network = None
                                    self.mtu_ignore = None
                                    self.neighbors = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors()
                                    self.neighbors.parent = self
                                    self.network_type = None
                                    self.packet_size = None
                                    self.passive = None
                                    self.prefix_sid = None
                                    self.prefix_sid_strict = None
                                    self.prefix_suppression_primary = None
                                    self.prefix_suppression_secondary = None
                                    self.priority = None
                                    self.retransmit_interval = None
                                    self.running = None
                                    self.security = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security()
                                    self.security.parent = self
                                    self.segment_routing_forwarding = None
                                    self.transmit_delay = None


                                class PrefixSid(object):
                                    """
                                    Prefix SID
                                    
                                    .. attribute:: explicit_null
                                    
                                    	Force Penultimate Hop To Send Explicit\-Null Label
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: n_flag_clear
                                    
                                    	Not a node SID
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: sid_value
                                    
                                    	SID value
                                    	**type**\:  int
                                    
                                    	**range:** 0..1048575
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: type
                                    
                                    	OSPF SID Type
                                    	**type**\:   :py:class:`OspfSidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSidEnum>`
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.explicit_null = None
                                        self.n_flag_clear = None
                                        self.sid_value = None
                                        self.type = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:prefix-sid'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.explicit_null is not None:
                                            return True

                                        if self.n_flag_clear is not None:
                                            return True

                                        if self.sid_value is not None:
                                            return True

                                        if self.type is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.PrefixSid']['meta_info']


                                class PrefixSidStrict(object):
                                    """
                                    Strict Prefix SID
                                    
                                    .. attribute:: explicit_null
                                    
                                    	Force Penultimate Hop To Send Explicit\-Null Label
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: n_flag_clear
                                    
                                    	Not a node SID
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: sid_value
                                    
                                    	SID value
                                    	**type**\:  int
                                    
                                    	**range:** 0..1048575
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: type
                                    
                                    	OSPF SID Type
                                    	**type**\:   :py:class:`OspfSidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSidEnum>`
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.explicit_null = None
                                        self.n_flag_clear = None
                                        self.sid_value = None
                                        self.type = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:prefix-sid-strict'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.explicit_null is not None:
                                            return True

                                        if self.n_flag_clear is not None:
                                            return True

                                        if self.sid_value is not None:
                                            return True

                                        if self.type is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.PrefixSidStrict']['meta_info']


                                class DistributeList(object):
                                    """
                                    Filter networks intalled to RIB (disable as ACL
                                    name means filtering is disabled)
                                    
                                    .. attribute:: access_list_name
                                    
                                    	Access Control List name
                                    	**type**\:  str
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route Policy name
                                    	**type**\:  str
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.access_list_name = None
                                        self.route_policy_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:distribute-list'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.access_list_name is not None:
                                            return True

                                        if self.route_policy_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DistributeList']['meta_info']


                                class Bfd(object):
                                    """
                                    BFD configuration
                                    
                                    .. attribute:: detection_multiplier
                                    
                                    	Detection multiplier for BFD sessions created by OSPF
                                    	**type**\:  int
                                    
                                    	**range:** 2..50
                                    
                                    .. attribute:: fast_detect_mode
                                    
                                    	 use of Bidirectional Forwarding Detection
                                    	**type**\:   :py:class:`BfdEnableModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.BfdEnableModeEnum>`
                                    
                                    .. attribute:: interval
                                    
                                    	Hello interval for BFD sessions created by OSPF
                                    	**type**\:  int
                                    
                                    	**range:** 3..30000
                                    
                                    	**units**\: millisecond
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.detection_multiplier = None
                                        self.fast_detect_mode = None
                                        self.interval = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:bfd'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.detection_multiplier is not None:
                                            return True

                                        if self.fast_detect_mode is not None:
                                            return True

                                        if self.interval is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Bfd']['meta_info']


                                class Authentication(object):
                                    """
                                    Authentication
                                    
                                    .. attribute:: key
                                    
                                    	Authentication key configuration
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: message_digest_keies
                                    
                                    	Message digest authentication password (key) configurations, first 16 chars used
                                    	**type**\:   :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies>`
                                    
                                    .. attribute:: type
                                    
                                    	Authentication type
                                    	**type**\:   :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.Type>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.key = None
                                        self.message_digest_keies = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies()
                                        self.message_digest_keies.parent = self
                                        self.type = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.Type()
                                        self.type.parent = self


                                    class Type(object):
                                        """
                                        Authentication type
                                        
                                        .. attribute:: authen_type
                                        
                                        	Authentication type code 
                                        	**type**\:   :py:class:`OspfAuthenticationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthenticationEnum>`
                                        
                                        .. attribute:: keychain_authen_type
                                        
                                        	Keychain authentication type
                                        	**type**\:   :py:class:`OspfKeychainAuthEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuthEnum>`
                                        
                                        .. attribute:: keychain_name
                                        
                                        	Keychain name
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.authen_type = None
                                            self.keychain_authen_type = None
                                            self.keychain_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:type'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.authen_type is not None:
                                                return True

                                            if self.keychain_authen_type is not None:
                                                return True

                                            if self.keychain_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.Type']['meta_info']


                                    class MessageDigestKeies(object):
                                        """
                                        Message digest authentication password (key)
                                        configurations, first 16 chars used
                                        
                                        .. attribute:: message_digest_key
                                        
                                        	Message digest authentication password (key) configuration
                                        	**type**\: list of    :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.message_digest_key = YList()
                                            self.message_digest_key.parent = self
                                            self.message_digest_key.name = 'message_digest_key'


                                        class MessageDigestKey(object):
                                            """
                                            Message digest authentication password (key)
                                            configuration
                                            
                                            .. attribute:: key_id  <key>
                                            
                                            	Key ID
                                            	**type**\:  int
                                            
                                            	**range:** 1..255
                                            
                                            .. attribute:: password
                                            
                                            	Password
                                            	**type**\:  str
                                            
                                            	**pattern:** (!.+)\|([^!].+)
                                            
                                            	**mandatory**\: True
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.key_id = None
                                                self.password = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.key_id is None:
                                                    raise YPYModelError('Key property key_id is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-key[Cisco-IOS-XR-ipv4-ospf-cfg:key-id = ' + str(self.key_id) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.key_id is not None:
                                                    return True

                                                if self.password is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies.MessageDigestKey']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-keies'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.message_digest_key is not None:
                                                for child_ref in self.message_digest_key:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication.MessageDigestKeies']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:authentication'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.key is not None:
                                            return True

                                        if self.message_digest_keies is not None and self.message_digest_keies._has_data():
                                            return True

                                        if self.type is not None and self.type._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Authentication']['meta_info']


                                class Security(object):
                                    """
                                    Container class for security related
                                    configuration parameters
                                    
                                    .. attribute:: ttl
                                    
                                    	Enabling turns on TTL security
                                    	**type**\:   :py:class:`Ttl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security.Ttl>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.ttl = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security.Ttl()
                                        self.ttl.parent = self


                                    class Ttl(object):
                                        """
                                        Enabling turns on TTL security
                                        
                                        .. attribute:: enable
                                        
                                        	Enable TTL security
                                        	**type**\:  bool
                                        
                                        .. attribute:: hop_count
                                        
                                        	Hop count
                                        	**type**\:  int
                                        
                                        	**range:** 1..254
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.enable = None
                                            self.hop_count = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:ttl'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.enable is not None:
                                                return True

                                            if self.hop_count is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security.Ttl']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:security'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.ttl is not None and self.ttl._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Security']['meta_info']


                                class Neighbors(object):
                                    """
                                    Neighbor router configuration information
                                    
                                    .. attribute:: neighbor
                                    
                                    	Router configuration information for a particular neighbor
                                    	**type**\: list of    :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors.Neighbor>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.neighbor = YList()
                                        self.neighbor.parent = self
                                        self.neighbor.name = 'neighbor'


                                    class Neighbor(object):
                                        """
                                        Router configuration information for a
                                        particular neighbor
                                        
                                        .. attribute:: neighbor_address  <key>
                                        
                                        	Neighbor IP address
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: cost
                                        
                                        	OSPF cost for point\-to\-multipoint neighbor
                                        	**type**\:  int
                                        
                                        	**range:** 1..65535
                                        
                                        	**default value**\: 1
                                        
                                        .. attribute:: database_filter
                                        
                                        	Database filter\: Filter OSPF LSA during synchronization and flooding for point\-to\-multipoint
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: poll_interval
                                        
                                        	OSPF dead router poll\-interval in seconds
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        	**units**\: second
                                        
                                        	**default value**\: 40
                                        
                                        .. attribute:: priority
                                        
                                        	OSPF priority of non\-broadcast neighbor
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        	**default value**\: 0
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.neighbor_address = None
                                            self.cost = None
                                            self.database_filter = None
                                            self.poll_interval = None
                                            self.priority = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.neighbor_address is None:
                                                raise YPYModelError('Key property neighbor_address is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:neighbor[Cisco-IOS-XR-ipv4-ospf-cfg:neighbor-address = ' + str(self.neighbor_address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.neighbor_address is not None:
                                                return True

                                            if self.cost is not None:
                                                return True

                                            if self.database_filter is not None:
                                                return True

                                            if self.poll_interval is not None:
                                                return True

                                            if self.priority is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors.Neighbor']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:neighbors'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.neighbor is not None:
                                            for child_ref in self.neighbor:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.Neighbors']['meta_info']


                                class DeadIntervalMinimal(object):
                                    """
                                    Interval after which a neighbor is declared dead
                                    
                                    .. attribute:: interval
                                    
                                    	Interval size in seconds after which a neighbor is declared dead
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: multiplier
                                    
                                    	Number of Hellos in one second
                                    	**type**\:  int
                                    
                                    	**range:** 3..20
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.interval = None
                                        self.multiplier = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:dead-interval-minimal'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.interval is not None:
                                            return True

                                        if self.multiplier is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.DeadIntervalMinimal']['meta_info']


                                class FastReroute(object):
                                    """
                                    Fast\-reroute configuration
                                    
                                    .. attribute:: fast_reroute_enable
                                    
                                    	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                    	**type**\:   :py:class:`OspfFastRerouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteEnum>`
                                    
                                    .. attribute:: per_link
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink>`
                                    
                                    .. attribute:: per_prefix
                                    
                                    	Fast\-reroute per\-prefix global configuration
                                    	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.fast_reroute_enable = None
                                        self.per_link = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink()
                                        self.per_link.parent = self
                                        self.per_prefix = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix()
                                        self.per_prefix.parent = self


                                    class PerLink(object):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                        	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces>`
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self.fast_reroute_use_candidate_only = None


                                        class CandidateInterfaces(object):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.candidate_interface = YList()
                                                self.candidate_interface.parent = self
                                                self.candidate_interface.name = 'candidate_interface'


                                            class CandidateInterface(object):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.interface_name = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.interface_name is None:
                                                        raise YPYModelError('Key property interface_name is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.interface_name is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.candidate_interface is not None:
                                                    for child_ref in self.candidate_interface:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces']['meta_info']


                                        class ExcludeInterfaces(object):
                                            """
                                            Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup or UCMP
                                            	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.exclude_interface = YList()
                                                self.exclude_interface.parent = self
                                                self.exclude_interface.name = 'exclude_interface'


                                            class ExcludeInterface(object):
                                                """
                                                Exclude an interface from becoming a backup or
                                                UCMP
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.interface_name = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.interface_name is None:
                                                        raise YPYModelError('Key property interface_name is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.interface_name is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.exclude_interface is not None:
                                                    for child_ref in self.exclude_interface:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-link'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                                return True

                                            if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                                return True

                                            if self.fast_reroute_use_candidate_only is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerLink']['meta_info']


                                    class PerPrefix(object):
                                        """
                                        Fast\-reroute per\-prefix global configuration
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                        	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: remote_lfa
                                        
                                        	Remote LFA configuration
                                        	**type**\:   :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa>`
                                        
                                        .. attribute:: tiebreakers
                                        
                                        	Fast\-reroute tiebreakers configurations
                                        	**type**\:   :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers>`
                                        
                                        .. attribute:: topology_independent_lfa
                                        
                                        	Topology Independet LFA configuration
                                        	**type**\:  bool
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self.fast_reroute_use_candidate_only = None
                                            self.remote_lfa = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa()
                                            self.remote_lfa.parent = self
                                            self.tiebreakers = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers()
                                            self.tiebreakers.parent = self
                                            self.topology_independent_lfa = None


                                        class RemoteLfa(object):
                                            """
                                            Remote LFA configuration
                                            
                                            .. attribute:: maximum_cost
                                            
                                            	Maximum path cost to remote LFA
                                            	**type**\:  int
                                            
                                            	**range:** 1..4294967295
                                            
                                            .. attribute:: tunnel
                                            
                                            	Enable/Disable remote LFA computation
                                            	**type**\:   :py:class:`OspfFrrRlfaTunnelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFrrRlfaTunnelEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.maximum_cost = None
                                                self.tunnel = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:remote-lfa'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.maximum_cost is not None:
                                                    return True

                                                if self.tunnel is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa']['meta_info']


                                        class Tiebreakers(object):
                                            """
                                            Fast\-reroute tiebreakers configurations
                                            
                                            .. attribute:: tiebreaker
                                            
                                            	Fast\-reroute tiebreakers configuration
                                            	**type**\: list of    :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.tiebreaker = YList()
                                                self.tiebreaker.parent = self
                                                self.tiebreaker.name = 'tiebreaker'


                                            class Tiebreaker(object):
                                                """
                                                Fast\-reroute tiebreakers configuration
                                                
                                                .. attribute:: tiebreaker_type  <key>
                                                
                                                	Tiebreaker type
                                                	**type**\:   :py:class:`OspfFastRerouteTiebreakersIntfEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakersIntfEnum>`
                                                
                                                .. attribute:: tiebreaker_index
                                                
                                                	Index value for a tiebreaker, 0 to disable
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.tiebreaker_type = None
                                                    self.tiebreaker_index = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.tiebreaker_type is None:
                                                        raise YPYModelError('Key property tiebreaker_type is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker[Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker-type = ' + str(self.tiebreaker_type) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.tiebreaker_type is not None:
                                                        return True

                                                    if self.tiebreaker_index is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreakers'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.tiebreaker is not None:
                                                    for child_ref in self.tiebreaker:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers']['meta_info']


                                        class CandidateInterfaces(object):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.candidate_interface = YList()
                                                self.candidate_interface.parent = self
                                                self.candidate_interface.name = 'candidate_interface'


                                            class CandidateInterface(object):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.interface_name = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.interface_name is None:
                                                        raise YPYModelError('Key property interface_name is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.interface_name is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.candidate_interface is not None:
                                                    for child_ref in self.candidate_interface:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces']['meta_info']


                                        class ExcludeInterfaces(object):
                                            """
                                            Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup or UCMP
                                            	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.exclude_interface = YList()
                                                self.exclude_interface.parent = self
                                                self.exclude_interface.name = 'exclude_interface'


                                            class ExcludeInterface(object):
                                                """
                                                Exclude an interface from becoming a backup or
                                                UCMP
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.interface_name = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.interface_name is None:
                                                        raise YPYModelError('Key property interface_name is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.interface_name is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.exclude_interface is not None:
                                                    for child_ref in self.exclude_interface:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-prefix'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                                return True

                                            if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                                return True

                                            if self.fast_reroute_use_candidate_only is not None:
                                                return True

                                            if self.remote_lfa is not None and self.remote_lfa._has_data():
                                                return True

                                            if self.tiebreakers is not None and self.tiebreakers._has_data():
                                                return True

                                            if self.topology_independent_lfa is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute.PerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:fast-reroute'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.fast_reroute_enable is not None:
                                            return True

                                        if self.per_link is not None and self.per_link._has_data():
                                            return True

                                        if self.per_prefix is not None and self.per_prefix._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.FastReroute']['meta_info']


                                class CostFallback(object):
                                    """
                                    Interface fallback cost
                                    
                                    .. attribute:: cost
                                    
                                    	Fallback cost of link
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: threshold
                                    
                                    	Bandwidth threshold
                                    	**type**\:  int
                                    
                                    	**range:** 1..4294967
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.cost = None
                                        self.threshold = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:cost-fallback'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.cost is not None:
                                            return True

                                        if self.threshold is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope.CostFallback']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.interface_name is None:
                                        raise YPYModelError('Key property interface_name is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:name-scope[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.interface_name is not None:
                                        return True

                                    if self.authentication is not None and self.authentication._has_data():
                                        return True

                                    if self.bfd is not None and self.bfd._has_data():
                                        return True

                                    if self.cost is not None:
                                        return True

                                    if self.cost_fallback is not None and self.cost_fallback._has_data():
                                        return True

                                    if self.database_filter is not None:
                                        return True

                                    if self.dead_interval_minimal is not None and self.dead_interval_minimal._has_data():
                                        return True

                                    if self.demand_circuit is not None:
                                        return True

                                    if self.distribute_list is not None and self.distribute_list._has_data():
                                        return True

                                    if self.fast_reroute is not None and self.fast_reroute._has_data():
                                        return True

                                    if self.flood_reduction is not None:
                                        return True

                                    if self.hello_interval is not None:
                                        return True

                                    if self.ldp_auto_config is not None:
                                        return True

                                    if self.ldp_sync is not None:
                                        return True

                                    if self.ldp_sync_igp_shortcuts is not None:
                                        return True

                                    if self.link_down_fast_detect is not None:
                                        return True

                                    if self.loopback_stub_network is not None:
                                        return True

                                    if self.mtu_ignore is not None:
                                        return True

                                    if self.neighbors is not None and self.neighbors._has_data():
                                        return True

                                    if self.network_type is not None:
                                        return True

                                    if self.packet_size is not None:
                                        return True

                                    if self.passive is not None:
                                        return True

                                    if self.prefix_sid is not None and self.prefix_sid._has_data():
                                        return True

                                    if self.prefix_sid_strict is not None and self.prefix_sid_strict._has_data():
                                        return True

                                    if self.prefix_suppression_primary is not None:
                                        return True

                                    if self.prefix_suppression_secondary is not None:
                                        return True

                                    if self.priority is not None:
                                        return True

                                    if self.retransmit_interval is not None:
                                        return True

                                    if self.running is not None:
                                        return True

                                    if self.security is not None and self.security._has_data():
                                        return True

                                    if self.segment_routing_forwarding is not None:
                                        return True

                                    if self.transmit_delay is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes.NameScope']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:name-scopes'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.name_scope is not None:
                                    for child_ref in self.name_scope:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.NameScopes']['meta_info']


                        class MultiAreaInterfaceScopes(object):
                            """
                            Multi Area Interface scope configurations
                            
                            .. attribute:: multi_area_interface_scope
                            
                            	Multi Area Interface configuration
                            	**type**\: list of    :py:class:`MultiAreaInterfaceScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.multi_area_interface_scope = YList()
                                self.multi_area_interface_scope.parent = self
                                self.multi_area_interface_scope.name = 'multi_area_interface_scope'


                            class MultiAreaInterfaceScope(object):
                                """
                                Multi Area Interface configuration
                                
                                .. attribute:: interface_name  <key>
                                
                                	Name of Multi Area Interface to configure
                                	**type**\:  str
                                
                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                
                                .. attribute:: authentication
                                
                                	Authentication
                                	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication>`
                                
                                .. attribute:: cost
                                
                                	Interface cost
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: cost_fallback
                                
                                	Interface fallback cost
                                	**type**\:   :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback>`
                                
                                .. attribute:: database_filter
                                
                                	Filter OSPF LSA during synchronization and flooding
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: dead_interval_minimal
                                
                                	Interval after which a neighbor is declared dead
                                	**type**\:   :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal>`
                                
                                .. attribute:: distribute_list
                                
                                	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                                	**type**\:   :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DistributeList>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: fast_reroute
                                
                                	Fast\-reroute configuration
                                	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute>`
                                
                                .. attribute:: hello_interval
                                
                                	Interval between HELLO packets in seconds
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: mtu_ignore
                                
                                	Enable/Disable ignoring of MTU in DBD packets
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: neighbors
                                
                                	Neighbor router configuration information
                                	**type**\:   :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors>`
                                
                                .. attribute:: packet_size
                                
                                	Customize size of OSPF packets upto MTU
                                	**type**\:  int
                                
                                	**range:** 576..10000
                                
                                .. attribute:: passive
                                
                                	When enabled, prevent sending HELLO packets over link
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: retransmit_interval
                                
                                	Time in seconds between retransmitting lost link state advertisements
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 5
                                
                                .. attribute:: running
                                
                                	Enable routing on an IP network
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: transmit_delay
                                
                                	Number of seconds to delay transmission of LSAs
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 1
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.interface_name = None
                                    self.authentication = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication()
                                    self.authentication.parent = self
                                    self.cost = None
                                    self.cost_fallback = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback()
                                    self.cost_fallback.parent = self
                                    self.database_filter = None
                                    self.dead_interval_minimal = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal()
                                    self.dead_interval_minimal.parent = self
                                    self.distribute_list = None
                                    self.fast_reroute = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute()
                                    self.fast_reroute.parent = self
                                    self.hello_interval = None
                                    self.mtu_ignore = None
                                    self.neighbors = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors()
                                    self.neighbors.parent = self
                                    self.packet_size = None
                                    self.passive = None
                                    self.retransmit_interval = None
                                    self.running = None
                                    self.transmit_delay = None


                                class DistributeList(object):
                                    """
                                    Filter networks intalled to RIB (disable as ACL
                                    name means filtering is disabled)
                                    
                                    .. attribute:: access_list_name
                                    
                                    	Access Control List name
                                    	**type**\:  str
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route Policy name
                                    	**type**\:  str
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.access_list_name = None
                                        self.route_policy_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:distribute-list'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.access_list_name is not None:
                                            return True

                                        if self.route_policy_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DistributeList']['meta_info']


                                class Authentication(object):
                                    """
                                    Authentication
                                    
                                    .. attribute:: key
                                    
                                    	Authentication key configuration
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: message_digest_keies
                                    
                                    	Message digest authentication password (key) configurations, first 16 chars used
                                    	**type**\:   :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies>`
                                    
                                    .. attribute:: type
                                    
                                    	Authentication type
                                    	**type**\:   :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.key = None
                                        self.message_digest_keies = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies()
                                        self.message_digest_keies.parent = self
                                        self.type = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type()
                                        self.type.parent = self


                                    class Type(object):
                                        """
                                        Authentication type
                                        
                                        .. attribute:: authen_type
                                        
                                        	Authentication type code 
                                        	**type**\:   :py:class:`OspfAuthenticationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthenticationEnum>`
                                        
                                        .. attribute:: keychain_authen_type
                                        
                                        	Keychain authentication type
                                        	**type**\:   :py:class:`OspfKeychainAuthEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuthEnum>`
                                        
                                        .. attribute:: keychain_name
                                        
                                        	Keychain name
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.authen_type = None
                                            self.keychain_authen_type = None
                                            self.keychain_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:type'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.authen_type is not None:
                                                return True

                                            if self.keychain_authen_type is not None:
                                                return True

                                            if self.keychain_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type']['meta_info']


                                    class MessageDigestKeies(object):
                                        """
                                        Message digest authentication password (key)
                                        configurations, first 16 chars used
                                        
                                        .. attribute:: message_digest_key
                                        
                                        	Message digest authentication password (key) configuration
                                        	**type**\: list of    :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.message_digest_key = YList()
                                            self.message_digest_key.parent = self
                                            self.message_digest_key.name = 'message_digest_key'


                                        class MessageDigestKey(object):
                                            """
                                            Message digest authentication password (key)
                                            configuration
                                            
                                            .. attribute:: key_id  <key>
                                            
                                            	Key ID
                                            	**type**\:  int
                                            
                                            	**range:** 1..255
                                            
                                            .. attribute:: password
                                            
                                            	Password
                                            	**type**\:  str
                                            
                                            	**pattern:** (!.+)\|([^!].+)
                                            
                                            	**mandatory**\: True
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.key_id = None
                                                self.password = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.key_id is None:
                                                    raise YPYModelError('Key property key_id is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-key[Cisco-IOS-XR-ipv4-ospf-cfg:key-id = ' + str(self.key_id) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.key_id is not None:
                                                    return True

                                                if self.password is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies.MessageDigestKey']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-keies'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.message_digest_key is not None:
                                                for child_ref in self.message_digest_key:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:authentication'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.key is not None:
                                            return True

                                        if self.message_digest_keies is not None and self.message_digest_keies._has_data():
                                            return True

                                        if self.type is not None and self.type._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication']['meta_info']


                                class Neighbors(object):
                                    """
                                    Neighbor router configuration information
                                    
                                    .. attribute:: neighbor
                                    
                                    	Router configuration information for a particular neighbor
                                    	**type**\: list of    :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors.Neighbor>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.neighbor = YList()
                                        self.neighbor.parent = self
                                        self.neighbor.name = 'neighbor'


                                    class Neighbor(object):
                                        """
                                        Router configuration information for a
                                        particular neighbor
                                        
                                        .. attribute:: neighbor_address  <key>
                                        
                                        	Neighbor IP address
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: cost
                                        
                                        	OSPF cost for point\-to\-multipoint neighbor
                                        	**type**\:  int
                                        
                                        	**range:** 1..65535
                                        
                                        	**default value**\: 1
                                        
                                        .. attribute:: database_filter
                                        
                                        	Database filter\: Filter OSPF LSA during synchronization and flooding for point\-to\-multipoint
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: poll_interval
                                        
                                        	OSPF dead router poll\-interval in seconds
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        	**units**\: second
                                        
                                        	**default value**\: 40
                                        
                                        .. attribute:: priority
                                        
                                        	OSPF priority of non\-broadcast neighbor
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        	**default value**\: 0
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.neighbor_address = None
                                            self.cost = None
                                            self.database_filter = None
                                            self.poll_interval = None
                                            self.priority = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.neighbor_address is None:
                                                raise YPYModelError('Key property neighbor_address is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:neighbor[Cisco-IOS-XR-ipv4-ospf-cfg:neighbor-address = ' + str(self.neighbor_address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.neighbor_address is not None:
                                                return True

                                            if self.cost is not None:
                                                return True

                                            if self.database_filter is not None:
                                                return True

                                            if self.poll_interval is not None:
                                                return True

                                            if self.priority is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors.Neighbor']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:neighbors'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.neighbor is not None:
                                            for child_ref in self.neighbor:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors']['meta_info']


                                class DeadIntervalMinimal(object):
                                    """
                                    Interval after which a neighbor is declared dead
                                    
                                    .. attribute:: interval
                                    
                                    	Interval size in seconds after which a neighbor is declared dead
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: multiplier
                                    
                                    	Number of Hellos in one second
                                    	**type**\:  int
                                    
                                    	**range:** 3..20
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.interval = None
                                        self.multiplier = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:dead-interval-minimal'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.interval is not None:
                                            return True

                                        if self.multiplier is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal']['meta_info']


                                class FastReroute(object):
                                    """
                                    Fast\-reroute configuration
                                    
                                    .. attribute:: fast_reroute_enable
                                    
                                    	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                    	**type**\:   :py:class:`OspfFastRerouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteEnum>`
                                    
                                    .. attribute:: per_link
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink>`
                                    
                                    .. attribute:: per_prefix
                                    
                                    	Fast\-reroute per\-prefix global configuration
                                    	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.fast_reroute_enable = None
                                        self.per_link = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink()
                                        self.per_link.parent = self
                                        self.per_prefix = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix()
                                        self.per_prefix.parent = self


                                    class PerLink(object):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                        	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces>`
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self.fast_reroute_use_candidate_only = None


                                        class CandidateInterfaces(object):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.candidate_interface = YList()
                                                self.candidate_interface.parent = self
                                                self.candidate_interface.name = 'candidate_interface'


                                            class CandidateInterface(object):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.interface_name = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.interface_name is None:
                                                        raise YPYModelError('Key property interface_name is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.interface_name is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.candidate_interface is not None:
                                                    for child_ref in self.candidate_interface:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces']['meta_info']


                                        class ExcludeInterfaces(object):
                                            """
                                            Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup or UCMP
                                            	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.exclude_interface = YList()
                                                self.exclude_interface.parent = self
                                                self.exclude_interface.name = 'exclude_interface'


                                            class ExcludeInterface(object):
                                                """
                                                Exclude an interface from becoming a backup or
                                                UCMP
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.interface_name = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.interface_name is None:
                                                        raise YPYModelError('Key property interface_name is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.interface_name is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.exclude_interface is not None:
                                                    for child_ref in self.exclude_interface:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-link'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                                return True

                                            if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                                return True

                                            if self.fast_reroute_use_candidate_only is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink']['meta_info']


                                    class PerPrefix(object):
                                        """
                                        Fast\-reroute per\-prefix global configuration
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                        	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: remote_lfa
                                        
                                        	Remote LFA configuration
                                        	**type**\:   :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa>`
                                        
                                        .. attribute:: tiebreakers
                                        
                                        	Fast\-reroute tiebreakers configurations
                                        	**type**\:   :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers>`
                                        
                                        .. attribute:: topology_independent_lfa
                                        
                                        	Topology Independet LFA configuration
                                        	**type**\:  bool
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self.fast_reroute_use_candidate_only = None
                                            self.remote_lfa = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa()
                                            self.remote_lfa.parent = self
                                            self.tiebreakers = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers()
                                            self.tiebreakers.parent = self
                                            self.topology_independent_lfa = None


                                        class RemoteLfa(object):
                                            """
                                            Remote LFA configuration
                                            
                                            .. attribute:: maximum_cost
                                            
                                            	Maximum path cost to remote LFA
                                            	**type**\:  int
                                            
                                            	**range:** 1..4294967295
                                            
                                            .. attribute:: tunnel
                                            
                                            	Enable/Disable remote LFA computation
                                            	**type**\:   :py:class:`OspfFrrRlfaTunnelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFrrRlfaTunnelEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.maximum_cost = None
                                                self.tunnel = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:remote-lfa'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.maximum_cost is not None:
                                                    return True

                                                if self.tunnel is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa']['meta_info']


                                        class Tiebreakers(object):
                                            """
                                            Fast\-reroute tiebreakers configurations
                                            
                                            .. attribute:: tiebreaker
                                            
                                            	Fast\-reroute tiebreakers configuration
                                            	**type**\: list of    :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.tiebreaker = YList()
                                                self.tiebreaker.parent = self
                                                self.tiebreaker.name = 'tiebreaker'


                                            class Tiebreaker(object):
                                                """
                                                Fast\-reroute tiebreakers configuration
                                                
                                                .. attribute:: tiebreaker_type  <key>
                                                
                                                	Tiebreaker type
                                                	**type**\:   :py:class:`OspfFastRerouteTiebreakersIntfEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakersIntfEnum>`
                                                
                                                .. attribute:: tiebreaker_index
                                                
                                                	Index value for a tiebreaker, 0 to disable
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.tiebreaker_type = None
                                                    self.tiebreaker_index = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.tiebreaker_type is None:
                                                        raise YPYModelError('Key property tiebreaker_type is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker[Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker-type = ' + str(self.tiebreaker_type) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.tiebreaker_type is not None:
                                                        return True

                                                    if self.tiebreaker_index is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreakers'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.tiebreaker is not None:
                                                    for child_ref in self.tiebreaker:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers']['meta_info']


                                        class CandidateInterfaces(object):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.candidate_interface = YList()
                                                self.candidate_interface.parent = self
                                                self.candidate_interface.name = 'candidate_interface'


                                            class CandidateInterface(object):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.interface_name = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.interface_name is None:
                                                        raise YPYModelError('Key property interface_name is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.interface_name is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.candidate_interface is not None:
                                                    for child_ref in self.candidate_interface:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces']['meta_info']


                                        class ExcludeInterfaces(object):
                                            """
                                            Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup or UCMP
                                            	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.exclude_interface = YList()
                                                self.exclude_interface.parent = self
                                                self.exclude_interface.name = 'exclude_interface'


                                            class ExcludeInterface(object):
                                                """
                                                Exclude an interface from becoming a backup or
                                                UCMP
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.interface_name = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.interface_name is None:
                                                        raise YPYModelError('Key property interface_name is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.interface_name is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.exclude_interface is not None:
                                                    for child_ref in self.exclude_interface:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-prefix'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                                return True

                                            if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                                return True

                                            if self.fast_reroute_use_candidate_only is not None:
                                                return True

                                            if self.remote_lfa is not None and self.remote_lfa._has_data():
                                                return True

                                            if self.tiebreakers is not None and self.tiebreakers._has_data():
                                                return True

                                            if self.topology_independent_lfa is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:fast-reroute'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.fast_reroute_enable is not None:
                                            return True

                                        if self.per_link is not None and self.per_link._has_data():
                                            return True

                                        if self.per_prefix is not None and self.per_prefix._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute']['meta_info']


                                class CostFallback(object):
                                    """
                                    Interface fallback cost
                                    
                                    .. attribute:: cost
                                    
                                    	Fallback cost of link
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: threshold
                                    
                                    	Bandwidth threshold
                                    	**type**\:  int
                                    
                                    	**range:** 1..4294967
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.cost = None
                                        self.threshold = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:cost-fallback'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.cost is not None:
                                            return True

                                        if self.threshold is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.interface_name is None:
                                        raise YPYModelError('Key property interface_name is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:multi-area-interface-scope[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.interface_name is not None:
                                        return True

                                    if self.authentication is not None and self.authentication._has_data():
                                        return True

                                    if self.cost is not None:
                                        return True

                                    if self.cost_fallback is not None and self.cost_fallback._has_data():
                                        return True

                                    if self.database_filter is not None:
                                        return True

                                    if self.dead_interval_minimal is not None and self.dead_interval_minimal._has_data():
                                        return True

                                    if self.distribute_list is not None and self.distribute_list._has_data():
                                        return True

                                    if self.fast_reroute is not None and self.fast_reroute._has_data():
                                        return True

                                    if self.hello_interval is not None:
                                        return True

                                    if self.mtu_ignore is not None:
                                        return True

                                    if self.neighbors is not None and self.neighbors._has_data():
                                        return True

                                    if self.packet_size is not None:
                                        return True

                                    if self.passive is not None:
                                        return True

                                    if self.retransmit_interval is not None:
                                        return True

                                    if self.running is not None:
                                        return True

                                    if self.transmit_delay is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes.MultiAreaInterfaceScope']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:multi-area-interface-scopes'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.multi_area_interface_scope is not None:
                                    for child_ref in self.multi_area_interface_scope:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.MultiAreaInterfaceScopes']['meta_info']


                        class AreaRanges(object):
                            """
                            Summarize routes matching address/mask (border
                            routers only)
                            
                            .. attribute:: area_range
                            
                            	Ordering index
                            	**type**\: list of    :py:class:`AreaRange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaRanges.AreaRange>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.area_range = YList()
                                self.area_range.parent = self
                                self.area_range.name = 'area_range'


                            class AreaRange(object):
                                """
                                Ordering index
                                
                                .. attribute:: address  <key>
                                
                                	IP address to match
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: netmask  <key>
                                
                                	IP netmask for address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: not_advertise
                                
                                	Do not advertise this range
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.address = None
                                    self.netmask = None
                                    self.not_advertise = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.address is None:
                                        raise YPYModelError('Key property address is None')
                                    if self.netmask is None:
                                        raise YPYModelError('Key property netmask is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:area-range[Cisco-IOS-XR-ipv4-ospf-cfg:address = ' + str(self.address) + '][Cisco-IOS-XR-ipv4-ospf-cfg:netmask = ' + str(self.netmask) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.address is not None:
                                        return True

                                    if self.netmask is not None:
                                        return True

                                    if self.not_advertise is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaRanges.AreaRange']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:area-ranges'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.area_range is not None:
                                    for child_ref in self.area_range:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaRanges']['meta_info']


                        class Nssa(object):
                            """
                            Specify area as a NSSA area
                            
                            .. attribute:: default_info_originate
                            
                            	Originate Type 7 default into NSSA area
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: metric_type
                            
                            	OSPF External metric type
                            	**type**\:   :py:class:`OspfLinkStateMetricEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetricEnum>`
                            
                            	**default value**\: type2
                            
                            .. attribute:: no_redistribution
                            
                            	No redistribution into this NSSA area
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: no_summary
                            
                            	Do not send summary LSA into NSSA
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: nssa_def_metric
                            
                            	OSPF default metric
                            	**type**\:  int
                            
                            	**range:** 1..16777214
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.default_info_originate = None
                                self.metric_type = None
                                self.no_redistribution = None
                                self.no_summary = None
                                self.nssa_def_metric = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:nssa'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.default_info_originate is not None:
                                    return True

                                if self.metric_type is not None:
                                    return True

                                if self.no_redistribution is not None:
                                    return True

                                if self.no_summary is not None:
                                    return True

                                if self.nssa_def_metric is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Nssa']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.address is None:
                                raise YPYModelError('Key property address is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:area-address[Cisco-IOS-XR-ipv4-ospf-cfg:address = ' + str(self.address) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.address is not None:
                                return True

                            if self.area_ranges is not None and self.area_ranges._has_data():
                                return True

                            if self.area_scope is not None and self.area_scope._has_data():
                                return True

                            if self.default_cost is not None:
                                return True

                            if self.external_out is not None:
                                return True

                            if self.mpls_traffic_eng is not None:
                                return True

                            if self.multi_area_interface_scopes is not None and self.multi_area_interface_scopes._has_data():
                                return True

                            if self.name_scopes is not None and self.name_scopes._has_data():
                                return True

                            if self.nssa is not None and self.nssa._has_data():
                                return True

                            if self.route_policy_in is not None:
                                return True

                            if self.route_policy_out is not None:
                                return True

                            if self.running is not None:
                                return True

                            if self.segment_routing is not None:
                                return True

                            if self.sham_link_scopes is not None and self.sham_link_scopes._has_data():
                                return True

                            if self.stub is not None:
                                return True

                            if self.summary_in is not None:
                                return True

                            if self.virtual_link_scopes is not None and self.virtual_link_scopes._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress']['meta_info']


                    class AreaAreaId(object):
                        """
                        Configuration for a particular area
                        
                        .. attribute:: area_id  <key>
                        
                        	Area ID if in integer format
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: area_ranges
                        
                        	Summarize routes matching address/mask (border routers only)
                        	**type**\:   :py:class:`AreaRanges <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaRanges>`
                        
                        .. attribute:: area_scope
                        
                        	Area scope configuration
                        	**type**\:   :py:class:`AreaScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope>`
                        
                        .. attribute:: default_cost
                        
                        	Set the summary default\-cost of a NSSA/stub area
                        	**type**\:  int
                        
                        	**range:** 1..16777215
                        
                        	**default value**\: 1
                        
                        .. attribute:: external_out
                        
                        	Enable/Disable an OSPF area to advertise intra\-area prefixes out of this area as external
                        	**type**\:  bool
                        
                        .. attribute:: mpls_traffic_eng
                        
                        	Configure an OSPF area to run MPLS Traffic Engineering
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: multi_area_interface_scopes
                        
                        	Multi Area Interface scope configurations
                        	**type**\:   :py:class:`MultiAreaInterfaceScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes>`
                        
                        .. attribute:: name_scopes
                        
                        	Name scope configurations
                        	**type**\:   :py:class:`NameScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes>`
                        
                        .. attribute:: nssa
                        
                        	Specify area as a NSSA area
                        	**type**\:   :py:class:`Nssa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Nssa>`
                        
                        .. attribute:: route_policy_in
                        
                        	Configure a route policy for inbound type\-3 lsa filtering
                        	**type**\:  str
                        
                        .. attribute:: route_policy_out
                        
                        	Configure a route policy for outbound type\-3 lsa filtering
                        	**type**\:  str
                        
                        .. attribute:: running
                        
                        	Enable routing on an IP network
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: segment_routing
                        
                        	segment\-routing configuration Applicable only in Default VRF
                        	**type**\:   :py:class:`OspfSegmentRoutingEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRoutingEnum>`
                        
                        .. attribute:: sham_link_scopes
                        
                        	Sham Link scope configurations
                        	**type**\:   :py:class:`ShamLinkScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes>`
                        
                        .. attribute:: stub
                        
                        	Specify the area as a stub area (send summary LSA stub area)
                        	**type**\:  bool
                        
                        .. attribute:: summary_in
                        
                        	Enable/Disable an OSPF area to advertise external prefixes into this area as summary
                        	**type**\:  bool
                        
                        .. attribute:: virtual_link_scopes
                        
                        	Virtual Link scope configurations
                        	**type**\:   :py:class:`VirtualLinkScopes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes>`
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.area_id = None
                            self.area_ranges = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaRanges()
                            self.area_ranges.parent = self
                            self.area_scope = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope()
                            self.area_scope.parent = self
                            self.default_cost = None
                            self.external_out = None
                            self.mpls_traffic_eng = None
                            self.multi_area_interface_scopes = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes()
                            self.multi_area_interface_scopes.parent = self
                            self.name_scopes = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes()
                            self.name_scopes.parent = self
                            self.nssa = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Nssa()
                            self.nssa.parent = self
                            self.route_policy_in = None
                            self.route_policy_out = None
                            self.running = None
                            self.segment_routing = None
                            self.sham_link_scopes = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes()
                            self.sham_link_scopes.parent = self
                            self.stub = None
                            self.summary_in = None
                            self.virtual_link_scopes = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes()
                            self.virtual_link_scopes.parent = self


                        class VirtualLinkScopes(object):
                            """
                            Virtual Link scope configurations
                            
                            .. attribute:: virtual_link_scope
                            
                            	Virtual Link configuration
                            	**type**\: list of    :py:class:`VirtualLinkScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.virtual_link_scope = YList()
                                self.virtual_link_scope.parent = self
                                self.virtual_link_scope.name = 'virtual_link_scope'


                            class VirtualLinkScope(object):
                                """
                                Virtual Link configuration
                                
                                .. attribute:: address  <key>
                                
                                	Router ID of virtual link neighbor
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: authentication
                                
                                	Authentication
                                	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication>`
                                
                                .. attribute:: dead_interval_minimal
                                
                                	Interval after which a neighbor is declared dead
                                	**type**\:   :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal>`
                                
                                .. attribute:: hello_interval
                                
                                	Interval between HELLO packets in seconds
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: retransmit_interval
                                
                                	Time in seconds between retransmitting lost link state advertisements
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 5
                                
                                .. attribute:: running
                                
                                	Enable routing on an IP network
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: transmit_delay
                                
                                	Number of seconds to delay transmission of LSAs
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 1
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.address = None
                                    self.authentication = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication()
                                    self.authentication.parent = self
                                    self.dead_interval_minimal = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal()
                                    self.dead_interval_minimal.parent = self
                                    self.hello_interval = None
                                    self.retransmit_interval = None
                                    self.running = None
                                    self.transmit_delay = None


                                class Authentication(object):
                                    """
                                    Authentication
                                    
                                    .. attribute:: key
                                    
                                    	Authentication key configuration
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: message_digest_keies
                                    
                                    	Message digest authentication password (key) configurations, first 16 chars used
                                    	**type**\:   :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies>`
                                    
                                    .. attribute:: type
                                    
                                    	Authentication type
                                    	**type**\:   :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.Type>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.key = None
                                        self.message_digest_keies = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies()
                                        self.message_digest_keies.parent = self
                                        self.type = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.Type()
                                        self.type.parent = self


                                    class Type(object):
                                        """
                                        Authentication type
                                        
                                        .. attribute:: authen_type
                                        
                                        	Authentication type code 
                                        	**type**\:   :py:class:`OspfAuthenticationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthenticationEnum>`
                                        
                                        .. attribute:: keychain_authen_type
                                        
                                        	Keychain authentication type
                                        	**type**\:   :py:class:`OspfKeychainAuthEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuthEnum>`
                                        
                                        .. attribute:: keychain_name
                                        
                                        	Keychain name
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.authen_type = None
                                            self.keychain_authen_type = None
                                            self.keychain_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:type'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.authen_type is not None:
                                                return True

                                            if self.keychain_authen_type is not None:
                                                return True

                                            if self.keychain_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.Type']['meta_info']


                                    class MessageDigestKeies(object):
                                        """
                                        Message digest authentication password (key)
                                        configurations, first 16 chars used
                                        
                                        .. attribute:: message_digest_key
                                        
                                        	Message digest authentication password (key) configuration
                                        	**type**\: list of    :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.message_digest_key = YList()
                                            self.message_digest_key.parent = self
                                            self.message_digest_key.name = 'message_digest_key'


                                        class MessageDigestKey(object):
                                            """
                                            Message digest authentication password (key)
                                            configuration
                                            
                                            .. attribute:: key_id  <key>
                                            
                                            	Key ID
                                            	**type**\:  int
                                            
                                            	**range:** 1..255
                                            
                                            .. attribute:: password
                                            
                                            	Password
                                            	**type**\:  str
                                            
                                            	**pattern:** (!.+)\|([^!].+)
                                            
                                            	**mandatory**\: True
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.key_id = None
                                                self.password = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.key_id is None:
                                                    raise YPYModelError('Key property key_id is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-key[Cisco-IOS-XR-ipv4-ospf-cfg:key-id = ' + str(self.key_id) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.key_id is not None:
                                                    return True

                                                if self.password is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies.MessageDigestKey']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-keies'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.message_digest_key is not None:
                                                for child_ref in self.message_digest_key:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication.MessageDigestKeies']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:authentication'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.key is not None:
                                            return True

                                        if self.message_digest_keies is not None and self.message_digest_keies._has_data():
                                            return True

                                        if self.type is not None and self.type._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.Authentication']['meta_info']


                                class DeadIntervalMinimal(object):
                                    """
                                    Interval after which a neighbor is declared dead
                                    
                                    .. attribute:: interval
                                    
                                    	Interval size in seconds after which a neighbor is declared dead
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: multiplier
                                    
                                    	Number of Hellos in one second
                                    	**type**\:  int
                                    
                                    	**range:** 3..20
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.interval = None
                                        self.multiplier = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:dead-interval-minimal'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.interval is not None:
                                            return True

                                        if self.multiplier is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope.DeadIntervalMinimal']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.address is None:
                                        raise YPYModelError('Key property address is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:virtual-link-scope[Cisco-IOS-XR-ipv4-ospf-cfg:address = ' + str(self.address) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.address is not None:
                                        return True

                                    if self.authentication is not None and self.authentication._has_data():
                                        return True

                                    if self.dead_interval_minimal is not None and self.dead_interval_minimal._has_data():
                                        return True

                                    if self.hello_interval is not None:
                                        return True

                                    if self.retransmit_interval is not None:
                                        return True

                                    if self.running is not None:
                                        return True

                                    if self.transmit_delay is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes.VirtualLinkScope']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:virtual-link-scopes'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.virtual_link_scope is not None:
                                    for child_ref in self.virtual_link_scope:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinkScopes']['meta_info']


                        class ShamLinkScopes(object):
                            """
                            Sham Link scope configurations
                            
                            .. attribute:: sham_link_scope
                            
                            	Sham Link configuration
                            	**type**\: list of    :py:class:`ShamLinkScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.sham_link_scope = YList()
                                self.sham_link_scope.parent = self
                                self.sham_link_scope.name = 'sham_link_scope'


                            class ShamLinkScope(object):
                                """
                                Sham Link configuration
                                
                                .. attribute:: destination_address  <key>
                                
                                	Address of the remote sham\-link endpoint
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: source_address  <key>
                                
                                	Address of the local sham\-link endpoint
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: authentication
                                
                                	Authentication
                                	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication>`
                                
                                .. attribute:: cost
                                
                                	Interface cost
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: dead_interval_minimal
                                
                                	Interval after which a neighbor is declared dead
                                	**type**\:   :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal>`
                                
                                .. attribute:: hello_interval
                                
                                	Interval between HELLO packets in seconds
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: retransmit_interval
                                
                                	Time in seconds between retransmitting lost link state advertisements
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 5
                                
                                .. attribute:: running
                                
                                	Enable routing on an IP network
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: source
                                
                                	Address of the local sham\-link endpoint. Enter an IP Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: transmit_delay
                                
                                	Number of seconds to delay transmission of LSAs
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 1
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.destination_address = None
                                    self.source_address = None
                                    self.authentication = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication()
                                    self.authentication.parent = self
                                    self.cost = None
                                    self.dead_interval_minimal = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal()
                                    self.dead_interval_minimal.parent = self
                                    self.hello_interval = None
                                    self.retransmit_interval = None
                                    self.running = None
                                    self.source = None
                                    self.transmit_delay = None


                                class Authentication(object):
                                    """
                                    Authentication
                                    
                                    .. attribute:: key
                                    
                                    	Authentication key configuration
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: message_digest_keies
                                    
                                    	Message digest authentication password (key) configurations, first 16 chars used
                                    	**type**\:   :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies>`
                                    
                                    .. attribute:: type
                                    
                                    	Authentication type
                                    	**type**\:   :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.Type>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.key = None
                                        self.message_digest_keies = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies()
                                        self.message_digest_keies.parent = self
                                        self.type = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.Type()
                                        self.type.parent = self


                                    class Type(object):
                                        """
                                        Authentication type
                                        
                                        .. attribute:: authen_type
                                        
                                        	Authentication type code 
                                        	**type**\:   :py:class:`OspfAuthenticationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthenticationEnum>`
                                        
                                        .. attribute:: keychain_authen_type
                                        
                                        	Keychain authentication type
                                        	**type**\:   :py:class:`OspfKeychainAuthEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuthEnum>`
                                        
                                        .. attribute:: keychain_name
                                        
                                        	Keychain name
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.authen_type = None
                                            self.keychain_authen_type = None
                                            self.keychain_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:type'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.authen_type is not None:
                                                return True

                                            if self.keychain_authen_type is not None:
                                                return True

                                            if self.keychain_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.Type']['meta_info']


                                    class MessageDigestKeies(object):
                                        """
                                        Message digest authentication password (key)
                                        configurations, first 16 chars used
                                        
                                        .. attribute:: message_digest_key
                                        
                                        	Message digest authentication password (key) configuration
                                        	**type**\: list of    :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.message_digest_key = YList()
                                            self.message_digest_key.parent = self
                                            self.message_digest_key.name = 'message_digest_key'


                                        class MessageDigestKey(object):
                                            """
                                            Message digest authentication password (key)
                                            configuration
                                            
                                            .. attribute:: key_id  <key>
                                            
                                            	Key ID
                                            	**type**\:  int
                                            
                                            	**range:** 1..255
                                            
                                            .. attribute:: password
                                            
                                            	Password
                                            	**type**\:  str
                                            
                                            	**pattern:** (!.+)\|([^!].+)
                                            
                                            	**mandatory**\: True
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.key_id = None
                                                self.password = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.key_id is None:
                                                    raise YPYModelError('Key property key_id is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-key[Cisco-IOS-XR-ipv4-ospf-cfg:key-id = ' + str(self.key_id) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.key_id is not None:
                                                    return True

                                                if self.password is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies.MessageDigestKey']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-keies'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.message_digest_key is not None:
                                                for child_ref in self.message_digest_key:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication.MessageDigestKeies']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:authentication'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.key is not None:
                                            return True

                                        if self.message_digest_keies is not None and self.message_digest_keies._has_data():
                                            return True

                                        if self.type is not None and self.type._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.Authentication']['meta_info']


                                class DeadIntervalMinimal(object):
                                    """
                                    Interval after which a neighbor is declared dead
                                    
                                    .. attribute:: interval
                                    
                                    	Interval size in seconds after which a neighbor is declared dead
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: multiplier
                                    
                                    	Number of Hellos in one second
                                    	**type**\:  int
                                    
                                    	**range:** 3..20
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.interval = None
                                        self.multiplier = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:dead-interval-minimal'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.interval is not None:
                                            return True

                                        if self.multiplier is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope.DeadIntervalMinimal']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.destination_address is None:
                                        raise YPYModelError('Key property destination_address is None')
                                    if self.source_address is None:
                                        raise YPYModelError('Key property source_address is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:sham-link-scope[Cisco-IOS-XR-ipv4-ospf-cfg:destination-address = ' + str(self.destination_address) + '][Cisco-IOS-XR-ipv4-ospf-cfg:source-address = ' + str(self.source_address) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.destination_address is not None:
                                        return True

                                    if self.source_address is not None:
                                        return True

                                    if self.authentication is not None and self.authentication._has_data():
                                        return True

                                    if self.cost is not None:
                                        return True

                                    if self.dead_interval_minimal is not None and self.dead_interval_minimal._has_data():
                                        return True

                                    if self.hello_interval is not None:
                                        return True

                                    if self.retransmit_interval is not None:
                                        return True

                                    if self.running is not None:
                                        return True

                                    if self.source is not None:
                                        return True

                                    if self.transmit_delay is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes.ShamLinkScope']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:sham-link-scopes'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.sham_link_scope is not None:
                                    for child_ref in self.sham_link_scope:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinkScopes']['meta_info']


                        class AreaScope(object):
                            """
                            Area scope configuration
                            
                            .. attribute:: authentication
                            
                            	Authentication
                            	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication>`
                            
                            .. attribute:: bfd
                            
                            	BFD configuration
                            	**type**\:   :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Bfd>`
                            
                            .. attribute:: cost
                            
                            	Interface cost
                            	**type**\:  int
                            
                            	**range:** 1..65535
                            
                            .. attribute:: cost_fallback
                            
                            	Interface fallback cost
                            	**type**\:   :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.CostFallback>`
                            
                            .. attribute:: database_filter
                            
                            	Filter OSPF LSA during synchronization and flooding
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: dead_interval_minimal
                            
                            	Interval after which a neighbor is declared dead
                            	**type**\:   :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.DeadIntervalMinimal>`
                            
                            .. attribute:: demand_circuit
                            
                            	Enable/Disable OSPF demand circuit
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: distribute_list
                            
                            	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                            	**type**\:   :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.DistributeList>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: fast_reroute
                            
                            	Fast\-reroute configuration
                            	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute>`
                            
                            .. attribute:: flood_reduction
                            
                            	Enable/Disable OSPF flood reduction
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: hello_interval
                            
                            	Interval between HELLO packets in seconds
                            	**type**\:  int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            .. attribute:: ldp_auto_config
                            
                            	Enable MPLS LDP Auto Config
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: ldp_sync
                            
                            	Enable/Disable MPLS LDP sync
                            	**type**\:  bool
                            
                            .. attribute:: ldp_sync_igp_shortcuts
                            
                            	Enable/Disable MPLS LDP sync for igp\-shortcuts
                            	**type**\:  bool
                            
                            .. attribute:: link_down_fast_detect
                            
                            	Enable/Disable registration for early interface down notifications
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: loopback_stub_network
                            
                            	Enable/Disable advertising loopback as a stub network
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: mtu_ignore
                            
                            	Enable/Disable ignoring of MTU in DBD packets
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: network_type
                            
                            	Type of attached network
                            	**type**\:   :py:class:`OspfNetworkEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfNetworkEnum>`
                            
                            .. attribute:: packet_size
                            
                            	Customize size of OSPF packets upto MTU
                            	**type**\:  int
                            
                            	**range:** 576..10000
                            
                            .. attribute:: passive
                            
                            	When enabled, prevent sending HELLO packets over link
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: prefix_suppression_primary
                            
                            	Enable/Disable prefix suppression for primary addresses
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: prefix_suppression_secondary
                            
                            	Enable/Disable prefix suppression for secondary addresses
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: priority
                            
                            	Router priority for DR and BDR election
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**default value**\: 1
                            
                            .. attribute:: retransmit_interval
                            
                            	Time in seconds between retransmitting lost link state advertisements
                            	**type**\:  int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            	**default value**\: 5
                            
                            .. attribute:: security
                            
                            	Container class for security related configuration parameters
                            	**type**\:   :py:class:`Security <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Security>`
                            
                            .. attribute:: segment_routing_forwarding
                            
                            	segment\-routing forwarding configuration Applicableonly in Default VRF
                            	**type**\:   :py:class:`OspfSegmentRoutingForwardingEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRoutingForwardingEnum>`
                            
                            .. attribute:: transmit_delay
                            
                            	Number of seconds to delay transmission of LSAs
                            	**type**\:  int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            	**default value**\: 1
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.authentication = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication()
                                self.authentication.parent = self
                                self.bfd = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Bfd()
                                self.bfd.parent = self
                                self.cost = None
                                self.cost_fallback = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.CostFallback()
                                self.cost_fallback.parent = self
                                self.database_filter = None
                                self.dead_interval_minimal = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.DeadIntervalMinimal()
                                self.dead_interval_minimal.parent = self
                                self.demand_circuit = None
                                self.distribute_list = None
                                self.fast_reroute = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute()
                                self.fast_reroute.parent = self
                                self.flood_reduction = None
                                self.hello_interval = None
                                self.ldp_auto_config = None
                                self.ldp_sync = None
                                self.ldp_sync_igp_shortcuts = None
                                self.link_down_fast_detect = None
                                self.loopback_stub_network = None
                                self.mtu_ignore = None
                                self.network_type = None
                                self.packet_size = None
                                self.passive = None
                                self.prefix_suppression_primary = None
                                self.prefix_suppression_secondary = None
                                self.priority = None
                                self.retransmit_interval = None
                                self.security = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Security()
                                self.security.parent = self
                                self.segment_routing_forwarding = None
                                self.transmit_delay = None


                            class DistributeList(object):
                                """
                                Filter networks intalled to RIB (disable as ACL
                                name means filtering is disabled)
                                
                                .. attribute:: access_list_name
                                
                                	Access Control List name
                                	**type**\:  str
                                
                                .. attribute:: route_policy_name
                                
                                	Route Policy name
                                	**type**\:  str
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.access_list_name = None
                                    self.route_policy_name = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:distribute-list'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.access_list_name is not None:
                                        return True

                                    if self.route_policy_name is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.DistributeList']['meta_info']


                            class Bfd(object):
                                """
                                BFD configuration
                                
                                .. attribute:: detection_multiplier
                                
                                	Detection multiplier for BFD sessions created by OSPF
                                	**type**\:  int
                                
                                	**range:** 2..50
                                
                                .. attribute:: fast_detect_mode
                                
                                	 use of Bidirectional Forwarding Detection
                                	**type**\:   :py:class:`BfdEnableModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.BfdEnableModeEnum>`
                                
                                .. attribute:: interval
                                
                                	Hello interval for BFD sessions created by OSPF
                                	**type**\:  int
                                
                                	**range:** 3..30000
                                
                                	**units**\: millisecond
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.detection_multiplier = None
                                    self.fast_detect_mode = None
                                    self.interval = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:bfd'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.detection_multiplier is not None:
                                        return True

                                    if self.fast_detect_mode is not None:
                                        return True

                                    if self.interval is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Bfd']['meta_info']


                            class Authentication(object):
                                """
                                Authentication
                                
                                .. attribute:: key
                                
                                	Authentication key configuration
                                	**type**\:  str
                                
                                	**pattern:** (!.+)\|([^!].+)
                                
                                .. attribute:: message_digest_keies
                                
                                	Message digest authentication password (key) configurations, first 16 chars used
                                	**type**\:   :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies>`
                                
                                .. attribute:: type
                                
                                	Authentication type
                                	**type**\:   :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.Type>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.key = None
                                    self.message_digest_keies = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies()
                                    self.message_digest_keies.parent = self
                                    self.type = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.Type()
                                    self.type.parent = self


                                class Type(object):
                                    """
                                    Authentication type
                                    
                                    .. attribute:: authen_type
                                    
                                    	Authentication type code 
                                    	**type**\:   :py:class:`OspfAuthenticationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthenticationEnum>`
                                    
                                    .. attribute:: keychain_authen_type
                                    
                                    	Keychain authentication type
                                    	**type**\:   :py:class:`OspfKeychainAuthEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuthEnum>`
                                    
                                    .. attribute:: keychain_name
                                    
                                    	Keychain name
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.authen_type = None
                                        self.keychain_authen_type = None
                                        self.keychain_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:type'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.authen_type is not None:
                                            return True

                                        if self.keychain_authen_type is not None:
                                            return True

                                        if self.keychain_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.Type']['meta_info']


                                class MessageDigestKeies(object):
                                    """
                                    Message digest authentication password (key)
                                    configurations, first 16 chars used
                                    
                                    .. attribute:: message_digest_key
                                    
                                    	Message digest authentication password (key) configuration
                                    	**type**\: list of    :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.message_digest_key = YList()
                                        self.message_digest_key.parent = self
                                        self.message_digest_key.name = 'message_digest_key'


                                    class MessageDigestKey(object):
                                        """
                                        Message digest authentication password (key)
                                        configuration
                                        
                                        .. attribute:: key_id  <key>
                                        
                                        	Key ID
                                        	**type**\:  int
                                        
                                        	**range:** 1..255
                                        
                                        .. attribute:: password
                                        
                                        	Password
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        	**mandatory**\: True
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.key_id = None
                                            self.password = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.key_id is None:
                                                raise YPYModelError('Key property key_id is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-key[Cisco-IOS-XR-ipv4-ospf-cfg:key-id = ' + str(self.key_id) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.key_id is not None:
                                                return True

                                            if self.password is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies.MessageDigestKey']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-keies'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.message_digest_key is not None:
                                            for child_ref in self.message_digest_key:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication.MessageDigestKeies']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:authentication'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.key is not None:
                                        return True

                                    if self.message_digest_keies is not None and self.message_digest_keies._has_data():
                                        return True

                                    if self.type is not None and self.type._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Authentication']['meta_info']


                            class Security(object):
                                """
                                Container class for security related
                                configuration parameters
                                
                                .. attribute:: ttl
                                
                                	Enabling turns on TTL security
                                	**type**\:   :py:class:`Ttl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Security.Ttl>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.ttl = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Security.Ttl()
                                    self.ttl.parent = self


                                class Ttl(object):
                                    """
                                    Enabling turns on TTL security
                                    
                                    .. attribute:: enable
                                    
                                    	Enable TTL security
                                    	**type**\:  bool
                                    
                                    .. attribute:: hop_count
                                    
                                    	Hop count
                                    	**type**\:  int
                                    
                                    	**range:** 1..254
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.enable = None
                                        self.hop_count = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:ttl'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.enable is not None:
                                            return True

                                        if self.hop_count is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Security.Ttl']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:security'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.ttl is not None and self.ttl._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.Security']['meta_info']


                            class DeadIntervalMinimal(object):
                                """
                                Interval after which a neighbor is declared dead
                                
                                .. attribute:: interval
                                
                                	Interval size in seconds after which a neighbor is declared dead
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: multiplier
                                
                                	Number of Hellos in one second
                                	**type**\:  int
                                
                                	**range:** 3..20
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.interval = None
                                    self.multiplier = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:dead-interval-minimal'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.interval is not None:
                                        return True

                                    if self.multiplier is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.DeadIntervalMinimal']['meta_info']


                            class FastReroute(object):
                                """
                                Fast\-reroute configuration
                                
                                .. attribute:: fast_reroute_enable
                                
                                	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                	**type**\:   :py:class:`OspfFastRerouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteEnum>`
                                
                                .. attribute:: per_link
                                
                                	Fast\-reroute per\-link configuration
                                	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink>`
                                
                                .. attribute:: per_prefix
                                
                                	Fast\-reroute per\-prefix global configuration
                                	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix>`
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.fast_reroute_enable = None
                                    self.per_link = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink()
                                    self.per_link.parent = self
                                    self.per_prefix = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix()
                                    self.per_prefix.parent = self


                                class PerLink(object):
                                    """
                                    Fast\-reroute per\-link configuration
                                    
                                    .. attribute:: candidate_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                    	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces>`
                                    
                                    .. attribute:: exclude_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                    	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces>`
                                    
                                    .. attribute:: fast_reroute_use_candidate_only
                                    
                                    	Use only interfaces on the candidate list as a backup path
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces()
                                        self.candidate_interfaces.parent = self
                                        self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces()
                                        self.exclude_interfaces.parent = self
                                        self.fast_reroute_use_candidate_only = None


                                    class CandidateInterfaces(object):
                                        """
                                        Fast\-reroute per\-link/per\-prefix candidate
                                        interface configuration
                                        
                                        .. attribute:: candidate_interface
                                        
                                        	Candidate backup interface
                                        	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.candidate_interface = YList()
                                            self.candidate_interface.parent = self
                                            self.candidate_interface.name = 'candidate_interface'


                                        class CandidateInterface(object):
                                            """
                                            Candidate backup interface
                                            
                                            .. attribute:: interface_name  <key>
                                            
                                            	Interface
                                            	**type**\:  str
                                            
                                            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.interface_name = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.interface_name is None:
                                                    raise YPYModelError('Key property interface_name is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.interface_name is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.candidate_interface is not None:
                                                for child_ref in self.candidate_interface:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces']['meta_info']


                                    class ExcludeInterfaces(object):
                                        """
                                        Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                        interface configuration
                                        
                                        .. attribute:: exclude_interface
                                        
                                        	Exclude an interface from becoming a backup or UCMP
                                        	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.exclude_interface = YList()
                                            self.exclude_interface.parent = self
                                            self.exclude_interface.name = 'exclude_interface'


                                        class ExcludeInterface(object):
                                            """
                                            Exclude an interface from becoming a backup or
                                            UCMP
                                            
                                            .. attribute:: interface_name  <key>
                                            
                                            	Interface
                                            	**type**\:  str
                                            
                                            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.interface_name = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.interface_name is None:
                                                    raise YPYModelError('Key property interface_name is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.interface_name is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.exclude_interface is not None:
                                                for child_ref in self.exclude_interface:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-link'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                            return True

                                        if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                            return True

                                        if self.fast_reroute_use_candidate_only is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink']['meta_info']


                                class PerPrefix(object):
                                    """
                                    Fast\-reroute per\-prefix global configuration
                                    
                                    .. attribute:: candidate_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                    	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                    
                                    .. attribute:: exclude_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                    	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                    
                                    .. attribute:: fast_reroute_use_candidate_only
                                    
                                    	Use only interfaces on the candidate list as a backup path
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: remote_lfa
                                    
                                    	Remote LFA configuration
                                    	**type**\:   :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.RemoteLfa>`
                                    
                                    .. attribute:: tiebreakers
                                    
                                    	Fast\-reroute tiebreakers configurations
                                    	**type**\:   :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers>`
                                    
                                    .. attribute:: topology_independent_lfa
                                    
                                    	Topology Independet LFA configuration
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces()
                                        self.candidate_interfaces.parent = self
                                        self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                        self.exclude_interfaces.parent = self
                                        self.fast_reroute_use_candidate_only = None
                                        self.remote_lfa = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.RemoteLfa()
                                        self.remote_lfa.parent = self
                                        self.tiebreakers = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers()
                                        self.tiebreakers.parent = self
                                        self.topology_independent_lfa = None


                                    class RemoteLfa(object):
                                        """
                                        Remote LFA configuration
                                        
                                        .. attribute:: maximum_cost
                                        
                                        	Maximum path cost to remote LFA
                                        	**type**\:  int
                                        
                                        	**range:** 1..4294967295
                                        
                                        .. attribute:: tunnel
                                        
                                        	Enable/Disable remote LFA computation
                                        	**type**\:   :py:class:`OspfFrrRlfaTunnelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFrrRlfaTunnelEnum>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.maximum_cost = None
                                            self.tunnel = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:remote-lfa'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.maximum_cost is not None:
                                                return True

                                            if self.tunnel is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.RemoteLfa']['meta_info']


                                    class Tiebreakers(object):
                                        """
                                        Fast\-reroute tiebreakers configurations
                                        
                                        .. attribute:: tiebreaker
                                        
                                        	Fast\-reroute tiebreakers configuration
                                        	**type**\: list of    :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.tiebreaker = YList()
                                            self.tiebreaker.parent = self
                                            self.tiebreaker.name = 'tiebreaker'


                                        class Tiebreaker(object):
                                            """
                                            Fast\-reroute tiebreakers configuration
                                            
                                            .. attribute:: tiebreaker_type  <key>
                                            
                                            	Tiebreaker type
                                            	**type**\:   :py:class:`OspfFastRerouteTiebreakersIntfEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakersIntfEnum>`
                                            
                                            .. attribute:: tiebreaker_index
                                            
                                            	Index value for a tiebreaker, 0 to disable
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            	**mandatory**\: True
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.tiebreaker_type = None
                                                self.tiebreaker_index = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.tiebreaker_type is None:
                                                    raise YPYModelError('Key property tiebreaker_type is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker[Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker-type = ' + str(self.tiebreaker_type) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.tiebreaker_type is not None:
                                                    return True

                                                if self.tiebreaker_index is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreakers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.tiebreaker is not None:
                                                for child_ref in self.tiebreaker:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.Tiebreakers']['meta_info']


                                    class CandidateInterfaces(object):
                                        """
                                        Fast\-reroute per\-link/per\-prefix candidate
                                        interface configuration
                                        
                                        .. attribute:: candidate_interface
                                        
                                        	Candidate backup interface
                                        	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.candidate_interface = YList()
                                            self.candidate_interface.parent = self
                                            self.candidate_interface.name = 'candidate_interface'


                                        class CandidateInterface(object):
                                            """
                                            Candidate backup interface
                                            
                                            .. attribute:: interface_name  <key>
                                            
                                            	Interface
                                            	**type**\:  str
                                            
                                            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.interface_name = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.interface_name is None:
                                                    raise YPYModelError('Key property interface_name is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.interface_name is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.candidate_interface is not None:
                                                for child_ref in self.candidate_interface:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces']['meta_info']


                                    class ExcludeInterfaces(object):
                                        """
                                        Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                        interface configuration
                                        
                                        .. attribute:: exclude_interface
                                        
                                        	Exclude an interface from becoming a backup or UCMP
                                        	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.exclude_interface = YList()
                                            self.exclude_interface.parent = self
                                            self.exclude_interface.name = 'exclude_interface'


                                        class ExcludeInterface(object):
                                            """
                                            Exclude an interface from becoming a backup or
                                            UCMP
                                            
                                            .. attribute:: interface_name  <key>
                                            
                                            	Interface
                                            	**type**\:  str
                                            
                                            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.interface_name = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.interface_name is None:
                                                    raise YPYModelError('Key property interface_name is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.interface_name is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.exclude_interface is not None:
                                                for child_ref in self.exclude_interface:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-prefix'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                            return True

                                        if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                            return True

                                        if self.fast_reroute_use_candidate_only is not None:
                                            return True

                                        if self.remote_lfa is not None and self.remote_lfa._has_data():
                                            return True

                                        if self.tiebreakers is not None and self.tiebreakers._has_data():
                                            return True

                                        if self.topology_independent_lfa is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:fast-reroute'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.fast_reroute_enable is not None:
                                        return True

                                    if self.per_link is not None and self.per_link._has_data():
                                        return True

                                    if self.per_prefix is not None and self.per_prefix._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute']['meta_info']


                            class CostFallback(object):
                                """
                                Interface fallback cost
                                
                                .. attribute:: cost
                                
                                	Fallback cost of link
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: threshold
                                
                                	Bandwidth threshold
                                	**type**\:  int
                                
                                	**range:** 1..4294967
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.cost = None
                                    self.threshold = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:cost-fallback'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.cost is not None:
                                        return True

                                    if self.threshold is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.CostFallback']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:area-scope'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.authentication is not None and self.authentication._has_data():
                                    return True

                                if self.bfd is not None and self.bfd._has_data():
                                    return True

                                if self.cost is not None:
                                    return True

                                if self.cost_fallback is not None and self.cost_fallback._has_data():
                                    return True

                                if self.database_filter is not None:
                                    return True

                                if self.dead_interval_minimal is not None and self.dead_interval_minimal._has_data():
                                    return True

                                if self.demand_circuit is not None:
                                    return True

                                if self.distribute_list is not None and self.distribute_list._has_data():
                                    return True

                                if self.fast_reroute is not None and self.fast_reroute._has_data():
                                    return True

                                if self.flood_reduction is not None:
                                    return True

                                if self.hello_interval is not None:
                                    return True

                                if self.ldp_auto_config is not None:
                                    return True

                                if self.ldp_sync is not None:
                                    return True

                                if self.ldp_sync_igp_shortcuts is not None:
                                    return True

                                if self.link_down_fast_detect is not None:
                                    return True

                                if self.loopback_stub_network is not None:
                                    return True

                                if self.mtu_ignore is not None:
                                    return True

                                if self.network_type is not None:
                                    return True

                                if self.packet_size is not None:
                                    return True

                                if self.passive is not None:
                                    return True

                                if self.prefix_suppression_primary is not None:
                                    return True

                                if self.prefix_suppression_secondary is not None:
                                    return True

                                if self.priority is not None:
                                    return True

                                if self.retransmit_interval is not None:
                                    return True

                                if self.security is not None and self.security._has_data():
                                    return True

                                if self.segment_routing_forwarding is not None:
                                    return True

                                if self.transmit_delay is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope']['meta_info']


                        class NameScopes(object):
                            """
                            Name scope configurations
                            
                            .. attribute:: name_scope
                            
                            	Name scope configuration
                            	**type**\: list of    :py:class:`NameScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.name_scope = YList()
                                self.name_scope.parent = self
                                self.name_scope.name = 'name_scope'


                            class NameScope(object):
                                """
                                Name scope configuration
                                
                                .. attribute:: interface_name  <key>
                                
                                	Name of Interface to configure
                                	**type**\:  str
                                
                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                
                                .. attribute:: authentication
                                
                                	Authentication
                                	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication>`
                                
                                .. attribute:: bfd
                                
                                	BFD configuration
                                	**type**\:   :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Bfd>`
                                
                                .. attribute:: cost
                                
                                	Interface cost
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: cost_fallback
                                
                                	Interface fallback cost
                                	**type**\:   :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.CostFallback>`
                                
                                .. attribute:: database_filter
                                
                                	Filter OSPF LSA during synchronization and flooding
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: dead_interval_minimal
                                
                                	Interval after which a neighbor is declared dead
                                	**type**\:   :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DeadIntervalMinimal>`
                                
                                .. attribute:: demand_circuit
                                
                                	Enable/Disable OSPF demand circuit
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: distribute_list
                                
                                	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                                	**type**\:   :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DistributeList>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: fast_reroute
                                
                                	Fast\-reroute configuration
                                	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute>`
                                
                                .. attribute:: flood_reduction
                                
                                	Enable/Disable OSPF flood reduction
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: hello_interval
                                
                                	Interval between HELLO packets in seconds
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: ldp_auto_config
                                
                                	Enable MPLS LDP Auto Config
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: ldp_sync
                                
                                	Enable/Disable MPLS LDP sync
                                	**type**\:  bool
                                
                                .. attribute:: ldp_sync_igp_shortcuts
                                
                                	Enable/Disable MPLS LDP sync for igp\-shortcuts
                                	**type**\:  bool
                                
                                .. attribute:: link_down_fast_detect
                                
                                	Enable/Disable registration for early interface down notifications
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: loopback_stub_network
                                
                                	Enable/Disable advertising loopback as a stub network
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: mtu_ignore
                                
                                	Enable/Disable ignoring of MTU in DBD packets
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: neighbors
                                
                                	Neighbor router configuration information
                                	**type**\:   :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors>`
                                
                                .. attribute:: network_type
                                
                                	Type of attached network
                                	**type**\:   :py:class:`OspfNetworkEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfNetworkEnum>`
                                
                                .. attribute:: packet_size
                                
                                	Customize size of OSPF packets upto MTU
                                	**type**\:  int
                                
                                	**range:** 576..10000
                                
                                .. attribute:: passive
                                
                                	When enabled, prevent sending HELLO packets over link
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: prefix_sid
                                
                                	Prefix SID
                                	**type**\:   :py:class:`PrefixSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.PrefixSid>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: prefix_sid_strict
                                
                                	Strict Prefix SID
                                	**type**\:   :py:class:`PrefixSidStrict <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.PrefixSidStrict>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: prefix_suppression_primary
                                
                                	Enable/Disable prefix suppression for primary addresses
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: prefix_suppression_secondary
                                
                                	Enable/Disable prefix suppression for secondary addresses
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: priority
                                
                                	Router priority for DR and BDR election
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                	**default value**\: 1
                                
                                .. attribute:: retransmit_interval
                                
                                	Time in seconds between retransmitting lost link state advertisements
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 5
                                
                                .. attribute:: running
                                
                                	Enable routing on an IP network
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: security
                                
                                	Container class for security related configuration parameters
                                	**type**\:   :py:class:`Security <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security>`
                                
                                .. attribute:: segment_routing_forwarding
                                
                                	segment\-routing forwarding configuration Applicableonly in Default VRF
                                	**type**\:   :py:class:`OspfSegmentRoutingForwardingEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSegmentRoutingForwardingEnum>`
                                
                                .. attribute:: transmit_delay
                                
                                	Number of seconds to delay transmission of LSAs
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 1
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.interface_name = None
                                    self.authentication = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication()
                                    self.authentication.parent = self
                                    self.bfd = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Bfd()
                                    self.bfd.parent = self
                                    self.cost = None
                                    self.cost_fallback = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.CostFallback()
                                    self.cost_fallback.parent = self
                                    self.database_filter = None
                                    self.dead_interval_minimal = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DeadIntervalMinimal()
                                    self.dead_interval_minimal.parent = self
                                    self.demand_circuit = None
                                    self.distribute_list = None
                                    self.fast_reroute = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute()
                                    self.fast_reroute.parent = self
                                    self.flood_reduction = None
                                    self.hello_interval = None
                                    self.ldp_auto_config = None
                                    self.ldp_sync = None
                                    self.ldp_sync_igp_shortcuts = None
                                    self.link_down_fast_detect = None
                                    self.loopback_stub_network = None
                                    self.mtu_ignore = None
                                    self.neighbors = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors()
                                    self.neighbors.parent = self
                                    self.network_type = None
                                    self.packet_size = None
                                    self.passive = None
                                    self.prefix_sid = None
                                    self.prefix_sid_strict = None
                                    self.prefix_suppression_primary = None
                                    self.prefix_suppression_secondary = None
                                    self.priority = None
                                    self.retransmit_interval = None
                                    self.running = None
                                    self.security = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security()
                                    self.security.parent = self
                                    self.segment_routing_forwarding = None
                                    self.transmit_delay = None


                                class PrefixSid(object):
                                    """
                                    Prefix SID
                                    
                                    .. attribute:: explicit_null
                                    
                                    	Force Penultimate Hop To Send Explicit\-Null Label
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: n_flag_clear
                                    
                                    	Not a node SID
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: sid_value
                                    
                                    	SID value
                                    	**type**\:  int
                                    
                                    	**range:** 0..1048575
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: type
                                    
                                    	OSPF SID Type
                                    	**type**\:   :py:class:`OspfSidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSidEnum>`
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.explicit_null = None
                                        self.n_flag_clear = None
                                        self.sid_value = None
                                        self.type = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:prefix-sid'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.explicit_null is not None:
                                            return True

                                        if self.n_flag_clear is not None:
                                            return True

                                        if self.sid_value is not None:
                                            return True

                                        if self.type is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.PrefixSid']['meta_info']


                                class PrefixSidStrict(object):
                                    """
                                    Strict Prefix SID
                                    
                                    .. attribute:: explicit_null
                                    
                                    	Force Penultimate Hop To Send Explicit\-Null Label
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: n_flag_clear
                                    
                                    	Not a node SID
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: sid_value
                                    
                                    	SID value
                                    	**type**\:  int
                                    
                                    	**range:** 0..1048575
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: type
                                    
                                    	OSPF SID Type
                                    	**type**\:   :py:class:`OspfSidEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfSidEnum>`
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.explicit_null = None
                                        self.n_flag_clear = None
                                        self.sid_value = None
                                        self.type = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:prefix-sid-strict'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.explicit_null is not None:
                                            return True

                                        if self.n_flag_clear is not None:
                                            return True

                                        if self.sid_value is not None:
                                            return True

                                        if self.type is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.PrefixSidStrict']['meta_info']


                                class DistributeList(object):
                                    """
                                    Filter networks intalled to RIB (disable as ACL
                                    name means filtering is disabled)
                                    
                                    .. attribute:: access_list_name
                                    
                                    	Access Control List name
                                    	**type**\:  str
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route Policy name
                                    	**type**\:  str
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.access_list_name = None
                                        self.route_policy_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:distribute-list'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.access_list_name is not None:
                                            return True

                                        if self.route_policy_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DistributeList']['meta_info']


                                class Bfd(object):
                                    """
                                    BFD configuration
                                    
                                    .. attribute:: detection_multiplier
                                    
                                    	Detection multiplier for BFD sessions created by OSPF
                                    	**type**\:  int
                                    
                                    	**range:** 2..50
                                    
                                    .. attribute:: fast_detect_mode
                                    
                                    	 use of Bidirectional Forwarding Detection
                                    	**type**\:   :py:class:`BfdEnableModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.BfdEnableModeEnum>`
                                    
                                    .. attribute:: interval
                                    
                                    	Hello interval for BFD sessions created by OSPF
                                    	**type**\:  int
                                    
                                    	**range:** 3..30000
                                    
                                    	**units**\: millisecond
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.detection_multiplier = None
                                        self.fast_detect_mode = None
                                        self.interval = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:bfd'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.detection_multiplier is not None:
                                            return True

                                        if self.fast_detect_mode is not None:
                                            return True

                                        if self.interval is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Bfd']['meta_info']


                                class Authentication(object):
                                    """
                                    Authentication
                                    
                                    .. attribute:: key
                                    
                                    	Authentication key configuration
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: message_digest_keies
                                    
                                    	Message digest authentication password (key) configurations, first 16 chars used
                                    	**type**\:   :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies>`
                                    
                                    .. attribute:: type
                                    
                                    	Authentication type
                                    	**type**\:   :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.Type>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.key = None
                                        self.message_digest_keies = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies()
                                        self.message_digest_keies.parent = self
                                        self.type = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.Type()
                                        self.type.parent = self


                                    class Type(object):
                                        """
                                        Authentication type
                                        
                                        .. attribute:: authen_type
                                        
                                        	Authentication type code 
                                        	**type**\:   :py:class:`OspfAuthenticationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthenticationEnum>`
                                        
                                        .. attribute:: keychain_authen_type
                                        
                                        	Keychain authentication type
                                        	**type**\:   :py:class:`OspfKeychainAuthEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuthEnum>`
                                        
                                        .. attribute:: keychain_name
                                        
                                        	Keychain name
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.authen_type = None
                                            self.keychain_authen_type = None
                                            self.keychain_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:type'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.authen_type is not None:
                                                return True

                                            if self.keychain_authen_type is not None:
                                                return True

                                            if self.keychain_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.Type']['meta_info']


                                    class MessageDigestKeies(object):
                                        """
                                        Message digest authentication password (key)
                                        configurations, first 16 chars used
                                        
                                        .. attribute:: message_digest_key
                                        
                                        	Message digest authentication password (key) configuration
                                        	**type**\: list of    :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.message_digest_key = YList()
                                            self.message_digest_key.parent = self
                                            self.message_digest_key.name = 'message_digest_key'


                                        class MessageDigestKey(object):
                                            """
                                            Message digest authentication password (key)
                                            configuration
                                            
                                            .. attribute:: key_id  <key>
                                            
                                            	Key ID
                                            	**type**\:  int
                                            
                                            	**range:** 1..255
                                            
                                            .. attribute:: password
                                            
                                            	Password
                                            	**type**\:  str
                                            
                                            	**pattern:** (!.+)\|([^!].+)
                                            
                                            	**mandatory**\: True
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.key_id = None
                                                self.password = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.key_id is None:
                                                    raise YPYModelError('Key property key_id is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-key[Cisco-IOS-XR-ipv4-ospf-cfg:key-id = ' + str(self.key_id) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.key_id is not None:
                                                    return True

                                                if self.password is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies.MessageDigestKey']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-keies'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.message_digest_key is not None:
                                                for child_ref in self.message_digest_key:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication.MessageDigestKeies']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:authentication'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.key is not None:
                                            return True

                                        if self.message_digest_keies is not None and self.message_digest_keies._has_data():
                                            return True

                                        if self.type is not None and self.type._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Authentication']['meta_info']


                                class Security(object):
                                    """
                                    Container class for security related
                                    configuration parameters
                                    
                                    .. attribute:: ttl
                                    
                                    	Enabling turns on TTL security
                                    	**type**\:   :py:class:`Ttl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security.Ttl>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.ttl = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security.Ttl()
                                        self.ttl.parent = self


                                    class Ttl(object):
                                        """
                                        Enabling turns on TTL security
                                        
                                        .. attribute:: enable
                                        
                                        	Enable TTL security
                                        	**type**\:  bool
                                        
                                        .. attribute:: hop_count
                                        
                                        	Hop count
                                        	**type**\:  int
                                        
                                        	**range:** 1..254
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.enable = None
                                            self.hop_count = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:ttl'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.enable is not None:
                                                return True

                                            if self.hop_count is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security.Ttl']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:security'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.ttl is not None and self.ttl._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Security']['meta_info']


                                class Neighbors(object):
                                    """
                                    Neighbor router configuration information
                                    
                                    .. attribute:: neighbor
                                    
                                    	Router configuration information for a particular neighbor
                                    	**type**\: list of    :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors.Neighbor>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.neighbor = YList()
                                        self.neighbor.parent = self
                                        self.neighbor.name = 'neighbor'


                                    class Neighbor(object):
                                        """
                                        Router configuration information for a
                                        particular neighbor
                                        
                                        .. attribute:: neighbor_address  <key>
                                        
                                        	Neighbor IP address
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: cost
                                        
                                        	OSPF cost for point\-to\-multipoint neighbor
                                        	**type**\:  int
                                        
                                        	**range:** 1..65535
                                        
                                        	**default value**\: 1
                                        
                                        .. attribute:: database_filter
                                        
                                        	Database filter\: Filter OSPF LSA during synchronization and flooding for point\-to\-multipoint
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: poll_interval
                                        
                                        	OSPF dead router poll\-interval in seconds
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        	**units**\: second
                                        
                                        	**default value**\: 40
                                        
                                        .. attribute:: priority
                                        
                                        	OSPF priority of non\-broadcast neighbor
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        	**default value**\: 0
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.neighbor_address = None
                                            self.cost = None
                                            self.database_filter = None
                                            self.poll_interval = None
                                            self.priority = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.neighbor_address is None:
                                                raise YPYModelError('Key property neighbor_address is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:neighbor[Cisco-IOS-XR-ipv4-ospf-cfg:neighbor-address = ' + str(self.neighbor_address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.neighbor_address is not None:
                                                return True

                                            if self.cost is not None:
                                                return True

                                            if self.database_filter is not None:
                                                return True

                                            if self.poll_interval is not None:
                                                return True

                                            if self.priority is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors.Neighbor']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:neighbors'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.neighbor is not None:
                                            for child_ref in self.neighbor:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.Neighbors']['meta_info']


                                class DeadIntervalMinimal(object):
                                    """
                                    Interval after which a neighbor is declared dead
                                    
                                    .. attribute:: interval
                                    
                                    	Interval size in seconds after which a neighbor is declared dead
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: multiplier
                                    
                                    	Number of Hellos in one second
                                    	**type**\:  int
                                    
                                    	**range:** 3..20
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.interval = None
                                        self.multiplier = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:dead-interval-minimal'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.interval is not None:
                                            return True

                                        if self.multiplier is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.DeadIntervalMinimal']['meta_info']


                                class FastReroute(object):
                                    """
                                    Fast\-reroute configuration
                                    
                                    .. attribute:: fast_reroute_enable
                                    
                                    	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                    	**type**\:   :py:class:`OspfFastRerouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteEnum>`
                                    
                                    .. attribute:: per_link
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink>`
                                    
                                    .. attribute:: per_prefix
                                    
                                    	Fast\-reroute per\-prefix global configuration
                                    	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.fast_reroute_enable = None
                                        self.per_link = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink()
                                        self.per_link.parent = self
                                        self.per_prefix = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix()
                                        self.per_prefix.parent = self


                                    class PerLink(object):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                        	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces>`
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self.fast_reroute_use_candidate_only = None


                                        class CandidateInterfaces(object):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.candidate_interface = YList()
                                                self.candidate_interface.parent = self
                                                self.candidate_interface.name = 'candidate_interface'


                                            class CandidateInterface(object):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.interface_name = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.interface_name is None:
                                                        raise YPYModelError('Key property interface_name is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.interface_name is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.candidate_interface is not None:
                                                    for child_ref in self.candidate_interface:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.CandidateInterfaces']['meta_info']


                                        class ExcludeInterfaces(object):
                                            """
                                            Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup or UCMP
                                            	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.exclude_interface = YList()
                                                self.exclude_interface.parent = self
                                                self.exclude_interface.name = 'exclude_interface'


                                            class ExcludeInterface(object):
                                                """
                                                Exclude an interface from becoming a backup or
                                                UCMP
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.interface_name = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.interface_name is None:
                                                        raise YPYModelError('Key property interface_name is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.interface_name is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.exclude_interface is not None:
                                                    for child_ref in self.exclude_interface:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink.ExcludeInterfaces']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-link'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                                return True

                                            if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                                return True

                                            if self.fast_reroute_use_candidate_only is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerLink']['meta_info']


                                    class PerPrefix(object):
                                        """
                                        Fast\-reroute per\-prefix global configuration
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                        	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: remote_lfa
                                        
                                        	Remote LFA configuration
                                        	**type**\:   :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa>`
                                        
                                        .. attribute:: tiebreakers
                                        
                                        	Fast\-reroute tiebreakers configurations
                                        	**type**\:   :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers>`
                                        
                                        .. attribute:: topology_independent_lfa
                                        
                                        	Topology Independet LFA configuration
                                        	**type**\:  bool
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self.fast_reroute_use_candidate_only = None
                                            self.remote_lfa = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa()
                                            self.remote_lfa.parent = self
                                            self.tiebreakers = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers()
                                            self.tiebreakers.parent = self
                                            self.topology_independent_lfa = None


                                        class RemoteLfa(object):
                                            """
                                            Remote LFA configuration
                                            
                                            .. attribute:: maximum_cost
                                            
                                            	Maximum path cost to remote LFA
                                            	**type**\:  int
                                            
                                            	**range:** 1..4294967295
                                            
                                            .. attribute:: tunnel
                                            
                                            	Enable/Disable remote LFA computation
                                            	**type**\:   :py:class:`OspfFrrRlfaTunnelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFrrRlfaTunnelEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.maximum_cost = None
                                                self.tunnel = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:remote-lfa'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.maximum_cost is not None:
                                                    return True

                                                if self.tunnel is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.RemoteLfa']['meta_info']


                                        class Tiebreakers(object):
                                            """
                                            Fast\-reroute tiebreakers configurations
                                            
                                            .. attribute:: tiebreaker
                                            
                                            	Fast\-reroute tiebreakers configuration
                                            	**type**\: list of    :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.tiebreaker = YList()
                                                self.tiebreaker.parent = self
                                                self.tiebreaker.name = 'tiebreaker'


                                            class Tiebreaker(object):
                                                """
                                                Fast\-reroute tiebreakers configuration
                                                
                                                .. attribute:: tiebreaker_type  <key>
                                                
                                                	Tiebreaker type
                                                	**type**\:   :py:class:`OspfFastRerouteTiebreakersIntfEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakersIntfEnum>`
                                                
                                                .. attribute:: tiebreaker_index
                                                
                                                	Index value for a tiebreaker, 0 to disable
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.tiebreaker_type = None
                                                    self.tiebreaker_index = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.tiebreaker_type is None:
                                                        raise YPYModelError('Key property tiebreaker_type is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker[Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker-type = ' + str(self.tiebreaker_type) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.tiebreaker_type is not None:
                                                        return True

                                                    if self.tiebreaker_index is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreakers'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.tiebreaker is not None:
                                                    for child_ref in self.tiebreaker:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.Tiebreakers']['meta_info']


                                        class CandidateInterfaces(object):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.candidate_interface = YList()
                                                self.candidate_interface.parent = self
                                                self.candidate_interface.name = 'candidate_interface'


                                            class CandidateInterface(object):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.interface_name = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.interface_name is None:
                                                        raise YPYModelError('Key property interface_name is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.interface_name is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.candidate_interface is not None:
                                                    for child_ref in self.candidate_interface:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.CandidateInterfaces']['meta_info']


                                        class ExcludeInterfaces(object):
                                            """
                                            Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup or UCMP
                                            	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.exclude_interface = YList()
                                                self.exclude_interface.parent = self
                                                self.exclude_interface.name = 'exclude_interface'


                                            class ExcludeInterface(object):
                                                """
                                                Exclude an interface from becoming a backup or
                                                UCMP
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.interface_name = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.interface_name is None:
                                                        raise YPYModelError('Key property interface_name is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.interface_name is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.exclude_interface is not None:
                                                    for child_ref in self.exclude_interface:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix.ExcludeInterfaces']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-prefix'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                                return True

                                            if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                                return True

                                            if self.fast_reroute_use_candidate_only is not None:
                                                return True

                                            if self.remote_lfa is not None and self.remote_lfa._has_data():
                                                return True

                                            if self.tiebreakers is not None and self.tiebreakers._has_data():
                                                return True

                                            if self.topology_independent_lfa is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute.PerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:fast-reroute'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.fast_reroute_enable is not None:
                                            return True

                                        if self.per_link is not None and self.per_link._has_data():
                                            return True

                                        if self.per_prefix is not None and self.per_prefix._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.FastReroute']['meta_info']


                                class CostFallback(object):
                                    """
                                    Interface fallback cost
                                    
                                    .. attribute:: cost
                                    
                                    	Fallback cost of link
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: threshold
                                    
                                    	Bandwidth threshold
                                    	**type**\:  int
                                    
                                    	**range:** 1..4294967
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.cost = None
                                        self.threshold = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:cost-fallback'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.cost is not None:
                                            return True

                                        if self.threshold is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope.CostFallback']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.interface_name is None:
                                        raise YPYModelError('Key property interface_name is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:name-scope[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.interface_name is not None:
                                        return True

                                    if self.authentication is not None and self.authentication._has_data():
                                        return True

                                    if self.bfd is not None and self.bfd._has_data():
                                        return True

                                    if self.cost is not None:
                                        return True

                                    if self.cost_fallback is not None and self.cost_fallback._has_data():
                                        return True

                                    if self.database_filter is not None:
                                        return True

                                    if self.dead_interval_minimal is not None and self.dead_interval_minimal._has_data():
                                        return True

                                    if self.demand_circuit is not None:
                                        return True

                                    if self.distribute_list is not None and self.distribute_list._has_data():
                                        return True

                                    if self.fast_reroute is not None and self.fast_reroute._has_data():
                                        return True

                                    if self.flood_reduction is not None:
                                        return True

                                    if self.hello_interval is not None:
                                        return True

                                    if self.ldp_auto_config is not None:
                                        return True

                                    if self.ldp_sync is not None:
                                        return True

                                    if self.ldp_sync_igp_shortcuts is not None:
                                        return True

                                    if self.link_down_fast_detect is not None:
                                        return True

                                    if self.loopback_stub_network is not None:
                                        return True

                                    if self.mtu_ignore is not None:
                                        return True

                                    if self.neighbors is not None and self.neighbors._has_data():
                                        return True

                                    if self.network_type is not None:
                                        return True

                                    if self.packet_size is not None:
                                        return True

                                    if self.passive is not None:
                                        return True

                                    if self.prefix_sid is not None and self.prefix_sid._has_data():
                                        return True

                                    if self.prefix_sid_strict is not None and self.prefix_sid_strict._has_data():
                                        return True

                                    if self.prefix_suppression_primary is not None:
                                        return True

                                    if self.prefix_suppression_secondary is not None:
                                        return True

                                    if self.priority is not None:
                                        return True

                                    if self.retransmit_interval is not None:
                                        return True

                                    if self.running is not None:
                                        return True

                                    if self.security is not None and self.security._has_data():
                                        return True

                                    if self.segment_routing_forwarding is not None:
                                        return True

                                    if self.transmit_delay is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes.NameScope']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:name-scopes'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.name_scope is not None:
                                    for child_ref in self.name_scope:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.NameScopes']['meta_info']


                        class MultiAreaInterfaceScopes(object):
                            """
                            Multi Area Interface scope configurations
                            
                            .. attribute:: multi_area_interface_scope
                            
                            	Multi Area Interface configuration
                            	**type**\: list of    :py:class:`MultiAreaInterfaceScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.multi_area_interface_scope = YList()
                                self.multi_area_interface_scope.parent = self
                                self.multi_area_interface_scope.name = 'multi_area_interface_scope'


                            class MultiAreaInterfaceScope(object):
                                """
                                Multi Area Interface configuration
                                
                                .. attribute:: interface_name  <key>
                                
                                	Name of Multi Area Interface to configure
                                	**type**\:  str
                                
                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                
                                .. attribute:: authentication
                                
                                	Authentication
                                	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication>`
                                
                                .. attribute:: cost
                                
                                	Interface cost
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: cost_fallback
                                
                                	Interface fallback cost
                                	**type**\:   :py:class:`CostFallback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback>`
                                
                                .. attribute:: database_filter
                                
                                	Filter OSPF LSA during synchronization and flooding
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: dead_interval_minimal
                                
                                	Interval after which a neighbor is declared dead
                                	**type**\:   :py:class:`DeadIntervalMinimal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal>`
                                
                                .. attribute:: distribute_list
                                
                                	Filter networks intalled to RIB (disable as ACL name means filtering is disabled)
                                	**type**\:   :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DistributeList>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: fast_reroute
                                
                                	Fast\-reroute configuration
                                	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute>`
                                
                                .. attribute:: hello_interval
                                
                                	Interval between HELLO packets in seconds
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: mtu_ignore
                                
                                	Enable/Disable ignoring of MTU in DBD packets
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: neighbors
                                
                                	Neighbor router configuration information
                                	**type**\:   :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors>`
                                
                                .. attribute:: packet_size
                                
                                	Customize size of OSPF packets upto MTU
                                	**type**\:  int
                                
                                	**range:** 576..10000
                                
                                .. attribute:: passive
                                
                                	When enabled, prevent sending HELLO packets over link
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: retransmit_interval
                                
                                	Time in seconds between retransmitting lost link state advertisements
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 5
                                
                                .. attribute:: running
                                
                                	Enable routing on an IP network
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: transmit_delay
                                
                                	Number of seconds to delay transmission of LSAs
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 1
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.interface_name = None
                                    self.authentication = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication()
                                    self.authentication.parent = self
                                    self.cost = None
                                    self.cost_fallback = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback()
                                    self.cost_fallback.parent = self
                                    self.database_filter = None
                                    self.dead_interval_minimal = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal()
                                    self.dead_interval_minimal.parent = self
                                    self.distribute_list = None
                                    self.fast_reroute = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute()
                                    self.fast_reroute.parent = self
                                    self.hello_interval = None
                                    self.mtu_ignore = None
                                    self.neighbors = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors()
                                    self.neighbors.parent = self
                                    self.packet_size = None
                                    self.passive = None
                                    self.retransmit_interval = None
                                    self.running = None
                                    self.transmit_delay = None


                                class DistributeList(object):
                                    """
                                    Filter networks intalled to RIB (disable as ACL
                                    name means filtering is disabled)
                                    
                                    .. attribute:: access_list_name
                                    
                                    	Access Control List name
                                    	**type**\:  str
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route Policy name
                                    	**type**\:  str
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.access_list_name = None
                                        self.route_policy_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:distribute-list'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.access_list_name is not None:
                                            return True

                                        if self.route_policy_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DistributeList']['meta_info']


                                class Authentication(object):
                                    """
                                    Authentication
                                    
                                    .. attribute:: key
                                    
                                    	Authentication key configuration
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: message_digest_keies
                                    
                                    	Message digest authentication password (key) configurations, first 16 chars used
                                    	**type**\:   :py:class:`MessageDigestKeies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies>`
                                    
                                    .. attribute:: type
                                    
                                    	Authentication type
                                    	**type**\:   :py:class:`Type <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.key = None
                                        self.message_digest_keies = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies()
                                        self.message_digest_keies.parent = self
                                        self.type = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type()
                                        self.type.parent = self


                                    class Type(object):
                                        """
                                        Authentication type
                                        
                                        .. attribute:: authen_type
                                        
                                        	Authentication type code 
                                        	**type**\:   :py:class:`OspfAuthenticationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfAuthenticationEnum>`
                                        
                                        .. attribute:: keychain_authen_type
                                        
                                        	Keychain authentication type
                                        	**type**\:   :py:class:`OspfKeychainAuthEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfKeychainAuthEnum>`
                                        
                                        .. attribute:: keychain_name
                                        
                                        	Keychain name
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.authen_type = None
                                            self.keychain_authen_type = None
                                            self.keychain_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:type'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.authen_type is not None:
                                                return True

                                            if self.keychain_authen_type is not None:
                                                return True

                                            if self.keychain_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.Type']['meta_info']


                                    class MessageDigestKeies(object):
                                        """
                                        Message digest authentication password (key)
                                        configurations, first 16 chars used
                                        
                                        .. attribute:: message_digest_key
                                        
                                        	Message digest authentication password (key) configuration
                                        	**type**\: list of    :py:class:`MessageDigestKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies.MessageDigestKey>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.message_digest_key = YList()
                                            self.message_digest_key.parent = self
                                            self.message_digest_key.name = 'message_digest_key'


                                        class MessageDigestKey(object):
                                            """
                                            Message digest authentication password (key)
                                            configuration
                                            
                                            .. attribute:: key_id  <key>
                                            
                                            	Key ID
                                            	**type**\:  int
                                            
                                            	**range:** 1..255
                                            
                                            .. attribute:: password
                                            
                                            	Password
                                            	**type**\:  str
                                            
                                            	**pattern:** (!.+)\|([^!].+)
                                            
                                            	**mandatory**\: True
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.key_id = None
                                                self.password = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.key_id is None:
                                                    raise YPYModelError('Key property key_id is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-key[Cisco-IOS-XR-ipv4-ospf-cfg:key-id = ' + str(self.key_id) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.key_id is not None:
                                                    return True

                                                if self.password is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies.MessageDigestKey']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:message-digest-keies'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.message_digest_key is not None:
                                                for child_ref in self.message_digest_key:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication.MessageDigestKeies']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:authentication'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.key is not None:
                                            return True

                                        if self.message_digest_keies is not None and self.message_digest_keies._has_data():
                                            return True

                                        if self.type is not None and self.type._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Authentication']['meta_info']


                                class Neighbors(object):
                                    """
                                    Neighbor router configuration information
                                    
                                    .. attribute:: neighbor
                                    
                                    	Router configuration information for a particular neighbor
                                    	**type**\: list of    :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors.Neighbor>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.neighbor = YList()
                                        self.neighbor.parent = self
                                        self.neighbor.name = 'neighbor'


                                    class Neighbor(object):
                                        """
                                        Router configuration information for a
                                        particular neighbor
                                        
                                        .. attribute:: neighbor_address  <key>
                                        
                                        	Neighbor IP address
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: cost
                                        
                                        	OSPF cost for point\-to\-multipoint neighbor
                                        	**type**\:  int
                                        
                                        	**range:** 1..65535
                                        
                                        	**default value**\: 1
                                        
                                        .. attribute:: database_filter
                                        
                                        	Database filter\: Filter OSPF LSA during synchronization and flooding for point\-to\-multipoint
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: poll_interval
                                        
                                        	OSPF dead router poll\-interval in seconds
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        	**units**\: second
                                        
                                        	**default value**\: 40
                                        
                                        .. attribute:: priority
                                        
                                        	OSPF priority of non\-broadcast neighbor
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        	**default value**\: 0
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.neighbor_address = None
                                            self.cost = None
                                            self.database_filter = None
                                            self.poll_interval = None
                                            self.priority = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.neighbor_address is None:
                                                raise YPYModelError('Key property neighbor_address is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:neighbor[Cisco-IOS-XR-ipv4-ospf-cfg:neighbor-address = ' + str(self.neighbor_address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.neighbor_address is not None:
                                                return True

                                            if self.cost is not None:
                                                return True

                                            if self.database_filter is not None:
                                                return True

                                            if self.poll_interval is not None:
                                                return True

                                            if self.priority is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors.Neighbor']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:neighbors'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.neighbor is not None:
                                            for child_ref in self.neighbor:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.Neighbors']['meta_info']


                                class DeadIntervalMinimal(object):
                                    """
                                    Interval after which a neighbor is declared dead
                                    
                                    .. attribute:: interval
                                    
                                    	Interval size in seconds after which a neighbor is declared dead
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: multiplier
                                    
                                    	Number of Hellos in one second
                                    	**type**\:  int
                                    
                                    	**range:** 3..20
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.interval = None
                                        self.multiplier = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:dead-interval-minimal'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.interval is not None:
                                            return True

                                        if self.multiplier is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.DeadIntervalMinimal']['meta_info']


                                class FastReroute(object):
                                    """
                                    Fast\-reroute configuration
                                    
                                    .. attribute:: fast_reroute_enable
                                    
                                    	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                    	**type**\:   :py:class:`OspfFastRerouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteEnum>`
                                    
                                    .. attribute:: per_link
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink>`
                                    
                                    .. attribute:: per_prefix
                                    
                                    	Fast\-reroute per\-prefix global configuration
                                    	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.fast_reroute_enable = None
                                        self.per_link = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink()
                                        self.per_link.parent = self
                                        self.per_prefix = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix()
                                        self.per_prefix.parent = self


                                    class PerLink(object):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                        	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces>`
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self.fast_reroute_use_candidate_only = None


                                        class CandidateInterfaces(object):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.candidate_interface = YList()
                                                self.candidate_interface.parent = self
                                                self.candidate_interface.name = 'candidate_interface'


                                            class CandidateInterface(object):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.interface_name = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.interface_name is None:
                                                        raise YPYModelError('Key property interface_name is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.interface_name is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.candidate_interface is not None:
                                                    for child_ref in self.candidate_interface:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.CandidateInterfaces']['meta_info']


                                        class ExcludeInterfaces(object):
                                            """
                                            Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup or UCMP
                                            	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.exclude_interface = YList()
                                                self.exclude_interface.parent = self
                                                self.exclude_interface.name = 'exclude_interface'


                                            class ExcludeInterface(object):
                                                """
                                                Exclude an interface from becoming a backup or
                                                UCMP
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.interface_name = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.interface_name is None:
                                                        raise YPYModelError('Key property interface_name is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.interface_name is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.exclude_interface is not None:
                                                    for child_ref in self.exclude_interface:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink.ExcludeInterfaces']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-link'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                                return True

                                            if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                                return True

                                            if self.fast_reroute_use_candidate_only is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerLink']['meta_info']


                                    class PerPrefix(object):
                                        """
                                        Fast\-reroute per\-prefix global configuration
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix or UCMP exclude interface configuration
                                        	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: remote_lfa
                                        
                                        	Remote LFA configuration
                                        	**type**\:   :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa>`
                                        
                                        .. attribute:: tiebreakers
                                        
                                        	Fast\-reroute tiebreakers configurations
                                        	**type**\:   :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers>`
                                        
                                        .. attribute:: topology_independent_lfa
                                        
                                        	Topology Independet LFA configuration
                                        	**type**\:  bool
                                        
                                        

                                        """

                                        _prefix = 'ipv4-ospf-cfg'
                                        _revision = '2017-01-02'

                                        def __init__(self):
                                            self.parent = None
                                            self.candidate_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self.exclude_interfaces = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self.fast_reroute_use_candidate_only = None
                                            self.remote_lfa = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa()
                                            self.remote_lfa.parent = self
                                            self.tiebreakers = Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers()
                                            self.tiebreakers.parent = self
                                            self.topology_independent_lfa = None


                                        class RemoteLfa(object):
                                            """
                                            Remote LFA configuration
                                            
                                            .. attribute:: maximum_cost
                                            
                                            	Maximum path cost to remote LFA
                                            	**type**\:  int
                                            
                                            	**range:** 1..4294967295
                                            
                                            .. attribute:: tunnel
                                            
                                            	Enable/Disable remote LFA computation
                                            	**type**\:   :py:class:`OspfFrrRlfaTunnelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFrrRlfaTunnelEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.maximum_cost = None
                                                self.tunnel = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:remote-lfa'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.maximum_cost is not None:
                                                    return True

                                                if self.tunnel is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.RemoteLfa']['meta_info']


                                        class Tiebreakers(object):
                                            """
                                            Fast\-reroute tiebreakers configurations
                                            
                                            .. attribute:: tiebreaker
                                            
                                            	Fast\-reroute tiebreakers configuration
                                            	**type**\: list of    :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.tiebreaker = YList()
                                                self.tiebreaker.parent = self
                                                self.tiebreaker.name = 'tiebreaker'


                                            class Tiebreaker(object):
                                                """
                                                Fast\-reroute tiebreakers configuration
                                                
                                                .. attribute:: tiebreaker_type  <key>
                                                
                                                	Tiebreaker type
                                                	**type**\:   :py:class:`OspfFastRerouteTiebreakersIntfEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfFastRerouteTiebreakersIntfEnum>`
                                                
                                                .. attribute:: tiebreaker_index
                                                
                                                	Index value for a tiebreaker, 0 to disable
                                                	**type**\:  int
                                                
                                                	**range:** 0..255
                                                
                                                	**mandatory**\: True
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.tiebreaker_type = None
                                                    self.tiebreaker_index = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.tiebreaker_type is None:
                                                        raise YPYModelError('Key property tiebreaker_type is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker[Cisco-IOS-XR-ipv4-ospf-cfg:tiebreaker-type = ' + str(self.tiebreaker_type) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.tiebreaker_type is not None:
                                                        return True

                                                    if self.tiebreaker_index is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers.Tiebreaker']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:tiebreakers'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.tiebreaker is not None:
                                                    for child_ref in self.tiebreaker:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.Tiebreakers']['meta_info']


                                        class CandidateInterfaces(object):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.candidate_interface = YList()
                                                self.candidate_interface.parent = self
                                                self.candidate_interface.name = 'candidate_interface'


                                            class CandidateInterface(object):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.interface_name = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.interface_name is None:
                                                        raise YPYModelError('Key property interface_name is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.interface_name is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:candidate-interfaces'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.candidate_interface is not None:
                                                    for child_ref in self.candidate_interface:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.CandidateInterfaces']['meta_info']


                                        class ExcludeInterfaces(object):
                                            """
                                            Fast\-reroute per\-link/per\-prefix or UCMP exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup or UCMP
                                            	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-ospf-cfg'
                                            _revision = '2017-01-02'

                                            def __init__(self):
                                                self.parent = None
                                                self.exclude_interface = YList()
                                                self.exclude_interface.parent = self
                                                self.exclude_interface.name = 'exclude_interface'


                                            class ExcludeInterface(object):
                                                """
                                                Exclude an interface from becoming a backup or
                                                UCMP
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                                
                                                

                                                """

                                                _prefix = 'ipv4-ospf-cfg'
                                                _revision = '2017-01-02'

                                                def __init__(self):
                                                    self.parent = None
                                                    self.interface_name = None

                                                @property
                                                def _common_path(self):
                                                    if self.parent is None:
                                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                                    if self.interface_name is None:
                                                        raise YPYModelError('Key property interface_name is None')

                                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interface[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                                def is_config(self):
                                                    ''' Returns True if this instance represents config data else returns False '''
                                                    return True

                                                def _has_data(self):
                                                    if not self.is_config():
                                                        return False
                                                    if self.interface_name is not None:
                                                        return True

                                                    return False

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:exclude-interfaces'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.exclude_interface is not None:
                                                    for child_ref in self.exclude_interface:
                                                        if child_ref._has_data():
                                                            return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix.ExcludeInterfaces']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:per-prefix'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.candidate_interfaces is not None and self.candidate_interfaces._has_data():
                                                return True

                                            if self.exclude_interfaces is not None and self.exclude_interfaces._has_data():
                                                return True

                                            if self.fast_reroute_use_candidate_only is not None:
                                                return True

                                            if self.remote_lfa is not None and self.remote_lfa._has_data():
                                                return True

                                            if self.tiebreakers is not None and self.tiebreakers._has_data():
                                                return True

                                            if self.topology_independent_lfa is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute.PerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:fast-reroute'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.fast_reroute_enable is not None:
                                            return True

                                        if self.per_link is not None and self.per_link._has_data():
                                            return True

                                        if self.per_prefix is not None and self.per_prefix._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.FastReroute']['meta_info']


                                class CostFallback(object):
                                    """
                                    Interface fallback cost
                                    
                                    .. attribute:: cost
                                    
                                    	Fallback cost of link
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: threshold
                                    
                                    	Bandwidth threshold
                                    	**type**\:  int
                                    
                                    	**range:** 1..4294967
                                    
                                    

                                    """

                                    _prefix = 'ipv4-ospf-cfg'
                                    _revision = '2017-01-02'

                                    def __init__(self):
                                        self.parent = None
                                        self.cost = None
                                        self.threshold = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:cost-fallback'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.cost is not None:
                                            return True

                                        if self.threshold is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope.CostFallback']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.interface_name is None:
                                        raise YPYModelError('Key property interface_name is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:multi-area-interface-scope[Cisco-IOS-XR-ipv4-ospf-cfg:interface-name = ' + str(self.interface_name) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.interface_name is not None:
                                        return True

                                    if self.authentication is not None and self.authentication._has_data():
                                        return True

                                    if self.cost is not None:
                                        return True

                                    if self.cost_fallback is not None and self.cost_fallback._has_data():
                                        return True

                                    if self.database_filter is not None:
                                        return True

                                    if self.dead_interval_minimal is not None and self.dead_interval_minimal._has_data():
                                        return True

                                    if self.distribute_list is not None and self.distribute_list._has_data():
                                        return True

                                    if self.fast_reroute is not None and self.fast_reroute._has_data():
                                        return True

                                    if self.hello_interval is not None:
                                        return True

                                    if self.mtu_ignore is not None:
                                        return True

                                    if self.neighbors is not None and self.neighbors._has_data():
                                        return True

                                    if self.packet_size is not None:
                                        return True

                                    if self.passive is not None:
                                        return True

                                    if self.retransmit_interval is not None:
                                        return True

                                    if self.running is not None:
                                        return True

                                    if self.transmit_delay is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes.MultiAreaInterfaceScope']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:multi-area-interface-scopes'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.multi_area_interface_scope is not None:
                                    for child_ref in self.multi_area_interface_scope:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.MultiAreaInterfaceScopes']['meta_info']


                        class AreaRanges(object):
                            """
                            Summarize routes matching address/mask (border
                            routers only)
                            
                            .. attribute:: area_range
                            
                            	Ordering index
                            	**type**\: list of    :py:class:`AreaRange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaRanges.AreaRange>`
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.area_range = YList()
                                self.area_range.parent = self
                                self.area_range.name = 'area_range'


                            class AreaRange(object):
                                """
                                Ordering index
                                
                                .. attribute:: address  <key>
                                
                                	IP address to match
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: netmask  <key>
                                
                                	IP netmask for address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: not_advertise
                                
                                	Do not advertise this range
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'ipv4-ospf-cfg'
                                _revision = '2017-01-02'

                                def __init__(self):
                                    self.parent = None
                                    self.address = None
                                    self.netmask = None
                                    self.not_advertise = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.address is None:
                                        raise YPYModelError('Key property address is None')
                                    if self.netmask is None:
                                        raise YPYModelError('Key property netmask is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:area-range[Cisco-IOS-XR-ipv4-ospf-cfg:address = ' + str(self.address) + '][Cisco-IOS-XR-ipv4-ospf-cfg:netmask = ' + str(self.netmask) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.address is not None:
                                        return True

                                    if self.netmask is not None:
                                        return True

                                    if self.not_advertise is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaRanges.AreaRange']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:area-ranges'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.area_range is not None:
                                    for child_ref in self.area_range:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaRanges']['meta_info']


                        class Nssa(object):
                            """
                            Specify area as a NSSA area
                            
                            .. attribute:: default_info_originate
                            
                            	Originate Type 7 default into NSSA area
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: metric_type
                            
                            	OSPF External metric type
                            	**type**\:   :py:class:`OspfLinkStateMetricEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.OspfLinkStateMetricEnum>`
                            
                            	**default value**\: type2
                            
                            .. attribute:: no_redistribution
                            
                            	No redistribution into this NSSA area
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: no_summary
                            
                            	Do not send summary LSA into NSSA
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: nssa_def_metric
                            
                            	OSPF default metric
                            	**type**\:  int
                            
                            	**range:** 1..16777214
                            
                            

                            """

                            _prefix = 'ipv4-ospf-cfg'
                            _revision = '2017-01-02'

                            def __init__(self):
                                self.parent = None
                                self.default_info_originate = None
                                self.metric_type = None
                                self.no_redistribution = None
                                self.no_summary = None
                                self.nssa_def_metric = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:nssa'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.default_info_originate is not None:
                                    return True

                                if self.metric_type is not None:
                                    return True

                                if self.no_redistribution is not None:
                                    return True

                                if self.no_summary is not None:
                                    return True

                                if self.nssa_def_metric is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                                return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Nssa']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.area_id is None:
                                raise YPYModelError('Key property area_id is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:area-area-id[Cisco-IOS-XR-ipv4-ospf-cfg:area-id = ' + str(self.area_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.area_id is not None:
                                return True

                            if self.area_ranges is not None and self.area_ranges._has_data():
                                return True

                            if self.area_scope is not None and self.area_scope._has_data():
                                return True

                            if self.default_cost is not None:
                                return True

                            if self.external_out is not None:
                                return True

                            if self.mpls_traffic_eng is not None:
                                return True

                            if self.multi_area_interface_scopes is not None and self.multi_area_interface_scopes._has_data():
                                return True

                            if self.name_scopes is not None and self.name_scopes._has_data():
                                return True

                            if self.nssa is not None and self.nssa._has_data():
                                return True

                            if self.route_policy_in is not None:
                                return True

                            if self.route_policy_out is not None:
                                return True

                            if self.running is not None:
                                return True

                            if self.segment_routing is not None:
                                return True

                            if self.sham_link_scopes is not None and self.sham_link_scopes._has_data():
                                return True

                            if self.stub is not None:
                                return True

                            if self.summary_in is not None:
                                return True

                            if self.virtual_link_scopes is not None and self.virtual_link_scopes._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:area-addresses'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.area_address is not None:
                            for child_ref in self.area_address:
                                if child_ref._has_data():
                                    return True

                        if self.area_area_id is not None:
                            for child_ref in self.area_area_id:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.AreaAddresses']['meta_info']


                class Timers(object):
                    """
                    Adjust routing timers
                    
                    .. attribute:: fast_reroute_timer
                    
                    	Number of ms between end of SPF and start of IPFRR computation
                    	**type**\:  int
                    
                    	**range:** 50..600000
                    
                    	**units**\: millisecond
                    
                    	**default value**\: 500
                    
                    .. attribute:: lsa_generation_timer
                    
                    	OSPF LSA timers (in milliseconds)
                    	**type**\:   :py:class:`LsaGenerationTimer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Timers.LsaGenerationTimer>`
                    
                    .. attribute:: lsa_group_pacing
                    
                    	LSA group pacing timer (Seconds between group of LSAs being refreshed or maxaged)
                    	**type**\:  int
                    
                    	**range:** 10..1800
                    
                    	**units**\: second
                    
                    	**default value**\: 240
                    
                    .. attribute:: lsa_min_arrival
                    
                    	MinLSArrival timer (minimum interval in milliseconds between accepting the same LSA)
                    	**type**\:  int
                    
                    	**range:** 0..600000
                    
                    	**units**\: millisecond
                    
                    	**default value**\: 100
                    
                    .. attribute:: lsa_pacing_flood
                    
                    	Seconds between group of LSAs being refreshed or maxaged
                    	**type**\:  int
                    
                    	**range:** 5..100
                    
                    	**units**\: second
                    
                    .. attribute:: lsa_refresh
                    
                    	How often self\-originated LSAs should be refreshed
                    	**type**\:  int
                    
                    	**range:** 1800..2700
                    
                    	**units**\: second
                    
                    	**default value**\: 1800
                    
                    .. attribute:: spf_timer
                    
                    	OSPF SPF timers (in milliseconds)
                    	**type**\:   :py:class:`SpfTimer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_ospf_cfg.Ospf.Processes.Process.DefaultVrf.Timers.SpfTimer>`
                    
                    

                    """

                    _prefix = 'ipv4-ospf-cfg'
                    _revision = '2017-01-02'

                    def __init__(self):
                        self.parent = None
                        self.fast_reroute_timer = None
                        self.lsa_generation_timer = Ospf.Processes.Process.DefaultVrf.Timers.LsaGenerationTimer()
                        self.lsa_generation_timer.parent = self
                        self.lsa_group_pacing = None
                        self.lsa_min_arrival = None
                        self.lsa_pacing_flood = None
                        self.lsa_refresh = None
                        self.spf_timer = Ospf.Processes.Process.DefaultVrf.Timers.SpfTimer()
                        self.spf_timer.parent = self


                    class SpfTimer(object):
                        """
                        OSPF SPF timers (in milliseconds)
                        
                        .. attribute:: backoff_increment
                        
                        	Number of milliseconds delay between successive SPF runs
                        	**type**\:  int
                        
                        	**range:** 1..600000
                        
                        	**units**\: millisecond
                        
                        	**default value**\: 10000
                        
                        .. attribute:: initial_delay
                        
                        	Number of milliseconds before first SPF run
                        	**type**\:  int
                        
                        	**range:** 1..600000
                        
                        	**units**\: millisecond
                        
                        	**default value**\: 5000
                        
                        .. attribute:: max_delay
                        
                        	Max number of milliseconds between consecutive SPF calculations
                        	**type**\:  int
                        
                        	**range:** 1..600000
                        
                        	**units**\: millisecond
                        
                        	**default value**\: 10000
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.backoff_increment = None
                            self.initial_delay = None
                            self.max_delay = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:spf-timer'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.backoff_increment is not None:
                                return True

                            if self.initial_delay is not None:
                                return True

                            if self.max_delay is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.Timers.SpfTimer']['meta_info']


                    class LsaGenerationTimer(object):
                        """
                        OSPF LSA timers (in milliseconds)
                        
                        .. attribute:: backoff_increment
                        
                        	Number of milliseconds delay between successive LSA builds
                        	**type**\:  int
                        
                        	**range:** 1..600000
                        
                        	**units**\: millisecond
                        
                        	**default value**\: 200
                        
                        .. attribute:: initial_delay
                        
                        	Number of milliseconds before generating first LSA
                        	**type**\:  int
                        
                        	**range:** 0..600000
                        
                        	**units**\: millisecond
                        
                        	**default value**\: 50
                        
                        .. attribute:: max_delay
                        
                        	Max number of milliseconds between consecutive LSA builds 
                        	**type**\:  int
                        
                        	**range:** 1..600000
                        
                        	**units**\: millisecond
                        
                        	**default value**\: 200
                        
                        

                        """

                        _prefix = 'ipv4-ospf-cfg'
                        _revision = '2017-01-02'

                        def __init__(self):
                            self.parent = None
                            self.backoff_increment = None
                            self.initial_delay = None
                            self.max_delay = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:lsa-generation-timer'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.backoff_increment is not None:
                                return True

                            if self.initial_delay is not None:
                                return True

                            if self.max_delay is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                            return meta._meta_table['Ospf.Processes.Process.DefaultVrf.Timers.LsaGenerationTimer']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:timers'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.fast_reroute_timer is not None:
                            return True

                        if self.lsa_generation_timer is not None and self.lsa_generation_timer._has_data():
                            return True

                        if self.lsa_group_pacing is not None:
                            return True

                        if self.lsa_min_arrival is not None:
                            return True

                        if self.lsa_pacing_flood is not None:
                            return True

                        if self.lsa_refresh is not None:
                            return True

                        if self.spf_timer is not None and self.spf_timer._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                        return meta._meta_table['Ospf.Processes.Process.DefaultVrf.Timers']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-ospf-cfg:default-vrf'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.adjacency_changes is not None:
                        return True

                    if self.adjacency_stagger is not None and self.adjacency_stagger._has_data():
                        return True

                    if self.af is not None and self.af._has_data():
                        return True

                    if self.area_addresses is not None and self.area_addresses._has_data():
                        return True

                    if self.auto_cost is not None and self.auto_cost._has_data():
                        return True

                    if self.default_information is not None and self.default_information._has_data():
                        return True

                    if self.default_metric is not None:
                        return True

                    if self.distance is not None and self.distance._has_data():
                        return True

                    if self.fast_reroute is not None and self.fast_reroute._has_data():
                        return True

                    if self.ignore_mospf is not None:
                        return True

                    if self.max_lsa is not None and self.max_lsa._has_data():
                        return True

                    if self.max_metric is not None and self.max_metric._has_data():
                        return True

                    if self.maximum_interfaces is not None:
                        return True

                    if self.maximum_paths is not None:
                        return True

                    if self.maximum_redistribute_prefix is not None and self.maximum_redistribute_prefix._has_data():
                        return True

                    if self.microloop is not None and self.microloop._has_data():
                        return True

                    if self.monitor_convergence is not None and self.monitor_convergence._has_data():
                        return True

                    if self.mpls is not None and self.mpls._has_data():
                        return True

                    if self.no_opaque is not None:
                        return True

                    if self.nsf is not None and self.nsf._has_data():
                        return True

                    if self.outgoing_route_updates is not None and self.outgoing_route_updates._has_data():
                        return True

                    if self.process_scope is not None and self.process_scope._has_data():
                        return True

                    if self.queue is not None and self.queue._has_data():
                        return True

                    if self.redistribution is not None and self.redistribution._has_data():
                        return True

                    if self.router_id is not None:
                        return True

                    if self.segment_routing is not None and self.segment_routing._has_data():
                        return True

                    if self.snmp_context is not None:
                        return True

                    if self.spf_prefix_priority is not None:
                        return True

                    if self.summary_prefixes is not None and self.summary_prefixes._has_data():
                        return True

                    if self.timers is not None and self.timers._has_data():
                        return True

                    if self.type7 is not None:
                        return True

                    if self.ucmp is not None and self.ucmp._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                    return meta._meta_table['Ospf.Processes.Process.DefaultVrf']['meta_info']

            @property
            def _common_path(self):
                if self.process_name is None:
                    raise YPYModelError('Key property process_name is None')

                return '/Cisco-IOS-XR-ipv4-ospf-cfg:ospf/Cisco-IOS-XR-ipv4-ospf-cfg:processes/Cisco-IOS-XR-ipv4-ospf-cfg:process[Cisco-IOS-XR-ipv4-ospf-cfg:process-name = ' + str(self.process_name) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.process_name is not None:
                    return True

                if self.default_vrf is not None and self.default_vrf._has_data():
                    return True

                if self.distribute is not None and self.distribute._has_data():
                    return True

                if self.graceful_shutdown_timers is not None and self.graceful_shutdown_timers._has_data():
                    return True

                if self.nsr is not None:
                    return True

                if self.protocol_shutdown is not None:
                    return True

                if self.running is not None:
                    return True

                if self.snmp is not None and self.snmp._has_data():
                    return True

                if self.start is not None:
                    return True

                if self.vrfs is not None and self.vrfs._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
                return meta._meta_table['Ospf.Processes.Process']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-ospf-cfg:ospf/Cisco-IOS-XR-ipv4-ospf-cfg:processes'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return True

        def _has_data(self):
            if not self.is_config():
                return False
            if self.process is not None:
                for child_ref in self.process:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
            return meta._meta_table['Ospf.Processes']['meta_info']


    class Global_(object):
        """
        OSPF global configuration data
        
        .. attribute:: dns_name_lookup
        
        	Display OSPF router ids as DNS names
        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
        
        

        """

        _prefix = 'ipv4-ospf-cfg'
        _revision = '2017-01-02'

        def __init__(self):
            self.parent = None
            self.dns_name_lookup = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ipv4-ospf-cfg:ospf/Cisco-IOS-XR-ipv4-ospf-cfg:global'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return True

        def _has_data(self):
            if not self.is_config():
                return False
            if self.dns_name_lookup is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
            return meta._meta_table['Ospf.Global_']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-ospf-cfg:ospf'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.global_ is not None and self.global_._has_data():
            return True

        if self.processes is not None and self.processes._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_ospf_cfg as meta
        return meta._meta_table['Ospf']['meta_info']


